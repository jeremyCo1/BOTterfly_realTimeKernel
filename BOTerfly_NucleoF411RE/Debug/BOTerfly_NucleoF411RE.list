
BOTerfly_NucleoF411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800dda4  0800dda4  0001dda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e368  0800e368  00020340  2**0
                  CONTENTS
  4 .ARM          00000008  0800e368  0800e368  0001e368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e370  0800e370  00020340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e370  0800e370  0001e370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e374  0800e374  0001e374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  0800e378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a70  20000340  0800e6b8  00020340  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004db0  0800e6b8  00024db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 12 .debug_info   000309d7  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056ae  00000000  00000000  00050d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  000563f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  000581e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e725  00000000  00000000  00059dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025391  00000000  00000000  000784fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae0d5  00000000  00000000  0009d88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086b8  00000000  00000000  0014b9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000340 	.word	0x20000340
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd8c 	.word	0x0800dd8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000344 	.word	0x20000344
 80001dc:	0800dd8c 	.word	0x0800dd8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <RGB_Init_SetTimer>:
 */

#include "BOTterfly-H/rgb_sensor.h"


uint8_t RGB_Init_SetTimer(RGB_struct* rgbSensor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	rgbSensor->Timer_Handle = htim;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	601a      	str	r2, [r3, #0]
	rgbSensor->Timer_Channel = Channel;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	605a      	str	r2, [r3, #4]

	HAL_TIM_IC_Start_IT(rgbSensor->Timer_Handle, rgbSensor->Timer_Channel);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4610      	mov	r0, r2
 8000e48:	f004 fb80 	bl	800554c <HAL_TIM_IC_Start_IT>
	return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <RGB_Init_SetParamGPIOs>:

uint8_t RGB_Init_SetParamGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutputEnable_GPIOx, uint16_t OutputEnable_GPIO_Pin,
		GPIO_TypeDef* LED_GPIOx, uint16_t LED_GPIO_Pin){
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4613      	mov	r3, r2
 8000e64:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutputEnable_GPIOx = OutputEnable_GPIOx;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	609a      	str	r2, [r3, #8]
	rgbSensor->OutputEnable_GPIO_Pin = OutputEnable_GPIO_Pin;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	819a      	strh	r2, [r3, #12]
	rgbSensor->LED_GPIOx = LED_GPIOx;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	611a      	str	r2, [r3, #16]
	rgbSensor->LED_GPIO_Pin = LED_GPIO_Pin;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	8b3a      	ldrh	r2, [r7, #24]
 8000e7c:	829a      	strh	r2, [r3, #20]

	return 0;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <RGB_Init_SetOutFreqGPIOs>:

uint8_t RGB_Init_SetOutFreqGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutFreq1_GPIOx, uint16_t OutFreq1_GPIO_Pin,
		GPIO_TypeDef* OutFreq2_GPIOx, uint16_t OutFreq2_GPIO_Pin){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutFreq1_GPIOx = OutFreq1_GPIOx;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	619a      	str	r2, [r3, #24]
	rgbSensor->OutFreq1_GPIO_Pin = OutFreq1_GPIO_Pin;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	839a      	strh	r2, [r3, #28]
	rgbSensor->OutFreq2_GPIOx = OutFreq2_GPIOx;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	621a      	str	r2, [r3, #32]
	rgbSensor->OutFreq2_GPIO_Pin = OutFreq2_GPIO_Pin;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	8b3a      	ldrh	r2, [r7, #24]
 8000eb2:	849a      	strh	r2, [r3, #36]	; 0x24

	return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <RGB_Init_SetColorFilterGPIOs>:

uint8_t RGB_Init_SetColorFilterGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* ColorFilter1_GPIOx, uint16_t ColorFilter1_GPIO_Pin,
		GPIO_TypeDef* ColorFilter2_GPIOx, uint16_t ColorFilter2_GPIO_Pin){
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
	rgbSensor->ColorFilter1_GPIOx = ColorFilter1_GPIOx;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
	rgbSensor->ColorFilter1_GPIO_Pin = ColorFilter1_GPIO_Pin;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rgbSensor->ColorFilter2_GPIOx = ColorFilter2_GPIOx;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
	rgbSensor->ColorFilter2_GPIO_Pin = ColorFilter2_GPIO_Pin;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8b3a      	ldrh	r2, [r7, #24]
 8000ee8:	869a      	strh	r2, [r3, #52]	; 0x34

	return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <RGB_Init>:

uint8_t RGB_Init(RGB_struct* rgbSensor){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	rgbSensor->it.flag = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rgbSensor->it.isFirstCaptured = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rgbSensor->it.icVal1 = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rgbSensor->it.icVal2 = 0;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rgbSensor->it.difference = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rgbSensor->it.frequency = 0;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	64da      	str	r2, [r3, #76]	; 0x4c

	// OE : Output Enable -> DISABLE
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_SET);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	899b      	ldrh	r3, [r3, #12]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f002 fd8c 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f40:	20c8      	movs	r0, #200	; 0xc8
 8000f42:	f001 fd71 	bl	8002a28 <HAL_Delay>

	RGB_SetOFscaling(rgbSensor, RGB_OF_02_RANGE);
 8000f46:	2102      	movs	r1, #2
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f889 	bl	8001060 <RGB_SetOFscaling>
	RGB_SetFilter(rgbSensor, RGB_RED);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f819 	bl	8000f88 <RGB_SetFilter>

	// Turn on the LEDs to lights the floor
	HAL_GPIO_WritePin(rgbSensor->LED_GPIOx, rgbSensor->LED_GPIO_Pin, GPIO_PIN_SET);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6918      	ldr	r0, [r3, #16]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	8a9b      	ldrh	r3, [r3, #20]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4619      	mov	r1, r3
 8000f62:	f002 fd79 	bl	8003a58 <HAL_GPIO_WritePin>

	// OE : Output Enable -> ENABLE
	HAL_Delay(200);
 8000f66:	20c8      	movs	r0, #200	; 0xc8
 8000f68:	f001 fd5e 	bl	8002a28 <HAL_Delay>
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_RESET);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6898      	ldr	r0, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	899b      	ldrh	r3, [r3, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	4619      	mov	r1, r3
 8000f78:	f002 fd6e 	bl	8003a58 <HAL_GPIO_WritePin>

	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);

	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <RGB_SetFilter>:

uint8_t RGB_SetFilter(RGB_struct* rgbSensor, uint8_t color){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

	switch(color)
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d84e      	bhi.n	800103c <RGB_SetFilter+0xb4>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <RGB_SetFilter+0x1c>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fb5 	.word	0x08000fb5
 8000fa8:	08000fd7 	.word	0x08000fd7
 8000fac:	08000ff9 	.word	0x08000ff9
 8000fb0:	0800101b 	.word	0x0800101b
	{
	case RGB_RED:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f002 fd4a 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f002 fd42 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8000fd4:	e039      	b.n	800104a <RGB_SetFilter+0xc2>
	case RGB_BLUE:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f002 fd39 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f002 fd31 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8000ff6:	e028      	b.n	800104a <RGB_SetFilter+0xc2>
	case RGB_GREEN:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001000:	2201      	movs	r2, #1
 8001002:	4619      	mov	r1, r3
 8001004:	f002 fd28 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	f002 fd20 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8001018:	e017      	b.n	800104a <RGB_SetFilter+0xc2>
	case RGB_CLEAR:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001022:	2201      	movs	r2, #1
 8001024:	4619      	mov	r1, r3
 8001026:	f002 fd17 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	f002 fd0f 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 800103a:	e006      	b.n	800104a <RGB_SetFilter+0xc2>
	default:
		status = RGB_ERROR_FILTER;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setFilter : %d\r\n", status);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <RGB_SetFilter+0xd4>)
 8001046:	f00b ffb5 	bl	800cfb4 <iprintf>
	}
	rgbSensor->it.colorFilter = color;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	return status;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800dda4 	.word	0x0800dda4

08001060 <RGB_SetOFscaling>:

uint8_t RGB_SetOFscaling(RGB_struct* rgbSensor, uint8_t scale){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

	switch(scale)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d03d      	beq.n	80010f2 <RGB_SetOFscaling+0x92>
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	dc4c      	bgt.n	8001114 <RGB_SetOFscaling+0xb4>
 800107a:	2b14      	cmp	r3, #20
 800107c:	d028      	beq.n	80010d0 <RGB_SetOFscaling+0x70>
 800107e:	2b14      	cmp	r3, #20
 8001080:	dc48      	bgt.n	8001114 <RGB_SetOFscaling+0xb4>
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <RGB_SetOFscaling+0x2c>
 8001086:	2b02      	cmp	r3, #2
 8001088:	d011      	beq.n	80010ae <RGB_SetOFscaling+0x4e>
 800108a:	e043      	b.n	8001114 <RGB_SetOFscaling+0xb4>
	{
	case 0:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6998      	ldr	r0, [r3, #24]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	8b9b      	ldrh	r3, [r3, #28]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	f002 fcde 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a18      	ldr	r0, [r3, #32]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	f002 fcd6 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 80010ac:	e039      	b.n	8001122 <RGB_SetOFscaling+0xc2>
	case 2:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6998      	ldr	r0, [r3, #24]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8b9b      	ldrh	r3, [r3, #28]
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	f002 fccd 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a18      	ldr	r0, [r3, #32]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f002 fcc5 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 80010ce:	e028      	b.n	8001122 <RGB_SetOFscaling+0xc2>
	case 20:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6998      	ldr	r0, [r3, #24]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	8b9b      	ldrh	r3, [r3, #28]
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	f002 fcbc 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a18      	ldr	r0, [r3, #32]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	f002 fcb4 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 80010f0:	e017      	b.n	8001122 <RGB_SetOFscaling+0xc2>
	case 100:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6998      	ldr	r0, [r3, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	8b9b      	ldrh	r3, [r3, #28]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	f002 fcab 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a18      	ldr	r0, [r3, #32]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	f002 fca3 	bl	8003a58 <HAL_GPIO_WritePin>
		break;
 8001112:	e006      	b.n	8001122 <RGB_SetOFscaling+0xc2>
	default:
		status = RGB_ERROR_OF_SCALING;
 8001114:	2302      	movs	r3, #2
 8001116:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setOFscaling : %d\r\n", status);
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	4619      	mov	r1, r3
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <RGB_SetOFscaling+0xcc>)
 800111e:	f00b ff49 	bl	800cfb4 <iprintf>
	}

	return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0800ddc4 	.word	0x0800ddc4

08001130 <TOF_Init_SetI2C>:
 */

#include "BOTterfly-H/tof_sensor.h"
#include "BOTterfly-H/config.h"

uint8_t TOF_Init_SetI2C(VL53L0X_Dev_t* device, I2C_HandleTypeDef *hi2c, uint8_t I2cAddr){
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	71fb      	strb	r3, [r7, #7]
	device->I2cHandle = hi2c;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	device->I2cAddr = I2cAddr;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173

	return 0;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <TOF_Init_SetGPIOs>:

uint8_t TOF_Init_SetGPIOs(VL53L0X_Dev_t* device, GPIO_TypeDef* XSHUT_GPIOx, uint16_t XSHUT_GPIO_Pin,
		GPIO_TypeDef* EXTI_GPIOx, uint16_t EXTI_GPIO_Pin){
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	80fb      	strh	r3, [r7, #6]
	device->XSHUT_GPIOx = XSHUT_GPIOx;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	device->XSHUT_GPIO_Pin = XSHUT_GPIO_Pin;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	device->EXTI_GPIOx = EXTI_GPIOx;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	device->EXTI_GPIO_Pin = EXTI_GPIO_Pin;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8b3a      	ldrh	r2, [r7, #24]
 8001188:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170

	return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <TOF_Init_SetEXTI>:

uint8_t TOF_Init_SetEXTI(VL53L0X_Dev_t* device, IRQn_Type EXTIx_IRQn){
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70fb      	strb	r3, [r7, #3]
	device->EXTI_IRQn = EXTIx_IRQn;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	78fa      	ldrb	r2, [r7, #3]
 80011aa:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172

	return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <TOF_Init>:

uint8_t TOF_Init(VL53L0X_Dev_t* device){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<TOF_nbOfSensor; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e021      	b.n	800120e <TOF_Init+0x52>
		device[i].I2cDevAddr = 0x52;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	2252      	movs	r2, #82	; 0x52
 80011da:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
		device[i].comms_speed_khz = 400;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011f0:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
		device[i].comms_type = 1;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b02      	cmp	r3, #2
 8001212:	ddda      	ble.n	80011ca <TOF_Init+0xe>
	}

	// Disable the interruptions
	// Useful for the INITIALIZATION FLOW before changing the address of each device
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	e024      	b.n	8001264 <TOF_Init+0xa8>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_RESET);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	f002 fc09 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(device[i].EXTI_IRQn);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	f993 3172 	ldrsb.w	r3, [r3, #370]	; 0x172
 8001258:	4618      	mov	r0, r3
 800125a:	f001 ff81 	bl	8003160 <HAL_NVIC_DisableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	3301      	adds	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b02      	cmp	r3, #2
 8001268:	ddd7      	ble.n	800121a <TOF_Init+0x5e>
	}
	HAL_Delay(200);
 800126a:	20c8      	movs	r0, #200	; 0xc8
 800126c:	f001 fbdc 	bl	8002a28 <HAL_Delay>

	// INITIALIZATION FLOW
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e046      	b.n	8001304 <TOF_Init+0x148>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_SET);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 800129a:	2201      	movs	r2, #1
 800129c:	4619      	mov	r1, r3
 800129e:	f002 fbdb 	bl	8003a58 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80012a2:	20c8      	movs	r0, #200	; 0xc8
 80012a4:	f001 fbc0 	bl	8002a28 <HAL_Delay>
		TOF_InitializationFlow(&device[i], (uint8_t)device[i].EXTI_GPIOx->ODR);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	18d0      	adds	r0, r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	f000 f839 	bl	8001344 <TOF_InitializationFlow>
		TOF_SetDeviceAddr(&device[i], device[i].I2cAddr);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	18d0      	adds	r0, r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
 80012f2:	4619      	mov	r1, r3
 80012f4:	f000 f8ec 	bl	80014d0 <TOF_SetDeviceAddr>
		HAL_Delay(200);
 80012f8:	20c8      	movs	r0, #200	; 0xc8
 80012fa:	f001 fb95 	bl	8002a28 <HAL_Delay>
	for(int i=0; i<TOF_nbOfSensor; i++){
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b02      	cmp	r3, #2
 8001308:	ddb5      	ble.n	8001276 <TOF_Init+0xba>
	}

	// Enable the Interruptions
	for(int i=0; i<TOF_nbOfSensor; i++){
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	e00e      	b.n	800132e <TOF_Init+0x172>
		HAL_NVIC_EnableIRQ(device[i].EXTI_IRQn);
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	f993 3172 	ldrsb.w	r3, [r3, #370]	; 0x172
 8001322:	4618      	mov	r0, r3
 8001324:	f001 ff0e 	bl	8003144 <HAL_NVIC_EnableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3301      	adds	r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b02      	cmp	r3, #2
 8001332:	dded      	ble.n	8001310 <TOF_Init+0x154>
	}
	HAL_Delay(200);
 8001334:	20c8      	movs	r0, #200	; 0xc8
 8001336:	f001 fb77 	bl	8002a28 <HAL_Delay>

	return 0;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <TOF_InitializationFlow>:

uint8_t TOF_InitializationFlow(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	// Device initialization (~ 40ms)
	TOF_Initialization(device);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f819 	bl	8001388 <TOF_Initialization>
	HAL_Delay(50);
 8001356:	2032      	movs	r0, #50	; 0x32
 8001358:	f001 fb66 	bl	8002a28 <HAL_Delay>

	// Calibration data loading (~ 1ms)
	TOF_Calibration(device);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f841 	bl	80013e4 <TOF_Calibration>
	HAL_Delay(5);
 8001362:	2005      	movs	r0, #5
 8001364:	f001 fb60 	bl	8002a28 <HAL_Delay>

	// System settings (~ 1ms)
	TOF_Settings(device, interruptPin);
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	4619      	mov	r1, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f879 	bl	8001464 <TOF_Settings>
	HAL_Delay(5);
 8001372:	2005      	movs	r0, #5
 8001374:	f001 fb58 	bl	8002a28 <HAL_Delay>

	VL53L0X_StartMeasurement(device);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f006 f9eb 	bl	8007754 <VL53L0X_StartMeasurement>

	return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <TOF_Initialization>:

uint8_t TOF_Initialization(VL53L0X_Dev_t* device){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if((status = VL53L0X_DataInit(device)) != VL53L0X_ERROR_NONE){
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f005 f981 	bl	800669c <VL53L0X_DataInit>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <TOF_Initialization+0x2a>
		printf("ToF - Error DataInit : %d\r\n", status);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <TOF_Initialization+0x54>)
 80013aa:	f00b fe03 	bl	800cfb4 <iprintf>
		return 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <TOF_Initialization+0x4a>
	}

	// StaticInit
	if((status = VL53L0X_StaticInit(device)) != VL53L0X_ERROR_NONE){
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f005 fad6 	bl	8006964 <VL53L0X_StaticInit>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <TOF_Initialization+0x48>
		printf("ToF - Error StaticInit : %d\r\n", status);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <TOF_Initialization+0x58>)
 80013c8:	f00b fdf4 	bl	800cfb4 <iprintf>
		return 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <TOF_Initialization+0x4a>
	}

	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800dde4 	.word	0x0800dde4
 80013e0:	0800de00 	.word	0x0800de00

080013e4 <TOF_Calibration>:
// SPADs calibration
static uint32_t *refSpadCount; static uint8_t *isApertureSpads;
// Temperature calibration
static uint8_t *pVhvSettings; static uint8_t *pPhaseCal;

uint8_t TOF_Calibration(VL53L0X_Dev_t* device){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

	// SPADs calibration (~ 10ms)
	if((status = VL53L0X_PerformRefSpadManagement(device, refSpadCount, isApertureSpads)) != VL53L0X_ERROR_NONE){
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <TOF_Calibration+0x68>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <TOF_Calibration+0x6c>)
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f006 fdbc 	bl	8007f78 <VL53L0X_PerformRefSpadManagement>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <TOF_Calibration+0x34>
		printf("ToF - Error SPADs calibration : %d\r\n", status);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4619      	mov	r1, r3
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <TOF_Calibration+0x70>)
 8001410:	f00b fdd0 	bl	800cfb4 <iprintf>
		return 1;
 8001414:	2301      	movs	r3, #1
 8001416:	e014      	b.n	8001442 <TOF_Calibration+0x5e>
	}

	// Temperature calibration (~ 40ms)
	if((status = VL53L0X_PerformRefCalibration(device, pVhvSettings, pPhaseCal)) != VL53L0X_ERROR_NONE){
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <TOF_Calibration+0x74>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <TOF_Calibration+0x78>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f006 f91a 	bl	800765c <VL53L0X_PerformRefCalibration>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <TOF_Calibration+0x5c>
		printf("ToF - Error Temperature calibration : %d\r\n", status);
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4619      	mov	r1, r3
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <TOF_Calibration+0x7c>)
 8001438:	f00b fdbc 	bl	800cfb4 <iprintf>
		return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <TOF_Calibration+0x5e>
	}

	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000035c 	.word	0x2000035c
 8001450:	20000360 	.word	0x20000360
 8001454:	0800de20 	.word	0x0800de20
 8001458:	20000364 	.word	0x20000364
 800145c:	20000368 	.word	0x20000368
 8001460:	0800de48 	.word	0x0800de48

08001464 <TOF_Settings>:

uint8_t TOF_Settings(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

	// Device mode
	if((status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING)) != VL53L0X_ERROR_NONE){
 8001474:	2101      	movs	r1, #1
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f005 fc86 	bl	8006d88 <VL53L0X_SetDeviceMode>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <TOF_Settings+0x30>
		printf("ToF - Error SetDeviceMode : %d\r\n", status);
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	4619      	mov	r1, r3
 800148a:	480f      	ldr	r0, [pc, #60]	; (80014c8 <TOF_Settings+0x64>)
 800148c:	f00b fd92 	bl	800cfb4 <iprintf>
		return 1;
 8001490:	2301      	movs	r3, #1
 8001492:	e015      	b.n	80014c0 <TOF_Settings+0x5c>
	}

	// Set GPIO : Pour interruptions
	status = VL53L0X_SetGpioConfig(device, interruptPin, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 8001494:	78f9      	ldrb	r1, [r7, #3]
 8001496:	2301      	movs	r3, #1
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2304      	movs	r3, #4
 800149c:	2201      	movs	r2, #1
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f006 fbae 	bl	8007c00 <VL53L0X_SetGpioConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
	if(status != VL53L0X_ERROR_NONE){
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <TOF_Settings+0x5a>
		printf("ToF - Error SetGPIO : %d %d\r\n",status,interruptPin);
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <TOF_Settings+0x68>)
 80014b6:	f00b fd7d 	bl	800cfb4 <iprintf>
		return 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <TOF_Settings+0x5c>
	}

	return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800de74 	.word	0x0800de74
 80014cc:	0800de98 	.word	0x0800de98

080014d0 <TOF_SetDeviceAddr>:

uint8_t TOF_SetDeviceAddr(VL53L0X_Dev_t* device, uint8_t new_addr){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]

	if((status = VL53L0X_SetDeviceAddress(device, new_addr)) != VL53L0X_ERROR_NONE){
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f005 f8c0 	bl	800666a <VL53L0X_SetDeviceAddress>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <TOF_SetDeviceAddr+0x32>
		printf("ToF - Error SetDeviceAddress : %d\r\n", status);
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <TOF_SetDeviceAddr+0x44>)
 80014fa:	f00b fd5b 	bl	800cfb4 <iprintf>
		return 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	e004      	b.n	800150c <TOF_SetDeviceAddr+0x3c>
	}
	device->I2cDevAddr = new_addr;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	0800deb8 	.word	0x0800deb8

08001518 <HAL_GPIO_EXTI_Callback>:
	return 0;
}

VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOF_Sensor[0].EXTI_GPIO_Pin){
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001524:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	429a      	cmp	r2, r3
 800152c:	d10f      	bne.n	800154e <HAL_GPIO_EXTI_Callback+0x36>
		uint32_t InterruptMask = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
		VL53L0X_GetRangingMeasurementData(&TOF_Sensor[0], &VL53L0X_RangingMeasurementData);
 8001532:	491f      	ldr	r1, [pc, #124]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001534:	481d      	ldr	r0, [pc, #116]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001536:	f006 fa0f 	bl	8007958 <VL53L0X_GetRangingMeasurementData>
		TOF_Sensor[0].rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800153c:	891a      	ldrh	r2, [r3, #8]
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001540:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
		VL53L0X_ClearInterruptMask(&TOF_Sensor[0], InterruptMask);
 8001544:	68f9      	ldr	r1, [r7, #12]
 8001546:	4819      	ldr	r0, [pc, #100]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001548:	f006 fcb4 	bl	8007eb4 <VL53L0X_ClearInterruptMask>
				uint32_t InterruptMask = 0;
				VL53L0X_GetRangingMeasurementData(&TOF_Sensor[2], &VL53L0X_RangingMeasurementData);
				TOF_Sensor[2].rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter;
				VL53L0X_ClearInterruptMask(&TOF_Sensor[2], InterruptMask);
			}
}
 800154c:	e02a      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0x8c>
		if(GPIO_Pin == TOF_Sensor[1].EXTI_GPIO_Pin){
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001550:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	429a      	cmp	r2, r3
 8001558:	d10f      	bne.n	800157a <HAL_GPIO_EXTI_Callback+0x62>
			uint32_t InterruptMask = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
			VL53L0X_GetRangingMeasurementData(&TOF_Sensor[1], &VL53L0X_RangingMeasurementData);
 800155e:	4914      	ldr	r1, [pc, #80]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001562:	f006 f9f9 	bl	8007958 <VL53L0X_GetRangingMeasurementData>
			TOF_Sensor[1].rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001568:	891a      	ldrh	r2, [r3, #8]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 800156c:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
			VL53L0X_ClearInterruptMask(&TOF_Sensor[1], InterruptMask);
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001574:	f006 fc9e 	bl	8007eb4 <VL53L0X_ClearInterruptMask>
}
 8001578:	e014      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0x8c>
			if(GPIO_Pin == TOF_Sensor[2].EXTI_GPIO_Pin){
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 800157c:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	429a      	cmp	r2, r3
 8001584:	d10e      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0x8c>
				uint32_t InterruptMask = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
				VL53L0X_GetRangingMeasurementData(&TOF_Sensor[2], &VL53L0X_RangingMeasurementData);
 800158a:	4909      	ldr	r1, [pc, #36]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800158e:	f006 f9e3 	bl	8007958 <VL53L0X_GetRangingMeasurementData>
				TOF_Sensor[2].rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001594:	891a      	ldrh	r2, [r3, #8]
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001598:	f8a3 2450 	strh.w	r2, [r3, #1104]	; 0x450
				VL53L0X_ClearInterruptMask(&TOF_Sensor[2], InterruptMask);
 800159c:	6979      	ldr	r1, [r7, #20]
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80015a0:	f006 fc88 	bl	8007eb4 <VL53L0X_ClearInterruptMask>
}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20004700 	.word	0x20004700
 80015b0:	20004b68 	.word	0x20004b68
 80015b4:	20004878 	.word	0x20004878
 80015b8:	200049f0 	.word	0x200049f0

080015bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015d0:	4a36      	ldr	r2, [pc, #216]	; (80016ac <MX_ADC1_Init+0xf0>)
 80015d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d4:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_ADC1_Init+0xec>)
 80015fe:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <MX_ADC1_Init+0xf4>)
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_ADC1_Init+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_ADC1_Init+0xec>)
 800160a:	2204      	movs	r2, #4
 800160c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_ADC1_Init+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_ADC1_Init+0xec>)
 8001618:	2201      	movs	r2, #1
 800161a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800161c:	4822      	ldr	r0, [pc, #136]	; (80016a8 <MX_ADC1_Init+0xec>)
 800161e:	f001 fa27 	bl	8002a70 <HAL_ADC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001628:	f000 fd6c 	bl	8002104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	481a      	ldr	r0, [pc, #104]	; (80016a8 <MX_ADC1_Init+0xec>)
 800163e:	f001 fa5b 	bl	8002af8 <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001648:	f000 fd5c 	bl	8002104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800164c:	2301      	movs	r3, #1
 800164e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_ADC1_Init+0xec>)
 800165a:	f001 fa4d 	bl	8002af8 <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001664:	f000 fd4e 	bl	8002104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001668:	2304      	movs	r3, #4
 800166a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800166c:	2303      	movs	r3, #3
 800166e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_ADC1_Init+0xec>)
 8001676:	f001 fa3f 	bl	8002af8 <HAL_ADC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001680:	f000 fd40 	bl	8002104 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001684:	2306      	movs	r3, #6
 8001686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_ADC1_Init+0xec>)
 8001692:	f001 fa31 	bl	8002af8 <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800169c:	f000 fd32 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20004b84 	.word	0x20004b84
 80016ac:	40012000 	.word	0x40012000
 80016b0:	0f000001 	.word	0x0f000001

080016b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_ADC_MspInit+0xdc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d157      	bne.n	8001786 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 800170e:	2353      	movs	r3, #83	; 0x53
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	2303      	movs	r3, #3
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <HAL_ADC_MspInit+0xe4>)
 8001722:	f002 f815 	bl	8003750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_ADC_MspInit+0xec>)
 800172a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800176c:	f001 fd06 	bl	800317c <HAL_DMA_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001776:	f000 fcc5 	bl	8002104 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012000 	.word	0x40012000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	20004bcc 	.word	0x20004bcc
 80017a0:	40026410 	.word	0x40026410

080017a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_DMA_Init+0x3c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <MX_DMA_Init+0x3c>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_DMA_Init+0x3c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	2038      	movs	r0, #56	; 0x38
 80017cc:	f001 fc9e 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017d0:	2038      	movs	r0, #56	; 0x38
 80017d2:	f001 fcb7 	bl	8003144 <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <vApplicationGetIdleTaskMemory+0x2c>)
 80017f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <vApplicationGetIdleTaskMemory+0x30>)
 80017fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000036c 	.word	0x2000036c
 8001814:	20000420 	.word	0x20000420

08001818 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_FREERTOS_Init+0x30>)
 8001820:	1d3c      	adds	r4, r7, #4
 8001822:	461d      	mov	r5, r3
 8001824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800182c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f009 fc79 	bl	800b12c <osThreadCreate>
 800183a:	4603      	mov	r3, r0
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <MX_FREERTOS_Init+0x34>)
 800183e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	0800df98 	.word	0x0800df98
 800184c:	20004c2c 	.word	0x20004c2c

08001850 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001858:	2001      	movs	r0, #1
 800185a:	f009 fcb3 	bl	800b1c4 <osDelay>
 800185e:	e7fb      	b.n	8001858 <StartDefaultTask+0x8>

08001860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <MX_GPIO_Init+0x190>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a5c      	ldr	r2, [pc, #368]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <MX_GPIO_Init+0x190>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <MX_GPIO_Init+0x190>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <MX_GPIO_Init+0x190>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT1_Pin|TOF_XSHUT0_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80018ec:	4841      	ldr	r0, [pc, #260]	; (80019f4 <MX_GPIO_Init+0x194>)
 80018ee:	f002 f8b3 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_LED_Pin|RGB_OE_Pin|RGB_S3_Pin|RGB_S2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80018f8:	483f      	ldr	r0, [pc, #252]	; (80019f8 <MX_GPIO_Init+0x198>)
 80018fa:	f002 f8ad 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_S1_Pin|RGB_S0_Pin|TOF_XSHUT2_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001904:	483d      	ldr	r0, [pc, #244]	; (80019fc <MX_GPIO_Init+0x19c>)
 8001906:	f002 f8a7 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800190a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001910:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4836      	ldr	r0, [pc, #216]	; (80019fc <MX_GPIO_Init+0x19c>)
 8001922:	f001 ff15 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT1_Pin|TOF_XSHUT0_Pin;
 8001926:	f44f 7348 	mov.w	r3, #800	; 0x320
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	482d      	ldr	r0, [pc, #180]	; (80019f4 <MX_GPIO_Init+0x194>)
 8001940:	f001 ff06 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_GPIOI1_Pin|TOF_GPIOI2_Pin;
 8001944:	2303      	movs	r3, #3
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4827      	ldr	r0, [pc, #156]	; (80019f8 <MX_GPIO_Init+0x198>)
 800195a:	f001 fef9 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RGB_LED_Pin|RGB_OE_Pin|RGB_S3_Pin|RGB_S2_Pin;
 800195e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4820      	ldr	r0, [pc, #128]	; (80019f8 <MX_GPIO_Init+0x198>)
 8001978:	f001 feea 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_S1_Pin|RGB_S0_Pin|TOF_XSHUT2_Pin;
 800197c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4819      	ldr	r0, [pc, #100]	; (80019fc <MX_GPIO_Init+0x19c>)
 8001996:	f001 fedb 	bl	8003750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIOI0_Pin;
 800199a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIOI0_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <MX_GPIO_Init+0x194>)
 80019b2:	f001 fecd 	bl	8003750 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	2006      	movs	r0, #6
 80019bc:	f001 fba6 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019c0:	2006      	movs	r0, #6
 80019c2:	f001 fbbf 	bl	8003144 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	2007      	movs	r0, #7
 80019cc:	f001 fb9e 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019d0:	2007      	movs	r0, #7
 80019d2:	f001 fbb7 	bl	8003144 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2105      	movs	r1, #5
 80019da:	2028      	movs	r0, #40	; 0x28
 80019dc:	f001 fb96 	bl	800310c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e0:	2028      	movs	r0, #40	; 0x28
 80019e2:	f001 fbaf 	bl	8003144 <HAL_NVIC_EnableIRQ>

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800

08001a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C1_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C1_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a3e:	f002 f83d 	bl	8003abc <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 fb5c 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20004c30 	.word	0x20004c30
 8001a54:	40005400 	.word	0x40005400
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_I2C_MspInit+0x84>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d12c      	bne.n	8001ad8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_I2C_MspInit+0x88>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_I2C_MspInit+0x88>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_I2C_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa0:	2312      	movs	r3, #18
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aac:	2304      	movs	r3, #4
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <HAL_I2C_MspInit+0x8c>)
 8001ab8:	f001 fe4a 	bl	8003750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0x88>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_I2C_MspInit+0x88>)
 8001ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_I2C_MspInit+0x88>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	; 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020400 	.word	0x40020400

08001aec <function>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int function(int argc, char ** argv) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	printf("function test\r\n");
 8001af6:	4810      	ldr	r0, [pc, #64]	; (8001b38 <function+0x4c>)
 8001af8:	f00b fae2 	bl	800d0c0 <puts>

	printf("argc = %d\r\n", argc);
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <function+0x50>)
 8001b00:	f00b fa58 	bl	800cfb4 <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e00c      	b.n	8001b24 <function+0x38>
		printf("nb arg %d = %s\r\n", i, argv[i]);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <function+0x54>)
 8001b1a:	f00b fa4b 	bl	800cfb4 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbee      	blt.n	8001b0a <function+0x1e>
	}

	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	0800dfb4 	.word	0x0800dfb4
 8001b3c:	0800dfc4 	.word	0x0800dfc4
 8001b40:	0800dfd0 	.word	0x0800dfd0

08001b44 <vTaskShell>:

void vTaskShell(void * p)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	Shell_Init();
 8001b4c:	f000 fb38 	bl	80021c0 <Shell_Init>
	Shell_Add('f', function, "A function");
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <vTaskShell+0x24>)
 8001b52:	4906      	ldr	r1, [pc, #24]	; (8001b6c <vTaskShell+0x28>)
 8001b54:	2066      	movs	r0, #102	; 0x66
 8001b56:	f000 fb5f 	bl	8002218 <Shell_Add>

	Shell_Run();
 8001b5a:	f000 fbfb 	bl	8002354 <Shell_Run>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	0800dfe4 	.word	0x0800dfe4
 8001b6c:	08001aed 	.word	0x08001aed

08001b70 <vTaskControl>:

/*
 * Gère la commande des moteurs en fonction des données des capteurs
 */
void vTaskControl(void * p)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	while(1){
		printf("\r\n ----------------------- TOF SENSORS ----------------------- \r\n");
 8001b78:	4815      	ldr	r0, [pc, #84]	; (8001bd0 <vTaskControl+0x60>)
 8001b7a:	f00b faa1 	bl	800d0c0 <puts>
		printf("Tof 0 - DISTANCE = %d mm\r\n",TOF_Sensor[0].rangeMillimeter);
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <vTaskControl+0x64>)
 8001b80:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8001b84:	4619      	mov	r1, r3
 8001b86:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <vTaskControl+0x68>)
 8001b88:	f00b fa14 	bl	800cfb4 <iprintf>
		printf("Tof 1 - DISTANCE = %d mm\r\n",TOF_Sensor[1].rangeMillimeter);
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <vTaskControl+0x64>)
 8001b8e:	f8b3 32d8 	ldrh.w	r3, [r3, #728]	; 0x2d8
 8001b92:	4619      	mov	r1, r3
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <vTaskControl+0x6c>)
 8001b96:	f00b fa0d 	bl	800cfb4 <iprintf>
		printf("Tof 2 - DISTANCE = %d mm\r\n",TOF_Sensor[2].rangeMillimeter);
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <vTaskControl+0x64>)
 8001b9c:	f8b3 3450 	ldrh.w	r3, [r3, #1104]	; 0x450
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480f      	ldr	r0, [pc, #60]	; (8001be0 <vTaskControl+0x70>)
 8001ba4:	f00b fa06 	bl	800cfb4 <iprintf>

		printf("\r\n ----------------------- RGB SENSOR ----------------------- \r\n");
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <vTaskControl+0x74>)
 8001baa:	f00b fa89 	bl	800d0c0 <puts>
		if(RGB_Sensor.isFloorRed){
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <vTaskControl+0x78>)
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <vTaskControl+0x50>
			printf("The floor is red\r\n");
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <vTaskControl+0x7c>)
 8001bba:	f00b fa81 	bl	800d0c0 <puts>
 8001bbe:	e002      	b.n	8001bc6 <vTaskControl+0x56>
		}else{
			printf("The floor is not red\r\n");
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <vTaskControl+0x80>)
 8001bc2:	f00b fa7d 	bl	800d0c0 <puts>
		}

		vTaskDelay(portTICK_PERIOD_MS*200);
 8001bc6:	20c8      	movs	r0, #200	; 0xc8
 8001bc8:	f009 ff9e 	bl	800bb08 <vTaskDelay>
		printf("\r\n ----------------------- TOF SENSORS ----------------------- \r\n");
 8001bcc:	e7d4      	b.n	8001b78 <vTaskControl+0x8>
 8001bce:	bf00      	nop
 8001bd0:	0800dff0 	.word	0x0800dff0
 8001bd4:	20004700 	.word	0x20004700
 8001bd8:	0800e034 	.word	0x0800e034
 8001bdc:	0800e050 	.word	0x0800e050
 8001be0:	0800e06c 	.word	0x0800e06c
 8001be4:	0800e088 	.word	0x0800e088
 8001be8:	200046b0 	.word	0x200046b0
 8001bec:	0800e0c8 	.word	0x0800e0c8
 8001bf0:	0800e0dc 	.word	0x0800e0dc

08001bf4 <vTaskCouleur>:
 * Réalise les mesures de couleur
 * Indique si le sol est rouge avec la variable globale :
 * RGB_Sensor.isFloorRed
 */
void vTaskCouleur(void * p)
{
 8001bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af02      	add	r7, sp, #8
 8001bfc:	6078      	str	r0, [r7, #4]
	RGB_Init_SetTimer(&RGB_Sensor, &htim3, TIM_CHANNEL_1);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4974      	ldr	r1, [pc, #464]	; (8001dd4 <vTaskCouleur+0x1e0>)
 8001c02:	4875      	ldr	r0, [pc, #468]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c04:	f7ff f90e 	bl	8000e24 <RGB_Init_SetTimer>

	RGB_Init_SetParamGPIOs(&RGB_Sensor, RGB_OE_GPIO_Port, RGB_OE_Pin, RGB_LED_GPIO_Port, RGB_LED_Pin);
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <vTaskCouleur+0x1e8>)
 8001c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c14:	4971      	ldr	r1, [pc, #452]	; (8001ddc <vTaskCouleur+0x1e8>)
 8001c16:	4870      	ldr	r0, [pc, #448]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c18:	f7ff f91d 	bl	8000e56 <RGB_Init_SetParamGPIOs>
	RGB_Init_SetOutFreqGPIOs(&RGB_Sensor, RGB_S0_GPIO_Port, RGB_S0_Pin, RGB_S1_GPIO_Port, RGB_S1_Pin);
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <vTaskCouleur+0x1ec>)
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	496e      	ldr	r1, [pc, #440]	; (8001de0 <vTaskCouleur+0x1ec>)
 8001c26:	486c      	ldr	r0, [pc, #432]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c28:	f7ff f930 	bl	8000e8c <RGB_Init_SetOutFreqGPIOs>
	RGB_Init_SetColorFilterGPIOs(&RGB_Sensor, RGB_S2_GPIO_Port, RGB_S2_Pin, RGB_S3_GPIO_Port, RGB_S3_Pin);
 8001c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <vTaskCouleur+0x1e8>)
 8001c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c38:	4968      	ldr	r1, [pc, #416]	; (8001ddc <vTaskCouleur+0x1e8>)
 8001c3a:	4867      	ldr	r0, [pc, #412]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c3c:	f7ff f941 	bl	8000ec2 <RGB_Init_SetColorFilterGPIOs>

	RGB_Init(&RGB_Sensor);
 8001c40:	4865      	ldr	r0, [pc, #404]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c42:	f7ff f959 	bl	8000ef8 <RGB_Init>

	float refClock;

	while(1){
		if(RGB_Sensor.it.flag){
 8001c46:	4b64      	ldr	r3, [pc, #400]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80bc 	beq.w	8001dca <vTaskCouleur+0x1d6>

			RGB_Sensor.it.difference = RGB_Sensor.it.icVal2 - RGB_Sensor.it.icVal1;
 8001c52:	4b61      	ldr	r3, [pc, #388]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c54:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			refClock = RGB_APBCLOCK/(RGB_PRESCALER);
 8001c68:	4b5e      	ldr	r3, [pc, #376]	; (8001de4 <vTaskCouleur+0x1f0>)
 8001c6a:	60fb      	str	r3, [r7, #12]
			RGB_Sensor.it.frequency = refClock/RGB_Sensor.it.difference;
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c82:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c84:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			switch(RGB_Sensor.it.colorFilter)
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d01c      	beq.n	8001ccc <vTaskCouleur+0xd8>
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	dc46      	bgt.n	8001d24 <vTaskCouleur+0x130>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <vTaskCouleur+0xac>
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d02c      	beq.n	8001cf8 <vTaskCouleur+0x104>
 8001c9e:	e041      	b.n	8001d24 <vTaskCouleur+0x130>
			{
			case RGB_RED:
				RGB_Sensor.red = (uint16_t)RGB_Sensor.it.frequency;
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001ca2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001caa:	ee17 3a90 	vmov	r3, s15
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cb2:	86da      	strh	r2, [r3, #54]	; 0x36
				RGB_Sensor.it.colorFilter = RGB_GREEN;
 8001cb4:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				RGB_SetFilter(&RGB_Sensor, RGB_Sensor.it.colorFilter);
 8001cbc:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4844      	ldr	r0, [pc, #272]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cc6:	f7ff f95f 	bl	8000f88 <RGB_SetFilter>
				break;
 8001cca:	e02e      	b.n	8001d2a <vTaskCouleur+0x136>
			case RGB_GREEN:
				RGB_Sensor.green = (uint16_t)RGB_Sensor.it.frequency;
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd6:	ee17 3a90 	vmov	r3, s15
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cde:	871a      	strh	r2, [r3, #56]	; 0x38
				RGB_Sensor.it.colorFilter = RGB_BLUE;
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				RGB_SetFilter(&RGB_Sensor, RGB_Sensor.it.colorFilter);
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cf2:	f7ff f949 	bl	8000f88 <RGB_SetFilter>
				break;
 8001cf6:	e018      	b.n	8001d2a <vTaskCouleur+0x136>
			case RGB_BLUE:
				RGB_Sensor.blue = (uint16_t)RGB_Sensor.it.frequency;
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001cfa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d02:	ee17 3a90 	vmov	r3, s15
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d0a:	875a      	strh	r2, [r3, #58]	; 0x3a
				RGB_Sensor.it.colorFilter = RGB_RED;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
				RGB_SetFilter(&RGB_Sensor, RGB_Sensor.it.colorFilter);
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482e      	ldr	r0, [pc, #184]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d1e:	f7ff f933 	bl	8000f88 <RGB_SetFilter>
				break;
 8001d22:	e002      	b.n	8001d2a <vTaskCouleur+0x136>
			default:
				printf("RGB - Error setFilter\r\n");
 8001d24:	4830      	ldr	r0, [pc, #192]	; (8001de8 <vTaskCouleur+0x1f4>)
 8001d26:	f00b f9cb 	bl	800d0c0 <puts>
			}
			if((RGB_Sensor.red >= (1.5*RGB_Sensor.green)) & (RGB_Sensor.red >= (1.5*RGB_Sensor.blue))){
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fbf8 	bl	8000524 <__aeabi_i2d>
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d3a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbf1 	bl	8000524 <__aeabi_i2d>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <vTaskCouleur+0x1f8>)
 8001d48:	f7fe fc56 	bl	80005f8 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	2101      	movs	r1, #1
 8001d52:	460e      	mov	r6, r1
 8001d54:	4620      	mov	r0, r4
 8001d56:	4629      	mov	r1, r5
 8001d58:	f7fe fed4 	bl	8000b04 <__aeabi_dcmpge>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <vTaskCouleur+0x172>
 8001d62:	2300      	movs	r3, #0
 8001d64:	461e      	mov	r6, r3
 8001d66:	b2f6      	uxtb	r6, r6
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbd9 	bl	8000524 <__aeabi_i2d>
 8001d72:	4604      	mov	r4, r0
 8001d74:	460d      	mov	r5, r1
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001d78:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fbd2 	bl	8000524 <__aeabi_i2d>
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <vTaskCouleur+0x1f8>)
 8001d86:	f7fe fc37 	bl	80005f8 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4688      	mov	r8, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe feb5 	bl	8000b04 <__aeabi_dcmpge>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <vTaskCouleur+0x1b0>
 8001da0:	2300      	movs	r3, #0
 8001da2:	4698      	mov	r8, r3
 8001da4:	fa5f f388 	uxtb.w	r3, r8
 8001da8:	4033      	ands	r3, r6
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <vTaskCouleur+0x1c6>
				RGB_Sensor.isFloorRed = 1;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001db8:	e003      	b.n	8001dc2 <vTaskCouleur+0x1ce>
			}else{
				RGB_Sensor.isFloorRed = 0;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			}

			RGB_Sensor.it.flag = 0;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <vTaskCouleur+0x1e4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
		vTaskDelay(10);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f009 fe9c 	bl	800bb08 <vTaskDelay>
		if(RGB_Sensor.it.flag){
 8001dd0:	e739      	b.n	8001c46 <vTaskCouleur+0x52>
 8001dd2:	bf00      	nop
 8001dd4:	20004cd0 	.word	0x20004cd0
 8001dd8:	200046b0 	.word	0x200046b0
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	49742400 	.word	0x49742400
 8001de8:	0800e0f4 	.word	0x0800e0f4
 8001dec:	3ff80000 	.word	0x3ff80000

08001df0 <vTaskToF>:
 * TOF_Sensor[0].rangeMillimeter
 * TOF_Sensor[1].rangeMillimeter
 * TOF_Sensor[2].rangeMillimeter
 */
void vTaskToF(void * p)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	6078      	str	r0, [r7, #4]
	TOF_Init_SetI2C(&TOF_Sensor[0], &hi2c1, 0x55);
 8001df8:	2255      	movs	r2, #85	; 0x55
 8001dfa:	491e      	ldr	r1, [pc, #120]	; (8001e74 <vTaskToF+0x84>)
 8001dfc:	481e      	ldr	r0, [pc, #120]	; (8001e78 <vTaskToF+0x88>)
 8001dfe:	f7ff f997 	bl	8001130 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[0], TOF_XSHUT0_GPIO_Port, TOF_XSHUT0_Pin, TOF_GPIOI0_GPIO_Port, TOF_GPIOI0_Pin);
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <vTaskToF+0x8c>)
 8001e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0e:	491b      	ldr	r1, [pc, #108]	; (8001e7c <vTaskToF+0x8c>)
 8001e10:	4819      	ldr	r0, [pc, #100]	; (8001e78 <vTaskToF+0x88>)
 8001e12:	f7ff f9a3 	bl	800115c <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[0], TOF_GPIOI0_EXTI_IRQn);
 8001e16:	2128      	movs	r1, #40	; 0x28
 8001e18:	4817      	ldr	r0, [pc, #92]	; (8001e78 <vTaskToF+0x88>)
 8001e1a:	f7ff f9be 	bl	800119a <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[1], &hi2c1, 0x58);
 8001e1e:	2258      	movs	r2, #88	; 0x58
 8001e20:	4914      	ldr	r1, [pc, #80]	; (8001e74 <vTaskToF+0x84>)
 8001e22:	4817      	ldr	r0, [pc, #92]	; (8001e80 <vTaskToF+0x90>)
 8001e24:	f7ff f984 	bl	8001130 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[1], TOF_XSHUT1_GPIO_Port, TOF_XSHUT1_Pin, TOF_GPIOI1_GPIO_Port, TOF_GPIOI1_Pin);
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <vTaskToF+0x94>)
 8001e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e32:	4912      	ldr	r1, [pc, #72]	; (8001e7c <vTaskToF+0x8c>)
 8001e34:	4812      	ldr	r0, [pc, #72]	; (8001e80 <vTaskToF+0x90>)
 8001e36:	f7ff f991 	bl	800115c <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[1], TOF_GPIOI1_EXTI_IRQn);
 8001e3a:	2106      	movs	r1, #6
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <vTaskToF+0x90>)
 8001e3e:	f7ff f9ac 	bl	800119a <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[2], &hi2c1, 0x5b);
 8001e42:	225b      	movs	r2, #91	; 0x5b
 8001e44:	490b      	ldr	r1, [pc, #44]	; (8001e74 <vTaskToF+0x84>)
 8001e46:	4810      	ldr	r0, [pc, #64]	; (8001e88 <vTaskToF+0x98>)
 8001e48:	f7ff f972 	bl	8001130 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[2], TOF_XSHUT2_GPIO_Port, TOF_XSHUT2_Pin, TOF_GPIOI2_GPIO_Port, TOF_GPIOI2_Pin);
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <vTaskToF+0x94>)
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	490d      	ldr	r1, [pc, #52]	; (8001e8c <vTaskToF+0x9c>)
 8001e58:	480b      	ldr	r0, [pc, #44]	; (8001e88 <vTaskToF+0x98>)
 8001e5a:	f7ff f97f 	bl	800115c <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[2], TOF_GPIOI2_EXTI_IRQn);
 8001e5e:	2107      	movs	r1, #7
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <vTaskToF+0x98>)
 8001e62:	f7ff f99a 	bl	800119a <TOF_Init_SetEXTI>

	TOF_Init(TOF_Sensor);
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <vTaskToF+0x88>)
 8001e68:	f7ff f9a8 	bl	80011bc <TOF_Init>

	while(1){
		// Traitement de l'IT à mettre ici pour l'alléger
		vTaskDelay(10);
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f009 fe4b 	bl	800bb08 <vTaskDelay>
 8001e72:	e7fb      	b.n	8001e6c <vTaskToF+0x7c>
 8001e74:	20004c30 	.word	0x20004c30
 8001e78:	20004700 	.word	0x20004700
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	20004878 	.word	0x20004878
 8001e84:	40020400 	.word	0x40020400
 8001e88:	200049f0 	.word	0x200049f0
 8001e8c:	40020800 	.word	0x40020800

08001e90 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e9a:	f000 fd83 	bl	80029a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e9e:	f000 f877 	bl	8001f90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea2:	f7ff fcdd 	bl	8001860 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001ea6:	f000 fce1 	bl	800286c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8001eaa:	f000 fc3b 	bl	8002724 <MX_TIM3_Init>
	MX_DMA_Init();
 8001eae:	f7ff fc79 	bl	80017a4 <MX_DMA_Init>
	MX_ADC1_Init();
 8001eb2:	f7ff fb83 	bl	80015bc <MX_ADC1_Init>
	MX_I2C1_Init();
 8001eb6:	f7ff fda3 	bl	8001a00 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\n --------------- BOTterfly --------------- \r\n");
 8001eba:	4828      	ldr	r0, [pc, #160]	; (8001f5c <main+0xcc>)
 8001ebc:	f00b f900 	bl	800d0c0 <puts>

	// CRÉATION DES BOÎTES AUX LETTRES :


	// CRÉATION DES TÂCHES :
	xReturned = xTaskCreate(
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ece:	4924      	ldr	r1, [pc, #144]	; (8001f60 <main+0xd0>)
 8001ed0:	4824      	ldr	r0, [pc, #144]	; (8001f64 <main+0xd4>)
 8001ed2:	f009 fccc 	bl	800b86e <xTaskCreate>
 8001ed6:	6078      	str	r0, [r7, #4]
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			( void * ) NULL,    /* Parameter passed into the task. */
			2,					/* Priority at which the task is created. */
			&xHandle );      	/* Used to pass out the created task's handle. */

	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d102      	bne.n	8001ee6 <main+0x56>
		printf("Task Shell creation error: Could not allocate required memory\r\n");
 8001ee0:	4821      	ldr	r0, [pc, #132]	; (8001f68 <main+0xd8>)
 8001ee2:	f00b f8ed 	bl	800d0c0 <puts>
	}

	if (xTaskCreate(vTaskControl, "Control", STACK_SIZE, (void *)NULL, 4, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	2304      	movs	r3, #4
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ef4:	491d      	ldr	r1, [pc, #116]	; (8001f6c <main+0xdc>)
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <main+0xe0>)
 8001ef8:	f009 fcb9 	bl	800b86e <xTaskCreate>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f02:	d102      	bne.n	8001f0a <main+0x7a>
	{
		printf("Task Control Creation error : Could not allocate required memory\r\n");
 8001f04:	481b      	ldr	r0, [pc, #108]	; (8001f74 <main+0xe4>)
 8001f06:	f00b f8db 	bl	800d0c0 <puts>
	//	}
	//	if (xTaskCreate(vTaskIMU, "IMU", STACK_SIZE, (void *)NULL, 12, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
	//	{
	//		printf("Task IMU Creation error : Could not allocate required memory\r\n");
	//	}
	if (xTaskCreate(vTaskCouleur, "Couleur", STACK_SIZE, (void *)NULL, 20, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2314      	movs	r3, #20
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f18:	4917      	ldr	r1, [pc, #92]	; (8001f78 <main+0xe8>)
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <main+0xec>)
 8001f1c:	f009 fca7 	bl	800b86e <xTaskCreate>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d102      	bne.n	8001f2e <main+0x9e>
	{
		printf("Task Couleur Creation error : Could not allocate required memory\r\n");
 8001f28:	4815      	ldr	r0, [pc, #84]	; (8001f80 <main+0xf0>)
 8001f2a:	f00b f8c9 	bl	800d0c0 <puts>
	}
	//	if (xTaskCreate(vTaskPhotodiodes, "Photodiodes", STACK_SIZE, (void *)NULL, 24, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
	//	{
	//		printf("Task Photodiode Creation error : Could not allocate required memory\r\n");
	//	}
	if (xTaskCreate(vTaskToF, "ToF", STACK_SIZE, (void *)NULL, 28, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8001f2e:	463b      	mov	r3, r7
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	231c      	movs	r3, #28
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2300      	movs	r3, #0
 8001f38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f3c:	4911      	ldr	r1, [pc, #68]	; (8001f84 <main+0xf4>)
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <main+0xf8>)
 8001f40:	f009 fc95 	bl	800b86e <xTaskCreate>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d102      	bne.n	8001f52 <main+0xc2>
	{
		printf("Task ToF Creation error : Could not allocate required memory\r\n");
 8001f4c:	480f      	ldr	r0, [pc, #60]	; (8001f8c <main+0xfc>)
 8001f4e:	f00b f8b7 	bl	800d0c0 <puts>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001f52:	f7ff fc61 	bl	8001818 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001f56:	f009 f8e2 	bl	800b11e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001f5a:	e7fe      	b.n	8001f5a <main+0xca>
 8001f5c:	0800e10c 	.word	0x0800e10c
 8001f60:	0800e13c 	.word	0x0800e13c
 8001f64:	08001b45 	.word	0x08001b45
 8001f68:	0800e144 	.word	0x0800e144
 8001f6c:	0800e184 	.word	0x0800e184
 8001f70:	08001b71 	.word	0x08001b71
 8001f74:	0800e18c 	.word	0x0800e18c
 8001f78:	0800e1d0 	.word	0x0800e1d0
 8001f7c:	08001bf5 	.word	0x08001bf5
 8001f80:	0800e1d8 	.word	0x0800e1d8
 8001f84:	0800e21c 	.word	0x0800e21c
 8001f88:	08001df1 	.word	0x08001df1
 8001f8c:	0800e220 	.word	0x0800e220

08001f90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	; 0x50
 8001f94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2230      	movs	r2, #48	; 0x30
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00a ffa5 	bl	800ceee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <SystemClock_Config+0xc8>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <SystemClock_Config+0xc8>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <SystemClock_Config+0xc8>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <SystemClock_Config+0xcc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <SystemClock_Config+0xcc>)
 8001fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <SystemClock_Config+0xcc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002000:	2308      	movs	r3, #8
 8002002:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 8002004:	2350      	movs	r3, #80	; 0x50
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002008:	2302      	movs	r3, #2
 800200a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800200c:	2304      	movs	r3, #4
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fce7 	bl	80049e8 <HAL_RCC_OscConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002020:	f000 f870 	bl	8002104 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002024:	230f      	movs	r3, #15
 8002026:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002028:	2302      	movs	r3, #2
 800202a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002034:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2102      	movs	r1, #2
 8002040:	4618      	mov	r0, r3
 8002042:	f002 ff49 	bl	8004ed8 <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800204c:	f000 f85a 	bl	8002104 <Error_Handler>
	}
}
 8002050:	bf00      	nop
 8002052:	3750      	adds	r7, #80	; 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
uint16_t icVal01 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7f1b      	ldrb	r3, [r3, #28]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d12f      	bne.n	80020d0 <HAL_TIM_IC_CaptureCallback+0x70>
	{
		if(RGB_Sensor.it.isFirstCaptured == 0){
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IC_CaptureCallback+0x38>
			icVal01 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4619      	mov	r1, r3
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f003 fd21 	bl	8005ac8 <HAL_TIM_ReadCapturedValue>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_TIM_IC_CaptureCallback+0x7c>)
 800208c:	801a      	strh	r2, [r3, #0]
			RGB_Sensor.it.isFirstCaptured = 1;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);

			RGB_Sensor.it.flag = 1;
		}
	}
}
 8002096:	e01b      	b.n	80020d0 <HAL_TIM_IC_CaptureCallback+0x70>
			RGB_Sensor.it.icVal1 = icVal01;
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_TIM_IC_CaptureCallback+0x7c>)
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 800209e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			RGB_Sensor.it.icVal2 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f003 fd0d 	bl	8005ac8 <HAL_TIM_ReadCapturedValue>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 80020b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			RGB_Sensor.it.isFirstCaptured = 0;
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
			RGB_Sensor.it.flag = 1;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x78>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200046b0 	.word	0x200046b0
 80020dc:	20000620 	.word	0x20000620

080020e0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80020f2:	f000 fc79 	bl	80029e8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40014800 	.word	0x40014800

08002104 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800210c:	e7fe      	b.n	800210c <Error_Handler+0x8>
	...

08002110 <__io_putchar>:

QueueHandle_t Shell_Queue;


int __io_putchar(int ch)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002118:	1d39      	adds	r1, r7, #4
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	2201      	movs	r2, #1
 8002120:	4803      	ldr	r0, [pc, #12]	; (8002130 <__io_putchar+0x20>)
 8002122:	f003 ffc6 	bl	80060b2 <HAL_UART_Transmit>
	return ch;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20004d18 	.word	0x20004d18

08002134 <Shell_Uart_Write>:

	return c;
}

int Shell_Uart_Write(char * s, uint16_t size)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <Shell_Uart_Write+0x24>)
 800214a:	f003 ffb2 	bl	80060b2 <HAL_UART_Transmit>
	return size;
 800214e:	887b      	ldrh	r3, [r7, #2]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20004d18 	.word	0x20004d18

0800215c <Shell_Help>:
{
	Shell_Data_Ready = 1;
}

int Shell_Help(int argc, char ** argv)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < Shell_Func_List_Size ; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e019      	b.n	80021a0 <Shell_Help+0x44>
	{
		printf("%c %s\r\n", Shell_Func_List[i].c, Shell_Func_List[i].description);
 800216c:	4911      	ldr	r1, [pc, #68]	; (80021b4 <Shell_Help+0x58>)
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	490d      	ldr	r1, [pc, #52]	; (80021b4 <Shell_Help+0x58>)
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3308      	adds	r3, #8
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4601      	mov	r1, r0
 8002194:	4808      	ldr	r0, [pc, #32]	; (80021b8 <Shell_Help+0x5c>)
 8002196:	f00a ff0d 	bl	800cfb4 <iprintf>
	for(i = 0 ; i < Shell_Func_List_Size ; i++)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <Shell_Help+0x60>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	dbe0      	blt.n	800216c <Shell_Help+0x10>
	}

	return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000628 	.word	0x20000628
 80021b8:	0800e260 	.word	0x0800e260
 80021bc:	20000624 	.word	0x20000624

080021c0 <Shell_Init>:
 * @retval void
 *
 */

void Shell_Init()
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell v0.2 =====\r\n");
 80021c6:	4810      	ldr	r0, [pc, #64]	; (8002208 <Shell_Init+0x48>)
 80021c8:	f00a ff7a 	bl	800d0c0 <puts>

	Shell_Add('h', Shell_Help, help);
 80021cc:	4a0f      	ldr	r2, [pc, #60]	; (800220c <Shell_Init+0x4c>)
 80021ce:	4910      	ldr	r1, [pc, #64]	; (8002210 <Shell_Init+0x50>)
 80021d0:	2068      	movs	r0, #104	; 0x68
 80021d2:	f000 f821 	bl	8002218 <Shell_Add>

	for (int i = 0 ; i < 3 ; i++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	e005      	b.n	80021e8 <Shell_Init+0x28>
	{

		HAL_Delay(200);
 80021dc:	20c8      	movs	r0, #200	; 0xc8
 80021de:	f000 fc23 	bl	8002a28 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3301      	adds	r3, #1
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	ddf6      	ble.n	80021dc <Shell_Init+0x1c>
	}

	Shell_Queue = xQueueCreate(1,sizeof(char));
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	2001      	movs	r0, #1
 80021f4:	f009 f916 	bl	800b424 <xQueueGenericCreate>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a06      	ldr	r2, [pc, #24]	; (8002214 <Shell_Init+0x54>)
 80021fc:	6013      	str	r3, [r2, #0]
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	0800e268 	.word	0x0800e268
 800220c:	20000000 	.word	0x20000000
 8002210:	0800215d 	.word	0x0800215d
 8002214:	20004c84 	.word	0x20004c84

08002218 <Shell_Add>:

int Shell_Add(char c, int (* pfunc)(int argc, char ** argv), char * description)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	73fb      	strb	r3, [r7, #15]
	if (Shell_Func_List_Size < _SHELL_FUNC_LIST_MAX_SIZE)
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <Shell_Add+0x74>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b3f      	cmp	r3, #63	; 0x3f
 800222c:	dc26      	bgt.n	800227c <Shell_Add+0x64>
	{
		Shell_Func_List[Shell_Func_List_Size].c = c;
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <Shell_Add+0x74>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4917      	ldr	r1, [pc, #92]	; (8002290 <Shell_Add+0x78>)
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	701a      	strb	r2, [r3, #0]
		Shell_Func_List[Shell_Func_List_Size].func = pfunc;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <Shell_Add+0x74>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4912      	ldr	r1, [pc, #72]	; (8002290 <Shell_Add+0x78>)
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3304      	adds	r3, #4
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	601a      	str	r2, [r3, #0]
		Shell_Func_List[Shell_Func_List_Size].description = description;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <Shell_Add+0x74>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <Shell_Add+0x78>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3308      	adds	r3, #8
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
		Shell_Func_List_Size++;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <Shell_Add+0x74>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <Shell_Add+0x74>)
 8002276:	6013      	str	r3, [r2, #0]
		return 0;
 8002278:	2300      	movs	r3, #0
 800227a:	e001      	b.n	8002280 <Shell_Add+0x68>
	}

	return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000624 	.word	0x20000624
 8002290:	20000628 	.word	0x20000628

08002294 <Shell_Exec>:

int Shell_Exec(char c, char * buf)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	; 0x38
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
	int i;
	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < Shell_Func_List_Size ; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
 80022a4:	e040      	b.n	8002328 <Shell_Exec+0x94>
	{
		if (Shell_Func_List[i].c == c)
 80022a6:	4928      	ldr	r1, [pc, #160]	; (8002348 <Shell_Exec+0xb4>)
 80022a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d132      	bne.n	8002322 <Shell_Exec+0x8e>
		{
			argc = 1;
 80022bc:	2301      	movs	r3, #1
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
			argv[0] = buf;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c8:	e014      	b.n	80022f4 <Shell_Exec+0x60>
			{
				if(*p == ' ')
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d10d      	bne.n	80022ee <Shell_Exec+0x5a>
				{
					*p = '\0';
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	633a      	str	r2, [r7, #48]	; 0x30
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	3201      	adds	r2, #1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e8:	440b      	add	r3, r1
 80022ea:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++)
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	3301      	adds	r3, #1
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <Shell_Exec+0x6e>
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	2b07      	cmp	r3, #7
 8002300:	dde3      	ble.n	80022ca <Shell_Exec+0x36>
				}
			}

			return Shell_Func_List[i].func(argc, argv);
 8002302:	4911      	ldr	r1, [pc, #68]	; (8002348 <Shell_Exec+0xb4>)
 8002304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f107 020c 	add.w	r2, r7, #12
 8002318:	4611      	mov	r1, r2
 800231a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800231c:	4798      	blx	r3
 800231e:	4603      	mov	r3, r0
 8002320:	e00e      	b.n	8002340 <Shell_Exec+0xac>
	for(i = 0 ; i < Shell_Func_List_Size ; i++)
 8002322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002324:	3301      	adds	r3, #1
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <Shell_Exec+0xb8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800232e:	429a      	cmp	r2, r3
 8002330:	dbb9      	blt.n	80022a6 <Shell_Exec+0x12>
		}
	}
	printf("%c: no such command\r\n", c);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <Shell_Exec+0xbc>)
 8002338:	f00a fe3c 	bl	800cfb4 <iprintf>
	return -1;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002340:	4618      	mov	r0, r3
 8002342:	3738      	adds	r7, #56	; 0x38
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000628 	.word	0x20000628
 800234c:	20000624 	.word	0x20000624
 8002350:	0800e284 	.word	0x0800e284

08002354 <Shell_Run>:
static char backspace[] = "\b \b";
static char prompt[] = "> ";


int Shell_Run()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
	int reading = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]

	while (1)
	{
		Shell_Uart_Write(prompt, 2);
 8002362:	2102      	movs	r1, #2
 8002364:	4825      	ldr	r0, [pc, #148]	; (80023fc <Shell_Run+0xa8>)
 8002366:	f7ff fee5 	bl	8002134 <Shell_Uart_Write>
		reading = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]

		while(reading)
 800236e:	e03b      	b.n	80023e8 <Shell_Run+0x94>
		{
			//char c = Shell_Uart_Read();
			char c = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	71fb      	strb	r3, [r7, #7]
			xQueueReceive(Shell_Queue, &c, portMAX_DELAY);
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <Shell_Run+0xac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1df9      	adds	r1, r7, #7
 800237a:	f04f 32ff 	mov.w	r2, #4294967295
 800237e:	4618      	mov	r0, r3
 8002380:	f009 f8aa 	bl	800b4d8 <xQueueReceive>
			//Shell_Uart_Write(&c,1);

			switch (c)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d013      	beq.n	80023b2 <Shell_Run+0x5e>
 800238a:	2b0d      	cmp	r3, #13
 800238c:	d11c      	bne.n	80023c8 <Shell_Run+0x74>
			{

			case '\r': //process RETURN key
				//case '\n':
				printf("\r\n");    //finish line
 800238e:	481d      	ldr	r0, [pc, #116]	; (8002404 <Shell_Run+0xb0>)
 8002390:	f00a fe96 	bl	800d0c0 <puts>
				buf[pos++] = 0;     //to use cprintf...
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <Shell_Run+0xb4>)
 800239c:	2100      	movs	r1, #0
 800239e:	54d1      	strb	r1, [r2, r3]
				printf(":%s\r\n", buf);
 80023a0:	4919      	ldr	r1, [pc, #100]	; (8002408 <Shell_Run+0xb4>)
 80023a2:	481a      	ldr	r0, [pc, #104]	; (800240c <Shell_Run+0xb8>)
 80023a4:	f00a fe06 	bl	800cfb4 <iprintf>
				reading = 0;        //exit read loop
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
				break;
 80023b0:	e01a      	b.n	80023e8 <Shell_Run+0x94>

			case '\b': //backspace
				if (pos > 0)       //is there a char to delete ?
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	dd16      	ble.n	80023e6 <Shell_Run+0x92>
				{
					pos--;          //remove it in buffer
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
					Shell_Uart_Write(backspace, 3);
 80023be:	2103      	movs	r1, #3
 80023c0:	4813      	ldr	r0, [pc, #76]	; (8002410 <Shell_Run+0xbc>)
 80023c2:	f7ff feb7 	bl	8002134 <Shell_Uart_Write>
				}
				break;
 80023c6:	e00e      	b.n	80023e6 <Shell_Run+0x92>


			default: //other characters
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b27      	cmp	r3, #39	; 0x27
 80023cc:	dc0c      	bgt.n	80023e8 <Shell_Run+0x94>
				{
					Shell_Uart_Write(&c, 1);
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff feae 	bl	8002134 <Shell_Uart_Write>
					buf[pos++] = c; //store
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	60ba      	str	r2, [r7, #8]
 80023de:	79f9      	ldrb	r1, [r7, #7]
 80023e0:	4a09      	ldr	r2, [pc, #36]	; (8002408 <Shell_Run+0xb4>)
 80023e2:	54d1      	strb	r1, [r2, r3]
 80023e4:	e000      	b.n	80023e8 <Shell_Run+0x94>
				break;
 80023e6:	bf00      	nop
		while(reading)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1c0      	bne.n	8002370 <Shell_Run+0x1c>
				}
			}
		}
		Shell_Exec(buf[0], buf);
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <Shell_Run+0xb4>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4905      	ldr	r1, [pc, #20]	; (8002408 <Shell_Run+0xb4>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff4d 	bl	8002294 <Shell_Exec>
		Shell_Uart_Write(prompt, 2);
 80023fa:	e7b2      	b.n	8002362 <Shell_Run+0xe>
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	20004c84 	.word	0x20004c84
 8002404:	0800e29c 	.word	0x0800e29c
 8002408:	20000928 	.word	0x20000928
 800240c:	0800e2a0 	.word	0x0800e2a0
 8002410:	20000008 	.word	0x20000008

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_MspInit+0x54>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_MspInit+0x54>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_MspInit+0x54>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_MspInit+0x54>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_MspInit+0x54>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_MspInit+0x54>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	210f      	movs	r1, #15
 8002456:	f06f 0001 	mvn.w	r0, #1
 800245a:	f000 fe57 	bl	800310c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	201a      	movs	r0, #26
 8002482:	f000 fe43 	bl	800310c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002486:	201a      	movs	r0, #26
 8002488:	f000 fe5c 	bl	8003144 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_InitTick+0xa0>)
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_InitTick+0xa0>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249a:	6453      	str	r3, [r2, #68]	; 0x44
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_InitTick+0xa0>)
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024a8:	f107 0210 	add.w	r2, r7, #16
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 ff0c 	bl	80052d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024b8:	f002 fef6 	bl	80052a8 <HAL_RCC_GetPCLK2Freq>
 80024bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <HAL_InitTick+0xa4>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	3b01      	subs	r3, #1
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_InitTick+0xa8>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_InitTick+0xac>)
 80024d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_InitTick+0xa8>)
 80024d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_InitTick+0xa8>)
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_InitTick+0xa8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_InitTick+0xa8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80024ec:	4809      	ldr	r0, [pc, #36]	; (8002514 <HAL_InitTick+0xa8>)
 80024ee:	f002 ff21 	bl	8005334 <HAL_TIM_Base_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <HAL_InitTick+0xa8>)
 80024fa:	f002 ff75 	bl	80053e8 <HAL_TIM_Base_Start_IT>
 80024fe:	4603      	mov	r3, r0
 8002500:	e000      	b.n	8002504 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3730      	adds	r7, #48	; 0x30
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	431bde83 	.word	0x431bde83
 8002514:	20004c88 	.word	0x20004c88
 8002518:	40014800 	.word	0x40014800

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <NMI_Handler+0x4>

08002522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <MemManage_Handler+0x4>

0800252e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <UsageFault_Handler+0x4>

0800253a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800254c:	2001      	movs	r0, #1
 800254e:	f001 fa9d 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}

08002556 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800255a:	2002      	movs	r0, #2
 800255c:	f001 fa96 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800256a:	f003 f909 	bl	8005780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20004c88 	.word	0x20004c88

08002578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM3_IRQHandler+0x10>)
 800257e:	f003 f8ff 	bl	8005780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20004cd0 	.word	0x20004cd0

0800258c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002594:	f001 fa7a 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800259c:	f001 fa76 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <DMA2_Stream0_IRQHandler+0x10>)
 80025aa:	f000 fe95 	bl	80032d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20004bcc 	.word	0x20004bcc

080025b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e00a      	b.n	80025e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ca:	f3af 8000 	nop.w
 80025ce:	4601      	mov	r1, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	60ba      	str	r2, [r7, #8]
 80025d6:	b2ca      	uxtb	r2, r1
 80025d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbf0      	blt.n	80025ca <_read+0x12>
	}

return len;
 80025e8:	687b      	ldr	r3, [r7, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e009      	b.n	8002618 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fd7f 	bl	8002110 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf1      	blt.n	8002604 <_write+0x12>
	}
	return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_close>:

int _close(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
	return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002652:	605a      	str	r2, [r3, #4]
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_isatty>:

int _isatty(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f00a fae2 	bl	800cc8c <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20020000 	.word	0x20020000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20000950 	.word	0x20000950
 80026fc:	20004db0 	.word	0x20004db0

08002700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <MX_TIM3_Init+0xa0>)
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <MX_TIM3_Init+0xa4>)
 8002744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_TIM3_Init+0xa0>)
 8002748:	224f      	movs	r2, #79	; 0x4f
 800274a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_TIM3_Init+0xa0>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_TIM3_Init+0xa0>)
 8002754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_TIM3_Init+0xa0>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_TIM3_Init+0xa0>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002766:	4817      	ldr	r0, [pc, #92]	; (80027c4 <MX_TIM3_Init+0xa0>)
 8002768:	f002 fea0 	bl	80054ac <HAL_TIM_IC_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002772:	f7ff fcc7 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	480f      	ldr	r0, [pc, #60]	; (80027c4 <MX_TIM3_Init+0xa0>)
 8002786:	f003 fbc5 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002790:	f7ff fcb8 	bl	8002104 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002794:	2300      	movs	r3, #0
 8002796:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002798:	2301      	movs	r3, #1
 800279a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_TIM3_Init+0xa0>)
 80027ac:	f003 f8f0 	bl	8005990 <HAL_TIM_IC_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80027b6:	f7ff fca5 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20004cd0 	.word	0x20004cd0
 80027c8:	40000400 	.word	0x40000400

080027cc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_TIM_IC_MspInit+0x94>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d133      	bne.n	8002856 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_TIM_IC_MspInit+0x98>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_TIM_IC_MspInit+0x98>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_TIM_IC_MspInit+0x98>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_TIM_IC_MspInit+0x98>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_TIM_IC_MspInit+0x98>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_TIM_IC_MspInit+0x98>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002826:	2310      	movs	r3, #16
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002836:	2302      	movs	r3, #2
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4809      	ldr	r0, [pc, #36]	; (8002868 <HAL_TIM_IC_MspInit+0x9c>)
 8002842:	f000 ff85 	bl	8003750 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2105      	movs	r1, #5
 800284a:	201d      	movs	r0, #29
 800284c:	f000 fc5e 	bl	800310c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002850:	201d      	movs	r0, #29
 8002852:	f000 fc77 	bl	8003144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002856:	bf00      	nop
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40000400 	.word	0x40000400
 8002864:	40023800 	.word	0x40023800
 8002868:	40020400 	.word	0x40020400

0800286c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <MX_USART2_UART_Init+0x50>)
 8002874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800287c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_USART2_UART_Init+0x4c>)
 80028a4:	f003 fbb8 	bl	8006018 <HAL_UART_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ae:	f7ff fc29 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20004d18 	.word	0x20004d18
 80028bc:	40004400 	.word	0x40004400

080028c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_UART_MspInit+0x84>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d12b      	bne.n	800293a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_UART_MspInit+0x88>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_UART_MspInit+0x88>)
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_UART_MspInit+0x88>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_UART_MspInit+0x88>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <HAL_UART_MspInit+0x88>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_UART_MspInit+0x88>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800291a:	230c      	movs	r3, #12
 800291c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800292a:	2307      	movs	r3, #7
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_UART_MspInit+0x8c>)
 8002936:	f000 ff0b 	bl	8003750 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40004400 	.word	0x40004400
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000

08002950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002988 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002956:	490e      	ldr	r1, [pc, #56]	; (8002990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800296c:	4c0b      	ldr	r4, [pc, #44]	; (800299c <LoopFillZerobss+0x26>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800297a:	f7ff fec1 	bl	8002700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297e:	f00a fa81 	bl	800ce84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002982:	f7ff fa85 	bl	8001e90 <main>
  bx  lr    
 8002986:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800298c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002990:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 8002994:	0800e378 	.word	0x0800e378
  ldr r2, =_sbss
 8002998:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 800299c:	20004db0 	.word	0x20004db0

080029a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a0:	e7fe      	b.n	80029a0 <ADC_IRQHandler>
	...

080029a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_Init+0x40>)
 80029ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_Init+0x40>)
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_Init+0x40>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029cc:	2003      	movs	r0, #3
 80029ce:	f000 fb92 	bl	80030f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d2:	200f      	movs	r0, #15
 80029d4:	f7ff fd4a 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d8:	f7ff fd1c 	bl	8002414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023c00 	.word	0x40023c00

080029e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_IncTick+0x20>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_IncTick+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <HAL_IncTick+0x24>)
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000018 	.word	0x20000018
 8002a0c:	20004d5c 	.word	0x20004d5c

08002a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_GetTick+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20004d5c 	.word	0x20004d5c

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff ffee 	bl	8002a10 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d005      	beq.n	8002a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_Delay+0x44>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a4e:	bf00      	nop
 8002a50:	f7ff ffde 	bl	8002a10 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8f7      	bhi.n	8002a50 <HAL_Delay+0x28>
  {
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000018 	.word	0x20000018

08002a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e033      	b.n	8002aee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fe10 	bl	80016b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ab6:	f023 0302 	bic.w	r3, r3, #2
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f94a 	bl	8002d5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ade:	e001      	b.n	8002ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1c>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e113      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x244>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	d925      	bls.n	8002b70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68d9      	ldr	r1, [r3, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	3b1e      	subs	r3, #30
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43da      	mvns	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	400a      	ands	r2, r1
 8002b48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68d9      	ldr	r1, [r3, #12]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4403      	add	r3, r0
 8002b62:	3b1e      	subs	r3, #30
 8002b64:	409a      	lsls	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	e022      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	2207      	movs	r2, #7
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	400a      	ands	r2, r1
 8002b92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6919      	ldr	r1, [r3, #16]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4403      	add	r3, r0
 8002bac:	409a      	lsls	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d824      	bhi.n	8002c08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b05      	subs	r3, #5
 8002bd0:	221f      	movs	r2, #31
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	400a      	ands	r2, r1
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b05      	subs	r3, #5
 8002bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34
 8002c06:	e04c      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d824      	bhi.n	8002c5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b23      	subs	r3, #35	; 0x23
 8002c22:	221f      	movs	r2, #31
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	400a      	ands	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b23      	subs	r3, #35	; 0x23
 8002c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
 8002c58:	e023      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b41      	subs	r3, #65	; 0x41
 8002c6c:	221f      	movs	r2, #31
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	400a      	ands	r2, r1
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	3b41      	subs	r3, #65	; 0x41
 8002c96:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_ADC_ConfigChannel+0x250>)
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <HAL_ADC_ConfigChannel+0x254>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10f      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1d8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b12      	cmp	r3, #18
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <HAL_ADC_ConfigChannel+0x254>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d12b      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x23a>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_ADC_ConfigChannel+0x258>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <HAL_ADC_ConfigChannel+0x1f4>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b11      	cmp	r3, #17
 8002cea:	d122      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <HAL_ADC_ConfigChannel+0x258>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_ADC_ConfigChannel+0x25c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_ADC_ConfigChannel+0x260>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	0c9a      	lsrs	r2, r3, #18
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d24:	e002      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f9      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40012300 	.word	0x40012300
 8002d4c:	40012000 	.word	0x40012000
 8002d50:	10000012 	.word	0x10000012
 8002d54:	20000010 	.word	0x20000010
 8002d58:	431bde83 	.word	0x431bde83

08002d5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d64:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <ADC_Init+0x1f0>)
 8002d66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	021a      	lsls	r2, r3, #8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <ADC_Init+0x1f4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6899      	ldr	r1, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e00f      	b.n	8002e5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0202 	bic.w	r2, r2, #2
 8002e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7e1b      	ldrb	r3, [r3, #24]
 8002e74:	005a      	lsls	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ea6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	035a      	lsls	r2, r3, #13
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e007      	b.n	8002ed0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ece:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	051a      	lsls	r2, r3, #20
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f12:	025a      	lsls	r2, r3, #9
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6899      	ldr	r1, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	029a      	lsls	r2, r3, #10
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40012300 	.word	0x40012300
 8002f50:	0f000001 	.word	0x0f000001

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	2b00      	cmp	r3, #0
 8003004:	db12      	blt.n	800302c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	490a      	ldr	r1, [pc, #40]	; (8003038 <__NVIC_DisableIRQ+0x44>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2001      	movs	r0, #1
 8003016:	fa00 f202 	lsl.w	r2, r0, r2
 800301a:	3320      	adds	r3, #32
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003020:	f3bf 8f4f 	dsb	sy
}
 8003024:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003026:	f3bf 8f6f 	isb	sy
}
 800302a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ff28 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800311e:	f7ff ff3d 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 8003122:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	6978      	ldr	r0, [r7, #20]
 800312a:	f7ff ffb1 	bl	8003090 <NVIC_EncodePriority>
 800312e:	4602      	mov	r2, r0
 8003130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff80 	bl	800303c <__NVIC_SetPriority>
}
 800313c:	bf00      	nop
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff30 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff40 	bl	8002ff4 <__NVIC_DisableIRQ>
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff fc42 	bl	8002a10 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e099      	b.n	80032cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b8:	e00f      	b.n	80031da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ba:	f7ff fc29 	bl	8002a10 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d908      	bls.n	80031da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e078      	b.n	80032cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e8      	bne.n	80031ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <HAL_DMA_Init+0x158>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b04      	cmp	r3, #4
 8003232:	d107      	bne.n	8003244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4313      	orrs	r3, r2
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b04      	cmp	r3, #4
 800326c:	d117      	bne.n	800329e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9e9 	bl	8003658 <DMA_CheckFifoParam>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800329a:	2301      	movs	r3, #1
 800329c:	e016      	b.n	80032cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9a0 	bl	80035ec <DMA_CalcBaseAndBitshift>
 80032ac:	4603      	mov	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	223f      	movs	r2, #63	; 0x3f
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	f010803f 	.word	0xf010803f

080032d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032e4:	4b92      	ldr	r3, [pc, #584]	; (8003530 <HAL_DMA_IRQHandler+0x258>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a92      	ldr	r2, [pc, #584]	; (8003534 <HAL_DMA_IRQHandler+0x25c>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2208      	movs	r2, #8
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01a      	beq.n	8003344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0204 	bic.w	r2, r2, #4
 800332a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	2208      	movs	r2, #8
 8003332:	409a      	lsls	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2201      	movs	r2, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	2201      	movs	r2, #1
 8003368:	409a      	lsls	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	2204      	movs	r2, #4
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d012      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2204      	movs	r2, #4
 800339e:	409a      	lsls	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2210      	movs	r2, #16
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d043      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03c      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2210      	movs	r2, #16
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d018      	beq.n	800341a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d024      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
 8003406:	e01f      	b.n	8003448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
 8003418:	e016      	b.n	8003448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0208 	bic.w	r2, r2, #8
 8003436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2220      	movs	r2, #32
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808e 	beq.w	8003576 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8086 	beq.w	8003576 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2220      	movs	r2, #32
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b05      	cmp	r3, #5
 8003480:	d136      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0216 	bic.w	r2, r2, #22
 8003490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_DMA_IRQHandler+0x1da>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0208 	bic.w	r2, r2, #8
 80034c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	223f      	movs	r2, #63	; 0x3f
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07d      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
        }
        return;
 80034ee:	e078      	b.n	80035e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01c      	beq.n	8003538 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d108      	bne.n	800351e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	2b00      	cmp	r3, #0
 8003512:	d030      	beq.n	8003576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
 800351c:	e02b      	b.n	8003576 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d027      	beq.n	8003576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
 800352e:	e022      	b.n	8003576 <HAL_DMA_IRQHandler+0x29e>
 8003530:	20000010 	.word	0x20000010
 8003534:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0210 	bic.w	r2, r2, #16
 8003554:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	2b00      	cmp	r3, #0
 800357c:	d032      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2205      	movs	r2, #5
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d307      	bcc.n	80035be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f2      	bne.n	80035a2 <HAL_DMA_IRQHandler+0x2ca>
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035e2:	bf00      	nop
    }
  }
}
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop

080035ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3b10      	subs	r3, #16
 80035fc:	4a14      	ldr	r2, [pc, #80]	; (8003650 <DMA_CalcBaseAndBitshift+0x64>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <DMA_CalcBaseAndBitshift+0x68>)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d909      	bls.n	800362e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	659a      	str	r2, [r3, #88]	; 0x58
 800362c:	e007      	b.n	800363e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	aaaaaaab 	.word	0xaaaaaaab
 8003654:	0800e2c8 	.word	0x0800e2c8

08003658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11f      	bne.n	80036b2 <DMA_CheckFifoParam+0x5a>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d856      	bhi.n	8003726 <DMA_CheckFifoParam+0xce>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <DMA_CheckFifoParam+0x28>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	08003691 	.word	0x08003691
 8003684:	080036a3 	.word	0x080036a3
 8003688:	08003691 	.word	0x08003691
 800368c:	08003727 	.word	0x08003727
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d046      	beq.n	800372a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a0:	e043      	b.n	800372a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036aa:	d140      	bne.n	800372e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b0:	e03d      	b.n	800372e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ba:	d121      	bne.n	8003700 <DMA_CheckFifoParam+0xa8>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d837      	bhi.n	8003732 <DMA_CheckFifoParam+0xda>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <DMA_CheckFifoParam+0x70>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036df 	.word	0x080036df
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	080036f1 	.word	0x080036f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e030      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d025      	beq.n	8003736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ee:	e022      	b.n	8003736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f8:	d11f      	bne.n	800373a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036fe:	e01c      	b.n	800373a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d903      	bls.n	800370e <DMA_CheckFifoParam+0xb6>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d003      	beq.n	8003714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800370c:	e018      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      break;
 8003712:	e015      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e00b      	b.n	800373e <DMA_CheckFifoParam+0xe6>
      break;
 8003726:	bf00      	nop
 8003728:	e00a      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e008      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e006      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e004      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;   
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
    }
  } 
  
  return status; 
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e159      	b.n	8003a20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	f040 8148 	bne.w	8003a1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d005      	beq.n	80037a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d130      	bne.n	8003804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d8:	2201      	movs	r2, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 0201 	and.w	r2, r3, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b03      	cmp	r3, #3
 800380e:	d017      	beq.n	8003840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d123      	bne.n	8003894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	08da      	lsrs	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3208      	adds	r2, #8
 8003854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	08da      	lsrs	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3208      	adds	r2, #8
 800388e:	69b9      	ldr	r1, [r7, #24]
 8003890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0203 	and.w	r2, r3, #3
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a2 	beq.w	8003a1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b57      	ldr	r3, [pc, #348]	; (8003a38 <HAL_GPIO_Init+0x2e8>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	4a56      	ldr	r2, [pc, #344]	; (8003a38 <HAL_GPIO_Init+0x2e8>)
 80038e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e4:	6453      	str	r3, [r2, #68]	; 0x44
 80038e6:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <HAL_GPIO_Init+0x2e8>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f2:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a49      	ldr	r2, [pc, #292]	; (8003a40 <HAL_GPIO_Init+0x2f0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d019      	beq.n	8003952 <HAL_GPIO_Init+0x202>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a48      	ldr	r2, [pc, #288]	; (8003a44 <HAL_GPIO_Init+0x2f4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_GPIO_Init+0x1fe>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a47      	ldr	r2, [pc, #284]	; (8003a48 <HAL_GPIO_Init+0x2f8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00d      	beq.n	800394a <HAL_GPIO_Init+0x1fa>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <HAL_GPIO_Init+0x2fc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <HAL_GPIO_Init+0x1f6>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a45      	ldr	r2, [pc, #276]	; (8003a50 <HAL_GPIO_Init+0x300>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_GPIO_Init+0x1f2>
 800393e:	2304      	movs	r3, #4
 8003940:	e008      	b.n	8003954 <HAL_GPIO_Init+0x204>
 8003942:	2307      	movs	r3, #7
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x204>
 8003946:	2303      	movs	r3, #3
 8003948:	e004      	b.n	8003954 <HAL_GPIO_Init+0x204>
 800394a:	2302      	movs	r3, #2
 800394c:	e002      	b.n	8003954 <HAL_GPIO_Init+0x204>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_GPIO_Init+0x204>
 8003952:	2300      	movs	r3, #0
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	f002 0203 	and.w	r2, r2, #3
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	4093      	lsls	r3, r2
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003964:	4935      	ldr	r1, [pc, #212]	; (8003a3c <HAL_GPIO_Init+0x2ec>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003972:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <HAL_GPIO_Init+0x304>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003996:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <HAL_GPIO_Init+0x304>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_GPIO_Init+0x304>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <HAL_GPIO_Init+0x304>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c6:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_GPIO_Init+0x304>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ea:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_GPIO_Init+0x304>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_GPIO_Init+0x304>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_GPIO_Init+0x304>)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	f67f aea2 	bls.w	800376c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40013c00 	.word	0x40013c00

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd fd34 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013c00 	.word	0x40013c00

08003abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e12b      	b.n	8003d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd ffba 	bl	8001a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b20:	f001 fbae 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a81      	ldr	r2, [pc, #516]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d807      	bhi.n	8003b40 <HAL_I2C_Init+0x84>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a80      	ldr	r2, [pc, #512]	; (8003d34 <HAL_I2C_Init+0x278>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e006      	b.n	8003b4e <HAL_I2C_Init+0x92>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a7d      	ldr	r2, [pc, #500]	; (8003d38 <HAL_I2C_Init+0x27c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0e7      	b.n	8003d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a78      	ldr	r2, [pc, #480]	; (8003d3c <HAL_I2C_Init+0x280>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a6a      	ldr	r2, [pc, #424]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <HAL_I2C_Init+0xd4>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e009      	b.n	8003ba4 <HAL_I2C_Init+0xe8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	4a69      	ldr	r2, [pc, #420]	; (8003d40 <HAL_I2C_Init+0x284>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	495c      	ldr	r1, [pc, #368]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d819      	bhi.n	8003bf8 <HAL_I2C_Init+0x13c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e59      	subs	r1, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bd8:	400b      	ands	r3, r1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_I2C_Init+0x138>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e59      	subs	r1, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf2:	e051      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e04f      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <HAL_I2C_Init+0x168>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e58      	subs	r0, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e012      	b.n	8003c4a <HAL_I2C_Init+0x18e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Init+0x196>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e022      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <HAL_I2C_Init+0x1bc>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1e58      	subs	r0, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	440b      	add	r3, r1
 8003c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	e00f      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	6809      	ldr	r1, [r1, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6911      	ldr	r1, [r2, #16]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	000186a0 	.word	0x000186a0
 8003d34:	001e847f 	.word	0x001e847f
 8003d38:	003d08ff 	.word	0x003d08ff
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	10624dd3 	.word	0x10624dd3

08003d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	460b      	mov	r3, r1
 8003d52:	817b      	strh	r3, [r7, #10]
 8003d54:	4613      	mov	r3, r2
 8003d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe fe5a 	bl	8002a10 <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 80e0 	bne.w	8003f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2319      	movs	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	4970      	ldr	r1, [pc, #448]	; (8003f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fc58 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0d3      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2C_Master_Transmit+0x50>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e0cc      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d007      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2221      	movs	r2, #33	; 0x21
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a50      	ldr	r2, [pc, #320]	; (8003f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fac2 	bl	800438c <I2C_MasterRequestWrite>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e08d      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e28:	e066      	b.n	8003ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	6a39      	ldr	r1, [r7, #32]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fcd2 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d107      	bne.n	8003e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06b      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <HAL_I2C_Master_Transmit+0x188>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d017      	beq.n	8003ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	6a39      	ldr	r1, [r7, #32]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fcc2 	bl	800485a <I2C_WaitOnBTFFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d107      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01a      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d194      	bne.n	8003e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	00100002 	.word	0x00100002
 8003f3c:	ffff0000 	.word	0xffff0000

08003f40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	817b      	strh	r3, [r7, #10]
 8003f50:	4613      	mov	r3, r2
 8003f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7fe fd5c 	bl	8002a10 <HAL_GetTick>
 8003f58:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	f040 820b 	bne.w	800437e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2319      	movs	r3, #25
 8003f6e:	2201      	movs	r2, #1
 8003f70:	497c      	ldr	r1, [pc, #496]	; (8004164 <HAL_I2C_Master_Receive+0x224>)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 fb5a 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e1fe      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2C_Master_Receive+0x50>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e1f7      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d007      	beq.n	8003fb6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2222      	movs	r2, #34	; 0x22
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	893a      	ldrh	r2, [r7, #8]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a5c      	ldr	r2, [pc, #368]	; (8004168 <HAL_I2C_Master_Receive+0x228>)
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ff8:	8979      	ldrh	r1, [r7, #10]
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fa46 	bl	8004490 <I2C_MasterRequestRead>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e1b8      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d113      	bne.n	800403e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e18c      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	2b01      	cmp	r3, #1
 8004044:	d11b      	bne.n	800407e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e16c      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	2b02      	cmp	r3, #2
 8004084:	d11b      	bne.n	80040be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004094:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	e14c      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040e4:	e138      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	f200 80f1 	bhi.w	80042d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d123      	bne.n	8004140 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fbed 	bl	80048dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e139      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800413e:	e10b      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	2b02      	cmp	r3, #2
 8004146:	d14e      	bne.n	80041e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	2200      	movs	r2, #0
 8004150:	4906      	ldr	r1, [pc, #24]	; (800416c <HAL_I2C_Master_Receive+0x22c>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fa6a 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e10e      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
 8004162:	bf00      	nop
 8004164:	00100002 	.word	0x00100002
 8004168:	ffff0000 	.word	0xffff0000
 800416c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e4:	e0b8      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	2200      	movs	r2, #0
 80041ee:	4966      	ldr	r1, [pc, #408]	; (8004388 <HAL_I2C_Master_Receive+0x448>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa1b 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0bf      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2200      	movs	r2, #0
 800424a:	494f      	ldr	r1, [pc, #316]	; (8004388 <HAL_I2C_Master_Receive+0x448>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f9ed 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e091      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d0:	e042      	b.n	8004358 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fb00 	bl	80048dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e04c      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b04      	cmp	r3, #4
 8004324:	d118      	bne.n	8004358 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f aec2 	bne.w	80040e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	; 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010004 	.word	0x00010004

0800438c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	460b      	mov	r3, r1
 800439a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d006      	beq.n	80043b6 <I2C_MasterRequestWrite+0x2a>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d003      	beq.n	80043b6 <I2C_MasterRequestWrite+0x2a>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b4:	d108      	bne.n	80043c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e00b      	b.n	80043e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b12      	cmp	r3, #18
 80043ce:	d107      	bne.n	80043e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f91d 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	d103      	bne.n	8004410 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e035      	b.n	8004480 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441c:	d108      	bne.n	8004430 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800442c:	611a      	str	r2, [r3, #16]
 800442e:	e01b      	b.n	8004468 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	11db      	asrs	r3, r3, #7
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0306 	and.w	r3, r3, #6
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f063 030f 	orn	r3, r3, #15
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	490e      	ldr	r1, [pc, #56]	; (8004488 <I2C_MasterRequestWrite+0xfc>)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f943 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e010      	b.n	8004480 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <I2C_MasterRequestWrite+0x100>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f933 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	00010008 	.word	0x00010008
 800448c:	00010002 	.word	0x00010002

08004490 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	460b      	mov	r3, r1
 800449e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d006      	beq.n	80044ca <I2C_MasterRequestRead+0x3a>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d003      	beq.n	80044ca <I2C_MasterRequestRead+0x3a>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c8:	d108      	bne.n	80044dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e00b      	b.n	80044f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	2b11      	cmp	r3, #17
 80044e2:	d107      	bne.n	80044f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f893 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451a:	d103      	bne.n	8004524 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e079      	b.n	800461c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004530:	d108      	bne.n	8004544 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]
 8004542:	e05f      	b.n	8004604 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004544:	897b      	ldrh	r3, [r7, #10]
 8004546:	11db      	asrs	r3, r3, #7
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 0306 	and.w	r3, r3, #6
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f063 030f 	orn	r3, r3, #15
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4930      	ldr	r1, [pc, #192]	; (8004624 <I2C_MasterRequestRead+0x194>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f8b9 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e054      	b.n	800461c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4929      	ldr	r1, [pc, #164]	; (8004628 <I2C_MasterRequestRead+0x198>)
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f8a9 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e044      	b.n	800461c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f831 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00d      	beq.n	80045ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045de:	d103      	bne.n	80045e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e017      	b.n	800461c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	11db      	asrs	r3, r3, #7
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0306 	and.w	r3, r3, #6
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f063 030e 	orn	r3, r3, #14
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4907      	ldr	r1, [pc, #28]	; (8004628 <I2C_MasterRequestRead+0x198>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f865 	bl	80046da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	00010008 	.word	0x00010008
 8004628:	00010002 	.word	0x00010002

0800462c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463c:	e025      	b.n	800468a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d021      	beq.n	800468a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe f9e3 	bl	8002a10 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e023      	b.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d10d      	bne.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	43da      	mvns	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	e00c      	b.n	80046ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	43da      	mvns	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b6      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e8:	e051      	b.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f8:	d123      	bne.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004712:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0204 	orr.w	r2, r3, #4
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e046      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d021      	beq.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fe f961 	bl	8002a10 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d116      	bne.n	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e020      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10c      	bne.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e00b      	b.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	43da      	mvns	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d18d      	bne.n	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e4:	e02d      	b.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8ce 	bl	8004988 <I2C_IsAcknowledgeFailed>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e02d      	b.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d021      	beq.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fe f907 	bl	8002a10 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e007      	b.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484c:	2b80      	cmp	r3, #128	; 0x80
 800484e:	d1ca      	bne.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004866:	e02d      	b.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f88d 	bl	8004988 <I2C_IsAcknowledgeFailed>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02d      	b.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d021      	beq.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fe f8c6 	bl	8002a10 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d116      	bne.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e007      	b.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d1ca      	bne.n	8004868 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e8:	e042      	b.n	8004970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d119      	bne.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0210 	mvn.w	r2, #16
 8004900:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e029      	b.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492c:	f7fe f870 	bl	8002a10 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	d302      	bcc.n	8004942 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e007      	b.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d1b5      	bne.n	80048ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	d11b      	bne.n	80049d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f043 0204 	orr.w	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e264      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d075      	beq.n	8004af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a06:	4ba3      	ldr	r3, [pc, #652]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d00c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d112      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1e:	4b9d      	ldr	r3, [pc, #628]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b99      	ldr	r3, [pc, #612]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x108>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e23f      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x74>
 8004a4e:	4b91      	ldr	r3, [pc, #580]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a90      	ldr	r2, [pc, #576]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x98>
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8a      	ldr	r2, [pc, #552]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a87      	ldr	r2, [pc, #540]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a80:	4b84      	ldr	r3, [pc, #528]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fd ffb6 	bl	8002a10 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fd ffb2 	bl	8002a10 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e204      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xc0>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd ffa2 	bl	8002a10 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd ff9e 	bl	8002a10 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e1f0      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xe8>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d063      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004afe:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d11c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b16:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b22:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_RCC_OscConfig+0x152>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e1c4      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3a:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4952      	ldr	r1, [pc, #328]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	e03a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_RCC_OscConfig+0x2b0>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd ff57 	bl	8002a10 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fd ff53 	bl	8002a10 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1a5      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	4b46      	ldr	r3, [pc, #280]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4940      	ldr	r1, [pc, #256]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <HAL_RCC_OscConfig+0x2b0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd ff36 	bl	8002a10 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fd ff32 	bl	8002a10 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e184      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d030      	beq.n	8004c34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b30      	ldr	r3, [pc, #192]	; (8004c9c <HAL_RCC_OscConfig+0x2b4>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fd ff16 	bl	8002a10 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fd ff12 	bl	8002a10 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e164      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x200>
 8004c06:	e015      	b.n	8004c34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCC_OscConfig+0x2b4>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7fd feff 	bl	8002a10 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fd fefb 	bl	8002a10 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e14d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80a0 	beq.w	8004d82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10f      	bne.n	8004c72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_OscConfig+0x2b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d121      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <HAL_RCC_OscConfig+0x2b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <HAL_RCC_OscConfig+0x2b8>)
 8004c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8a:	f7fd fec1 	bl	8002a10 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	e011      	b.n	8004cb6 <HAL_RCC_OscConfig+0x2ce>
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800
 8004c98:	42470000 	.word	0x42470000
 8004c9c:	42470e80 	.word	0x42470e80
 8004ca0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd feb4 	bl	8002a10 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e106      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	; (8004ecc <HAL_RCC_OscConfig+0x4e4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x2f0>
 8004cca:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a80      	ldr	r2, [pc, #512]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd6:	e01c      	b.n	8004d12 <HAL_RCC_OscConfig+0x32a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_OscConfig+0x312>
 8004ce0:	4b7b      	ldr	r3, [pc, #492]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a7a      	ldr	r2, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	4b78      	ldr	r3, [pc, #480]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a77      	ldr	r2, [pc, #476]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCC_OscConfig+0x32a>
 8004cfa:	4b75      	ldr	r3, [pc, #468]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	4a74      	ldr	r2, [pc, #464]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	6713      	str	r3, [r2, #112]	; 0x70
 8004d06:	4b72      	ldr	r3, [pc, #456]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	4a71      	ldr	r2, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d015      	beq.n	8004d46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fd fe79 	bl	8002a10 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d22:	f7fd fe75 	bl	8002a10 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e0c5      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ee      	beq.n	8004d22 <HAL_RCC_OscConfig+0x33a>
 8004d44:	e014      	b.n	8004d70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fd fe63 	bl	8002a10 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fd fe5f 	bl	8002a10 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0af      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	4b5a      	ldr	r3, [pc, #360]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ee      	bne.n	8004d4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d76:	4b56      	ldr	r3, [pc, #344]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	4a55      	ldr	r2, [pc, #340]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 809b 	beq.w	8004ec2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d05c      	beq.n	8004e52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d141      	bne.n	8004e24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da0:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <HAL_RCC_OscConfig+0x4ec>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fd fe33 	bl	8002a10 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dae:	f7fd fe2f 	bl	8002a10 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e081      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc0:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	019b      	lsls	r3, r3, #6
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	3b01      	subs	r3, #1
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	4937      	ldr	r1, [pc, #220]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df6:	4b37      	ldr	r3, [pc, #220]	; (8004ed4 <HAL_RCC_OscConfig+0x4ec>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fd fe08 	bl	8002a10 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fd fe04 	bl	8002a10 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e056      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x41c>
 8004e22:	e04e      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_RCC_OscConfig+0x4ec>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fd fdf1 	bl	8002a10 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd fded 	bl	8002a10 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e03f      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e44:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x44a>
 8004e50:	e037      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e032      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <HAL_RCC_OscConfig+0x4e8>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d028      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d121      	bne.n	8004ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d11a      	bne.n	8004ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e8e:	4013      	ands	r3, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d111      	bne.n	8004ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	42470060 	.word	0x42470060

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0cc      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d90c      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0b8      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f2c:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a58      	ldr	r2, [pc, #352]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a52      	ldr	r2, [pc, #328]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f50:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	494d      	ldr	r1, [pc, #308]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d044      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b47      	ldr	r3, [pc, #284]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa6:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e067      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb6:	4b37      	ldr	r3, [pc, #220]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4934      	ldr	r1, [pc, #208]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fd fd22 	bl	8002a10 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7fd fd1e 	bl	8002a10 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 020c 	and.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1eb      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20c      	bcs.n	8005020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e032      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4916      	ldr	r1, [pc, #88]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	490e      	ldr	r1, [pc, #56]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800505e:	f000 f821 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8005062:	4602      	mov	r2, r0
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	490a      	ldr	r1, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	5ccb      	ldrb	r3, [r1, r3]
 8005072:	fa22 f303 	lsr.w	r3, r2, r3
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fd f9f4 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00
 8005094:	40023800 	.word	0x40023800
 8005098:	0800e2b0 	.word	0x0800e2b0
 800509c:	20000010 	.word	0x20000010
 80050a0:	20000014 	.word	0x20000014

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050bc:	4b67      	ldr	r3, [pc, #412]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d00d      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x40>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	f200 80bd 	bhi.w	8005248 <HAL_RCC_GetSysClockFreq+0x1a4>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d003      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x3a>
 80050d6:	e0b7      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b61      	ldr	r3, [pc, #388]	; (8005260 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050da:	60bb      	str	r3, [r7, #8]
       break;
 80050dc:	e0b7      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050de:	4b61      	ldr	r3, [pc, #388]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050e0:	60bb      	str	r3, [r7, #8]
      break;
 80050e2:	e0b4      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e4:	4b5d      	ldr	r3, [pc, #372]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ee:	4b5b      	ldr	r3, [pc, #364]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04d      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b58      	ldr	r3, [pc, #352]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	461a      	mov	r2, r3
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800510a:	f04f 0100 	mov.w	r1, #0
 800510e:	ea02 0800 	and.w	r8, r2, r0
 8005112:	ea03 0901 	and.w	r9, r3, r1
 8005116:	4640      	mov	r0, r8
 8005118:	4649      	mov	r1, r9
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	014b      	lsls	r3, r1, #5
 8005124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005128:	0142      	lsls	r2, r0, #5
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	ebb0 0008 	subs.w	r0, r0, r8
 8005132:	eb61 0109 	sbc.w	r1, r1, r9
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	018b      	lsls	r3, r1, #6
 8005140:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005144:	0182      	lsls	r2, r0, #6
 8005146:	1a12      	subs	r2, r2, r0
 8005148:	eb63 0301 	sbc.w	r3, r3, r1
 800514c:	f04f 0000 	mov.w	r0, #0
 8005150:	f04f 0100 	mov.w	r1, #0
 8005154:	00d9      	lsls	r1, r3, #3
 8005156:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800515a:	00d0      	lsls	r0, r2, #3
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	eb12 0208 	adds.w	r2, r2, r8
 8005164:	eb43 0309 	adc.w	r3, r3, r9
 8005168:	f04f 0000 	mov.w	r0, #0
 800516c:	f04f 0100 	mov.w	r1, #0
 8005170:	0259      	lsls	r1, r3, #9
 8005172:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005176:	0250      	lsls	r0, r2, #9
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f7fb fcd0 	bl	8000b2c <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4613      	mov	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e04a      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005196:	4b31      	ldr	r3, [pc, #196]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	ea02 0400 	and.w	r4, r2, r0
 80051ae:	ea03 0501 	and.w	r5, r3, r1
 80051b2:	4620      	mov	r0, r4
 80051b4:	4629      	mov	r1, r5
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	014b      	lsls	r3, r1, #5
 80051c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051c4:	0142      	lsls	r2, r0, #5
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	1b00      	subs	r0, r0, r4
 80051cc:	eb61 0105 	sbc.w	r1, r1, r5
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	018b      	lsls	r3, r1, #6
 80051da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051de:	0182      	lsls	r2, r0, #6
 80051e0:	1a12      	subs	r2, r2, r0
 80051e2:	eb63 0301 	sbc.w	r3, r3, r1
 80051e6:	f04f 0000 	mov.w	r0, #0
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	00d9      	lsls	r1, r3, #3
 80051f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051f4:	00d0      	lsls	r0, r2, #3
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	1912      	adds	r2, r2, r4
 80051fc:	eb45 0303 	adc.w	r3, r5, r3
 8005200:	f04f 0000 	mov.w	r0, #0
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	0299      	lsls	r1, r3, #10
 800520a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800520e:	0290      	lsls	r0, r2, #10
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	461a      	mov	r2, r3
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f7fb fc84 	bl	8000b2c <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4613      	mov	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	3301      	adds	r3, #1
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	60bb      	str	r3, [r7, #8]
      break;
 8005246:	e002      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800524a:	60bb      	str	r3, [r7, #8]
      break;
 800524c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800524e:	68bb      	ldr	r3, [r7, #8]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	00f42400 	.word	0x00f42400
 8005264:	007a1200 	.word	0x007a1200

08005268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <HAL_RCC_GetHCLKFreq+0x14>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000010 	.word	0x20000010

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005284:	f7ff fff0 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	0a9b      	lsrs	r3, r3, #10
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4903      	ldr	r1, [pc, #12]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800529c:	4618      	mov	r0, r3
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40023800 	.word	0x40023800
 80052a4:	0800e2c0 	.word	0x0800e2c0

080052a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052ac:	f7ff ffdc 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0b5b      	lsrs	r3, r3, #13
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4903      	ldr	r1, [pc, #12]	; (80052cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40023800 	.word	0x40023800
 80052cc:	0800e2c0 	.word	0x0800e2c0

080052d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	220f      	movs	r2, #15
 80052de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0203 	and.w	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_GetClockConfig+0x5c>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <HAL_RCC_GetClockConfig+0x60>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0207 	and.w	r2, r3, #7
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800
 8005330:	40023c00 	.word	0x40023c00

08005334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e041      	b.n	80053ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f839 	bl	80053d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 fc0a 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d001      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e044      	b.n	800548a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_TIM_Base_Start_IT+0xb0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d018      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x6c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542a:	d013      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x6c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1a      	ldr	r2, [pc, #104]	; (800549c <HAL_TIM_Base_Start_IT+0xb4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00e      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x6c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d009      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x6c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_TIM_Base_Start_IT+0x6c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d111      	bne.n	8005478 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b06      	cmp	r3, #6
 8005464:	d010      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	e007      	b.n	8005488 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40014000 	.word	0x40014000

080054ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e041      	b.n	8005542 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd f97a 	bl	80027cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 fb4e 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0x1e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e013      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x46>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0x2e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e00b      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x46>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0x3e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e003      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x46>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_IC_Start_IT+0x58>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e013      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x80>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_IC_Start_IT+0x68>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e00b      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x80>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d104      	bne.n	80055c4 <HAL_TIM_IC_Start_IT+0x78>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e003      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d102      	bne.n	80055da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d4:	7b7b      	ldrb	r3, [r7, #13]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0c2      	b.n	8005764 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_IT+0xa2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ec:	e013      	b.n	8005616 <HAL_TIM_IC_Start_IT+0xca>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0xb2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055fc:	e00b      	b.n	8005616 <HAL_TIM_IC_Start_IT+0xca>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b08      	cmp	r3, #8
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0xc2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560c:	e003      	b.n	8005616 <HAL_TIM_IC_Start_IT+0xca>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <HAL_TIM_IC_Start_IT+0xda>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005624:	e013      	b.n	800564e <HAL_TIM_IC_Start_IT+0x102>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d104      	bne.n	8005636 <HAL_TIM_IC_Start_IT+0xea>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005634:	e00b      	b.n	800564e <HAL_TIM_IC_Start_IT+0x102>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d104      	bne.n	8005646 <HAL_TIM_IC_Start_IT+0xfa>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	e003      	b.n	800564e <HAL_TIM_IC_Start_IT+0x102>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d841      	bhi.n	80056d8 <HAL_TIM_IC_Start_IT+0x18c>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <HAL_TIM_IC_Start_IT+0x110>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005691 	.word	0x08005691
 8005660:	080056d9 	.word	0x080056d9
 8005664:	080056d9 	.word	0x080056d9
 8005668:	080056d9 	.word	0x080056d9
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056d9 	.word	0x080056d9
 8005674:	080056d9 	.word	0x080056d9
 8005678:	080056d9 	.word	0x080056d9
 800567c:	080056b5 	.word	0x080056b5
 8005680:	080056d9 	.word	0x080056d9
 8005684:	080056d9 	.word	0x080056d9
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080056c7 	.word	0x080056c7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0202 	orr.w	r2, r2, #2
 800569e:	60da      	str	r2, [r3, #12]
      break;
 80056a0:	e01d      	b.n	80056de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0204 	orr.w	r2, r2, #4
 80056b0:	60da      	str	r2, [r3, #12]
      break;
 80056b2:	e014      	b.n	80056de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0208 	orr.w	r2, r2, #8
 80056c2:	60da      	str	r2, [r3, #12]
      break;
 80056c4:	e00b      	b.n	80056de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0210 	orr.w	r2, r2, #16
 80056d4:	60da      	str	r2, [r3, #12]
      break;
 80056d6:	e002      	b.n	80056de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d13e      	bne.n	8005762 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fbeb 	bl	8005ec8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1d      	ldr	r2, [pc, #116]	; (800576c <HAL_TIM_IC_Start_IT+0x220>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d018      	beq.n	800572e <HAL_TIM_IC_Start_IT+0x1e2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005704:	d013      	beq.n	800572e <HAL_TIM_IC_Start_IT+0x1e2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a19      	ldr	r2, [pc, #100]	; (8005770 <HAL_TIM_IC_Start_IT+0x224>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_TIM_IC_Start_IT+0x1e2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <HAL_TIM_IC_Start_IT+0x228>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIM_IC_Start_IT+0x1e2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a16      	ldr	r2, [pc, #88]	; (8005778 <HAL_TIM_IC_Start_IT+0x22c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIM_IC_Start_IT+0x1e2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <HAL_TIM_IC_Start_IT+0x230>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b06      	cmp	r3, #6
 800573e:	d010      	beq.n	8005762 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005750:	e007      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40014000 	.word	0x40014000

08005780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b02      	cmp	r3, #2
 8005794:	d122      	bne.n	80057dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d11b      	bne.n	80057dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0202 	mvn.w	r2, #2
 80057ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fc fc4c 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 80057c8:	e005      	b.n	80057d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9c0 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9c7 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d122      	bne.n	8005830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d11b      	bne.n	8005830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0204 	mvn.w	r2, #4
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fc fc22 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 800581c:	e005      	b.n	800582a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f996 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f99d 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b08      	cmp	r3, #8
 800583c:	d122      	bne.n	8005884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b08      	cmp	r3, #8
 800584a:	d11b      	bne.n	8005884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0208 	mvn.w	r2, #8
 8005854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2204      	movs	r2, #4
 800585a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fc fbf8 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8005870:	e005      	b.n	800587e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f96c 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f973 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b10      	cmp	r3, #16
 8005890:	d122      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b10      	cmp	r3, #16
 800589e:	d11b      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0210 	mvn.w	r2, #16
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2208      	movs	r2, #8
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fbce 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f942 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f949 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10e      	bne.n	8005904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d107      	bne.n	8005904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0201 	mvn.w	r2, #1
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc fbee 	bl	80020e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d10e      	bne.n	8005930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d107      	bne.n	8005930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fb6a 	bl	8006004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d10e      	bne.n	800595c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d107      	bne.n	800595c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f90e 	bl	8005b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b20      	cmp	r3, #32
 8005968:	d10e      	bne.n	8005988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b20      	cmp	r3, #32
 8005976:	d107      	bne.n	8005988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0220 	mvn.w	r2, #32
 8005980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fb34 	bl	8005ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e088      	b.n	8005ac0 <HAL_TIM_IC_ConfigChannel+0x130>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f000 f95e 	bl	8005c8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 020c 	bic.w	r2, r2, #12
 80059de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6999      	ldr	r1, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	619a      	str	r2, [r3, #24]
 80059f2:	e060      	b.n	8005ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d11c      	bne.n	8005a34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f000 f9a7 	bl	8005d5c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6999      	ldr	r1, [r3, #24]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	021a      	lsls	r2, r3, #8
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	619a      	str	r2, [r3, #24]
 8005a32:	e040      	b.n	8005ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d11b      	bne.n	8005a72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f000 f9c4 	bl	8005dd6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 020c 	bic.w	r2, r2, #12
 8005a5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69d9      	ldr	r1, [r3, #28]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	61da      	str	r2, [r3, #28]
 8005a70:	e021      	b.n	8005ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d11c      	bne.n	8005ab2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6819      	ldr	r1, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f000 f9e1 	bl	8005e4e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69d9      	ldr	r1, [r3, #28]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	61da      	str	r2, [r3, #28]
 8005ab0:	e001      	b.n	8005ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b0c      	cmp	r3, #12
 8005ada:	d831      	bhi.n	8005b40 <HAL_TIM_ReadCapturedValue+0x78>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b19 	.word	0x08005b19
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b23 	.word	0x08005b23
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b41 	.word	0x08005b41
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b37 	.word	0x08005b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	60fb      	str	r3, [r7, #12]

      break;
 8005b20:	e00f      	b.n	8005b42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	60fb      	str	r3, [r7, #12]

      break;
 8005b2a:	e00a      	b.n	8005b42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b32:	60fb      	str	r3, [r7, #12]

      break;
 8005b34:	e005      	b.n	8005b42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	60fb      	str	r3, [r7, #12]

      break;
 8005b3e:	e000      	b.n	8005b42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b40:	bf00      	nop
  }

  return tmpreg;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a34      	ldr	r2, [pc, #208]	; (8005c70 <TIM_Base_SetConfig+0xe4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d00b      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a31      	ldr	r2, [pc, #196]	; (8005c74 <TIM_Base_SetConfig+0xe8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a30      	ldr	r2, [pc, #192]	; (8005c78 <TIM_Base_SetConfig+0xec>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <TIM_Base_SetConfig+0xf0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d108      	bne.n	8005bd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <TIM_Base_SetConfig+0xe4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01b      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d017      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <TIM_Base_SetConfig+0xe8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <TIM_Base_SetConfig+0xec>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <TIM_Base_SetConfig+0xf0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <TIM_Base_SetConfig+0xf4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <TIM_Base_SetConfig+0xf8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <TIM_Base_SetConfig+0xfc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d108      	bne.n	8005c28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <TIM_Base_SetConfig+0xe4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a24      	ldr	r2, [pc, #144]	; (8005d48 <TIM_TI1_SetConfig+0xbc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <TIM_TI1_SetConfig+0xc0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <TIM_TI1_SetConfig+0xc4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <TIM_TI1_SetConfig+0xc8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_TI1_SetConfig+0x56>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <TIM_TI1_SetConfig+0xcc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <TIM_TI1_SetConfig+0x5a>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <TIM_TI1_SetConfig+0x5c>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e003      	b.n	8005d06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f023 030a 	bic.w	r3, r3, #10
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f003 030a 	and.w	r3, r3, #10
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40014000 	.word	0x40014000

08005d5c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0210 	bic.w	r2, r3, #16
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	031b      	lsls	r3, r3, #12
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b087      	sub	sp, #28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	031b      	lsls	r3, r3, #12
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2201      	movs	r2, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	401a      	ands	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e050      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1c      	ldr	r2, [pc, #112]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a16      	ldr	r2, [pc, #88]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40014000 	.word	0x40014000

08005ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e03f      	b.n	80060aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fc fc3e 	bl	80028c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	; 0x24
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f929 	bl	80062b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b08a      	sub	sp, #40	; 0x28
 80060b6:	af02      	add	r7, sp, #8
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d17c      	bne.n	80061cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_UART_Transmit+0x2c>
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e075      	b.n	80061ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Transmit+0x3e>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e06e      	b.n	80061ce <HAL_UART_Transmit+0x11c>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2221      	movs	r2, #33	; 0x21
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006106:	f7fc fc83 	bl	8002a10 <HAL_GetTick>
 800610a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006120:	d108      	bne.n	8006134 <HAL_UART_Transmit+0x82>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d104      	bne.n	8006134 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	e003      	b.n	800613c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006144:	e02a      	b.n	800619c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f840 	bl	80061d6 <UART_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e036      	b.n	80061ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	3302      	adds	r3, #2
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e007      	b.n	800618e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1cf      	bne.n	8006146 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2140      	movs	r1, #64	; 0x40
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f810 	bl	80061d6 <UART_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e006      	b.n	80061ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e000      	b.n	80061ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
  }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b090      	sub	sp, #64	; 0x40
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e6:	e050      	b.n	800628a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d04c      	beq.n	800628a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f6:	f7fc fc0b 	bl	8002a10 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006202:	429a      	cmp	r2, r3
 8006204:	d241      	bcs.n	800628a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800621c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006226:	637a      	str	r2, [r7, #52]	; 0x34
 8006228:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800622c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e5      	bne.n	8006206 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	613b      	str	r3, [r7, #16]
   return(result);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3314      	adds	r3, #20
 8006258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800625a:	623a      	str	r2, [r7, #32]
 800625c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	69f9      	ldr	r1, [r7, #28]
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	61bb      	str	r3, [r7, #24]
   return(result);
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e5      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e00f      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4013      	ands	r3, r2
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d09f      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3740      	adds	r7, #64	; 0x40
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	b09f      	sub	sp, #124	; 0x7c
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	68d9      	ldr	r1, [r3, #12]
 80062cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	ea40 0301 	orr.w	r3, r0, r1
 80062d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	431a      	orrs	r2, r3
 80062e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80062ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062f8:	f021 010c 	bic.w	r1, r1, #12
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006302:	430b      	orrs	r3, r1
 8006304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	6999      	ldr	r1, [r3, #24]
 8006314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	ea40 0301 	orr.w	r3, r0, r1
 800631c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800631e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4bc5      	ldr	r3, [pc, #788]	; (8006638 <UART_SetConfig+0x384>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d004      	beq.n	8006332 <UART_SetConfig+0x7e>
 8006328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4bc3      	ldr	r3, [pc, #780]	; (800663c <UART_SetConfig+0x388>)
 800632e:	429a      	cmp	r2, r3
 8006330:	d103      	bne.n	800633a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006332:	f7fe ffb9 	bl	80052a8 <HAL_RCC_GetPCLK2Freq>
 8006336:	6778      	str	r0, [r7, #116]	; 0x74
 8006338:	e002      	b.n	8006340 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800633a:	f7fe ffa1 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 800633e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	f040 80b6 	bne.w	80064b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800634c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634e:	461c      	mov	r4, r3
 8006350:	f04f 0500 	mov.w	r5, #0
 8006354:	4622      	mov	r2, r4
 8006356:	462b      	mov	r3, r5
 8006358:	1891      	adds	r1, r2, r2
 800635a:	6439      	str	r1, [r7, #64]	; 0x40
 800635c:	415b      	adcs	r3, r3
 800635e:	647b      	str	r3, [r7, #68]	; 0x44
 8006360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006364:	1912      	adds	r2, r2, r4
 8006366:	eb45 0303 	adc.w	r3, r5, r3
 800636a:	f04f 0000 	mov.w	r0, #0
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	00d9      	lsls	r1, r3, #3
 8006374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006378:	00d0      	lsls	r0, r2, #3
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	1911      	adds	r1, r2, r4
 8006380:	6639      	str	r1, [r7, #96]	; 0x60
 8006382:	416b      	adcs	r3, r5
 8006384:	667b      	str	r3, [r7, #100]	; 0x64
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	461a      	mov	r2, r3
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	1891      	adds	r1, r2, r2
 8006392:	63b9      	str	r1, [r7, #56]	; 0x38
 8006394:	415b      	adcs	r3, r3
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800639c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80063a0:	f7fa fbc4 	bl	8000b2c <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4ba5      	ldr	r3, [pc, #660]	; (8006640 <UART_SetConfig+0x38c>)
 80063aa:	fba3 2302 	umull	r2, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	011e      	lsls	r6, r3, #4
 80063b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b4:	461c      	mov	r4, r3
 80063b6:	f04f 0500 	mov.w	r5, #0
 80063ba:	4622      	mov	r2, r4
 80063bc:	462b      	mov	r3, r5
 80063be:	1891      	adds	r1, r2, r2
 80063c0:	6339      	str	r1, [r7, #48]	; 0x30
 80063c2:	415b      	adcs	r3, r3
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
 80063c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063ca:	1912      	adds	r2, r2, r4
 80063cc:	eb45 0303 	adc.w	r3, r5, r3
 80063d0:	f04f 0000 	mov.w	r0, #0
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	00d9      	lsls	r1, r3, #3
 80063da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063de:	00d0      	lsls	r0, r2, #3
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	1911      	adds	r1, r2, r4
 80063e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80063e8:	416b      	adcs	r3, r5
 80063ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	461a      	mov	r2, r3
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	1891      	adds	r1, r2, r2
 80063f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80063fa:	415b      	adcs	r3, r3
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006402:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006406:	f7fa fb91 	bl	8000b2c <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4b8c      	ldr	r3, [pc, #560]	; (8006640 <UART_SetConfig+0x38c>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	; 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a87      	ldr	r2, [pc, #540]	; (8006640 <UART_SetConfig+0x38c>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006430:	441e      	add	r6, r3
 8006432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006434:	4618      	mov	r0, r3
 8006436:	f04f 0100 	mov.w	r1, #0
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	1894      	adds	r4, r2, r2
 8006440:	623c      	str	r4, [r7, #32]
 8006442:	415b      	adcs	r3, r3
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800644a:	1812      	adds	r2, r2, r0
 800644c:	eb41 0303 	adc.w	r3, r1, r3
 8006450:	f04f 0400 	mov.w	r4, #0
 8006454:	f04f 0500 	mov.w	r5, #0
 8006458:	00dd      	lsls	r5, r3, #3
 800645a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800645e:	00d4      	lsls	r4, r2, #3
 8006460:	4622      	mov	r2, r4
 8006462:	462b      	mov	r3, r5
 8006464:	1814      	adds	r4, r2, r0
 8006466:	653c      	str	r4, [r7, #80]	; 0x50
 8006468:	414b      	adcs	r3, r1
 800646a:	657b      	str	r3, [r7, #84]	; 0x54
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 0300 	mov.w	r3, #0
 8006476:	1891      	adds	r1, r2, r2
 8006478:	61b9      	str	r1, [r7, #24]
 800647a:	415b      	adcs	r3, r3
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006482:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006486:	f7fa fb51 	bl	8000b2c <__aeabi_uldivmod>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4b6c      	ldr	r3, [pc, #432]	; (8006640 <UART_SetConfig+0x38c>)
 8006490:	fba3 1302 	umull	r1, r3, r3, r2
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	2164      	movs	r1, #100	; 0x64
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	3332      	adds	r3, #50	; 0x32
 80064a2:	4a67      	ldr	r2, [pc, #412]	; (8006640 <UART_SetConfig+0x38c>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	f003 0207 	and.w	r2, r3, #7
 80064ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4432      	add	r2, r6
 80064b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064b6:	e0b9      	b.n	800662c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ba:	461c      	mov	r4, r3
 80064bc:	f04f 0500 	mov.w	r5, #0
 80064c0:	4622      	mov	r2, r4
 80064c2:	462b      	mov	r3, r5
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	6139      	str	r1, [r7, #16]
 80064c8:	415b      	adcs	r3, r3
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064d0:	1912      	adds	r2, r2, r4
 80064d2:	eb45 0303 	adc.w	r3, r5, r3
 80064d6:	f04f 0000 	mov.w	r0, #0
 80064da:	f04f 0100 	mov.w	r1, #0
 80064de:	00d9      	lsls	r1, r3, #3
 80064e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064e4:	00d0      	lsls	r0, r2, #3
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	eb12 0804 	adds.w	r8, r2, r4
 80064ee:	eb43 0905 	adc.w	r9, r3, r5
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	008b      	lsls	r3, r1, #2
 8006506:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800650a:	0082      	lsls	r2, r0, #2
 800650c:	4640      	mov	r0, r8
 800650e:	4649      	mov	r1, r9
 8006510:	f7fa fb0c 	bl	8000b2c <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4b49      	ldr	r3, [pc, #292]	; (8006640 <UART_SetConfig+0x38c>)
 800651a:	fba3 2302 	umull	r2, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	011e      	lsls	r6, r3, #4
 8006522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006524:	4618      	mov	r0, r3
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	1894      	adds	r4, r2, r2
 8006530:	60bc      	str	r4, [r7, #8]
 8006532:	415b      	adcs	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653a:	1812      	adds	r2, r2, r0
 800653c:	eb41 0303 	adc.w	r3, r1, r3
 8006540:	f04f 0400 	mov.w	r4, #0
 8006544:	f04f 0500 	mov.w	r5, #0
 8006548:	00dd      	lsls	r5, r3, #3
 800654a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800654e:	00d4      	lsls	r4, r2, #3
 8006550:	4622      	mov	r2, r4
 8006552:	462b      	mov	r3, r5
 8006554:	1814      	adds	r4, r2, r0
 8006556:	64bc      	str	r4, [r7, #72]	; 0x48
 8006558:	414b      	adcs	r3, r1
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	f04f 0100 	mov.w	r1, #0
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	008b      	lsls	r3, r1, #2
 8006570:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006574:	0082      	lsls	r2, r0, #2
 8006576:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800657a:	f7fa fad7 	bl	8000b2c <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <UART_SetConfig+0x38c>)
 8006584:	fba3 1302 	umull	r1, r3, r3, r2
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	3332      	adds	r3, #50	; 0x32
 8006596:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <UART_SetConfig+0x38c>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065a2:	441e      	add	r6, r3
 80065a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a6:	4618      	mov	r0, r3
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	1894      	adds	r4, r2, r2
 80065b2:	603c      	str	r4, [r7, #0]
 80065b4:	415b      	adcs	r3, r3
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065bc:	1812      	adds	r2, r2, r0
 80065be:	eb41 0303 	adc.w	r3, r1, r3
 80065c2:	f04f 0400 	mov.w	r4, #0
 80065c6:	f04f 0500 	mov.w	r5, #0
 80065ca:	00dd      	lsls	r5, r3, #3
 80065cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065d0:	00d4      	lsls	r4, r2, #3
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	eb12 0a00 	adds.w	sl, r2, r0
 80065da:	eb43 0b01 	adc.w	fp, r3, r1
 80065de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	008b      	lsls	r3, r1, #2
 80065f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065f6:	0082      	lsls	r2, r0, #2
 80065f8:	4650      	mov	r0, sl
 80065fa:	4659      	mov	r1, fp
 80065fc:	f7fa fa96 	bl	8000b2c <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <UART_SetConfig+0x38c>)
 8006606:	fba3 1302 	umull	r1, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2164      	movs	r1, #100	; 0x64
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	; 0x32
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <UART_SetConfig+0x38c>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4432      	add	r2, r6
 800662a:	609a      	str	r2, [r3, #8]
}
 800662c:	bf00      	nop
 800662e:	377c      	adds	r7, #124	; 0x7c
 8006630:	46bd      	mov	sp, r7
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	bf00      	nop
 8006638:	40011000 	.word	0x40011000
 800663c:	40011400 	.word	0x40011400
 8006640:	51eb851f 	.word	0x51eb851f

08006644 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fca4 	bl	8007fa2 <VL53L0X_get_offset_calibration_data_micro_meter>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800665e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	218a      	movs	r1, #138	; 0x8a
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f004 fc03 	bl	800ae90 <VL53L0X_WrByte>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800668e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800669c:	b5b0      	push	{r4, r5, r7, lr}
 800669e:	b096      	sub	sp, #88	; 0x58
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80066aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80066b2:	2200      	movs	r2, #0
 80066b4:	2188      	movs	r1, #136	; 0x88
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f004 fbea 	bl	800ae90 <VL53L0X_WrByte>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066d0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80066da:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a9e      	ldr	r2, [pc, #632]	; (800695c <VL53L0X_DataInit+0x2c0>)
 80066e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a9d      	ldr	r2, [pc, #628]	; (8006960 <VL53L0X_DataInit+0x2c4>)
 80066ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80066f4:	f107 0310 	add.w	r3, r7, #16
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fab4 	bl	8006c68 <VL53L0X_GetDeviceParameters>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006706:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800670a:	2b00      	cmp	r3, #0
 800670c:	d112      	bne.n	8006734 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800670e:	2300      	movs	r3, #0
 8006710:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006712:	2300      	movs	r3, #0
 8006714:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f103 0410 	add.w	r4, r3, #16
 800671c:	f107 0510 	add.w	r5, r7, #16
 8006720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800672a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2264      	movs	r2, #100	; 0x64
 8006738:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006742:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800674c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006756:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006762:	2201      	movs	r2, #1
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f004 fb92 	bl	800ae90 <VL53L0X_WrByte>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006774:	4313      	orrs	r3, r2
 8006776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800677a:	2201      	movs	r2, #1
 800677c:	21ff      	movs	r1, #255	; 0xff
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f004 fb86 	bl	800ae90 <VL53L0X_WrByte>
 8006784:	4603      	mov	r3, r0
 8006786:	461a      	mov	r2, r3
 8006788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800678c:	4313      	orrs	r3, r2
 800678e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f004 fb7a 	bl	800ae90 <VL53L0X_WrByte>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80067aa:	f107 030f 	add.w	r3, r7, #15
 80067ae:	461a      	mov	r2, r3
 80067b0:	2191      	movs	r1, #145	; 0x91
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f004 fbee 	bl	800af94 <VL53L0X_RdByte>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80067c6:	7bfa      	ldrb	r2, [r7, #15]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80067ce:	2201      	movs	r2, #1
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f004 fb5c 	bl	800ae90 <VL53L0X_WrByte>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067e6:	2200      	movs	r2, #0
 80067e8:	21ff      	movs	r1, #255	; 0xff
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f004 fb50 	bl	800ae90 <VL53L0X_WrByte>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80067fe:	2200      	movs	r2, #0
 8006800:	2180      	movs	r1, #128	; 0x80
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f004 fb44 	bl	800ae90 <VL53L0X_WrByte>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006810:	4313      	orrs	r3, r2
 8006812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006816:	2300      	movs	r3, #0
 8006818:	653b      	str	r3, [r7, #80]	; 0x50
 800681a:	e014      	b.n	8006846 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800681c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006820:	2b00      	cmp	r3, #0
 8006822:	d114      	bne.n	800684e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006826:	b29b      	uxth	r3, r3
 8006828:	2201      	movs	r2, #1
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fd0f 	bl	8007250 <VL53L0X_SetLimitCheckEnable>
 8006832:	4603      	mov	r3, r0
 8006834:	461a      	mov	r2, r3
 8006836:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800683a:	4313      	orrs	r3, r2
 800683c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006842:	3301      	adds	r3, #1
 8006844:	653b      	str	r3, [r7, #80]	; 0x50
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	2b05      	cmp	r3, #5
 800684a:	dde7      	ble.n	800681c <VL53L0X_DataInit+0x180>
 800684c:	e000      	b.n	8006850 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800684e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006850:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006854:	2b00      	cmp	r3, #0
 8006856:	d107      	bne.n	8006868 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006858:	2200      	movs	r2, #0
 800685a:	2102      	movs	r1, #2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fcf7 	bl	8007250 <VL53L0X_SetLimitCheckEnable>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006868:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800686c:	2b00      	cmp	r3, #0
 800686e:	d107      	bne.n	8006880 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006870:	2200      	movs	r2, #0
 8006872:	2103      	movs	r1, #3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fceb 	bl	8007250 <VL53L0X_SetLimitCheckEnable>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006880:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006884:	2b00      	cmp	r3, #0
 8006886:	d107      	bne.n	8006898 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006888:	2200      	movs	r2, #0
 800688a:	2104      	movs	r1, #4
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fcdf 	bl	8007250 <VL53L0X_SetLimitCheckEnable>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006898:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800689c:	2b00      	cmp	r3, #0
 800689e:	d107      	bne.n	80068b0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80068a0:	2200      	movs	r2, #0
 80068a2:	2105      	movs	r1, #5
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fcd3 	bl	8007250 <VL53L0X_SetLimitCheckEnable>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80068b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80068b8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80068bc:	2100      	movs	r1, #0
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fd76 	bl	80073b0 <VL53L0X_SetLimitCheckValue>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80068d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068d6:	2101      	movs	r1, #1
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fd69 	bl	80073b0 <VL53L0X_SetLimitCheckValue>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80068ec:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80068f0:	2102      	movs	r1, #2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fd5c 	bl	80073b0 <VL53L0X_SetLimitCheckValue>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006906:	2200      	movs	r2, #0
 8006908:	2103      	movs	r1, #3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fd50 	bl	80073b0 <VL53L0X_SetLimitCheckValue>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006916:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10f      	bne.n	800693e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f004 fab0 	bl	800ae90 <VL53L0X_WrByte>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800693e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800694e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006952:	4618      	mov	r0, r3
 8006954:	3758      	adds	r7, #88	; 0x58
 8006956:	46bd      	mov	sp, r7
 8006958:	bdb0      	pop	{r4, r5, r7, pc}
 800695a:	bf00      	nop
 800695c:	00016b85 	.word	0x00016b85
 8006960:	000970a4 	.word	0x000970a4

08006964 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006964:	b5b0      	push	{r4, r5, r7, lr}
 8006966:	b09e      	sub	sp, #120	; 0x78
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800696c:	2300      	movs	r3, #0
 800696e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006972:	f107 031c 	add.w	r3, r7, #28
 8006976:	2240      	movs	r2, #64	; 0x40
 8006978:	2100      	movs	r1, #0
 800697a:	4618      	mov	r0, r3
 800697c:	f006 fab7 	bl	800ceee <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80069a0:	2101      	movs	r1, #1
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f002 fa40 	bl	8008e28 <VL53L0X_get_info_from_device>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80069b4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80069bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80069c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d80d      	bhi.n	80069e4 <VL53L0X_StaticInit+0x80>
 80069c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d102      	bne.n	80069d6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80069d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d806      	bhi.n	80069e4 <VL53L0X_StaticInit+0x80>
 80069d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10e      	bne.n	80069fc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80069de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d90b      	bls.n	80069fc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80069e4:	f107 0218 	add.w	r2, r7, #24
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fcd2 	bl	8008398 <VL53L0X_perform_ref_spad_management>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80069fa:	e009      	b.n	8006a10 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80069fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a00:	461a      	mov	r2, r3
 8006a02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fed3 	bl	80087b0 <VL53L0X_set_reference_spads>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006a10:	4b94      	ldr	r3, [pc, #592]	; (8006c64 <VL53L0X_StaticInit+0x300>)
 8006a12:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006a14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10f      	bne.n	8006a3c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006a22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006a26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a36:	e001      	b.n	8006a3c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006a38:	4b8a      	ldr	r3, [pc, #552]	; (8006c64 <VL53L0X_StaticInit+0x300>)
 8006a3a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006a3c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006a44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f003 fb0c 	bl	800a064 <VL53L0X_load_tuning_settings>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	2304      	movs	r3, #4
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f8cb 	bl	8007c00 <VL53L0X_SetGpioConfig>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a70:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d121      	bne.n	8006abc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a78:	2201      	movs	r2, #1
 8006a7a:	21ff      	movs	r1, #255	; 0xff
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f004 fa07 	bl	800ae90 <VL53L0X_WrByte>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006a88:	f107 031a 	add.w	r3, r7, #26
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2184      	movs	r1, #132	; 0x84
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f004 faa9 	bl	800afe8 <VL53L0X_RdWord>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	21ff      	movs	r1, #255	; 0xff
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f004 f9f1 	bl	800ae90 <VL53L0X_WrByte>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006abc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006ac4:	8b7b      	ldrh	r3, [r7, #26]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006ad0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d108      	bne.n	8006aea <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006ad8:	f107 031c 	add.w	r3, r7, #28
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8c2 	bl	8006c68 <VL53L0X_GetDeviceParameters>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006aea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d110      	bne.n	8006b14 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006af2:	f107 0319 	add.w	r3, r7, #25
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f984 	bl	8006e06 <VL53L0X_GetFractionEnable>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006b04:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006b0c:	7e7a      	ldrb	r2, [r7, #25]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006b14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10e      	bne.n	8006b3a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f103 0410 	add.w	r4, r3, #16
 8006b22:	f107 051c 	add.w	r5, r7, #28
 8006b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d111      	bne.n	8006b66 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006b42:	f107 0319 	add.w	r3, r7, #25
 8006b46:	461a      	mov	r2, r3
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f004 fa22 	bl	800af94 <VL53L0X_RdByte>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006b56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006b5e:	7e7a      	ldrb	r2, [r7, #25]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006b66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d107      	bne.n	8006b7e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2100      	movs	r1, #0
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9a4 	bl	8006ec0 <VL53L0X_SetSequenceStepEnable>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006b7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006b86:	2200      	movs	r2, #0
 8006b88:	2102      	movs	r1, #2
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f998 	bl	8006ec0 <VL53L0X_SetSequenceStepEnable>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006b96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006ba6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006bae:	f107 0313 	add.w	r3, r7, #19
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f96a 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bca:	7cfa      	ldrb	r2, [r7, #19]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006bd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006bda:	f107 0313 	add.w	r3, r7, #19
 8006bde:	461a      	mov	r2, r3
 8006be0:	2101      	movs	r1, #1
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f954 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bf6:	7cfa      	ldrb	r2, [r7, #19]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006bfe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2103      	movs	r1, #3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 fe8c 	bl	800992c <get_sequence_step_timeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c1a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	461a      	mov	r2, r3
 8006c38:	2104      	movs	r1, #4
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f002 fe76 	bl	800992c <get_sequence_step_timeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3770      	adds	r7, #112	; 0x70
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bdb0      	pop	{r4, r5, r7, pc}
 8006c62:	bf00      	nop
 8006c64:	2000001c 	.word	0x2000001c

08006c68 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f8b0 	bl	8006de0 <VL53L0X_GetDeviceMode>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa60 	bl	8007158 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	3310      	adds	r3, #16
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fa96 	bl	80071ea <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d107      	bne.n	8006cda <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff fcb7 	bl	8006644 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d134      	bne.n	8006d4c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	e02a      	b.n	8006d3e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d12a      	bne.n	8006d46 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	b299      	uxth	r1, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3304      	adds	r3, #4
 8006d00:	461a      	mov	r2, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fbb6 	bl	8007474 <VL53L0X_GetLimitCheckValue>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d117      	bne.n	8006d4a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	b299      	uxth	r1, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3318      	adds	r3, #24
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	461a      	mov	r2, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb1d 	bl	8007368 <VL53L0X_GetLimitCheckEnable>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	ddd1      	ble.n	8006ce8 <VL53L0X_GetDeviceParameters+0x80>
 8006d44:	e002      	b.n	8006d4c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006d4a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	333c      	adds	r3, #60	; 0x3c
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fc18 	bl	8007590 <VL53L0X_GetWrapAroundCheckEnable>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f879 	bl	8006e6a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	2b15      	cmp	r3, #21
 8006d9c:	bf8c      	ite	hi
 8006d9e:	2201      	movhi	r2, #1
 8006da0:	2200      	movls	r2, #0
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	d10e      	bne.n	8006dc6 <VL53L0X_SetDeviceMode+0x3e>
 8006da8:	2201      	movs	r2, #1
 8006daa:	409a      	lsls	r2, r3
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <VL53L0X_SetDeviceMode+0x54>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	78fa      	ldrb	r2, [r7, #3]
 8006dc2:	741a      	strb	r2, [r3, #16]
		break;
 8006dc4:	e001      	b.n	8006dca <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006dc6:	23f8      	movs	r3, #248	; 0xf8
 8006dc8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	0030000b 	.word	0x0030000b

08006de0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7c1a      	ldrb	r2, [r3, #16]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	2109      	movs	r1, #9
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f004 f8bb 	bl	800af94 <VL53L0X_RdByte>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f002 ff73 	bl	8009d40 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f003 f840 	bl	8009f00 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f002 ff12 	bl	8009cd2 <VL53L0X_get_vcsel_pulse_period>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006edc:	f107 030f 	add.w	r3, r7, #15
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f004 f855 	bl	800af94 <VL53L0X_RdByte>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d15a      	bne.n	8006fb0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006efa:	78bb      	ldrb	r3, [r7, #2]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d12b      	bne.n	8006f58 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d825      	bhi.n	8006f52 <VL53L0X_SetSequenceStepEnable+0x92>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f21 	.word	0x08006f21
 8006f10:	08006f2b 	.word	0x08006f2b
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f3f 	.word	0x08006f3f
 8006f1c:	08006f49 	.word	0x08006f49
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006f20:	7dbb      	ldrb	r3, [r7, #22]
 8006f22:	f043 0310 	orr.w	r3, r3, #16
 8006f26:	75bb      	strb	r3, [r7, #22]
				break;
 8006f28:	e043      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006f2a:	7dbb      	ldrb	r3, [r7, #22]
 8006f2c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006f30:	75bb      	strb	r3, [r7, #22]
				break;
 8006f32:	e03e      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006f34:	7dbb      	ldrb	r3, [r7, #22]
 8006f36:	f043 0304 	orr.w	r3, r3, #4
 8006f3a:	75bb      	strb	r3, [r7, #22]
				break;
 8006f3c:	e039      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006f3e:	7dbb      	ldrb	r3, [r7, #22]
 8006f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f44:	75bb      	strb	r3, [r7, #22]
				break;
 8006f46:	e034      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006f48:	7dbb      	ldrb	r3, [r7, #22]
 8006f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f4e:	75bb      	strb	r3, [r7, #22]
				break;
 8006f50:	e02f      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f52:	23fc      	movs	r3, #252	; 0xfc
 8006f54:	75fb      	strb	r3, [r7, #23]
 8006f56:	e02c      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d825      	bhi.n	8006faa <VL53L0X_SetSequenceStepEnable+0xea>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f79 	.word	0x08006f79
 8006f68:	08006f83 	.word	0x08006f83
 8006f6c:	08006f8d 	.word	0x08006f8d
 8006f70:	08006f97 	.word	0x08006f97
 8006f74:	08006fa1 	.word	0x08006fa1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006f78:	7dbb      	ldrb	r3, [r7, #22]
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	75bb      	strb	r3, [r7, #22]
				break;
 8006f80:	e017      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006f82:	7dbb      	ldrb	r3, [r7, #22]
 8006f84:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006f88:	75bb      	strb	r3, [r7, #22]
				break;
 8006f8a:	e012      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006f8c:	7dbb      	ldrb	r3, [r7, #22]
 8006f8e:	f023 0304 	bic.w	r3, r3, #4
 8006f92:	75bb      	strb	r3, [r7, #22]
				break;
 8006f94:	e00d      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006f96:	7dbb      	ldrb	r3, [r7, #22]
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	75bb      	strb	r3, [r7, #22]
				break;
 8006f9e:	e008      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006fa0:	7dbb      	ldrb	r3, [r7, #22]
 8006fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa6:	75bb      	strb	r3, [r7, #22]
				break;
 8006fa8:	e003      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006faa:	23fc      	movs	r3, #252	; 0xfc
 8006fac:	75fb      	strb	r3, [r7, #23]
 8006fae:	e000      	b.n	8006fb2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006fb0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	7dba      	ldrb	r2, [r7, #22]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d01e      	beq.n	8006ff8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d107      	bne.n	8006fd2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006fc2:	7dbb      	ldrb	r3, [r7, #22]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f003 ff61 	bl	800ae90 <VL53L0X_WrByte>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7dba      	ldrb	r2, [r7, #22]
 8006fde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006ff0:	6939      	ldr	r1, [r7, #16]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff ff26 	bl	8006e44 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	607b      	str	r3, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	72fb      	strb	r3, [r7, #11]
 8007012:	4613      	mov	r3, r2
 8007014:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	2b04      	cmp	r3, #4
 8007024:	d836      	bhi.n	8007094 <sequence_step_enabled+0x90>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <sequence_step_enabled+0x28>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007041 	.word	0x08007041
 8007030:	08007053 	.word	0x08007053
 8007034:	08007065 	.word	0x08007065
 8007038:	08007077 	.word	0x08007077
 800703c:	08007089 	.word	0x08007089
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007040:	7abb      	ldrb	r3, [r7, #10]
 8007042:	111b      	asrs	r3, r3, #4
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	701a      	strb	r2, [r3, #0]
		break;
 8007050:	e022      	b.n	8007098 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007052:	7abb      	ldrb	r3, [r7, #10]
 8007054:	10db      	asrs	r3, r3, #3
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	b2da      	uxtb	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	701a      	strb	r2, [r3, #0]
		break;
 8007062:	e019      	b.n	8007098 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007064:	7abb      	ldrb	r3, [r7, #10]
 8007066:	109b      	asrs	r3, r3, #2
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	b2da      	uxtb	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	701a      	strb	r2, [r3, #0]
		break;
 8007074:	e010      	b.n	8007098 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007076:	7abb      	ldrb	r3, [r7, #10]
 8007078:	119b      	asrs	r3, r3, #6
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	701a      	strb	r2, [r3, #0]
		break;
 8007086:	e007      	b.n	8007098 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007088:	7abb      	ldrb	r3, [r7, #10]
 800708a:	09db      	lsrs	r3, r3, #7
 800708c:	b2da      	uxtb	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	701a      	strb	r2, [r3, #0]
		break;
 8007092:	e001      	b.n	8007098 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007094:	23fc      	movs	r3, #252	; 0xfc
 8007096:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007098:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800709c:	4618      	mov	r0, r3
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070ba:	f107 030e 	add.w	r3, r7, #14
 80070be:	461a      	mov	r2, r3
 80070c0:	2101      	movs	r1, #1
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f003 ff66 	bl	800af94 <VL53L0X_RdByte>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80070cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d107      	bne.n	80070e4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80070d4:	7bba      	ldrb	r2, [r7, #14]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2100      	movs	r1, #0
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff ff92 	bl	8007004 <sequence_step_enabled>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80070e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80070ec:	7bba      	ldrb	r2, [r7, #14]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	3302      	adds	r3, #2
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff85 	bl	8007004 <sequence_step_enabled>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80070fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d108      	bne.n	8007118 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007106:	7bba      	ldrb	r2, [r7, #14]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	2102      	movs	r1, #2
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff ff78 	bl	8007004 <sequence_step_enabled>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007120:	7bba      	ldrb	r2, [r7, #14]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	3303      	adds	r3, #3
 8007126:	2103      	movs	r1, #3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ff6b 	bl	8007004 <sequence_step_enabled>
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d108      	bne.n	800714c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800713a:	7bba      	ldrb	r2, [r7, #14]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	3304      	adds	r3, #4
 8007140:	2104      	movs	r1, #4
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff ff5e 	bl	8007004 <sequence_step_enabled>
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800714c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007166:	f107 030c 	add.w	r3, r7, #12
 800716a:	461a      	mov	r2, r3
 800716c:	21f8      	movs	r1, #248	; 0xf8
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f003 ff3a 	bl	800afe8 <VL53L0X_RdWord>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d108      	bne.n	8007192 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	461a      	mov	r2, r3
 8007186:	2104      	movs	r1, #4
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f003 ff65 	bl	800b058 <VL53L0X_RdDWord>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800719a:	89bb      	ldrh	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	89ba      	ldrh	r2, [r7, #12]
 80071a4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7f1b      	ldrb	r3, [r3, #28]
 80071d2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	7bba      	ldrb	r2, [r7, #14]
 80071d8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80071da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b086      	sub	sp, #24
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071f4:	2300      	movs	r3, #0
 80071f6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80071f8:	f107 030e 	add.w	r3, r7, #14
 80071fc:	461a      	mov	r2, r3
 80071fe:	2120      	movs	r1, #32
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f003 fef1 	bl	800afe8 <VL53L0X_RdWord>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800720a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d118      	bne.n	8007244 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	771a      	strb	r2, [r3, #28]
 800722a:	e00b      	b.n	8007244 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800722c:	89fb      	ldrh	r3, [r7, #14]
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
 800725c:	4613      	mov	r3, r2
 800725e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007260:	2300      	movs	r3, #0
 8007262:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007270:	887b      	ldrh	r3, [r7, #2]
 8007272:	2b05      	cmp	r3, #5
 8007274:	d902      	bls.n	800727c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007276:	23fc      	movs	r3, #252	; 0xfc
 8007278:	75fb      	strb	r3, [r7, #23]
 800727a:	e05b      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800727c:	787b      	ldrb	r3, [r7, #1]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800728a:	2301      	movs	r3, #1
 800728c:	73bb      	strb	r3, [r7, #14]
 800728e:	e00a      	b.n	80072a6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007290:	887b      	ldrh	r3, [r7, #2]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	330c      	adds	r3, #12
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80072a6:	887b      	ldrh	r3, [r7, #2]
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d841      	bhi.n	8007330 <VL53L0X_SetLimitCheckEnable+0xe0>
 80072ac:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	080072cd 	.word	0x080072cd
 80072b8:	080072d7 	.word	0x080072d7
 80072bc:	080072ed 	.word	0x080072ed
 80072c0:	080072f7 	.word	0x080072f7
 80072c4:	08007301 	.word	0x08007301
 80072c8:	08007319 	.word	0x08007319

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	7bfa      	ldrb	r2, [r7, #15]
 80072d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80072d4:	e02e      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	2144      	movs	r1, #68	; 0x44
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f003 fdf9 	bl	800aed8 <VL53L0X_WrWord>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]

			break;
 80072ea:	e023      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7bfa      	ldrb	r2, [r7, #15]
 80072f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80072f4:	e01e      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	7bfa      	ldrb	r2, [r7, #15]
 80072fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80072fe:	e019      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007306:	7b7b      	ldrb	r3, [r7, #13]
 8007308:	22fe      	movs	r2, #254	; 0xfe
 800730a:	2160      	movs	r1, #96	; 0x60
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f003 fe0d 	bl	800af2c <VL53L0X_UpdateByte>
 8007312:	4603      	mov	r3, r0
 8007314:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007316:	e00d      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800731e:	7b7b      	ldrb	r3, [r7, #13]
 8007320:	22ef      	movs	r2, #239	; 0xef
 8007322:	2160      	movs	r1, #96	; 0x60
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f003 fe01 	bl	800af2c <VL53L0X_UpdateByte>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800732e:	e001      	b.n	8007334 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007330:	23fc      	movs	r3, #252	; 0xfc
 8007332:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10f      	bne.n	800735c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800733c:	787b      	ldrb	r3, [r7, #1]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007342:	887b      	ldrh	r3, [r7, #2]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	4413      	add	r3, r2
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800734e:	e005      	b.n	800735c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007350:	887b      	ldrh	r3, [r7, #2]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4413      	add	r3, r2
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800735c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	460b      	mov	r3, r1
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800737a:	897b      	ldrh	r3, [r7, #10]
 800737c:	2b05      	cmp	r3, #5
 800737e:	d905      	bls.n	800738c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007380:	23fc      	movs	r3, #252	; 0xfc
 8007382:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e008      	b.n	800739e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800738c:	897b      	ldrh	r3, [r7, #10]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007396:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7dba      	ldrb	r2, [r7, #22]
 800739c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800739e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	460b      	mov	r3, r1
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073be:	2300      	movs	r3, #0
 80073c0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80073c2:	897b      	ldrh	r3, [r7, #10]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073cc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80073ce:	7dbb      	ldrb	r3, [r7, #22]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073d4:	897b      	ldrh	r3, [r7, #10]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	330c      	adds	r3, #12
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	e040      	b.n	8007466 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80073e4:	897b      	ldrh	r3, [r7, #10]
 80073e6:	2b05      	cmp	r3, #5
 80073e8:	d830      	bhi.n	800744c <VL53L0X_SetLimitCheckValue+0x9c>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <VL53L0X_SetLimitCheckValue+0x40>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007409 	.word	0x08007409
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007427 	.word	0x08007427
 80073fc:	0800742f 	.word	0x0800742f
 8007400:	08007437 	.word	0x08007437
 8007404:	08007437 	.word	0x08007437

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800740e:	e01f      	b.n	8007450 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	2144      	movs	r1, #68	; 0x44
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f003 fd5c 	bl	800aed8 <VL53L0X_WrWord>
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007424:	e014      	b.n	8007450 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800742c:	e010      	b.n	8007450 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007434:	e00c      	b.n	8007450 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	2164      	movs	r1, #100	; 0x64
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f003 fd49 	bl	800aed8 <VL53L0X_WrWord>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800744a:	e001      	b.n	8007450 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800744c:	23fc      	movs	r3, #252	; 0xfc
 800744e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007458:	897b      	ldrh	r3, [r7, #10]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	330c      	adds	r3, #12
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	460b      	mov	r3, r1
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007482:	2300      	movs	r3, #0
 8007484:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800748a:	897b      	ldrh	r3, [r7, #10]
 800748c:	2b05      	cmp	r3, #5
 800748e:	d847      	bhi.n	8007520 <VL53L0X_GetLimitCheckValue+0xac>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <VL53L0X_GetLimitCheckValue+0x24>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074bd 	.word	0x080074bd
 80074a0:	080074e3 	.word	0x080074e3
 80074a4:	080074ef 	.word	0x080074ef
 80074a8:	080074fb 	.word	0x080074fb
 80074ac:	080074fb 	.word	0x080074fb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	77bb      	strb	r3, [r7, #30]
		break;
 80074ba:	e033      	b.n	8007524 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80074bc:	f107 0316 	add.w	r3, r7, #22
 80074c0:	461a      	mov	r2, r3
 80074c2:	2144      	movs	r1, #68	; 0x44
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f003 fd8f 	bl	800afe8 <VL53L0X_RdWord>
 80074ca:	4603      	mov	r3, r0
 80074cc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80074ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80074d6:	8afb      	ldrh	r3, [r7, #22]
 80074d8:	025b      	lsls	r3, r3, #9
 80074da:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80074dc:	2301      	movs	r3, #1
 80074de:	77bb      	strb	r3, [r7, #30]
		break;
 80074e0:	e020      	b.n	8007524 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	77bb      	strb	r3, [r7, #30]
		break;
 80074ec:	e01a      	b.n	8007524 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	77bb      	strb	r3, [r7, #30]
		break;
 80074f8:	e014      	b.n	8007524 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80074fa:	f107 0316 	add.w	r3, r7, #22
 80074fe:	461a      	mov	r2, r3
 8007500:	2164      	movs	r1, #100	; 0x64
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f003 fd70 	bl	800afe8 <VL53L0X_RdWord>
 8007508:	4603      	mov	r3, r0
 800750a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800750c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007514:	8afb      	ldrh	r3, [r7, #22]
 8007516:	025b      	lsls	r3, r3, #9
 8007518:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	77bb      	strb	r3, [r7, #30]
		break;
 800751e:	e001      	b.n	8007524 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007520:	23fc      	movs	r3, #252	; 0xfc
 8007522:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007524:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d12a      	bne.n	8007582 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800752c:	7fbb      	ldrb	r3, [r7, #30]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d124      	bne.n	800757c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d110      	bne.n	800755a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007538:	897b      	ldrh	r3, [r7, #10]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	330c      	adds	r3, #12
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800754c:	897b      	ldrh	r3, [r7, #10]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007558:	e013      	b.n	8007582 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007560:	897b      	ldrh	r3, [r7, #10]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	330c      	adds	r3, #12
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800756e:	897b      	ldrh	r3, [r7, #10]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800757a:	e002      	b.n	8007582 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007582:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop

08007590 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800759e:	f107 030e 	add.w	r3, r7, #14
 80075a2:	461a      	mov	r2, r3
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f003 fcf4 	bl	800af94 <VL53L0X_RdByte>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80075b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10e      	bne.n	80075d6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80075b8:	7bba      	ldrb	r2, [r7, #14]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	da03      	bge.n	80075d0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	e002      	b.n	80075d6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80075d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007600:	f107 030e 	add.w	r3, r7, #14
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fbea 	bl	8006de0 <VL53L0X_GetDeviceMode>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d107      	bne.n	8007628 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f898 	bl	8007754 <VL53L0X_StartMeasurement>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fb3f 	bl	8008cb4 <VL53L0X_measurement_poll_for_completion>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800763a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d103      	bne.n	8007650 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2203      	movs	r2, #3
 800764c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800766c:	2301      	movs	r3, #1
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f001 fae1 	bl	8008c3a <VL53L0X_perform_ref_calibration>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800767c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007694:	2300      	movs	r3, #0
 8007696:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800769e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80076a0:	7dbb      	ldrb	r3, [r7, #22]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d005      	beq.n	80076b2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80076a6:	7dbb      	ldrb	r3, [r7, #22]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d002      	beq.n	80076b2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80076ac:	7dbb      	ldrb	r3, [r7, #22]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d147      	bne.n	8007742 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80076b2:	f107 030c 	add.w	r3, r7, #12
 80076b6:	f107 0210 	add.w	r2, r7, #16
 80076ba:	2101      	movs	r1, #1
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fbc3 	bl	8007e48 <VL53L0X_GetInterruptThresholds>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80076cc:	d803      	bhi.n	80076d6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80076ce:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80076d0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80076d4:	d935      	bls.n	8007742 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80076d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d131      	bne.n	8007742 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80076e4:	491a      	ldr	r1, [pc, #104]	; (8007750 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f002 fcbc 	bl	800a064 <VL53L0X_load_tuning_settings>
 80076ec:	4603      	mov	r3, r0
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	e027      	b.n	8007742 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80076f2:	2204      	movs	r2, #4
 80076f4:	21ff      	movs	r1, #255	; 0xff
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f003 fbca 	bl	800ae90 <VL53L0X_WrByte>
 80076fc:	4603      	mov	r3, r0
 80076fe:	461a      	mov	r2, r3
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	4313      	orrs	r3, r2
 8007704:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007706:	2200      	movs	r2, #0
 8007708:	2170      	movs	r1, #112	; 0x70
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f003 fbc0 	bl	800ae90 <VL53L0X_WrByte>
 8007710:	4603      	mov	r3, r0
 8007712:	461a      	mov	r2, r3
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	4313      	orrs	r3, r2
 8007718:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800771a:	2200      	movs	r2, #0
 800771c:	21ff      	movs	r1, #255	; 0xff
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f003 fbb6 	bl	800ae90 <VL53L0X_WrByte>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	4313      	orrs	r3, r2
 800772c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800772e:	2200      	movs	r2, #0
 8007730:	2180      	movs	r1, #128	; 0x80
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f003 fbac 	bl	800ae90 <VL53L0X_WrByte>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	4313      	orrs	r3, r2
 8007740:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007742:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000110 	.word	0x20000110

08007754 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800775c:	2300      	movs	r3, #0
 800775e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007760:	2301      	movs	r3, #1
 8007762:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007764:	f107 030e 	add.w	r3, r7, #14
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fb38 	bl	8006de0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007770:	2201      	movs	r2, #1
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f003 fb8b 	bl	800ae90 <VL53L0X_WrByte>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800777e:	2201      	movs	r2, #1
 8007780:	21ff      	movs	r1, #255	; 0xff
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f003 fb84 	bl	800ae90 <VL53L0X_WrByte>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800778c:	2200      	movs	r2, #0
 800778e:	2100      	movs	r1, #0
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f003 fb7d 	bl	800ae90 <VL53L0X_WrByte>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80077a0:	461a      	mov	r2, r3
 80077a2:	2191      	movs	r1, #145	; 0x91
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f003 fb73 	bl	800ae90 <VL53L0X_WrByte>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80077ae:	2201      	movs	r2, #1
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f003 fb6c 	bl	800ae90 <VL53L0X_WrByte>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077bc:	2200      	movs	r2, #0
 80077be:	21ff      	movs	r1, #255	; 0xff
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f003 fb65 	bl	800ae90 <VL53L0X_WrByte>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80077ca:	2200      	movs	r2, #0
 80077cc:	2180      	movs	r1, #128	; 0x80
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f003 fb5e 	bl	800ae90 <VL53L0X_WrByte>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d054      	beq.n	8007888 <VL53L0X_StartMeasurement+0x134>
 80077de:	2b03      	cmp	r3, #3
 80077e0:	dc6c      	bgt.n	80078bc <VL53L0X_StartMeasurement+0x168>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <VL53L0X_StartMeasurement+0x98>
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d034      	beq.n	8007854 <VL53L0X_StartMeasurement+0x100>
 80077ea:	e067      	b.n	80078bc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80077ec:	2201      	movs	r2, #1
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f003 fb4d 	bl	800ae90 <VL53L0X_WrByte>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80077fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d15d      	bne.n	80078c2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007810:	f107 030d 	add.w	r3, r7, #13
 8007814:	461a      	mov	r2, r3
 8007816:	2100      	movs	r1, #0
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f003 fbbb 	bl	800af94 <VL53L0X_RdByte>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3301      	adds	r3, #1
 8007826:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007828:	7b7a      	ldrb	r2, [r7, #13]
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	4013      	ands	r3, r2
 800782e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007830:	7bfa      	ldrb	r2, [r7, #15]
 8007832:	429a      	cmp	r2, r3
 8007834:	d107      	bne.n	8007846 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007836:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007844:	d3e1      	bcc.n	800780a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800784c:	d339      	bcc.n	80078c2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800784e:	23f9      	movs	r3, #249	; 0xf9
 8007850:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007852:	e036      	b.n	80078c2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d105      	bne.n	8007868 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800785c:	2101      	movs	r1, #1
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff ff12 	bl	8007688 <VL53L0X_CheckAndLoadInterruptSettings>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007868:	2202      	movs	r2, #2
 800786a:	2100      	movs	r1, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f003 fb0f 	bl	800ae90 <VL53L0X_WrByte>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007876:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d123      	bne.n	80078c6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007886:	e01e      	b.n	80078c6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007890:	2101      	movs	r1, #1
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff fef8 	bl	8007688 <VL53L0X_CheckAndLoadInterruptSettings>
 8007898:	4603      	mov	r3, r0
 800789a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800789c:	2204      	movs	r2, #4
 800789e:	2100      	movs	r1, #0
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f003 faf5 	bl	800ae90 <VL53L0X_WrByte>
 80078a6:	4603      	mov	r3, r0
 80078a8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80078aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2204      	movs	r2, #4
 80078b6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80078ba:	e006      	b.n	80078ca <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80078bc:	23f8      	movs	r3, #248	; 0xf8
 80078be:	75fb      	strb	r3, [r7, #23]
 80078c0:	e004      	b.n	80078cc <VL53L0X_StartMeasurement+0x178>
		break;
 80078c2:	bf00      	nop
 80078c4:	e002      	b.n	80078cc <VL53L0X_StartMeasurement+0x178>
		break;
 80078c6:	bf00      	nop
 80078c8:	e000      	b.n	80078cc <VL53L0X_StartMeasurement+0x178>
		break;
 80078ca:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80078cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80078ec:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d112      	bne.n	800791a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80078f4:	f107 0308 	add.w	r3, r7, #8
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb1a 	bl	8007f34 <VL53L0X_GetInterruptMaskStatus>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b04      	cmp	r3, #4
 8007908:	d103      	bne.n	8007912 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e01c      	b.n	800794c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e018      	b.n	800794c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800791a:	f107 030d 	add.w	r3, r7, #13
 800791e:	461a      	mov	r2, r3
 8007920:	2114      	movs	r1, #20
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f003 fb36 	bl	800af94 <VL53L0X_RdByte>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800792c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007934:	7b7b      	ldrb	r3, [r7, #13]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2201      	movs	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	e002      	b.n	800794c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800794c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007958:	b5b0      	push	{r4, r5, r7, lr}
 800795a:	b096      	sub	sp, #88	; 0x58
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007962:	2300      	movs	r3, #0
 8007964:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007968:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800796c:	230c      	movs	r3, #12
 800796e:	2114      	movs	r1, #20
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f003 fa61 	bl	800ae38 <VL53L0X_ReadMulti>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800797c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 80d1 	bne.w	8007b28 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2200      	movs	r2, #0
 800798a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007992:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007996:	b29b      	uxth	r3, r3
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	b29a      	uxth	r2, r3
 800799c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4413      	add	r3, r2
 80079a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80079ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4413      	add	r3, r2
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	025b      	lsls	r3, r3, #9
 80079c4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ca:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80079cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80079da:	b29b      	uxth	r3, r3
 80079dc:	4413      	add	r3, r2
 80079de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80079e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80079e6:	025b      	lsls	r3, r3, #9
 80079e8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80079ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4413      	add	r3, r2
 8007a00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a0a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007a26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a2c:	d046      	beq.n	8007abc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007a2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a30:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007a34:	fb02 f303 	mul.w	r3, r2, r3
 8007a38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a3c:	4a57      	ldr	r2, [pc, #348]	; (8007b9c <VL53L0X_GetRangingMeasurementData+0x244>)
 8007a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8007a42:	1192      	asrs	r2, r2, #6
 8007a44:	17db      	asrs	r3, r3, #31
 8007a46:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007a48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7f1b      	ldrb	r3, [r3, #28]
 8007a56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d02c      	beq.n	8007abc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007a62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a64:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d10d      	bne.n	8007a90 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007a74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007a7c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007a80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a84:	e016      	b.n	8007ab4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007a86:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007a8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a8e:	e011      	b.n	8007ab4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007a90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a96:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007a9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a9c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007aa0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007aa4:	121b      	asrs	r3, r3, #8
 8007aa6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aaa:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007aac:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007ab0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007ab4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ab8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007abc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00d      	beq.n	8007ae0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007ac4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ac8:	089b      	lsrs	r3, r3, #2
 8007aca:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007ad0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	019b      	lsls	r3, r3, #6
 8007ad8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	75da      	strb	r2, [r3, #23]
 8007ade:	e006      	b.n	8007aee <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007ae6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007aee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007af2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007af6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	4613      	mov	r3, r2
 8007b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f002 ff4b 	bl	800a9a0 <VL53L0X_get_pal_range_status>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007b18:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007b20:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d12f      	bne.n	8007b90 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f107 040c 	add.w	r4, r7, #12
 8007b36:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007b4a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007b58:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007b5e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007b64:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007b6a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007b70:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007b76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007b80:	f107 050c 	add.w	r5, r7, #12
 8007b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b90:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3750      	adds	r7, #80	; 0x50
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b9c:	10624dd3 	.word	0x10624dd3

08007ba0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007bae:	2100      	movs	r1, #0
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff f8e9 	bl	8006d88 <VL53L0X_SetDeviceMode>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff fd16 	bl	80075f4 <VL53L0X_PerformSingleMeasurement>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff febe 	bl	8007958 <VL53L0X_GetRangingMeasurementData>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d105      	bne.n	8007bf4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007be8:	2100      	movs	r1, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f962 	bl	8007eb4 <VL53L0X_ClearInterruptMask>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	70fb      	strb	r3, [r7, #3]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70bb      	strb	r3, [r7, #2]
 8007c16:	4613      	mov	r3, r2
 8007c18:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007c24:	23f6      	movs	r3, #246	; 0xf6
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	e107      	b.n	8007e3a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007c2a:	78bb      	ldrb	r3, [r7, #2]
 8007c2c:	2b14      	cmp	r3, #20
 8007c2e:	d110      	bne.n	8007c52 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007c30:	7e3b      	ldrb	r3, [r7, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d102      	bne.n	8007c3c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007c36:	2310      	movs	r3, #16
 8007c38:	73bb      	strb	r3, [r7, #14]
 8007c3a:	e001      	b.n	8007c40 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	461a      	mov	r2, r3
 8007c44:	2184      	movs	r1, #132	; 0x84
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f003 f922 	bl	800ae90 <VL53L0X_WrByte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e0f3      	b.n	8007e3a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007c52:	78bb      	ldrb	r3, [r7, #2]
 8007c54:	2b15      	cmp	r3, #21
 8007c56:	f040 8097 	bne.w	8007d88 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	21ff      	movs	r1, #255	; 0xff
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f003 f916 	bl	800ae90 <VL53L0X_WrByte>
 8007c64:	4603      	mov	r3, r0
 8007c66:	461a      	mov	r2, r3
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f003 f90c 	bl	800ae90 <VL53L0X_WrByte>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007c82:	2200      	movs	r2, #0
 8007c84:	21ff      	movs	r1, #255	; 0xff
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f003 f902 	bl	800ae90 <VL53L0X_WrByte>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007c96:	2201      	movs	r2, #1
 8007c98:	2180      	movs	r1, #128	; 0x80
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f003 f8f8 	bl	800ae90 <VL53L0X_WrByte>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007caa:	2202      	movs	r2, #2
 8007cac:	2185      	movs	r1, #133	; 0x85
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f003 f8ee 	bl	800ae90 <VL53L0X_WrByte>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	21ff      	movs	r1, #255	; 0xff
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f003 f8e4 	bl	800ae90 <VL53L0X_WrByte>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	21cd      	movs	r1, #205	; 0xcd
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f003 f8da 	bl	800ae90 <VL53L0X_WrByte>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007ce6:	2211      	movs	r2, #17
 8007ce8:	21cc      	movs	r1, #204	; 0xcc
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f003 f8d0 	bl	800ae90 <VL53L0X_WrByte>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007cfa:	2207      	movs	r2, #7
 8007cfc:	21ff      	movs	r1, #255	; 0xff
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f003 f8c6 	bl	800ae90 <VL53L0X_WrByte>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007d0e:	2200      	movs	r2, #0
 8007d10:	21be      	movs	r1, #190	; 0xbe
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f003 f8bc 	bl	800ae90 <VL53L0X_WrByte>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007d22:	2206      	movs	r2, #6
 8007d24:	21ff      	movs	r1, #255	; 0xff
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f003 f8b2 	bl	800ae90 <VL53L0X_WrByte>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	461a      	mov	r2, r3
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007d36:	2209      	movs	r2, #9
 8007d38:	21cc      	movs	r1, #204	; 0xcc
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f003 f8a8 	bl	800ae90 <VL53L0X_WrByte>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	21ff      	movs	r1, #255	; 0xff
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f003 f89e 	bl	800ae90 <VL53L0X_WrByte>
 8007d54:	4603      	mov	r3, r0
 8007d56:	461a      	mov	r2, r3
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007d5e:	2201      	movs	r2, #1
 8007d60:	21ff      	movs	r1, #255	; 0xff
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f003 f894 	bl	800ae90 <VL53L0X_WrByte>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f003 f88a 	bl	800ae90 <VL53L0X_WrByte>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e058      	b.n	8007e3a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d121      	bne.n	8007dd4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007d90:	787b      	ldrb	r3, [r7, #1]
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d81b      	bhi.n	8007dce <VL53L0X_SetGpioConfig+0x1ce>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <VL53L0X_SetGpioConfig+0x19c>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007db1 	.word	0x08007db1
 8007da0:	08007db7 	.word	0x08007db7
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007dc3 	.word	0x08007dc3
 8007dac:	08007dc9 	.word	0x08007dc9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]
				break;
 8007db4:	e00f      	b.n	8007dd6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007db6:	2301      	movs	r3, #1
 8007db8:	73bb      	strb	r3, [r7, #14]
				break;
 8007dba:	e00c      	b.n	8007dd6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	73bb      	strb	r3, [r7, #14]
				break;
 8007dc0:	e009      	b.n	8007dd6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	73bb      	strb	r3, [r7, #14]
				break;
 8007dc6:	e006      	b.n	8007dd6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007dc8:	2304      	movs	r3, #4
 8007dca:	73bb      	strb	r3, [r7, #14]
				break;
 8007dcc:	e003      	b.n	8007dd6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007dce:	23f5      	movs	r3, #245	; 0xf5
 8007dd0:	73fb      	strb	r3, [r7, #15]
 8007dd2:	e000      	b.n	8007dd6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007dd4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d107      	bne.n	8007dee <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	461a      	mov	r2, r3
 8007de2:	210a      	movs	r1, #10
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f003 f853 	bl	800ae90 <VL53L0X_WrByte>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007df6:	7e3b      	ldrb	r3, [r7, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73bb      	strb	r3, [r7, #14]
 8007e00:	e001      	b.n	8007e06 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007e02:	2310      	movs	r3, #16
 8007e04:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	22ef      	movs	r2, #239	; 0xef
 8007e0a:	2184      	movs	r1, #132	; 0x84
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f003 f88d 	bl	800af2c <VL53L0X_UpdateByte>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d103      	bne.n	8007e26 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	787a      	ldrb	r2, [r7, #1]
 8007e22:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007e2e:	2100      	movs	r1, #0
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f83f 	bl	8007eb4 <VL53L0X_ClearInterruptMask>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop

08007e48 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	460b      	mov	r3, r1
 8007e56:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	461a      	mov	r2, r3
 8007e62:	210e      	movs	r1, #14
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f003 f8bf 	bl	800afe8 <VL53L0X_RdWord>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007e6e:	8abb      	ldrh	r3, [r7, #20]
 8007e70:	045b      	lsls	r3, r3, #17
 8007e72:	461a      	mov	r2, r3
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <VL53L0X_GetInterruptThresholds+0x68>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10f      	bne.n	8007ea4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	461a      	mov	r2, r3
 8007e8a:	210c      	movs	r1, #12
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f003 f8ab 	bl	800afe8 <VL53L0X_RdWord>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007e96:	8abb      	ldrh	r3, [r7, #20]
 8007e98:	045b      	lsls	r3, r3, #17
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <VL53L0X_GetInterruptThresholds+0x68>)
 8007e9e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	1ffe0000 	.word	0x1ffe0000

08007eb4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	210b      	movs	r1, #11
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f002 ffe0 	bl	800ae90 <VL53L0X_WrByte>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	210b      	movs	r1, #11
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f002 ffd9 	bl	800ae90 <VL53L0X_WrByte>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007ee8:	f107 030d 	add.w	r3, r7, #13
 8007eec:	461a      	mov	r2, r3
 8007eee:	2113      	movs	r1, #19
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f003 f84f 	bl	800af94 <VL53L0X_RdByte>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	461a      	mov	r2, r3
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	3301      	adds	r3, #1
 8007f04:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007f06:	7b7b      	ldrb	r3, [r7, #13]
 8007f08:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d803      	bhi.n	8007f1e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0d3      	beq.n	8007ec6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007f24:	23f4      	movs	r3, #244	; 0xf4
 8007f26:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007f42:	f107 030e 	add.w	r3, r7, #14
 8007f46:	461a      	mov	r2, r3
 8007f48:	2113      	movs	r1, #19
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f003 f822 	bl	800af94 <VL53L0X_RdByte>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 0207 	and.w	r2, r3, #7
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	f003 0318 	and.w	r3, r3, #24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007f68:	23fa      	movs	r3, #250	; 0xfa
 8007f6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 fa03 	bl	8008398 <VL53L0X_perform_ref_spad_management>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007fb0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007fb4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fba:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007fbc:	f107 0308 	add.w	r3, r7, #8
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2128      	movs	r1, #40	; 0x28
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f003 f80f 	bl	800afe8 <VL53L0X_RdWord>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d11e      	bne.n	8008014 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007fd6:	893b      	ldrh	r3, [r7, #8]
 8007fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007fe0:	893b      	ldrh	r3, [r7, #8]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	dd0b      	ble.n	8008004 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007fec:	893a      	ldrh	r2, [r7, #8]
 8007fee:	897b      	ldrh	r3, [r7, #10]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	b21b      	sxth	r3, r3
 8007ff6:	461a      	mov	r2, r3
					* 250;
 8007ff8:	23fa      	movs	r3, #250	; 0xfa
 8007ffa:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e007      	b.n	8008014 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008004:	893b      	ldrh	r3, [r7, #8]
 8008006:	b21b      	sxth	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	23fa      	movs	r3, #250	; 0xfa
 800800c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008020:	b480      	push	{r7}
 8008022:	b08b      	sub	sp, #44	; 0x2c
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800802e:	2308      	movs	r3, #8
 8008030:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f04f 32ff 	mov.w	r2, #4294967295
 800803c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008050:	69b9      	ldr	r1, [r7, #24]
 8008052:	fb01 f202 	mul.w	r2, r1, r2
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
 800805e:	e030      	b.n	80080c2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	4413      	add	r3, r2
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800806e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	429a      	cmp	r2, r3
 8008074:	d11e      	bne.n	80080b4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008076:	7ffa      	ldrb	r2, [r7, #31]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	fa42 f303 	asr.w	r3, r2, r3
 800807e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008084:	e016      	b.n	80080b4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008086:	7ffb      	ldrb	r3, [r7, #31]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <get_next_good_spad+0x88>
				success = 1;
 8008090:	2301      	movs	r3, #1
 8008092:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	fb02 f203 	mul.w	r2, r2, r3
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	4413      	add	r3, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	601a      	str	r2, [r3, #0]
				break;
 80080a6:	e009      	b.n	80080bc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80080a8:	7ffb      	ldrb	r3, [r7, #31]
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	3301      	adds	r3, #1
 80080b2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80080b4:	6a3a      	ldr	r2, [r7, #32]
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d3e4      	bcc.n	8008086 <get_next_good_spad+0x66>
				coarseIndex++) {
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	3301      	adds	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80080c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d202      	bcs.n	80080d0 <get_next_good_spad+0xb0>
 80080ca:	7fbb      	ldrb	r3, [r7, #30]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0c7      	beq.n	8008060 <get_next_good_spad+0x40>
		}
	}
}
 80080d0:	bf00      	nop
 80080d2:	372c      	adds	r7, #44	; 0x2c
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	099b      	lsrs	r3, r3, #6
 80080ec:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80080ee:	4a07      	ldr	r2, [pc, #28]	; (800810c <is_aperture+0x30>)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <is_aperture+0x22>
		isAperture = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	200002c8 	.word	0x200002c8

08008110 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008110:	b480      	push	{r7}
 8008112:	b089      	sub	sp, #36	; 0x24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800811c:	2300      	movs	r3, #0
 800811e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008120:	2308      	movs	r3, #8
 8008122:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	fbb2 f3f3 	udiv	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	fbb3 f2f2 	udiv	r2, r3, r2
 8008136:	69b9      	ldr	r1, [r7, #24]
 8008138:	fb01 f202 	mul.w	r2, r1, r2
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	429a      	cmp	r2, r3
 8008146:	d302      	bcc.n	800814e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008148:	23ce      	movs	r3, #206	; 0xce
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e010      	b.n	8008170 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b25a      	sxtb	r2, r3
 8008158:	2101      	movs	r1, #1
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	fa01 f303 	lsl.w	r3, r1, r3
 8008160:	b25b      	sxtb	r3, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	b259      	sxtb	r1, r3
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	4413      	add	r3, r2
 800816c:	b2ca      	uxtb	r2, r1
 800816e:	701a      	strb	r2, [r3, #0]

	return status;
 8008170:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3724      	adds	r7, #36	; 0x24
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800818a:	2306      	movs	r3, #6
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	21b0      	movs	r1, #176	; 0xb0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f002 fe21 	bl	800add8 <VL53L0X_WriteMulti>
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800819a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80081b0:	2306      	movs	r3, #6
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	21b0      	movs	r1, #176	; 0xb0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f002 fe3e 	bl	800ae38 <VL53L0X_ReadMulti>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80081c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08c      	sub	sp, #48	; 0x30
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	460b      	mov	r3, r1
 80081da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80081e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80081e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80081ea:	2300      	movs	r3, #0
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ee:	e02b      	b.n	8008248 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80081f0:	f107 031c 	add.w	r3, r7, #28
 80081f4:	6a3a      	ldr	r2, [r7, #32]
 80081f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff11 	bl	8008020 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d103      	bne.n	800820e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008206:	23ce      	movs	r3, #206	; 0xce
 8008208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800820c:	e020      	b.n	8008250 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	461a      	mov	r2, r3
 8008212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008214:	4413      	add	r3, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff ff60 	bl	80080dc <is_aperture>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	4293      	cmp	r3, r2
 8008224:	d003      	beq.n	800822e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008226:	23ce      	movs	r3, #206	; 0xce
 8008228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800822c:	e010      	b.n	8008250 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008232:	6a3a      	ldr	r2, [r7, #32]
 8008234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008236:	6838      	ldr	r0, [r7, #0]
 8008238:	f7ff ff6a 	bl	8008110 <enable_spad_bit>
		currentSpad++;
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	3301      	adds	r3, #1
 8008240:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	3301      	adds	r3, #1
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
 8008248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800824a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824c:	429a      	cmp	r2, r3
 800824e:	d3cf      	bcc.n	80081f0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008252:	6a3a      	ldr	r2, [r7, #32]
 8008254:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008256:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f7ff ff8d 	bl	8008180 <set_ref_spad_map>
 8008266:	4603      	mov	r3, r0
 8008268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800826c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008270:	2b00      	cmp	r3, #0
 8008272:	d121      	bne.n	80082b8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	4619      	mov	r1, r3
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff ff93 	bl	80081a6 <get_ref_spad_map>
 8008280:	4603      	mov	r3, r0
 8008282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800828a:	e011      	b.n	80082b0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	4413      	add	r3, r2
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	f107 0114 	add.w	r1, r7, #20
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	440b      	add	r3, r1
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d003      	beq.n	80082aa <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80082a2:	23ce      	movs	r3, #206	; 0xce
 80082a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80082a8:	e006      	b.n	80082b8 <enable_ref_spads+0xec>
			}
			i++;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	3301      	adds	r3, #1
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d3e9      	bcc.n	800828c <enable_ref_spads+0xc0>
		}
	}
	return status;
 80082b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3730      	adds	r7, #48	; 0x30
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08a      	sub	sp, #40	; 0x28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80082e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80082e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d107      	bne.n	80082fc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80082ec:	22c0      	movs	r2, #192	; 0xc0
 80082ee:	2101      	movs	r1, #1
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f002 fdcd 	bl	800ae90 <VL53L0X_WrByte>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80082fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008300:	2b00      	cmp	r3, #0
 8008302:	d108      	bne.n	8008316 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fc48 	bl	8007ba0 <VL53L0X_PerformSingleRangingMeasurement>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800831e:	2201      	movs	r2, #1
 8008320:	21ff      	movs	r1, #255	; 0xff
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f002 fdb4 	bl	800ae90 <VL53L0X_WrByte>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800832e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	21b6      	movs	r1, #182	; 0xb6
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f002 fe54 	bl	800afe8 <VL53L0X_RdWord>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008346:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800834a:	2b00      	cmp	r3, #0
 800834c:	d107      	bne.n	800835e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800834e:	2200      	movs	r2, #0
 8008350:	21ff      	movs	r1, #255	; 0xff
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f002 fd9c 	bl	800ae90 <VL53L0X_WrByte>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800835e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008362:	2b00      	cmp	r3, #0
 8008364:	d112      	bne.n	800838c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800836a:	461a      	mov	r2, r3
 800836c:	2101      	movs	r1, #1
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f002 fd8e 	bl	800ae90 <VL53L0X_WrByte>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800837a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800837e:	2b00      	cmp	r3, #0
 8008380:	d104      	bne.n	800838c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008388:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800838c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008390:	4618      	mov	r0, r3
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b09d      	sub	sp, #116	; 0x74
 800839c:	af06      	add	r7, sp, #24
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80083aa:	23b4      	movs	r3, #180	; 0xb4
 80083ac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80083b0:	2303      	movs	r3, #3
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80083b4:	232c      	movs	r3, #44	; 0x2c
 80083b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80083c4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80083c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80083d2:	2306      	movs	r3, #6
 80083d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80083fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80083fe:	2300      	movs	r3, #0
 8008400:	64bb      	str	r3, [r7, #72]	; 0x48
 8008402:	e009      	b.n	8008418 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008408:	4413      	add	r3, r2
 800840a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	3301      	adds	r3, #1
 8008416:	64bb      	str	r3, [r7, #72]	; 0x48
 8008418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	429a      	cmp	r2, r3
 800841e:	d3f1      	bcc.n	8008404 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008420:	2201      	movs	r2, #1
 8008422:	21ff      	movs	r1, #255	; 0xff
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f002 fd33 	bl	800ae90 <VL53L0X_WrByte>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008430:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008434:	2b00      	cmp	r3, #0
 8008436:	d107      	bne.n	8008448 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008438:	2200      	movs	r2, #0
 800843a:	214f      	movs	r1, #79	; 0x4f
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f002 fd27 	bl	800ae90 <VL53L0X_WrByte>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008448:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800844c:	2b00      	cmp	r3, #0
 800844e:	d107      	bne.n	8008460 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008450:	222c      	movs	r2, #44	; 0x2c
 8008452:	214e      	movs	r1, #78	; 0x4e
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f002 fd1b 	bl	800ae90 <VL53L0X_WrByte>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008460:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008464:	2b00      	cmp	r3, #0
 8008466:	d107      	bne.n	8008478 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008468:	2200      	movs	r2, #0
 800846a:	21ff      	movs	r1, #255	; 0xff
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f002 fd0f 	bl	800ae90 <VL53L0X_WrByte>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008478:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800847c:	2b00      	cmp	r3, #0
 800847e:	d109      	bne.n	8008494 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008480:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008484:	461a      	mov	r2, r3
 8008486:	21b6      	movs	r1, #182	; 0xb6
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f002 fd01 	bl	800ae90 <VL53L0X_WrByte>
 800848e:	4603      	mov	r3, r0
 8008490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008494:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800849c:	2200      	movs	r2, #0
 800849e:	2180      	movs	r1, #128	; 0x80
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f002 fcf5 	bl	800ae90 <VL53L0X_WrByte>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80084ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80084b4:	f107 0210 	add.w	r2, r7, #16
 80084b8:	f107 0111 	add.w	r1, r7, #17
 80084bc:	2300      	movs	r3, #0
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fbbb 	bl	8008c3a <VL53L0X_perform_ref_calibration>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80084ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d121      	bne.n	8008516 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80084d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80084de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80084ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80084f2:	f107 0218 	add.w	r2, r7, #24
 80084f6:	9204      	str	r2, [sp, #16]
 80084f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084fa:	9203      	str	r2, [sp, #12]
 80084fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084fe:	9202      	str	r2, [sp, #8]
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4623      	mov	r3, r4
 8008508:	4602      	mov	r2, r0
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff fe5e 	bl	80081cc <enable_ref_spads>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008516:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800851a:	2b00      	cmp	r3, #0
 800851c:	d174      	bne.n	8008608 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008522:	f107 0312 	add.w	r3, r7, #18
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fecb 	bl	80082c4 <perform_ref_signal_measurement>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008534:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008538:	2b00      	cmp	r3, #0
 800853a:	d161      	bne.n	8008600 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800853c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800853e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008540:	429a      	cmp	r2, r3
 8008542:	d25d      	bcs.n	8008600 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008544:	2300      	movs	r3, #0
 8008546:	64bb      	str	r3, [r7, #72]	; 0x48
 8008548:	e009      	b.n	800855e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854e:	4413      	add	r3, r2
 8008550:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008554:	2200      	movs	r2, #0
 8008556:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855a:	3301      	adds	r3, #1
 800855c:	64bb      	str	r3, [r7, #72]	; 0x48
 800855e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	429a      	cmp	r2, r3
 8008564:	d3f1      	bcc.n	800854a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008566:	e002      	b.n	800856e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800856a:	3301      	adds	r3, #1
 800856c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800856e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	4413      	add	r3, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fdb0 	bl	80080dc <is_aperture>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d103      	bne.n	800858a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008582:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	429a      	cmp	r2, r3
 8008588:	d3ee      	bcc.n	8008568 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800858a:	2301      	movs	r3, #1
 800858c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800858e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008590:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800859e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80085a2:	f107 0218 	add.w	r2, r7, #24
 80085a6:	9204      	str	r2, [sp, #16]
 80085a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085aa:	9203      	str	r2, [sp, #12]
 80085ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085ae:	9202      	str	r2, [sp, #8]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	4623      	mov	r3, r4
 80085b8:	4602      	mov	r2, r0
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff fe06 	bl	80081cc <enable_ref_spads>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80085c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11b      	bne.n	8008606 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80085d2:	f107 0312 	add.w	r3, r7, #18
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fe73 	bl	80082c4 <perform_ref_signal_measurement>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80085e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10c      	bne.n	8008606 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80085ec:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80085ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d208      	bcs.n	8008606 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80085fe:	e002      	b.n	8008606 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008604:	e000      	b.n	8008608 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008606:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008608:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800860c:	2b00      	cmp	r3, #0
 800860e:	f040 80af 	bne.w	8008770 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008612:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008616:	429a      	cmp	r2, r3
 8008618:	f240 80aa 	bls.w	8008770 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800862c:	f107 031c 	add.w	r3, r7, #28
 8008630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008632:	4618      	mov	r0, r3
 8008634:	f004 fc4d 	bl	800ced2 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008638:	8a7b      	ldrh	r3, [r7, #18]
 800863a:	461a      	mov	r2, r3
 800863c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	bfb8      	it	lt
 8008644:	425b      	neglt	r3, r3
 8008646:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800864e:	e086      	b.n	800875e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800865c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800865e:	f7ff fcdf 	bl	8008020 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d103      	bne.n	8008672 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800866a:	23ce      	movs	r3, #206	; 0xce
 800866c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008670:	e07e      	b.n	8008770 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008672:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fd2e 	bl	80080dc <is_aperture>
 8008680:	4603      	mov	r3, r0
 8008682:	461a      	mov	r2, r3
 8008684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008690:	e06e      	b.n	8008770 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008694:	3301      	adds	r3, #1
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80086a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff fd32 	bl	8008110 <enable_spad_bit>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80086b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10c      	bne.n	80086d4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80086ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086bc:	3301      	adds	r3, #1
 80086be:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80086c6:	4619      	mov	r1, r3
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fd59 	bl	8008180 <set_ref_spad_map>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80086d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d146      	bne.n	800876a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80086dc:	f107 0312 	add.w	r3, r7, #18
 80086e0:	4619      	mov	r1, r3
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fdee 	bl	80082c4 <perform_ref_signal_measurement>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80086ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d13b      	bne.n	800876e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80086f6:	8a7b      	ldrh	r3, [r7, #18]
 80086f8:	461a      	mov	r2, r3
 80086fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfb8      	it	lt
 8008702:	425b      	neglt	r3, r3
 8008704:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008706:	8a7b      	ldrh	r3, [r7, #18]
 8008708:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800870a:	429a      	cmp	r2, r3
 800870c:	d21c      	bcs.n	8008748 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800870e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008712:	429a      	cmp	r2, r3
 8008714:	d914      	bls.n	8008740 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008716:	f107 031c 	add.w	r3, r7, #28
 800871a:	4619      	mov	r1, r3
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f7ff fd2f 	bl	8008180 <set_ref_spad_map>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800872e:	f107 011c 	add.w	r1, r7, #28
 8008732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008734:	4618      	mov	r0, r3
 8008736:	f004 fbcc 	bl	800ced2 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	3b01      	subs	r3, #1
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e00a      	b.n	800875e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008752:	f107 031c 	add.w	r3, r7, #28
 8008756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008758:	4618      	mov	r0, r3
 800875a:	f004 fbba 	bl	800ced2 <memcpy>
		while (!complete) {
 800875e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008762:	2b00      	cmp	r3, #0
 8008764:	f43f af74 	beq.w	8008650 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008768:	e002      	b.n	8008770 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800876a:	bf00      	nop
 800876c:	e000      	b.n	8008770 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800876e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008770:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008774:	2b00      	cmp	r3, #0
 8008776:	d115      	bne.n	80087a4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008784:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80087a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	375c      	adds	r7, #92	; 0x5c
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}

080087b0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b093      	sub	sp, #76	; 0x4c
 80087b4:	af06      	add	r7, sp, #24
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4613      	mov	r3, r2
 80087bc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80087c8:	23b4      	movs	r3, #180	; 0xb4
 80087ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80087ce:	2306      	movs	r3, #6
 80087d0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80087d2:	232c      	movs	r3, #44	; 0x2c
 80087d4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087d6:	2201      	movs	r2, #1
 80087d8:	21ff      	movs	r1, #255	; 0xff
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f002 fb58 	bl	800ae90 <VL53L0X_WrByte>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80087e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80087ee:	2200      	movs	r2, #0
 80087f0:	214f      	movs	r1, #79	; 0x4f
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f002 fb4c 	bl	800ae90 <VL53L0X_WrByte>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80087fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008806:	222c      	movs	r2, #44	; 0x2c
 8008808:	214e      	movs	r1, #78	; 0x4e
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f002 fb40 	bl	800ae90 <VL53L0X_WrByte>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008816:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800881a:	2b00      	cmp	r3, #0
 800881c:	d107      	bne.n	800882e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800881e:	2200      	movs	r2, #0
 8008820:	21ff      	movs	r1, #255	; 0xff
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f002 fb34 	bl	800ae90 <VL53L0X_WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800882e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008832:	2b00      	cmp	r3, #0
 8008834:	d109      	bne.n	800884a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800883a:	461a      	mov	r2, r3
 800883c:	21b6      	movs	r1, #182	; 0xb6
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f002 fb26 	bl	800ae90 <VL53L0X_WrByte>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800884a:	2300      	movs	r3, #0
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
 800884e:	e009      	b.n	8008864 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	4413      	add	r3, r2
 8008856:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	3301      	adds	r3, #1
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	429a      	cmp	r2, r3
 800886a:	d3f1      	bcc.n	8008850 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d011      	beq.n	8008896 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008872:	e002      	b.n	800887a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	3301      	adds	r3, #1
 8008878:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800887a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	4413      	add	r3, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fc2a 	bl	80080dc <is_aperture>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <VL53L0X_set_reference_spads+0xe6>
 800888e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	429a      	cmp	r2, r3
 8008894:	d3ee      	bcc.n	8008874 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80088a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088a6:	79f9      	ldrb	r1, [r7, #7]
 80088a8:	f107 0214 	add.w	r2, r7, #20
 80088ac:	9204      	str	r2, [sp, #16]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	9203      	str	r2, [sp, #12]
 80088b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b4:	9202      	str	r2, [sp, #8]
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	4623      	mov	r3, r4
 80088be:	4602      	mov	r2, r0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f7ff fc83 	bl	80081cc <enable_ref_spads>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80088cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10c      	bne.n	80088ee <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	79fa      	ldrb	r2, [r7, #7]
 80088ea:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80088ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3734      	adds	r7, #52	; 0x34
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}

080088fa <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800890a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	2100      	movs	r1, #0
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f002 fab6 	bl	800ae90 <VL53L0X_WrByte>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f9bf 	bl	8008cb4 <VL53L0X_measurement_poll_for_completion>
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800893a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008942:	2100      	movs	r1, #0
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff fab5 	bl	8007eb4 <VL53L0X_ClearInterruptMask>
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800894e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f002 fa98 	bl	800ae90 <VL53L0X_WrByte>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	4603      	mov	r3, r0
 8008980:	70fb      	strb	r3, [r7, #3]
 8008982:	460b      	mov	r3, r1
 8008984:	70bb      	strb	r3, [r7, #2]
 8008986:	4613      	mov	r3, r2
 8008988:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008992:	2201      	movs	r2, #1
 8008994:	21ff      	movs	r1, #255	; 0xff
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 fa7a 	bl	800ae90 <VL53L0X_WrByte>
 800899c:	4603      	mov	r3, r0
 800899e:	461a      	mov	r2, r3
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f002 fa70 	bl	800ae90 <VL53L0X_WrByte>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80089ba:	2200      	movs	r2, #0
 80089bc:	21ff      	movs	r1, #255	; 0xff
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f002 fa66 	bl	800ae90 <VL53L0X_WrByte>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01e      	beq.n	8008a12 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80089d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	21cb      	movs	r1, #203	; 0xcb
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f002 fad7 	bl	800af94 <VL53L0X_RdByte>
 80089e6:	4603      	mov	r3, r0
 80089e8:	461a      	mov	r2, r3
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80089f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d02a      	beq.n	8008a4e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80089f8:	f107 030e 	add.w	r3, r7, #14
 80089fc:	461a      	mov	r2, r3
 80089fe:	21ee      	movs	r1, #238	; 0xee
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 fac7 	bl	800af94 <VL53L0X_RdByte>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	73fb      	strb	r3, [r7, #15]
 8008a10:	e01d      	b.n	8008a4e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008a1a:	78bb      	ldrb	r3, [r7, #2]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	21cb      	movs	r1, #203	; 0xcb
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f002 fa35 	bl	800ae90 <VL53L0X_WrByte>
 8008a26:	4603      	mov	r3, r0
 8008a28:	461a      	mov	r2, r3
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008a38:	787b      	ldrb	r3, [r7, #1]
 8008a3a:	2280      	movs	r2, #128	; 0x80
 8008a3c:	21ee      	movs	r1, #238	; 0xee
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fa74 	bl	800af2c <VL53L0X_UpdateByte>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a4e:	2201      	movs	r2, #1
 8008a50:	21ff      	movs	r1, #255	; 0xff
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f002 fa1c 	bl	800ae90 <VL53L0X_WrByte>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008a62:	2201      	movs	r2, #1
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f002 fa12 	bl	800ae90 <VL53L0X_WrByte>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a76:	2200      	movs	r2, #0
 8008a78:	21ff      	movs	r1, #255	; 0xff
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 fa08 	bl	800ae90 <VL53L0X_WrByte>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	f023 0310 	bic.w	r3, r3, #16
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	701a      	strb	r2, [r3, #0]

	return Status;
 8008a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b08a      	sub	sp, #40	; 0x28
 8008aa6:	af04      	add	r7, sp, #16
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	71fb      	strb	r3, [r7, #7]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008acc:	79bb      	ldrb	r3, [r7, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008ad8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008ada:	2201      	movs	r2, #1
 8008adc:	2101      	movs	r1, #1
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f002 f9d6 	bl	800ae90 <VL53L0X_WrByte>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008af0:	2140      	movs	r1, #64	; 0x40
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7ff ff01 	bl	80088fa <VL53L0X_perform_single_ref_calibration>
 8008af8:	4603      	mov	r3, r0
 8008afa:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d115      	bne.n	8008b30 <VL53L0X_perform_vhv_calibration+0x8e>
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d112      	bne.n	8008b30 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008b0a:	7d39      	ldrb	r1, [r7, #20]
 8008b0c:	7d7a      	ldrb	r2, [r7, #21]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	2301      	movs	r3, #1
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	f107 0313 	add.w	r3, r7, #19
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	460b      	mov	r3, r1
 8008b22:	2101      	movs	r1, #1
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff ff23 	bl	8008970 <VL53L0X_ref_calibration_io>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75fb      	strb	r3, [r7, #23]
 8008b2e:	e002      	b.n	8008b36 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d112      	bne.n	8008b64 <VL53L0X_perform_vhv_calibration+0xc2>
 8008b3e:	79bb      	ldrb	r3, [r7, #6]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00f      	beq.n	8008b64 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008b44:	7dbb      	ldrb	r3, [r7, #22]
 8008b46:	461a      	mov	r2, r3
 8008b48:	2101      	movs	r1, #1
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f002 f9a0 	bl	800ae90 <VL53L0X_WrByte>
 8008b50:	4603      	mov	r3, r0
 8008b52:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	7dba      	ldrb	r2, [r7, #22]
 8008b60:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	; 0x28
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	460b      	mov	r3, r1
 8008b80:	71fb      	strb	r3, [r7, #7]
 8008b82:	4613      	mov	r3, r2
 8008b84:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008b96:	79bb      	ldrb	r3, [r7, #6]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008ba2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f002 f971 	bl	800ae90 <VL53L0X_WrByte>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008bba:	2100      	movs	r1, #0
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f7ff fe9c 	bl	80088fa <VL53L0X_perform_single_ref_calibration>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d115      	bne.n	8008bfa <VL53L0X_perform_phase_calibration+0x8a>
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d112      	bne.n	8008bfa <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008bd4:	7d39      	ldrb	r1, [r7, #20]
 8008bd6:	7d7a      	ldrb	r2, [r7, #21]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9302      	str	r3, [sp, #8]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f107 0313 	add.w	r3, r7, #19
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	460b      	mov	r3, r1
 8008bec:	2101      	movs	r1, #1
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff febe 	bl	8008970 <VL53L0X_ref_calibration_io>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	75fb      	strb	r3, [r7, #23]
 8008bf8:	e002      	b.n	8008c00 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d112      	bne.n	8008c2e <VL53L0X_perform_phase_calibration+0xbe>
 8008c08:	79bb      	ldrb	r3, [r7, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008c0e:	7dbb      	ldrb	r3, [r7, #22]
 8008c10:	461a      	mov	r2, r3
 8008c12:	2101      	movs	r1, #1
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f002 f93b 	bl	800ae90 <VL53L0X_WrByte>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	7dba      	ldrb	r2, [r7, #22]
 8008c2a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008c56:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff ff1f 	bl	8008aa2 <VL53L0X_perform_vhv_calibration>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d107      	bne.n	8008c80 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008c70:	78fa      	ldrb	r2, [r7, #3]
 8008c72:	2300      	movs	r3, #0
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff ff7a 	bl	8008b70 <VL53L0X_perform_phase_calibration>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10f      	bne.n	8008ca8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008c88:	7dbb      	ldrb	r3, [r7, #22]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f002 f8fe 	bl	800ae90 <VL53L0X_WrByte>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	7dba      	ldrb	r2, [r7, #22]
 8008ca4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008cc8:	f107 030f 	add.w	r3, r7, #15
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fe fe02 	bl	80078d8 <VL53L0X_GetMeasurementDataReady>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d110      	bne.n	8008d02 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d00f      	beq.n	8008d06 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cf2:	d302      	bcc.n	8008cfa <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008cf4:	23f9      	movs	r3, #249	; 0xf9
 8008cf6:	75fb      	strb	r3, [r7, #23]
			break;
 8008cf8:	e006      	b.n	8008d08 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f002 f9e8 	bl	800b0d0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008d00:	e7e2      	b.n	8008cc8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008d02:	bf00      	nop
 8008d04:	e000      	b.n	8008d08 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008d06:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	3301      	adds	r3, #1
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d4a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008d4c:	e002      	b.n	8008d54 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	089b      	lsrs	r3, r3, #2
 8008d52:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d8f8      	bhi.n	8008d4e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008d5c:	e017      	b.n	8008d8e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4413      	add	r3, r2
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d30b      	bcc.n	8008d82 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4413      	add	r3, r2
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e002      	b.n	8008d88 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	089b      	lsrs	r3, r3, #2
 8008d8c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e4      	bne.n	8008d5e <VL53L0X_isqrt+0x24>
	}

	return res;
 8008d94:	68fb      	ldr	r3, [r7, #12]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008dae:	2200      	movs	r2, #0
 8008db0:	2183      	movs	r1, #131	; 0x83
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f002 f86c 	bl	800ae90 <VL53L0X_WrByte>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d11e      	bne.n	8008e08 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008dce:	f107 030f 	add.w	r3, r7, #15
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	2183      	movs	r1, #131	; 0x83
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f002 f8dc 	bl	800af94 <VL53L0X_RdByte>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10a      	bne.n	8008dfc <VL53L0X_device_read_strobe+0x5a>
 8008de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3301      	adds	r3, #1
 8008df2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008dfa:	d3e8      	bcc.n	8008dce <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e02:	d301      	bcc.n	8008e08 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008e04:	23f9      	movs	r3, #249	; 0xf9
 8008e06:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008e08:	2201      	movs	r2, #1
 8008e0a:	2183      	movs	r1, #131	; 0x83
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f002 f83f 	bl	800ae90 <VL53L0X_WrByte>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b098      	sub	sp, #96	; 0x60
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008e58:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008e5c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008e70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008e74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e78:	2b07      	cmp	r3, #7
 8008e7a:	f000 8408 	beq.w	800968e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008e7e:	2201      	movs	r2, #1
 8008e80:	2180      	movs	r1, #128	; 0x80
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f002 f804 	bl	800ae90 <VL53L0X_WrByte>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e96:	2201      	movs	r2, #1
 8008e98:	21ff      	movs	r1, #255	; 0xff
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fff8 	bl	800ae90 <VL53L0X_WrByte>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 ffec 	bl	800ae90 <VL53L0X_WrByte>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008ec6:	2206      	movs	r2, #6
 8008ec8:	21ff      	movs	r1, #255	; 0xff
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f001 ffe0 	bl	800ae90 <VL53L0X_WrByte>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008ede:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	2183      	movs	r1, #131	; 0x83
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f002 f854 	bl	800af94 <VL53L0X_RdByte>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008efa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008efe:	f043 0304 	orr.w	r3, r3, #4
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	2183      	movs	r1, #131	; 0x83
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 ffc1 	bl	800ae90 <VL53L0X_WrByte>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	461a      	mov	r2, r3
 8008f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f16:	4313      	orrs	r3, r2
 8008f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	21ff      	movs	r1, #255	; 0xff
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 ffb5 	bl	800ae90 <VL53L0X_WrByte>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008f34:	2201      	movs	r2, #1
 8008f36:	2181      	movs	r1, #129	; 0x81
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 ffa9 	bl	800ae90 <VL53L0X_WrByte>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f46:	4313      	orrs	r3, r2
 8008f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f002 f8bf 	bl	800b0d0 <VL53L0X_PollingDelay>
 8008f52:	4603      	mov	r3, r0
 8008f54:	461a      	mov	r2, r3
 8008f56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008f60:	2201      	movs	r2, #1
 8008f62:	2180      	movs	r1, #128	; 0x80
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 ff93 	bl	800ae90 <VL53L0X_WrByte>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 8098 	beq.w	80090b4 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008f84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f88:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f040 8091 	bne.w	80090b4 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008f92:	226b      	movs	r2, #107	; 0x6b
 8008f94:	2194      	movs	r1, #148	; 0x94
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 ff7a 	bl	800ae90 <VL53L0X_WrByte>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fef9 	bl	8008da2 <VL53L0X_device_read_strobe>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	2190      	movs	r1, #144	; 0x90
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f002 f846 	bl	800b058 <VL53L0X_RdDWord>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	0a1b      	lsrs	r3, r3, #8
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	0bdb      	lsrs	r3, r3, #15
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	2194      	movs	r1, #148	; 0x94
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 ff48 	bl	800ae90 <VL53L0X_WrByte>
 8009000:	4603      	mov	r3, r0
 8009002:	461a      	mov	r2, r3
 8009004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009008:	4313      	orrs	r3, r2
 800900a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fec7 	bl	8008da2 <VL53L0X_device_read_strobe>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800901c:	4313      	orrs	r3, r2
 800901e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009026:	461a      	mov	r2, r3
 8009028:	2190      	movs	r1, #144	; 0x90
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f002 f814 	bl	800b058 <VL53L0X_RdDWord>
 8009030:	4603      	mov	r3, r0
 8009032:	461a      	mov	r2, r3
 8009034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009038:	4313      	orrs	r3, r2
 800903a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	0e1b      	lsrs	r3, r3, #24
 8009042:	b2db      	uxtb	r3, r3
 8009044:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	b2db      	uxtb	r3, r3
 800904c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	0a1b      	lsrs	r3, r3, #8
 8009052:	b2db      	uxtb	r3, r3
 8009054:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	b2db      	uxtb	r3, r3
 800905a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800905c:	2225      	movs	r2, #37	; 0x25
 800905e:	2194      	movs	r1, #148	; 0x94
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 ff15 	bl	800ae90 <VL53L0X_WrByte>
 8009066:	4603      	mov	r3, r0
 8009068:	461a      	mov	r2, r3
 800906a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800906e:	4313      	orrs	r3, r2
 8009070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fe94 	bl	8008da2 <VL53L0X_device_read_strobe>
 800907a:	4603      	mov	r3, r0
 800907c:	461a      	mov	r2, r3
 800907e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009082:	4313      	orrs	r3, r2
 8009084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800908c:	461a      	mov	r2, r3
 800908e:	2190      	movs	r1, #144	; 0x90
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 ffe1 	bl	800b058 <VL53L0X_RdDWord>
 8009096:	4603      	mov	r3, r0
 8009098:	461a      	mov	r2, r3
 800909a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800909e:	4313      	orrs	r3, r2
 80090a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	0e1b      	lsrs	r3, r3, #24
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8189 	beq.w	80093d2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80090c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090c4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f040 8182 	bne.w	80093d2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80090ce:	2202      	movs	r2, #2
 80090d0:	2194      	movs	r1, #148	; 0x94
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 fedc 	bl	800ae90 <VL53L0X_WrByte>
 80090d8:	4603      	mov	r3, r0
 80090da:	461a      	mov	r2, r3
 80090dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e0:	4313      	orrs	r3, r2
 80090e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fe5b 	bl	8008da2 <VL53L0X_device_read_strobe>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80090fa:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80090fe:	461a      	mov	r2, r3
 8009100:	2190      	movs	r1, #144	; 0x90
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 ff46 	bl	800af94 <VL53L0X_RdByte>
 8009108:	4603      	mov	r3, r0
 800910a:	461a      	mov	r2, r3
 800910c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009110:	4313      	orrs	r3, r2
 8009112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009116:	227b      	movs	r2, #123	; 0x7b
 8009118:	2194      	movs	r1, #148	; 0x94
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 feb8 	bl	800ae90 <VL53L0X_WrByte>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009128:	4313      	orrs	r3, r2
 800912a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fe37 	bl	8008da2 <VL53L0X_device_read_strobe>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800913c:	4313      	orrs	r3, r2
 800913e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009142:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009146:	461a      	mov	r2, r3
 8009148:	2190      	movs	r1, #144	; 0x90
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 ff22 	bl	800af94 <VL53L0X_RdByte>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009158:	4313      	orrs	r3, r2
 800915a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800915e:	2277      	movs	r2, #119	; 0x77
 8009160:	2194      	movs	r1, #148	; 0x94
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 fe94 	bl	800ae90 <VL53L0X_WrByte>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009170:	4313      	orrs	r3, r2
 8009172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fe13 	bl	8008da2 <VL53L0X_device_read_strobe>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009184:	4313      	orrs	r3, r2
 8009186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800918a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800918e:	461a      	mov	r2, r3
 8009190:	2190      	movs	r1, #144	; 0x90
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 ff60 	bl	800b058 <VL53L0X_RdDWord>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	0e5b      	lsrs	r3, r3, #25
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	0c9b      	lsrs	r3, r3, #18
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	0adb      	lsrs	r3, r3, #11
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	091b      	lsrs	r3, r3, #4
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80091f0:	2278      	movs	r2, #120	; 0x78
 80091f2:	2194      	movs	r1, #148	; 0x94
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fe4b 	bl	800ae90 <VL53L0X_WrByte>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009202:	4313      	orrs	r3, r2
 8009204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff fdca 	bl	8008da2 <VL53L0X_device_read_strobe>
 800920e:	4603      	mov	r3, r0
 8009210:	461a      	mov	r2, r3
 8009212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009216:	4313      	orrs	r3, r2
 8009218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800921c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009220:	461a      	mov	r2, r3
 8009222:	2190      	movs	r1, #144	; 0x90
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 ff17 	bl	800b058 <VL53L0X_RdDWord>
 800922a:	4603      	mov	r3, r0
 800922c:	461a      	mov	r2, r3
 800922e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009232:	4313      	orrs	r3, r2
 8009234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	0f5b      	lsrs	r3, r3, #29
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009242:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009248:	4413      	add	r3, r2
 800924a:	b2db      	uxtb	r3, r3
 800924c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	0d9b      	lsrs	r3, r3, #22
 8009252:	b2db      	uxtb	r3, r3
 8009254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009258:	b2db      	uxtb	r3, r3
 800925a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	0bdb      	lsrs	r3, r3, #15
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009266:	b2db      	uxtb	r3, r3
 8009268:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009274:	b2db      	uxtb	r3, r3
 8009276:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009282:	b2db      	uxtb	r3, r3
 8009284:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	b2db      	uxtb	r3, r3
 800928a:	019b      	lsls	r3, r3, #6
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009292:	b2db      	uxtb	r3, r3
 8009294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009298:	2279      	movs	r2, #121	; 0x79
 800929a:	2194      	movs	r1, #148	; 0x94
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 fdf7 	bl	800ae90 <VL53L0X_WrByte>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7ff fd76 	bl	8008da2 <VL53L0X_device_read_strobe>
 80092b6:	4603      	mov	r3, r0
 80092b8:	461a      	mov	r2, r3
 80092ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092be:	4313      	orrs	r3, r2
 80092c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80092c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092c8:	461a      	mov	r2, r3
 80092ca:	2190      	movs	r1, #144	; 0x90
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fec3 	bl	800b058 <VL53L0X_RdDWord>
 80092d2:	4603      	mov	r3, r0
 80092d4:	461a      	mov	r2, r3
 80092d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092da:	4313      	orrs	r3, r2
 80092dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	0e9b      	lsrs	r3, r3, #26
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ea:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80092ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092f0:	4413      	add	r3, r2
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	0cdb      	lsrs	r3, r3, #19
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009300:	b2db      	uxtb	r3, r3
 8009302:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	0b1b      	lsrs	r3, r3, #12
 8009308:	b2db      	uxtb	r3, r3
 800930a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930e:	b2db      	uxtb	r3, r3
 8009310:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800931c:	b2db      	uxtb	r3, r3
 800931e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	b2db      	uxtb	r3, r3
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009332:	227a      	movs	r2, #122	; 0x7a
 8009334:	2194      	movs	r1, #148	; 0x94
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f001 fdaa 	bl	800ae90 <VL53L0X_WrByte>
 800933c:	4603      	mov	r3, r0
 800933e:	461a      	mov	r2, r3
 8009340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009344:	4313      	orrs	r3, r2
 8009346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fd29 	bl	8008da2 <VL53L0X_device_read_strobe>
 8009350:	4603      	mov	r3, r0
 8009352:	461a      	mov	r2, r3
 8009354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009358:	4313      	orrs	r3, r2
 800935a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800935e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009362:	461a      	mov	r2, r3
 8009364:	2190      	movs	r1, #144	; 0x90
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 fe76 	bl	800b058 <VL53L0X_RdDWord>
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009374:	4313      	orrs	r3, r2
 8009376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	0f9b      	lsrs	r3, r3, #30
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009384:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800938a:	4413      	add	r3, r2
 800938c:	b2db      	uxtb	r3, r3
 800938e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	0ddb      	lsrs	r3, r3, #23
 8009394:	b2db      	uxtb	r3, r3
 8009396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939a:	b2db      	uxtb	r3, r3
 800939c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	0c1b      	lsrs	r3, r3, #16
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	0a5b      	lsrs	r3, r3, #9
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	089b      	lsrs	r3, r3, #2
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80f1 	beq.w	80095c0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80093de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093e2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 80ea 	bne.w	80095c0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80093ec:	227b      	movs	r2, #123	; 0x7b
 80093ee:	2194      	movs	r1, #148	; 0x94
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 fd4d 	bl	800ae90 <VL53L0X_WrByte>
 80093f6:	4603      	mov	r3, r0
 80093f8:	461a      	mov	r2, r3
 80093fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093fe:	4313      	orrs	r3, r2
 8009400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff fccc 	bl	8008da2 <VL53L0X_device_read_strobe>
 800940a:	4603      	mov	r3, r0
 800940c:	461a      	mov	r2, r3
 800940e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009412:	4313      	orrs	r3, r2
 8009414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800941c:	461a      	mov	r2, r3
 800941e:	2190      	movs	r1, #144	; 0x90
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 fe19 	bl	800b058 <VL53L0X_RdDWord>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800942e:	4313      	orrs	r3, r2
 8009430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009434:	227c      	movs	r2, #124	; 0x7c
 8009436:	2194      	movs	r1, #148	; 0x94
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 fd29 	bl	800ae90 <VL53L0X_WrByte>
 800943e:	4603      	mov	r3, r0
 8009440:	461a      	mov	r2, r3
 8009442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009446:	4313      	orrs	r3, r2
 8009448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff fca8 	bl	8008da2 <VL53L0X_device_read_strobe>
 8009452:	4603      	mov	r3, r0
 8009454:	461a      	mov	r2, r3
 8009456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800945a:	4313      	orrs	r3, r2
 800945c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009464:	461a      	mov	r2, r3
 8009466:	2190      	movs	r1, #144	; 0x90
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fdf5 	bl	800b058 <VL53L0X_RdDWord>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009476:	4313      	orrs	r3, r2
 8009478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800947c:	2273      	movs	r2, #115	; 0x73
 800947e:	2194      	movs	r1, #148	; 0x94
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fd05 	bl	800ae90 <VL53L0X_WrByte>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800948e:	4313      	orrs	r3, r2
 8009490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff fc84 	bl	8008da2 <VL53L0X_device_read_strobe>
 800949a:	4603      	mov	r3, r0
 800949c:	461a      	mov	r2, r3
 800949e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094ac:	461a      	mov	r2, r3
 80094ae:	2190      	movs	r1, #144	; 0x90
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 fdd1 	bl	800b058 <VL53L0X_RdDWord>
 80094b6:	4603      	mov	r3, r0
 80094b8:	461a      	mov	r2, r3
 80094ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094be:	4313      	orrs	r3, r2
 80094c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80094cc:	2274      	movs	r2, #116	; 0x74
 80094ce:	2194      	movs	r1, #148	; 0x94
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fcdd 	bl	800ae90 <VL53L0X_WrByte>
 80094d6:	4603      	mov	r3, r0
 80094d8:	461a      	mov	r2, r3
 80094da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094de:	4313      	orrs	r3, r2
 80094e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff fc5c 	bl	8008da2 <VL53L0X_device_read_strobe>
 80094ea:	4603      	mov	r3, r0
 80094ec:	461a      	mov	r2, r3
 80094ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094f2:	4313      	orrs	r3, r2
 80094f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094fc:	461a      	mov	r2, r3
 80094fe:	2190      	movs	r1, #144	; 0x90
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fda9 	bl	800b058 <VL53L0X_RdDWord>
 8009506:	4603      	mov	r3, r0
 8009508:	461a      	mov	r2, r3
 800950a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800950e:	4313      	orrs	r3, r2
 8009510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800951a:	4313      	orrs	r3, r2
 800951c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800951e:	2275      	movs	r2, #117	; 0x75
 8009520:	2194      	movs	r1, #148	; 0x94
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fcb4 	bl	800ae90 <VL53L0X_WrByte>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009530:	4313      	orrs	r3, r2
 8009532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fc33 	bl	8008da2 <VL53L0X_device_read_strobe>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009544:	4313      	orrs	r3, r2
 8009546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800954a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800954e:	461a      	mov	r2, r3
 8009550:	2190      	movs	r1, #144	; 0x90
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fd80 	bl	800b058 <VL53L0X_RdDWord>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009560:	4313      	orrs	r3, r2
 8009562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800956a:	b29b      	uxth	r3, r3
 800956c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800956e:	2276      	movs	r2, #118	; 0x76
 8009570:	2194      	movs	r1, #148	; 0x94
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 fc8c 	bl	800ae90 <VL53L0X_WrByte>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009580:	4313      	orrs	r3, r2
 8009582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fc0b 	bl	8008da2 <VL53L0X_device_read_strobe>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009594:	4313      	orrs	r3, r2
 8009596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800959a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800959e:	461a      	mov	r2, r3
 80095a0:	2190      	movs	r1, #144	; 0x90
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 fd58 	bl	800b058 <VL53L0X_RdDWord>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80095ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095bc:	4313      	orrs	r3, r2
 80095be:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80095c0:	2200      	movs	r2, #0
 80095c2:	2181      	movs	r1, #129	; 0x81
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fc63 	bl	800ae90 <VL53L0X_WrByte>
 80095ca:	4603      	mov	r3, r0
 80095cc:	461a      	mov	r2, r3
 80095ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80095d8:	2206      	movs	r2, #6
 80095da:	21ff      	movs	r1, #255	; 0xff
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 fc57 	bl	800ae90 <VL53L0X_WrByte>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80095f0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80095f4:	461a      	mov	r2, r3
 80095f6:	2183      	movs	r1, #131	; 0x83
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 fccb 	bl	800af94 <VL53L0X_RdByte>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009606:	4313      	orrs	r3, r2
 8009608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800960c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009610:	f023 0304 	bic.w	r3, r3, #4
 8009614:	b2db      	uxtb	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	2183      	movs	r1, #131	; 0x83
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fc38 	bl	800ae90 <VL53L0X_WrByte>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009628:	4313      	orrs	r3, r2
 800962a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800962e:	2201      	movs	r2, #1
 8009630:	21ff      	movs	r1, #255	; 0xff
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fc2c 	bl	800ae90 <VL53L0X_WrByte>
 8009638:	4603      	mov	r3, r0
 800963a:	461a      	mov	r2, r3
 800963c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009640:	4313      	orrs	r3, r2
 8009642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009646:	2201      	movs	r2, #1
 8009648:	2100      	movs	r1, #0
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fc20 	bl	800ae90 <VL53L0X_WrByte>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009658:	4313      	orrs	r3, r2
 800965a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800965e:	2200      	movs	r2, #0
 8009660:	21ff      	movs	r1, #255	; 0xff
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fc14 	bl	800ae90 <VL53L0X_WrByte>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009670:	4313      	orrs	r3, r2
 8009672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009676:	2200      	movs	r2, #0
 8009678:	2180      	movs	r1, #128	; 0x80
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fc08 	bl	800ae90 <VL53L0X_WrByte>
 8009680:	4603      	mov	r3, r0
 8009682:	461a      	mov	r2, r3
 8009684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009688:	4313      	orrs	r3, r2
 800968a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800968e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009692:	2b00      	cmp	r3, #0
 8009694:	f040 808f 	bne.w	80097b6 <VL53L0X_get_info_from_device+0x98e>
 8009698:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800969c:	2b07      	cmp	r3, #7
 800969e:	f000 808a 	beq.w	80097b6 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d024      	beq.n	80096f6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80096ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096b0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d11e      	bne.n	80096f6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80096be:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80096c8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80096cc:	2300      	movs	r3, #0
 80096ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d0:	e00e      	b.n	80096f0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80096d2:	f107 0208 	add.w	r2, r7, #8
 80096d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d8:	4413      	add	r3, r2
 80096da:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80096e6:	460a      	mov	r2, r1
 80096e8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80096ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ec:	3301      	adds	r3, #1
 80096ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	dded      	ble.n	80096d2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80096f6:	78fb      	ldrb	r3, [r7, #3]
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d018      	beq.n	8009732 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009700:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009704:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009708:	2b00      	cmp	r3, #0
 800970a:	d112      	bne.n	8009732 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800970c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009716:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	33f3      	adds	r3, #243	; 0xf3
 8009724:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009726:	f107 0310 	add.w	r3, r7, #16
 800972a:	4619      	mov	r1, r3
 800972c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800972e:	f003 fd8c 	bl	800d24a <strcpy>

		}

		if (((option & 4) == 4) &&
 8009732:	78fb      	ldrb	r3, [r7, #3]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d030      	beq.n	800979e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800973c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009740:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009744:	2b00      	cmp	r3, #0
 8009746:	d12a      	bne.n	800979e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800975a:	025b      	lsls	r3, r3, #9
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009762:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800976c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800976e:	2b00      	cmp	r3, #0
 8009770:	d011      	beq.n	8009796 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800977a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800977c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009780:	fb02 f303 	mul.w	r3, r2, r3
 8009784:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009786:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800978a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800978e:	425b      	negs	r3, r3
 8009790:	b29b      	uxth	r3, r3
 8009792:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009796:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800979e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80097ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097b6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3760      	adds	r7, #96	; 0x60
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b087      	sub	sp, #28
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80097ce:	f240 6277 	movw	r2, #1655	; 0x677
 80097d2:	f04f 0300 	mov.w	r3, #0
 80097d6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80097da:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80097de:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
 80097ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80097f0:	68bb      	ldr	r3, [r7, #8]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80097fe:	b480      	push	{r7}
 8009800:	b087      	sub	sp, #28
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d017      	beq.n	8009848 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3b01      	subs	r3, #1
 800981c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800981e:	e005      	b.n	800982c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	085b      	lsrs	r3, r3, #1
 8009824:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009826:	89fb      	ldrh	r3, [r7, #14]
 8009828:	3301      	adds	r3, #1
 800982a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1f4      	bne.n	8009820 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009836:	89fb      	ldrh	r3, [r7, #14]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	b29b      	uxth	r3, r3
 8009840:	b2db      	uxtb	r3, r3
 8009842:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009844:	4413      	add	r3, r2
 8009846:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009848:	8afb      	ldrh	r3, [r7, #22]

}
 800984a:	4618      	mov	r0, r3
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009856:	b480      	push	{r7}
 8009858:	b085      	sub	sp, #20
 800985a:	af00      	add	r7, sp, #0
 800985c:	4603      	mov	r3, r0
 800985e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009864:	88fb      	ldrh	r3, [r7, #6]
 8009866:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009868:	88fa      	ldrh	r2, [r7, #6]
 800986a:	0a12      	lsrs	r2, r2, #8
 800986c:	b292      	uxth	r2, r2
 800986e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009870:	3301      	adds	r3, #1
 8009872:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009874:	68fb      	ldr	r3, [r7, #12]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
	...

08009884 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	4619      	mov	r1, r3
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff ff91 	bl	80097c2 <VL53L0X_calc_macro_period_ps>
 80098a0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80098a8:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <VL53L0X_calc_timeout_mclks+0x50>)
 80098aa:	fba2 2303 	umull	r2, r3, r2, r3
 80098ae:	099b      	lsrs	r3, r3, #6
 80098b0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098b8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	085b      	lsrs	r3, r3, #1
 80098c0:	441a      	add	r2, r3
	timeout_period_mclks =
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80098ca:	69fb      	ldr	r3, [r7, #28]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3720      	adds	r7, #32
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	10624dd3 	.word	0x10624dd3

080098d8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	807b      	strh	r3, [r7, #2]
 80098e4:	4613      	mov	r3, r2
 80098e6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80098ec:	787b      	ldrb	r3, [r7, #1]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff ff66 	bl	80097c2 <VL53L0X_calc_macro_period_ps>
 80098f6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80098fe:	4a0a      	ldr	r2, [pc, #40]	; (8009928 <VL53L0X_calc_timeout_us+0x50>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	099b      	lsrs	r3, r3, #6
 8009906:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009908:	887b      	ldrh	r3, [r7, #2]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	fb02 f303 	mul.w	r3, r2, r3
 8009910:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009914:	4a04      	ldr	r2, [pc, #16]	; (8009928 <VL53L0X_calc_timeout_us+0x50>)
 8009916:	fba2 2303 	umull	r2, r3, r2, r3
 800991a:	099b      	lsrs	r3, r3, #6
 800991c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800991e:	697b      	ldr	r3, [r7, #20]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	10624dd3 	.word	0x10624dd3

0800992c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08c      	sub	sp, #48	; 0x30
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	460b      	mov	r3, r1
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800993a:	2300      	movs	r3, #0
 800993c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <get_sequence_step_timeout+0x38>
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d002      	beq.n	8009964 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d128      	bne.n	80099b6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009964:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009968:	461a      	mov	r2, r3
 800996a:	2100      	movs	r1, #0
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7fd fa8f 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800997c:	2b00      	cmp	r3, #0
 800997e:	d109      	bne.n	8009994 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009980:	f107 0320 	add.w	r3, r7, #32
 8009984:	461a      	mov	r2, r3
 8009986:	2146      	movs	r1, #70	; 0x46
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f001 fb03 	bl	800af94 <VL53L0X_RdByte>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009998:	b29b      	uxth	r3, r3
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff ff5b 	bl	8009856 <VL53L0X_decode_timeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80099a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80099a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099aa:	4619      	mov	r1, r3
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff ff93 	bl	80098d8 <VL53L0X_calc_timeout_us>
 80099b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80099b4:	e092      	b.n	8009adc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d135      	bne.n	8009a28 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099c0:	461a      	mov	r2, r3
 80099c2:	2100      	movs	r1, #0
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f7fd fa63 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80099d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f040 8081 	bne.w	8009adc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099da:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099de:	461a      	mov	r2, r3
 80099e0:	2100      	movs	r1, #0
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7fd fa54 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80099ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80099f6:	f107 031e 	add.w	r3, r7, #30
 80099fa:	461a      	mov	r2, r3
 80099fc:	2151      	movs	r1, #81	; 0x51
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f001 faf2 	bl	800afe8 <VL53L0X_RdWord>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009a0a:	8bfb      	ldrh	r3, [r7, #30]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff ff22 	bl	8009856 <VL53L0X_decode_timeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009a16:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7ff ff5a 	bl	80098d8 <VL53L0X_calc_timeout_us>
 8009a24:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a26:	e059      	b.n	8009adc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d156      	bne.n	8009adc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009a2e:	f107 0314 	add.w	r3, r7, #20
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7fd fb37 	bl	80070a8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01d      	beq.n	8009a80 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a44:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a48:	461a      	mov	r2, r3
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7fd fa1f 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009a58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10f      	bne.n	8009a80 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009a60:	f107 031e 	add.w	r3, r7, #30
 8009a64:	461a      	mov	r2, r3
 8009a66:	2151      	movs	r1, #81	; 0x51
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f001 fabd 	bl	800afe8 <VL53L0X_RdWord>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009a74:	8bfb      	ldrh	r3, [r7, #30]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff feed 	bl	8009856 <VL53L0X_decode_timeout>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009a80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a88:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	2101      	movs	r1, #1
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7fd f9fd 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009a9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10f      	bne.n	8009ac4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009aa4:	f107 031c 	add.w	r3, r7, #28
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	2171      	movs	r1, #113	; 0x71
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f001 fa9b 	bl	800afe8 <VL53L0X_RdWord>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009ab8:	8bbb      	ldrh	r3, [r7, #28]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fecb 	bl	8009856 <VL53L0X_decode_timeout>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009ac4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009acc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7ff feff 	bl	80098d8 <VL53L0X_calc_timeout_us>
 8009ada:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ae0:	601a      	str	r2, [r3, #0]

	return Status;
 8009ae2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3730      	adds	r7, #48	; 0x30
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b08a      	sub	sp, #40	; 0x28
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	460b      	mov	r3, r1
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <set_sequence_step_timeout+0x26>
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d002      	beq.n	8009b14 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d138      	bne.n	8009b86 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b14:	f107 031b 	add.w	r3, r7, #27
 8009b18:	461a      	mov	r2, r3
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7fd f9b7 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11a      	bne.n	8009b66 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009b30:	7efb      	ldrb	r3, [r7, #27]
 8009b32:	461a      	mov	r2, r3
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7ff fea4 	bl	8009884 <VL53L0X_calc_timeout_mclks>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009b40:	8bbb      	ldrh	r3, [r7, #28]
 8009b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b46:	d903      	bls.n	8009b50 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009b48:	23ff      	movs	r3, #255	; 0xff
 8009b4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b4e:	e004      	b.n	8009b5a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009b50:	8bbb      	ldrh	r3, [r7, #28]
 8009b52:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009b54:	3b01      	subs	r3, #1
 8009b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009b66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 80ab 	bne.w	8009cc6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b74:	461a      	mov	r2, r3
 8009b76:	2146      	movs	r1, #70	; 0x46
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f001 f989 	bl	800ae90 <VL53L0X_WrByte>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009b84:	e09f      	b.n	8009cc6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d135      	bne.n	8009bf8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009b8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d11b      	bne.n	8009bcc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b94:	f107 031b 	add.w	r3, r7, #27
 8009b98:	461a      	mov	r2, r3
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7fd f977 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009ba8:	7efb      	ldrb	r3, [r7, #27]
 8009baa:	461a      	mov	r2, r3
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fe68 	bl	8009884 <VL53L0X_calc_timeout_mclks>
 8009bb4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009bb6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009bb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff fe1f 	bl	80097fe <VL53L0X_encode_timeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bc4:	8b3a      	ldrh	r2, [r7, #24]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009bcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d108      	bne.n	8009be6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009bd4:	8b3b      	ldrh	r3, [r7, #24]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2151      	movs	r1, #81	; 0x51
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f001 f97c 	bl	800aed8 <VL53L0X_WrWord>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d16b      	bne.n	8009cc6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009bf6:	e066      	b.n	8009cc6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	2b04      	cmp	r3, #4
 8009bfc:	d160      	bne.n	8009cc0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	4619      	mov	r1, r3
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7fd fa4f 	bl	80070a8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009c0e:	7cfb      	ldrb	r3, [r7, #19]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01d      	beq.n	8009c50 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009c14:	f107 031b 	add.w	r3, r7, #27
 8009c18:	461a      	mov	r2, r3
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7fd f937 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10f      	bne.n	8009c50 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	461a      	mov	r2, r3
 8009c36:	2151      	movs	r1, #81	; 0x51
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f001 f9d5 	bl	800afe8 <VL53L0X_RdWord>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009c44:	8b3b      	ldrh	r3, [r7, #24]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fe05 	bl	8009856 <VL53L0X_decode_timeout>
 8009c4c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009c4e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d109      	bne.n	8009c6c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009c58:	f107 031b 	add.w	r3, r7, #27
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2101      	movs	r1, #1
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7fd f915 	bl	8006e90 <VL53L0X_GetVcselPulsePeriod>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d128      	bne.n	8009cc6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009c74:	7efb      	ldrb	r3, [r7, #27]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f7ff fe02 	bl	8009884 <VL53L0X_calc_timeout_mclks>
 8009c80:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c84:	6a3a      	ldr	r2, [r7, #32]
 8009c86:	4413      	add	r3, r2
 8009c88:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009c8a:	6a38      	ldr	r0, [r7, #32]
 8009c8c:	f7ff fdb7 	bl	80097fe <VL53L0X_encode_timeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d108      	bne.n	8009cae <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009c9c:	8bfb      	ldrh	r3, [r7, #30]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	2171      	movs	r1, #113	; 0x71
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f001 f918 	bl	800aed8 <VL53L0X_WrWord>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009cae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d107      	bne.n	8009cc6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009cbe:	e002      	b.n	8009cc6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009cc0:	23fc      	movs	r3, #252	; 0xfc
 8009cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009cc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3728      	adds	r7, #40	; 0x28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009ce4:	7afb      	ldrb	r3, [r7, #11]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d00a      	beq.n	8009d04 <VL53L0X_get_vcsel_pulse_period+0x32>
 8009cee:	e013      	b.n	8009d18 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009cf0:	f107 0316 	add.w	r3, r7, #22
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	2150      	movs	r1, #80	; 0x50
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f001 f94b 	bl	800af94 <VL53L0X_RdByte>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009d02:	e00b      	b.n	8009d1c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009d04:	f107 0316 	add.w	r3, r7, #22
 8009d08:	461a      	mov	r2, r3
 8009d0a:	2170      	movs	r1, #112	; 0x70
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f001 f941 	bl	800af94 <VL53L0X_RdByte>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009d16:	e001      	b.n	8009d1c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d18:	23fc      	movs	r3, #252	; 0xfc
 8009d1a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d107      	bne.n	8009d34 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009d24:	7dbb      	ldrb	r3, [r7, #22]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fff4 	bl	8008d14 <VL53L0X_decode_vcsel_period>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	701a      	strb	r2, [r3, #0]

	return Status;
 8009d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b092      	sub	sp, #72	; 0x48
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009d50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009d54:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009d56:	f240 7376 	movw	r3, #1910	; 0x776
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009d5c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009d60:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009d62:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009d66:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009d68:	f240 234e 	movw	r3, #590	; 0x24e
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009d6e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009d74:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009d78:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009d7a:	f240 2326 	movw	r3, #550	; 0x226
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009d84:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009d88:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d205      	bcs.n	8009da2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d96:	23fc      	movs	r3, #252	; 0xfc
 8009d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009d9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009da0:	e0aa      	b.n	8009ef8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009da2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009dae:	f107 0314 	add.w	r3, r7, #20
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7fd f977 	bl	80070a8 <VL53L0X_GetSequenceStepEnables>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009dc0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d15b      	bne.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009dc8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009dce:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009dd4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d052      	beq.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	461a      	mov	r2, r3
 8009de0:	2102      	movs	r1, #2
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff fda2 	bl	800992c <get_sequence_step_timeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009dee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009df6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009dfa:	e07d      	b.n	8009ef8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009dfc:	7d3b      	ldrb	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00f      	beq.n	8009e22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009e02:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e06:	4413      	add	r3, r2
 8009e08:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d204      	bcs.n	8009e1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	643b      	str	r3, [r7, #64]	; 0x40
 8009e1a:	e002      	b.n	8009e22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e1c:	23fc      	movs	r3, #252	; 0xfc
 8009e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009e22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009e2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e2e:	e063      	b.n	8009ef8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009e30:	7dbb      	ldrb	r3, [r7, #22]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d011      	beq.n	8009e5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	4413      	add	r3, r2
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009e40:	69fa      	ldr	r2, [r7, #28]
 8009e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d204      	bcs.n	8009e52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e50:	e016      	b.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e52:	23fc      	movs	r3, #252	; 0xfc
 8009e54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e58:	e012      	b.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009e5a:	7d7b      	ldrb	r3, [r7, #21]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00f      	beq.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e64:	4413      	add	r3, r2
 8009e66:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d204      	bcs.n	8009e7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009e70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	643b      	str	r3, [r7, #64]	; 0x40
 8009e78:	e002      	b.n	8009e80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e7a:	23fc      	movs	r3, #252	; 0xfc
 8009e7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009e80:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009e88:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009e8c:	e034      	b.n	8009ef8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d019      	beq.n	8009ec8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009e94:	f107 030c 	add.w	r3, r7, #12
 8009e98:	461a      	mov	r2, r3
 8009e9a:	2103      	movs	r1, #3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff fd45 	bl	800992c <get_sequence_step_timeout>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eac:	4413      	add	r3, r2
 8009eae:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d204      	bcs.n	8009ec2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8009ec0:	e002      	b.n	8009ec8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ec2:	23fc      	movs	r3, #252	; 0xfc
 8009ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009ec8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d111      	bne.n	8009ef4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009ed0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00e      	beq.n	8009ef4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff fe03 	bl	8009aee <set_sequence_step_timeout>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009ef4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3748      	adds	r7, #72	; 0x48
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b090      	sub	sp, #64	; 0x40
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009f10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009f14:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009f16:	f240 7376 	movw	r3, #1910	; 0x776
 8009f1a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009f1c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009f20:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009f22:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009f26:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009f28:	f240 234e 	movw	r3, #590	; 0x24e
 8009f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009f2e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009f34:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009f3a:	f240 2326 	movw	r3, #550	; 0x226
 8009f3e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f48:	441a      	add	r2, r3
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009f4e:	f107 0318 	add.w	r3, r7, #24
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7fd f8a7 	bl	80070a8 <VL53L0X_GetSequenceStepEnables>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009f60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009f68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f6c:	e075      	b.n	800a05a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009f6e:	7e3b      	ldrb	r3, [r7, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009f74:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009f7a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d030      	beq.n	8009fe2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009f80:	f107 0310 	add.w	r3, r7, #16
 8009f84:	461a      	mov	r2, r3
 8009f86:	2102      	movs	r1, #2
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fccf 	bl	800992c <get_sequence_step_timeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009f94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d122      	bne.n	8009fe2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009f9c:	7e3b      	ldrb	r3, [r7, #24]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d007      	beq.n	8009fb2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009fa6:	6939      	ldr	r1, [r7, #16]
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009fac:	441a      	add	r2, r3
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009fb2:	7ebb      	ldrb	r3, [r7, #26]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d009      	beq.n	8009fcc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009fbc:	6939      	ldr	r1, [r7, #16]
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	440b      	add	r3, r1
 8009fc2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009fc4:	441a      	add	r2, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e00a      	b.n	8009fe2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009fcc:	7e7b      	ldrb	r3, [r7, #25]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d007      	beq.n	8009fe2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009fd6:	6939      	ldr	r1, [r7, #16]
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009fdc:	441a      	add	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009fe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d114      	bne.n	800a014 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009fea:	7efb      	ldrb	r3, [r7, #27]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d011      	beq.n	800a014 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	2103      	movs	r1, #3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff fc97 	bl	800992c <get_sequence_step_timeout>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a008:	68f9      	ldr	r1, [r7, #12]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a00e:	441a      	add	r2, r3
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d114      	bne.n	800a046 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a01c:	7f3b      	ldrb	r3, [r7, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d011      	beq.n	800a046 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a022:	f107 0314 	add.w	r3, r7, #20
 800a026:	461a      	mov	r2, r3
 800a028:	2104      	movs	r1, #4
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fc7e 	bl	800992c <get_sequence_step_timeout>
 800a030:	4603      	mov	r3, r0
 800a032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a03a:	6979      	ldr	r1, [r7, #20]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a040:	441a      	add	r2, r3
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a046:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a056:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3740      	adds	r7, #64	; 0x40
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a06e:	2300      	movs	r3, #0
 800a070:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a076:	e0c6      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	4413      	add	r3, r2
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	3301      	adds	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a088:	7cfb      	ldrb	r3, [r7, #19]
 800a08a:	2bff      	cmp	r3, #255	; 0xff
 800a08c:	f040 808d 	bne.w	800a1aa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4413      	add	r3, r2
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	747b      	strb	r3, [r7, #17]
			Index++;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	3301      	adds	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a0a0:	7c7b      	ldrb	r3, [r7, #17]
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d87e      	bhi.n	800a1a4 <VL53L0X_load_tuning_settings+0x140>
 800a0a6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <VL53L0X_load_tuning_settings+0x48>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a0bd 	.word	0x0800a0bd
 800a0b0:	0800a0f7 	.word	0x0800a0f7
 800a0b4:	0800a131 	.word	0x0800a131
 800a0b8:	0800a16b 	.word	0x0800a16b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	743b      	strb	r3, [r7, #16]
				Index++;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a0dc:	7c3b      	ldrb	r3, [r7, #16]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	89ba      	ldrh	r2, [r7, #12]
 800a0f0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a0f4:	e087      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	743b      	strb	r3, [r7, #16]
				Index++;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	3301      	adds	r3, #1
 800a104:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	4413      	add	r3, r2
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	3301      	adds	r3, #1
 800a114:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a116:	7c3b      	ldrb	r3, [r7, #16]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	021b      	lsls	r3, r3, #8
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	b29b      	uxth	r3, r3
 800a122:	4413      	add	r3, r2
 800a124:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	89ba      	ldrh	r2, [r7, #12]
 800a12a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a12e:	e06a      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	743b      	strb	r3, [r7, #16]
				Index++;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	3301      	adds	r3, #1
 800a13e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	4413      	add	r3, r2
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	3301      	adds	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a150:	7c3b      	ldrb	r3, [r7, #16]
 800a152:	b29b      	uxth	r3, r3
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	b29a      	uxth	r2, r3
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4413      	add	r3, r2
 800a15e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	89ba      	ldrh	r2, [r7, #12]
 800a164:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a168:	e04d      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	4413      	add	r3, r2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	743b      	strb	r3, [r7, #16]
				Index++;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	3301      	adds	r3, #1
 800a178:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	4413      	add	r3, r2
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	3301      	adds	r3, #1
 800a188:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a18a:	7c3b      	ldrb	r3, [r7, #16]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b29a      	uxth	r2, r3
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	b29b      	uxth	r3, r3
 800a196:	4413      	add	r3, r2
 800a198:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	89ba      	ldrh	r2, [r7, #12]
 800a19e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a1a2:	e030      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1a4:	23fc      	movs	r3, #252	; 0xfc
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e02d      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a1aa:	7cfb      	ldrb	r3, [r7, #19]
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d828      	bhi.n	800a202 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61bb      	str	r3, [r7, #24]
 800a1c4:	e00f      	b.n	800a1e6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	7819      	ldrb	r1, [r3, #0]
 800a1ce:	f107 0208 	add.w	r2, r7, #8
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	460a      	mov	r2, r1
 800a1d8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	61bb      	str	r3, [r7, #24]
 800a1e6:	7cfb      	ldrb	r3, [r7, #19]
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	dbeb      	blt.n	800a1c6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a1ee:	7cfb      	ldrb	r3, [r7, #19]
 800a1f0:	f107 0208 	add.w	r2, r7, #8
 800a1f4:	7cb9      	ldrb	r1, [r7, #18]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fdee 	bl	800add8 <VL53L0X_WriteMulti>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	77fb      	strb	r3, [r7, #31]
 800a200:	e001      	b.n	800a206 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a202:	23fc      	movs	r3, #252	; 0xfc
 800a204:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	4413      	add	r3, r2
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <VL53L0X_load_tuning_settings+0x1b8>
 800a212:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f43f af2e 	beq.w	800a078 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a21c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a234:	2300      	movs	r3, #0
 800a236:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a23e:	f107 0313 	add.w	r3, r7, #19
 800a242:	4619      	mov	r1, r3
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7fc ffbb 	bl	80071c0 <VL53L0X_GetXTalkCompensationEnable>
 800a24a:	4603      	mov	r3, r0
 800a24c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a24e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d111      	bne.n	800a27a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a256:	7cfb      	ldrb	r3, [r7, #19]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00e      	beq.n	800a27a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	8a9b      	ldrh	r3, [r3, #20]
 800a266:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	fb02 f303 	mul.w	r3, r2, r3
 800a26e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	3380      	adds	r3, #128	; 0x80
 800a274:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a27a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3720      	adds	r7, #32
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b086      	sub	sp, #24
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a29e:	f107 0310 	add.w	r3, r7, #16
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff ffbe 	bl	800a228 <VL53L0X_get_total_xtalk_rate>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d105      	bne.n	800a2c4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	441a      	add	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	601a      	str	r2, [r3, #0]

	return Status;
 800a2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b09a      	sub	sp, #104	; 0x68
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a2de:	2312      	movs	r3, #18
 800a2e0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a2e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2e6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a2e8:	2342      	movs	r3, #66	; 0x42
 800a2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a2ec:	2306      	movs	r3, #6
 800a2ee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a2f0:	2307      	movs	r3, #7
 800a2f2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a300:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a308:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
 800a312:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a316:	3380      	adds	r3, #128	; 0x80
 800a318:	0a1b      	lsrs	r3, r3, #8
 800a31a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a31e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01a      	beq.n	800a366 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	029b      	lsls	r3, r3, #10
 800a334:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a33a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a33c:	4413      	add	r3, r2
 800a33e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a340:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	fbb2 f3f3 	udiv	r3, r2, r3
 800a348:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a34a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a34c:	4613      	mov	r3, r2
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	4413      	add	r3, r2
 800a352:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a356:	fb03 f303 	mul.w	r3, r3, r3
 800a35a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a35c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a35e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a362:	0c1b      	lsrs	r3, r3, #16
 800a364:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a376:	0c1b      	lsrs	r3, r3, #16
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	fb03 f303 	mul.w	r3, r3, r3
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a384:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a388:	0c1b      	lsrs	r3, r3, #16
 800a38a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a38e:	085a      	lsrs	r2, r3, #1
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	441a      	add	r2, r3
 800a394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a396:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ac:	d302      	bcc.n	800a3b4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a3ae:	4b54      	ldr	r3, [pc, #336]	; (800a500 <VL53L0X_calc_dmax+0x230>)
 800a3b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a3b2:	e015      	b.n	800a3e0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b6:	085a      	lsrs	r2, r3, #1
 800a3b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3ba:	441a      	add	r2, r3
 800a3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a3c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3c8:	fb02 f303 	mul.w	r3, r2, r3
 800a3cc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a3ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a3d4:	0c1b      	lsrs	r3, r3, #16
 800a3d6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a3d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3da:	fb03 f303 	mul.w	r3, r3, r3
 800a3de:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3e2:	039b      	lsls	r3, r3, #14
 800a3e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a3e8:	4a46      	ldr	r2, [pc, #280]	; (800a504 <VL53L0X_calc_dmax+0x234>)
 800a3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ee:	099b      	lsrs	r3, r3, #6
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	fb03 f303 	mul.w	r3, r3, r3
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fc:	fb03 f303 	mul.w	r3, r3, r3
 800a400:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	3308      	adds	r3, #8
 800a406:	091b      	lsrs	r3, r3, #4
 800a408:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a414:	4613      	mov	r3, r2
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	4413      	add	r3, r2
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a424:	0b9b      	lsrs	r3, r3, #14
 800a426:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a42a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a42c:	4413      	add	r3, r2
 800a42e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a432:	085b      	lsrs	r3, r3, #1
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	4413      	add	r3, r2
 800a438:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a442:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	039b      	lsls	r3, r3, #14
 800a448:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	4413      	add	r3, r2
 800a452:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a462:	fb02 f303 	mul.w	r3, r2, r3
 800a466:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a46e:	4a25      	ldr	r2, [pc, #148]	; (800a504 <VL53L0X_calc_dmax+0x234>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	099b      	lsrs	r3, r3, #6
 800a476:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a484:	4a1f      	ldr	r2, [pc, #124]	; (800a504 <VL53L0X_calc_dmax+0x234>)
 800a486:	fba2 2303 	umull	r2, r3, r2, r3
 800a48a:	099b      	lsrs	r3, r3, #6
 800a48c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a490:	3380      	adds	r3, #128	; 0x80
 800a492:	0a1b      	lsrs	r3, r3, #8
 800a494:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d008      	beq.n	800a4ae <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	085a      	lsrs	r2, r3, #1
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	441a      	add	r2, r3
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4ac:	e001      	b.n	800a4b2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a4b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a4b4:	f7fe fc41 	bl	8008d3a <VL53L0X_isqrt>
 800a4b8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d008      	beq.n	800a4d2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	085a      	lsrs	r2, r3, #1
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c6:	441a      	add	r2, r3
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4d0:	e001      	b.n	800a4d6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a4d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a4d8:	f7fe fc2f 	bl	8008d3a <VL53L0X_isqrt>
 800a4dc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a4de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d902      	bls.n	800a4f2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a4ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4f0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a4f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3768      	adds	r7, #104	; 0x68
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	fff00000 	.word	0xfff00000
 800a504:	10624dd3 	.word	0x10624dd3

0800a508 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b0b4      	sub	sp, #208	; 0xd0
 800a50c:	af04      	add	r7, sp, #16
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a516:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a51a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a51e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a526:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a52a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a52e:	f241 235c 	movw	r3, #4700	; 0x125c
 800a532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a536:	4b9e      	ldr	r3, [pc, #632]	; (800a7b0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a53c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a540:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a542:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a550:	4b98      	ldr	r3, [pc, #608]	; (800a7b4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a552:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a558:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a55a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a55e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a560:	f240 6377 	movw	r3, #1655	; 0x677
 800a564:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a566:	2300      	movs	r3, #0
 800a568:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a57a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a57e:	0c1b      	lsrs	r3, r3, #16
 800a580:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a588:	f107 0310 	add.w	r3, r7, #16
 800a58c:	461a      	mov	r2, r3
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff fe78 	bl	800a286 <VL53L0X_get_total_signal_rate>
 800a596:	4603      	mov	r3, r0
 800a598:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fe3f 	bl	800a228 <VL53L0X_get_total_xtalk_rate>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5b6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a5c2:	0c1b      	lsrs	r3, r3, #16
 800a5c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5cc:	fb02 f303 	mul.w	r3, r2, r3
 800a5d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a5d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d902      	bls.n	800a5e4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a5e4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d168      	bne.n	800a6be <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a5f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a5fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a600:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff f93a 	bl	8009884 <VL53L0X_calc_timeout_mclks>
 800a610:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a622:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a626:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a62a:	461a      	mov	r2, r3
 800a62c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff f927 	bl	8009884 <VL53L0X_calc_timeout_mclks>
 800a636:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a638:	2303      	movs	r3, #3
 800a63a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a63e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a642:	2b08      	cmp	r3, #8
 800a644:	d102      	bne.n	800a64c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a646:	2302      	movs	r3, #2
 800a648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a64c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a650:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a652:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a656:	fb02 f303 	mul.w	r3, r2, r3
 800a65a:	02db      	lsls	r3, r3, #11
 800a65c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a664:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a668:	4a53      	ldr	r2, [pc, #332]	; (800a7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a66a:	fba2 2303 	umull	r2, r3, r2, r3
 800a66e:	099b      	lsrs	r3, r3, #6
 800a670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a674:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a678:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a67a:	fb02 f303 	mul.w	r3, r2, r3
 800a67e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a686:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a68a:	4a4b      	ldr	r2, [pc, #300]	; (800a7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a68c:	fba2 2303 	umull	r2, r3, r2, r3
 800a690:	099b      	lsrs	r3, r3, #6
 800a692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	3380      	adds	r3, #128	; 0x80
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a6ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a6b0:	3380      	adds	r3, #128	; 0x80
 800a6b2:	0a1b      	lsrs	r3, r3, #8
 800a6b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	021b      	lsls	r3, r3, #8
 800a6bc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a6be:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d002      	beq.n	800a6cc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a6c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a6ca:	e15e      	b.n	800a98a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a6cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10c      	bne.n	800a6ec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e14c      	b.n	800a986 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a6ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a6fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6fe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a702:	041a      	lsls	r2, r3, #16
 800a704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a706:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a70e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a714:	429a      	cmp	r2, r3
 800a716:	d902      	bls.n	800a71e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a71a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a71e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a722:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a726:	fb02 f303 	mul.w	r3, r2, r3
 800a72a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a72e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a732:	4613      	mov	r3, r2
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fe fafd 	bl	8008d3a <VL53L0X_isqrt>
 800a740:	4603      	mov	r3, r0
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	891b      	ldrh	r3, [r3, #8]
 800a74a:	461a      	mov	r2, r3
 800a74c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a756:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a75c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a75e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a760:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a764:	4a14      	ldr	r2, [pc, #80]	; (800a7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a766:	fba2 2303 	umull	r2, r3, r2, r3
 800a76a:	099b      	lsrs	r3, r3, #6
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a76e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a770:	041b      	lsls	r3, r3, #16
 800a772:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a776:	4a10      	ldr	r2, [pc, #64]	; (800a7b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a778:	fba2 2303 	umull	r2, r3, r2, r3
 800a77c:	099b      	lsrs	r3, r3, #6
 800a77e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bfb8      	it	lt
 800a792:	425b      	neglt	r3, r3
 800a794:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a798:	021b      	lsls	r3, r3, #8
 800a79a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	7e1b      	ldrb	r3, [r3, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a7a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7ac:	e033      	b.n	800a816 <VL53L0X_calc_sigma_estimate+0x30e>
 800a7ae:	bf00      	nop
 800a7b0:	028f87ae 	.word	0x028f87ae
 800a7b4:	0006999a 	.word	0x0006999a
 800a7b8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a7bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7cc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a7d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7d4:	fb02 f303 	mul.w	r3, r2, r3
 800a7d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a7dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a7e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7e2:	4413      	add	r3, r2
 800a7e4:	0c1b      	lsrs	r3, r3, #16
 800a7e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a7ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a7f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a804:	fb03 f303 	mul.w	r3, r3, r3
 800a808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a80c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a810:	0b9b      	lsrs	r3, r3, #14
 800a812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a81a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a81c:	fb02 f303 	mul.w	r3, r2, r3
 800a820:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a828:	0c1b      	lsrs	r3, r3, #16
 800a82a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	fb03 f303 	mul.w	r3, r3, r3
 800a832:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a838:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a840:	0c1b      	lsrs	r3, r3, #16
 800a842:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	fb03 f303 	mul.w	r3, r3, r3
 800a84a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a850:	4413      	add	r3, r2
 800a852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a856:	f7fe fa70 	bl	8008d3a <VL53L0X_isqrt>
 800a85a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	041b      	lsls	r3, r3, #16
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	3332      	adds	r3, #50	; 0x32
 800a866:	4a4b      	ldr	r2, [pc, #300]	; (800a994 <VL53L0X_calc_sigma_estimate+0x48c>)
 800a868:	fba2 2303 	umull	r2, r3, r2, r3
 800a86c:	095a      	lsrs	r2, r3, #5
 800a86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a870:	fbb2 f3f3 	udiv	r3, r2, r3
 800a874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a87c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a880:	fb02 f303 	mul.w	r3, r2, r3
 800a884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a88c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a890:	3308      	adds	r3, #8
 800a892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a89a:	4a3f      	ldr	r2, [pc, #252]	; (800a998 <VL53L0X_calc_sigma_estimate+0x490>)
 800a89c:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a0:	0b5b      	lsrs	r3, r3, #13
 800a8a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a8a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a8aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d902      	bls.n	800a8b6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a8b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a8b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a8ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a8c4:	4a35      	ldr	r2, [pc, #212]	; (800a99c <VL53L0X_calc_sigma_estimate+0x494>)
 800a8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ca:	099b      	lsrs	r3, r3, #6
 800a8cc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a8d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8d6:	441a      	add	r2, r3
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe fa2b 	bl	8008d3a <VL53L0X_isqrt>
 800a8e4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	021b      	lsls	r3, r3, #8
 800a8ea:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8f2:	4a2a      	ldr	r2, [pc, #168]	; (800a99c <VL53L0X_calc_sigma_estimate+0x494>)
 800a8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f8:	099b      	lsrs	r3, r3, #6
 800a8fa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a8fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a900:	fb03 f303 	mul.w	r3, r3, r3
 800a904:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	fb03 f303 	mul.w	r3, r3, r3
 800a90c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	4413      	add	r3, r2
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fa10 	bl	8008d3a <VL53L0X_isqrt>
 800a91a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d009      	beq.n	800a944 <VL53L0X_calc_sigma_estimate+0x43c>
 800a930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <VL53L0X_calc_sigma_estimate+0x43c>
 800a938:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a93c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a940:	429a      	cmp	r2, r3
 800a942:	d903      	bls.n	800a94c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a952:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a95e:	6939      	ldr	r1, [r7, #16]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	9303      	str	r3, [sp, #12]
 800a964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a968:	9302      	str	r3, [sp, #8]
 800a96a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fca8 	bl	800a2d0 <VL53L0X_calc_dmax>
 800a980:	4603      	mov	r3, r0
 800a982:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a986:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	37c0      	adds	r7, #192	; 0xc0
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	51eb851f 	.word	0x51eb851f
 800a998:	d1b71759 	.word	0xd1b71759
 800a99c:	10624dd3 	.word	0x10624dd3

0800a9a0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b090      	sub	sp, #64	; 0x40
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	607a      	str	r2, [r7, #4]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	72fb      	strb	r3, [r7, #11]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a9f2:	7afb      	ldrb	r3, [r7, #11]
 800a9f4:	10db      	asrs	r3, r3, #3
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 030f 	and.w	r3, r3, #15
 800a9fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800aa00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d017      	beq.n	800aa38 <VL53L0X_get_pal_range_status+0x98>
 800aa08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa0c:	2b05      	cmp	r3, #5
 800aa0e:	d013      	beq.n	800aa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800aa10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa14:	2b07      	cmp	r3, #7
 800aa16:	d00f      	beq.n	800aa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800aa18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa1c:	2b0c      	cmp	r3, #12
 800aa1e:	d00b      	beq.n	800aa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800aa20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa24:	2b0d      	cmp	r3, #13
 800aa26:	d007      	beq.n	800aa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800aa28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa2c:	2b0e      	cmp	r3, #14
 800aa2e:	d003      	beq.n	800aa38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800aa30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aa34:	2b0f      	cmp	r3, #15
 800aa36:	d103      	bne.n	800aa40 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800aa3e:	e002      	b.n	800aa46 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800aa46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d109      	bne.n	800aa62 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aa4e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800aa52:	461a      	mov	r2, r3
 800aa54:	2100      	movs	r1, #0
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fc fc86 	bl	8007368 <VL53L0X_GetLimitCheckEnable>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800aa62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d02e      	beq.n	800aac8 <VL53L0X_get_pal_range_status+0x128>
 800aa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d12a      	bne.n	800aac8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800aa72:	f107 0310 	add.w	r3, r7, #16
 800aa76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800aa7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fd43 	bl	800a508 <VL53L0X_calc_sigma_estimate>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800aa88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d103      	bne.n	800aa98 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa96:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800aa98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d113      	bne.n	800aac8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800aaa0:	f107 0320 	add.w	r3, r7, #32
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7fc fce3 	bl	8007474 <VL53L0X_GetLimitCheckValue>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800aaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d902      	bls.n	800aac8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800aac2:	2301      	movs	r3, #1
 800aac4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800aac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d109      	bne.n	800aae4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aad0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800aad4:	461a      	mov	r2, r3
 800aad6:	2102      	movs	r1, #2
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7fc fc45 	bl	8007368 <VL53L0X_GetLimitCheckEnable>
 800aade:	4603      	mov	r3, r0
 800aae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800aae4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d044      	beq.n	800ab76 <VL53L0X_get_pal_range_status+0x1d6>
 800aaec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d140      	bne.n	800ab76 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800aaf4:	f107 031c 	add.w	r3, r7, #28
 800aaf8:	461a      	mov	r2, r3
 800aafa:	2102      	movs	r1, #2
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7fc fcb9 	bl	8007474 <VL53L0X_GetLimitCheckValue>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ab08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d107      	bne.n	800ab20 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab10:	2201      	movs	r2, #1
 800ab12:	21ff      	movs	r1, #255	; 0xff
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f9bb 	bl	800ae90 <VL53L0X_WrByte>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800ab20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800ab28:	f107 0316 	add.w	r3, r7, #22
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	21b6      	movs	r1, #182	; 0xb6
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fa59 	bl	800afe8 <VL53L0X_RdWord>
 800ab36:	4603      	mov	r3, r0
 800ab38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800ab3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d107      	bne.n	800ab54 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ab44:	2200      	movs	r2, #0
 800ab46:	21ff      	movs	r1, #255	; 0xff
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 f9a1 	bl	800ae90 <VL53L0X_WrByte>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ab54:	8afb      	ldrh	r3, [r7, #22]
 800ab56:	025b      	lsls	r3, r3, #9
 800ab58:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d006      	beq.n	800ab76 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ab68:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ab6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d902      	bls.n	800ab76 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ab76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d109      	bne.n	800ab92 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ab7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab82:	461a      	mov	r2, r3
 800ab84:	2103      	movs	r1, #3
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7fc fbee 	bl	8007368 <VL53L0X_GetLimitCheckEnable>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ab92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d023      	beq.n	800abe2 <VL53L0X_get_pal_range_status+0x242>
 800ab9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d11f      	bne.n	800abe2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800aba2:	893b      	ldrh	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d102      	bne.n	800abae <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	637b      	str	r3, [r7, #52]	; 0x34
 800abac:	e005      	b.n	800abba <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	021a      	lsls	r2, r3, #8
 800abb2:	893b      	ldrh	r3, [r7, #8]
 800abb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800abba:	f107 0318 	add.w	r3, r7, #24
 800abbe:	461a      	mov	r2, r3
 800abc0:	2103      	movs	r1, #3
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7fc fc56 	bl	8007474 <VL53L0X_GetLimitCheckValue>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d006      	beq.n	800abe2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800abd4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800abd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abd8:	429a      	cmp	r2, r3
 800abda:	d202      	bcs.n	800abe2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800abe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d14a      	bne.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800abea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d103      	bne.n	800abfa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800abf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf4:	22ff      	movs	r2, #255	; 0xff
 800abf6:	701a      	strb	r2, [r3, #0]
 800abf8:	e042      	b.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800abfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d007      	beq.n	800ac12 <VL53L0X_get_pal_range_status+0x272>
 800ac02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d003      	beq.n	800ac12 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ac0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac0e:	2b03      	cmp	r3, #3
 800ac10:	d103      	bne.n	800ac1a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ac12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac14:	2205      	movs	r2, #5
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	e032      	b.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ac1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac1e:	2b06      	cmp	r3, #6
 800ac20:	d003      	beq.n	800ac2a <VL53L0X_get_pal_range_status+0x28a>
 800ac22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d103      	bne.n	800ac32 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ac2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac2c:	2204      	movs	r2, #4
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	e026      	b.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ac32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac36:	2b08      	cmp	r3, #8
 800ac38:	d007      	beq.n	800ac4a <VL53L0X_get_pal_range_status+0x2aa>
 800ac3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac3e:	2b0a      	cmp	r3, #10
 800ac40:	d003      	beq.n	800ac4a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ac42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d103      	bne.n	800ac52 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ac4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e016      	b.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ac52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d003      	beq.n	800ac62 <VL53L0X_get_pal_range_status+0x2c2>
 800ac5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d103      	bne.n	800ac6a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ac62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac64:	2202      	movs	r2, #2
 800ac66:	701a      	strb	r2, [r3, #0]
 800ac68:	e00a      	b.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ac6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d103      	bne.n	800ac7a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ac72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac74:	2201      	movs	r2, #1
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	e002      	b.n	800ac80 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ac7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d102      	bne.n	800ac8e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ac88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ac8e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ac92:	461a      	mov	r2, r3
 800ac94:	2101      	movs	r1, #1
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7fc fb66 	bl	8007368 <VL53L0X_GetLimitCheckEnable>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800aca2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d14f      	bne.n	800ad4a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800acaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <VL53L0X_get_pal_range_status+0x31a>
 800acb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d103      	bne.n	800acc2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800acba:	2301      	movs	r3, #1
 800acbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acc0:	e002      	b.n	800acc8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800acce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800acd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d003      	beq.n	800ace2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800acda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace8:	e002      	b.n	800acf0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800acf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800acfa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <VL53L0X_get_pal_range_status+0x36a>
 800ad02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d103      	bne.n	800ad12 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad10:	e002      	b.n	800ad18 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ad1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ad22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <VL53L0X_get_pal_range_status+0x392>
 800ad2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d103      	bne.n	800ad3a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ad32:	2301      	movs	r3, #1
 800ad34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad38:	e002      	b.n	800ad40 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ad46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3740      	adds	r7, #64	; 0x40
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b088      	sub	sp, #32
 800ad5a:	af02      	add	r7, sp, #8
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	330a      	adds	r3, #10
 800ad66:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800ad74:	b299      	uxth	r1, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	f7f8 ffdf 	bl	8003d44 <HAL_I2C_Master_Transmit>
 800ad86:	4603      	mov	r3, r0
 800ad88:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ad8a:	693b      	ldr	r3, [r7, #16]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	330a      	adds	r3, #10
 800ada4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800adb2:	f043 0301 	orr.w	r3, r3, #1
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	b299      	uxth	r1, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	4613      	mov	r3, r2
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	f7f9 f8bb 	bl	8003f40 <HAL_I2C_Master_Receive>
 800adca:	4603      	mov	r3, r0
 800adcc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800adce:	693b      	ldr	r3, [r7, #16]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	607a      	str	r2, [r7, #4]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	460b      	mov	r3, r1
 800ade6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ade8:	2300      	movs	r3, #0
 800adea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b3f      	cmp	r3, #63	; 0x3f
 800adf0:	d902      	bls.n	800adf8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800adf2:	f06f 0303 	mvn.w	r3, #3
 800adf6:	e016      	b.n	800ae26 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800adf8:	4a0d      	ldr	r2, [pc, #52]	; (800ae30 <VL53L0X_WriteMulti+0x58>)
 800adfa:	7afb      	ldrb	r3, [r7, #11]
 800adfc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	480c      	ldr	r0, [pc, #48]	; (800ae34 <VL53L0X_WriteMulti+0x5c>)
 800ae04:	f002 f865 	bl	800ced2 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4908      	ldr	r1, [pc, #32]	; (800ae30 <VL53L0X_WriteMulti+0x58>)
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff ffa0 	bl	800ad56 <_I2CWrite>
 800ae16:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae1e:	23ec      	movs	r3, #236	; 0xec
 800ae20:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ae22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20004d60 	.word	0x20004d60
 800ae34:	20004d61 	.word	0x20004d61

0800ae38 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	460b      	mov	r3, r1
 800ae46:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ae4c:	f107 030b 	add.w	r3, r7, #11
 800ae50:	2201      	movs	r2, #1
 800ae52:	4619      	mov	r1, r3
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff ff7e 	bl	800ad56 <_I2CWrite>
 800ae5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae62:	23ec      	movs	r3, #236	; 0xec
 800ae64:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ae66:	e00c      	b.n	800ae82 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff ff91 	bl	800ad94 <_I2CRead>
 800ae72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae7a:	23ec      	movs	r3, #236	; 0xec
 800ae7c:	75fb      	strb	r3, [r7, #23]
 800ae7e:	e000      	b.n	800ae82 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ae80:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ae82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800aea4:	4a0b      	ldr	r2, [pc, #44]	; (800aed4 <VL53L0X_WrByte+0x44>)
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800aeaa:	4a0a      	ldr	r2, [pc, #40]	; (800aed4 <VL53L0X_WrByte+0x44>)
 800aeac:	78bb      	ldrb	r3, [r7, #2]
 800aeae:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	4908      	ldr	r1, [pc, #32]	; (800aed4 <VL53L0X_WrByte+0x44>)
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ff4e 	bl	800ad56 <_I2CWrite>
 800aeba:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aec2:	23ec      	movs	r3, #236	; 0xec
 800aec4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800aec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20004d60 	.word	0x20004d60

0800aed8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
 800aee4:	4613      	mov	r3, r2
 800aee6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800aeec:	4a0e      	ldr	r2, [pc, #56]	; (800af28 <VL53L0X_WrWord+0x50>)
 800aeee:	78fb      	ldrb	r3, [r7, #3]
 800aef0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800aef2:	883b      	ldrh	r3, [r7, #0]
 800aef4:	0a1b      	lsrs	r3, r3, #8
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <VL53L0X_WrWord+0x50>)
 800aefc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800aefe:	883b      	ldrh	r3, [r7, #0]
 800af00:	b2da      	uxtb	r2, r3
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <VL53L0X_WrWord+0x50>)
 800af04:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800af06:	2203      	movs	r2, #3
 800af08:	4907      	ldr	r1, [pc, #28]	; (800af28 <VL53L0X_WrWord+0x50>)
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7ff ff23 	bl	800ad56 <_I2CWrite>
 800af10:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af18:	23ec      	movs	r3, #236	; 0xec
 800af1a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800af1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20004d60 	.word	0x20004d60

0800af2c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	461a      	mov	r2, r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	70fb      	strb	r3, [r7, #3]
 800af3e:	460b      	mov	r3, r1
 800af40:	70bb      	strb	r3, [r7, #2]
 800af42:	4613      	mov	r3, r2
 800af44:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800af4a:	f107 020e 	add.w	r2, r7, #14
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f81e 	bl	800af94 <VL53L0X_RdByte>
 800af58:	4603      	mov	r3, r0
 800af5a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800af5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d110      	bne.n	800af86 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800af64:	7bba      	ldrb	r2, [r7, #14]
 800af66:	78bb      	ldrb	r3, [r7, #2]
 800af68:	4013      	ands	r3, r2
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	787b      	ldrb	r3, [r7, #1]
 800af6e:	4313      	orrs	r3, r2
 800af70:	b2db      	uxtb	r3, r3
 800af72:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800af74:	7bba      	ldrb	r2, [r7, #14]
 800af76:	78fb      	ldrb	r3, [r7, #3]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff ff88 	bl	800ae90 <VL53L0X_WrByte>
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]
 800af84:	e000      	b.n	800af88 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800af86:	bf00      	nop
done:
    return Status;
 800af88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	460b      	mov	r3, r1
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afa2:	2300      	movs	r3, #0
 800afa4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800afa6:	f107 030b 	add.w	r3, r7, #11
 800afaa:	2201      	movs	r2, #1
 800afac:	4619      	mov	r1, r3
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fed1 	bl	800ad56 <_I2CWrite>
 800afb4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afbc:	23ec      	movs	r3, #236	; 0xec
 800afbe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800afc0:	e00c      	b.n	800afdc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800afc2:	2201      	movs	r2, #1
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fee4 	bl	800ad94 <_I2CRead>
 800afcc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afd4:	23ec      	movs	r3, #236	; 0xec
 800afd6:	75fb      	strb	r3, [r7, #23]
 800afd8:	e000      	b.n	800afdc <VL53L0X_RdByte+0x48>
    }
done:
 800afda:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800afdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	460b      	mov	r3, r1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800affa:	f107 030b 	add.w	r3, r7, #11
 800affe:	2201      	movs	r2, #1
 800b000:	4619      	mov	r1, r3
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff fea7 	bl	800ad56 <_I2CWrite>
 800b008:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b010:	23ec      	movs	r3, #236	; 0xec
 800b012:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b014:	e017      	b.n	800b046 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b016:	2202      	movs	r2, #2
 800b018:	490e      	ldr	r1, [pc, #56]	; (800b054 <VL53L0X_RdWord+0x6c>)
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff feba 	bl	800ad94 <_I2CRead>
 800b020:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b028:	23ec      	movs	r3, #236	; 0xec
 800b02a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b02c:	e00b      	b.n	800b046 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b02e:	4b09      	ldr	r3, [pc, #36]	; (800b054 <VL53L0X_RdWord+0x6c>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	b29b      	uxth	r3, r3
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	b29a      	uxth	r2, r3
 800b038:	4b06      	ldr	r3, [pc, #24]	; (800b054 <VL53L0X_RdWord+0x6c>)
 800b03a:	785b      	ldrb	r3, [r3, #1]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4413      	add	r3, r2
 800b040:	b29a      	uxth	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20004d60 	.word	0x20004d60

0800b058 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	460b      	mov	r3, r1
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b06a:	f107 030b 	add.w	r3, r7, #11
 800b06e:	2201      	movs	r2, #1
 800b070:	4619      	mov	r1, r3
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff fe6f 	bl	800ad56 <_I2CWrite>
 800b078:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b080:	23ec      	movs	r3, #236	; 0xec
 800b082:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b084:	e01b      	b.n	800b0be <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b086:	2204      	movs	r2, #4
 800b088:	4910      	ldr	r1, [pc, #64]	; (800b0cc <VL53L0X_RdDWord+0x74>)
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff fe82 	bl	800ad94 <_I2CRead>
 800b090:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b098:	23ec      	movs	r3, #236	; 0xec
 800b09a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b09c:	e00f      	b.n	800b0be <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b09e:	4b0b      	ldr	r3, [pc, #44]	; (800b0cc <VL53L0X_RdDWord+0x74>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	061a      	lsls	r2, r3, #24
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <VL53L0X_RdDWord+0x74>)
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	041b      	lsls	r3, r3, #16
 800b0aa:	441a      	add	r2, r3
 800b0ac:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <VL53L0X_RdDWord+0x74>)
 800b0ae:	789b      	ldrb	r3, [r3, #2]
 800b0b0:	021b      	lsls	r3, r3, #8
 800b0b2:	4413      	add	r3, r2
 800b0b4:	4a05      	ldr	r2, [pc, #20]	; (800b0cc <VL53L0X_RdDWord+0x74>)
 800b0b6:	78d2      	ldrb	r2, [r2, #3]
 800b0b8:	441a      	add	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b0be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20004d60 	.word	0x20004d60

0800b0d0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b0dc:	2002      	movs	r0, #2
 800b0de:	f7f7 fca3 	bl	8002a28 <HAL_Delay>
    return status;
 800b0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b085      	sub	sp, #20
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b0fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b100:	2b84      	cmp	r3, #132	; 0x84
 800b102:	d005      	beq.n	800b110 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b104:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	3303      	adds	r3, #3
 800b10e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b110:	68fb      	ldr	r3, [r7, #12]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b122:	f000 fd25 	bl	800bb70 <vTaskStartScheduler>
  
  return osOK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12e:	b089      	sub	sp, #36	; 0x24
 800b130:	af04      	add	r7, sp, #16
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d020      	beq.n	800b180 <osThreadCreate+0x54>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d01c      	beq.n	800b180 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685c      	ldr	r4, [r3, #4]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681d      	ldr	r5, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	691e      	ldr	r6, [r3, #16]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff ffc8 	bl	800b0ee <makeFreeRtosPriority>
 800b15e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	9100      	str	r1, [sp, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	4632      	mov	r2, r6
 800b172:	4629      	mov	r1, r5
 800b174:	4620      	mov	r0, r4
 800b176:	f000 fb1d 	bl	800b7b4 <xTaskCreateStatic>
 800b17a:	4603      	mov	r3, r0
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	e01c      	b.n	800b1ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685c      	ldr	r4, [r3, #4]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b18c:	b29e      	uxth	r6, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff ffaa 	bl	800b0ee <makeFreeRtosPriority>
 800b19a:	4602      	mov	r2, r0
 800b19c:	f107 030c 	add.w	r3, r7, #12
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	9200      	str	r2, [sp, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	4632      	mov	r2, r6
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fb5f 	bl	800b86e <xTaskCreate>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d001      	beq.n	800b1ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e000      	b.n	800b1bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <osDelay+0x16>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	e000      	b.n	800b1dc <osDelay+0x18>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fc93 	bl	800bb08 <vTaskDelay>
  
  return osOK;
 800b1e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f103 0208 	add.w	r2, r3, #8
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f04f 32ff 	mov.w	r2, #4294967295
 800b204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f103 0208 	add.w	r2, r3, #8
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f103 0208 	add.w	r2, r3, #8
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b246:	b480      	push	{r7}
 800b248:	b085      	sub	sp, #20
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	689a      	ldr	r2, [r3, #8]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	601a      	str	r2, [r3, #0]
}
 800b282:	bf00      	nop
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b28e:	b480      	push	{r7}
 800b290:	b085      	sub	sp, #20
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a4:	d103      	bne.n	800b2ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	e00c      	b.n	800b2c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e002      	b.n	800b2bc <vListInsert+0x2e>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d2f6      	bcs.n	800b2b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	6892      	ldr	r2, [r2, #8]
 800b316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	6852      	ldr	r2, [r2, #4]
 800b320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d103      	bne.n	800b334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	1e5a      	subs	r2, r3, #1
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10a      	bne.n	800b37e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b37a:	bf00      	nop
 800b37c:	e7fe      	b.n	800b37c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b37e:	f001 f9b9 	bl	800c6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38a:	68f9      	ldr	r1, [r7, #12]
 800b38c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b38e:	fb01 f303 	mul.w	r3, r1, r3
 800b392:	441a      	add	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	68f9      	ldr	r1, [r7, #12]
 800b3b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3b4:	fb01 f303 	mul.w	r3, r1, r3
 800b3b8:	441a      	add	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	22ff      	movs	r2, #255	; 0xff
 800b3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	22ff      	movs	r2, #255	; 0xff
 800b3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d114      	bne.n	800b3fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01a      	beq.n	800b412 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3310      	adds	r3, #16
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fe17 	bl	800c014 <xTaskRemoveFromEventList>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d012      	beq.n	800b412 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <xQueueGenericReset+0xcc>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	e009      	b.n	800b412 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3310      	adds	r3, #16
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff fef2 	bl	800b1ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3324      	adds	r3, #36	; 0x24
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff feed 	bl	800b1ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b412:	f001 f99f 	bl	800c754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b416:	2301      	movs	r3, #1
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08a      	sub	sp, #40	; 0x28
 800b428:	af02      	add	r7, sp, #8
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	4613      	mov	r3, r2
 800b430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	613b      	str	r3, [r7, #16]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	fb02 f303 	mul.w	r3, r2, r3
 800b456:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	3348      	adds	r3, #72	; 0x48
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 fa2b 	bl	800c8b8 <pvPortMalloc>
 800b462:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d011      	beq.n	800b48e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	3348      	adds	r3, #72	; 0x48
 800b472:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b47c:	79fa      	ldrb	r2, [r7, #7]
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	4613      	mov	r3, r2
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	68b9      	ldr	r1, [r7, #8]
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 f805 	bl	800b498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b48e:	69bb      	ldr	r3, [r7, #24]
	}
 800b490:	4618      	mov	r0, r3
 800b492:	3720      	adds	r7, #32
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d103      	bne.n	800b4b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	e002      	b.n	800b4ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	69b8      	ldr	r0, [r7, #24]
 800b4ca:	f7ff ff43 	bl	800b354 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08c      	sub	sp, #48	; 0x30
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10a      	bne.n	800b508 <xQueueReceive+0x30>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	623b      	str	r3, [r7, #32]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d103      	bne.n	800b516 <xQueueReceive+0x3e>
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <xQueueReceive+0x42>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <xQueueReceive+0x44>
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xQueueReceive+0x5e>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	61fb      	str	r3, [r7, #28]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b536:	f000 ff2d 	bl	800c394 <xTaskGetSchedulerState>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <xQueueReceive+0x6e>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <xQueueReceive+0x72>
 800b546:	2301      	movs	r3, #1
 800b548:	e000      	b.n	800b54c <xQueueReceive+0x74>
 800b54a:	2300      	movs	r3, #0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10a      	bne.n	800b566 <xQueueReceive+0x8e>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	61bb      	str	r3, [r7, #24]
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b566:	f001 f8c5 	bl	800c6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01f      	beq.n	800b5b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b57a:	f000 f88d 	bl	800b698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	1e5a      	subs	r2, r3, #1
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00f      	beq.n	800b5ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b590:	3310      	adds	r3, #16
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fd3e 	bl	800c014 <xTaskRemoveFromEventList>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d007      	beq.n	800b5ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b59e:	4b3d      	ldr	r3, [pc, #244]	; (800b694 <xQueueReceive+0x1bc>)
 800b5a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5ae:	f001 f8d1 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e069      	b.n	800b68a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d103      	bne.n	800b5c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5bc:	f001 f8ca 	bl	800c754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	e062      	b.n	800b68a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5ca:	f107 0310 	add.w	r3, r7, #16
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fd82 	bl	800c0d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5d8:	f001 f8bc 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5dc:	f000 fb32 	bl	800bc44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5e0:	f001 f888 	bl	800c6f4 <vPortEnterCritical>
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5ea:	b25b      	sxtb	r3, r3
 800b5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f0:	d103      	bne.n	800b5fa <xQueueReceive+0x122>
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b600:	b25b      	sxtb	r3, r3
 800b602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b606:	d103      	bne.n	800b610 <xQueueReceive+0x138>
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b610:	f001 f8a0 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b614:	1d3a      	adds	r2, r7, #4
 800b616:	f107 0310 	add.w	r3, r7, #16
 800b61a:	4611      	mov	r1, r2
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 fd71 	bl	800c104 <xTaskCheckForTimeOut>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d123      	bne.n	800b670 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b62a:	f000 f8ad 	bl	800b788 <prvIsQueueEmpty>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d017      	beq.n	800b664 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	3324      	adds	r3, #36	; 0x24
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	4611      	mov	r1, r2
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 fcc5 	bl	800bfcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b644:	f000 f84e 	bl	800b6e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b648:	f000 fb0a 	bl	800bc60 <xTaskResumeAll>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d189      	bne.n	800b566 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b652:	4b10      	ldr	r3, [pc, #64]	; (800b694 <xQueueReceive+0x1bc>)
 800b654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	e780      	b.n	800b566 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b666:	f000 f83d 	bl	800b6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b66a:	f000 faf9 	bl	800bc60 <xTaskResumeAll>
 800b66e:	e77a      	b.n	800b566 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b672:	f000 f837 	bl	800b6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b676:	f000 faf3 	bl	800bc60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b67a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b67c:	f000 f884 	bl	800b788 <prvIsQueueEmpty>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	f43f af6f 	beq.w	800b566 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3730      	adds	r7, #48	; 0x30
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d018      	beq.n	800b6dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68da      	ldr	r2, [r3, #12]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	441a      	add	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68da      	ldr	r2, [r3, #12]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d303      	bcc.n	800b6cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68d9      	ldr	r1, [r3, #12]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6838      	ldr	r0, [r7, #0]
 800b6d8:	f001 fbfb 	bl	800ced2 <memcpy>
	}
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6ec:	f001 f802 	bl	800c6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6f8:	e011      	b.n	800b71e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d012      	beq.n	800b728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3324      	adds	r3, #36	; 0x24
 800b706:	4618      	mov	r0, r3
 800b708:	f000 fc84 	bl	800c014 <xTaskRemoveFromEventList>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b712:	f000 fd59 	bl	800c1c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	3b01      	subs	r3, #1
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b722:	2b00      	cmp	r3, #0
 800b724:	dce9      	bgt.n	800b6fa <prvUnlockQueue+0x16>
 800b726:	e000      	b.n	800b72a <prvUnlockQueue+0x46>
					break;
 800b728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	22ff      	movs	r2, #255	; 0xff
 800b72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b732:	f001 f80f 	bl	800c754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b736:	f000 ffdd 	bl	800c6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b742:	e011      	b.n	800b768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d012      	beq.n	800b772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3310      	adds	r3, #16
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fc5f 	bl	800c014 <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b75c:	f000 fd34 	bl	800c1c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	3b01      	subs	r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dce9      	bgt.n	800b744 <prvUnlockQueue+0x60>
 800b770:	e000      	b.n	800b774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	22ff      	movs	r2, #255	; 0xff
 800b778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b77c:	f000 ffea 	bl	800c754 <vPortExitCritical>
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b790:	f000 ffb0 	bl	800c6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b79c:	2301      	movs	r3, #1
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e001      	b.n	800b7a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7a6:	f000 ffd5 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08e      	sub	sp, #56	; 0x38
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <xTaskCreateStatic+0x2a>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	623b      	str	r3, [r7, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xTaskCreateStatic+0x46>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61fb      	str	r3, [r7, #28]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7fa:	23b4      	movs	r3, #180	; 0xb4
 800b7fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2bb4      	cmp	r3, #180	; 0xb4
 800b802:	d00a      	beq.n	800b81a <xTaskCreateStatic+0x66>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	61bb      	str	r3, [r7, #24]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b81a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01e      	beq.n	800b860 <xTaskCreateStatic+0xac>
 800b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01b      	beq.n	800b860 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b830:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	2202      	movs	r2, #2
 800b836:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b83a:	2300      	movs	r3, #0
 800b83c:	9303      	str	r3, [sp, #12]
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	9302      	str	r3, [sp, #8]
 800b842:	f107 0314 	add.w	r3, r7, #20
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 f850 	bl	800b8f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b85a:	f000 f8eb 	bl	800ba34 <prvAddNewTaskToReadyList>
 800b85e:	e001      	b.n	800b864 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b864:	697b      	ldr	r3, [r7, #20]
	}
 800b866:	4618      	mov	r0, r3
 800b868:	3728      	adds	r7, #40	; 0x28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b08c      	sub	sp, #48	; 0x30
 800b872:	af04      	add	r7, sp, #16
 800b874:	60f8      	str	r0, [r7, #12]
 800b876:	60b9      	str	r1, [r7, #8]
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	4613      	mov	r3, r2
 800b87c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b87e:	88fb      	ldrh	r3, [r7, #6]
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4618      	mov	r0, r3
 800b884:	f001 f818 	bl	800c8b8 <pvPortMalloc>
 800b888:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00e      	beq.n	800b8ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b890:	20b4      	movs	r0, #180	; 0xb4
 800b892:	f001 f811 	bl	800c8b8 <pvPortMalloc>
 800b896:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	631a      	str	r2, [r3, #48]	; 0x30
 800b8a4:	e005      	b.n	800b8b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8a6:	6978      	ldr	r0, [r7, #20]
 800b8a8:	f001 f8d2 	bl	800ca50 <vPortFree>
 800b8ac:	e001      	b.n	800b8b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d017      	beq.n	800b8e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8c0:	88fa      	ldrh	r2, [r7, #6]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9303      	str	r3, [sp, #12]
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	9302      	str	r3, [sp, #8]
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	68b9      	ldr	r1, [r7, #8]
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f000 f80e 	bl	800b8f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8dc:	69f8      	ldr	r0, [r7, #28]
 800b8de:	f000 f8a9 	bl	800ba34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	61bb      	str	r3, [r7, #24]
 800b8e6:	e002      	b.n	800b8ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3720      	adds	r7, #32
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b910:	3b01      	subs	r3, #1
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	f023 0307 	bic.w	r3, r3, #7
 800b91e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	f003 0307 	and.w	r3, r3, #7
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	617b      	str	r3, [r7, #20]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d01f      	beq.n	800b986 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b946:	2300      	movs	r3, #0
 800b948:	61fb      	str	r3, [r7, #28]
 800b94a:	e012      	b.n	800b972 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	7819      	ldrb	r1, [r3, #0]
 800b954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	4413      	add	r3, r2
 800b95a:	3334      	adds	r3, #52	; 0x34
 800b95c:	460a      	mov	r2, r1
 800b95e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	4413      	add	r3, r2
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d006      	beq.n	800b97a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	3301      	adds	r3, #1
 800b970:	61fb      	str	r3, [r7, #28]
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	2b0f      	cmp	r3, #15
 800b976:	d9e9      	bls.n	800b94c <prvInitialiseNewTask+0x54>
 800b978:	e000      	b.n	800b97c <prvInitialiseNewTask+0x84>
			{
				break;
 800b97a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b984:	e003      	b.n	800b98e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	2b06      	cmp	r3, #6
 800b992:	d901      	bls.n	800b998 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b994:	2306      	movs	r3, #6
 800b996:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b99c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fc3c 	bl	800b22c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b6:	3318      	adds	r3, #24
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fc37 	bl	800b22c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	f1c3 0207 	rsb	r2, r3, #7
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	334c      	adds	r3, #76	; 0x4c
 800b9e8:	2260      	movs	r2, #96	; 0x60
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 fa7e 	bl	800ceee <memset>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	4a0c      	ldr	r2, [pc, #48]	; (800ba28 <prvInitialiseNewTask+0x130>)
 800b9f6:	651a      	str	r2, [r3, #80]	; 0x50
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	4a0c      	ldr	r2, [pc, #48]	; (800ba2c <prvInitialiseNewTask+0x134>)
 800b9fc:	655a      	str	r2, [r3, #84]	; 0x54
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	4a0b      	ldr	r2, [pc, #44]	; (800ba30 <prvInitialiseNewTask+0x138>)
 800ba02:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	68f9      	ldr	r1, [r7, #12]
 800ba08:	69b8      	ldr	r0, [r7, #24]
 800ba0a:	f000 fd47 	bl	800c49c <pxPortInitialiseStack>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba20:	bf00      	nop
 800ba22:	3720      	adds	r7, #32
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	0800e2f0 	.word	0x0800e2f0
 800ba2c:	0800e310 	.word	0x0800e310
 800ba30:	0800e2d0 	.word	0x0800e2d0

0800ba34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba3c:	f000 fe5a 	bl	800c6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba40:	4b2a      	ldr	r3, [pc, #168]	; (800baec <prvAddNewTaskToReadyList+0xb8>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3301      	adds	r3, #1
 800ba46:	4a29      	ldr	r2, [pc, #164]	; (800baec <prvAddNewTaskToReadyList+0xb8>)
 800ba48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba4a:	4b29      	ldr	r3, [pc, #164]	; (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d109      	bne.n	800ba66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba52:	4a27      	ldr	r2, [pc, #156]	; (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba58:	4b24      	ldr	r3, [pc, #144]	; (800baec <prvAddNewTaskToReadyList+0xb8>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d110      	bne.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba60:	f000 fbd6 	bl	800c210 <prvInitialiseTaskLists>
 800ba64:	e00d      	b.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba66:	4b23      	ldr	r3, [pc, #140]	; (800baf4 <prvAddNewTaskToReadyList+0xc0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d109      	bne.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba6e:	4b20      	ldr	r3, [pc, #128]	; (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d802      	bhi.n	800ba82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba7c:	4a1c      	ldr	r2, [pc, #112]	; (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba82:	4b1d      	ldr	r3, [pc, #116]	; (800baf8 <prvAddNewTaskToReadyList+0xc4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	4a1b      	ldr	r2, [pc, #108]	; (800baf8 <prvAddNewTaskToReadyList+0xc4>)
 800ba8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	2201      	movs	r2, #1
 800ba92:	409a      	lsls	r2, r3
 800ba94:	4b19      	ldr	r3, [pc, #100]	; (800bafc <prvAddNewTaskToReadyList+0xc8>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	4a18      	ldr	r2, [pc, #96]	; (800bafc <prvAddNewTaskToReadyList+0xc8>)
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4a15      	ldr	r2, [pc, #84]	; (800bb00 <prvAddNewTaskToReadyList+0xcc>)
 800baac:	441a      	add	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	4610      	mov	r0, r2
 800bab6:	f7ff fbc6 	bl	800b246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baba:	f000 fe4b 	bl	800c754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800babe:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <prvAddNewTaskToReadyList+0xc0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00e      	beq.n	800bae4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bac6:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <prvAddNewTaskToReadyList+0xbc>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d207      	bcs.n	800bae4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bad4:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <prvAddNewTaskToReadyList+0xd0>)
 800bad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000a54 	.word	0x20000a54
 800baf0:	20000954 	.word	0x20000954
 800baf4:	20000a60 	.word	0x20000a60
 800baf8:	20000a70 	.word	0x20000a70
 800bafc:	20000a5c 	.word	0x20000a5c
 800bb00:	20000958 	.word	0x20000958
 800bb04:	e000ed04 	.word	0xe000ed04

0800bb08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d017      	beq.n	800bb4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb1a:	4b13      	ldr	r3, [pc, #76]	; (800bb68 <vTaskDelay+0x60>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <vTaskDelay+0x30>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	60bb      	str	r3, [r7, #8]
}
 800bb34:	bf00      	nop
 800bb36:	e7fe      	b.n	800bb36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb38:	f000 f884 	bl	800bc44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fc46 	bl	800c3d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb44:	f000 f88c 	bl	800bc60 <xTaskResumeAll>
 800bb48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d107      	bne.n	800bb60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <vTaskDelay+0x64>)
 800bb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000a7c 	.word	0x20000a7c
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08a      	sub	sp, #40	; 0x28
 800bb74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb7e:	463a      	mov	r2, r7
 800bb80:	1d39      	adds	r1, r7, #4
 800bb82:	f107 0308 	add.w	r3, r7, #8
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f5 fe2c 	bl	80017e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	9202      	str	r2, [sp, #8]
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	2300      	movs	r3, #0
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	460a      	mov	r2, r1
 800bb9e:	4921      	ldr	r1, [pc, #132]	; (800bc24 <vTaskStartScheduler+0xb4>)
 800bba0:	4821      	ldr	r0, [pc, #132]	; (800bc28 <vTaskStartScheduler+0xb8>)
 800bba2:	f7ff fe07 	bl	800b7b4 <xTaskCreateStatic>
 800bba6:	4603      	mov	r3, r0
 800bba8:	4a20      	ldr	r2, [pc, #128]	; (800bc2c <vTaskStartScheduler+0xbc>)
 800bbaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbac:	4b1f      	ldr	r3, [pc, #124]	; (800bc2c <vTaskStartScheduler+0xbc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	e001      	b.n	800bbbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d11b      	bne.n	800bbfc <vTaskStartScheduler+0x8c>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	613b      	str	r3, [r7, #16]
}
 800bbd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <vTaskStartScheduler+0xc0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	334c      	adds	r3, #76	; 0x4c
 800bbde:	4a15      	ldr	r2, [pc, #84]	; (800bc34 <vTaskStartScheduler+0xc4>)
 800bbe0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <vTaskStartScheduler+0xc8>)
 800bbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbea:	4b14      	ldr	r3, [pc, #80]	; (800bc3c <vTaskStartScheduler+0xcc>)
 800bbec:	2201      	movs	r2, #1
 800bbee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbf0:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <vTaskStartScheduler+0xd0>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbf6:	f000 fcdb 	bl	800c5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbfa:	e00e      	b.n	800bc1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc02:	d10a      	bne.n	800bc1a <vTaskStartScheduler+0xaa>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	60fb      	str	r3, [r7, #12]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <vTaskStartScheduler+0xa8>
}
 800bc1a:	bf00      	nop
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	0800e2a8 	.word	0x0800e2a8
 800bc28:	0800c1e1 	.word	0x0800c1e1
 800bc2c:	20000a78 	.word	0x20000a78
 800bc30:	20000954 	.word	0x20000954
 800bc34:	200002dc 	.word	0x200002dc
 800bc38:	20000a74 	.word	0x20000a74
 800bc3c:	20000a60 	.word	0x20000a60
 800bc40:	20000a58 	.word	0x20000a58

0800bc44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc48:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <vTaskSuspendAll+0x18>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	4a03      	ldr	r2, [pc, #12]	; (800bc5c <vTaskSuspendAll+0x18>)
 800bc50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc52:	bf00      	nop
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	20000a7c 	.word	0x20000a7c

0800bc60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc6e:	4b41      	ldr	r3, [pc, #260]	; (800bd74 <xTaskResumeAll+0x114>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <xTaskResumeAll+0x2c>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	603b      	str	r3, [r7, #0]
}
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc8c:	f000 fd32 	bl	800c6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc90:	4b38      	ldr	r3, [pc, #224]	; (800bd74 <xTaskResumeAll+0x114>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	4a37      	ldr	r2, [pc, #220]	; (800bd74 <xTaskResumeAll+0x114>)
 800bc98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc9a:	4b36      	ldr	r3, [pc, #216]	; (800bd74 <xTaskResumeAll+0x114>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d161      	bne.n	800bd66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bca2:	4b35      	ldr	r3, [pc, #212]	; (800bd78 <xTaskResumeAll+0x118>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d05d      	beq.n	800bd66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcaa:	e02e      	b.n	800bd0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcac:	4b33      	ldr	r3, [pc, #204]	; (800bd7c <xTaskResumeAll+0x11c>)
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3318      	adds	r3, #24
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fb21 	bl	800b300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff fb1c 	bl	800b300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bccc:	2201      	movs	r2, #1
 800bcce:	409a      	lsls	r2, r3
 800bcd0:	4b2b      	ldr	r3, [pc, #172]	; (800bd80 <xTaskResumeAll+0x120>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	4a2a      	ldr	r2, [pc, #168]	; (800bd80 <xTaskResumeAll+0x120>)
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4a27      	ldr	r2, [pc, #156]	; (800bd84 <xTaskResumeAll+0x124>)
 800bce8:	441a      	add	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7ff faa8 	bl	800b246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	4b23      	ldr	r3, [pc, #140]	; (800bd88 <xTaskResumeAll+0x128>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d302      	bcc.n	800bd0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bd04:	4b21      	ldr	r3, [pc, #132]	; (800bd8c <xTaskResumeAll+0x12c>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd0a:	4b1c      	ldr	r3, [pc, #112]	; (800bd7c <xTaskResumeAll+0x11c>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1cc      	bne.n	800bcac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd18:	f000 fb1c 	bl	800c354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd1c:	4b1c      	ldr	r3, [pc, #112]	; (800bd90 <xTaskResumeAll+0x130>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d010      	beq.n	800bd4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd28:	f000 f836 	bl	800bd98 <xTaskIncrementTick>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bd32:	4b16      	ldr	r3, [pc, #88]	; (800bd8c <xTaskResumeAll+0x12c>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1f1      	bne.n	800bd28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bd44:	4b12      	ldr	r3, [pc, #72]	; (800bd90 <xTaskResumeAll+0x130>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd4a:	4b10      	ldr	r3, [pc, #64]	; (800bd8c <xTaskResumeAll+0x12c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d009      	beq.n	800bd66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd52:	2301      	movs	r3, #1
 800bd54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd56:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <xTaskResumeAll+0x134>)
 800bd58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd66:	f000 fcf5 	bl	800c754 <vPortExitCritical>

	return xAlreadyYielded;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	20000a7c 	.word	0x20000a7c
 800bd78:	20000a54 	.word	0x20000a54
 800bd7c:	20000a14 	.word	0x20000a14
 800bd80:	20000a5c 	.word	0x20000a5c
 800bd84:	20000958 	.word	0x20000958
 800bd88:	20000954 	.word	0x20000954
 800bd8c:	20000a68 	.word	0x20000a68
 800bd90:	20000a64 	.word	0x20000a64
 800bd94:	e000ed04 	.word	0xe000ed04

0800bd98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda2:	4b4e      	ldr	r3, [pc, #312]	; (800bedc <xTaskIncrementTick+0x144>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f040 808e 	bne.w	800bec8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdac:	4b4c      	ldr	r3, [pc, #304]	; (800bee0 <xTaskIncrementTick+0x148>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bdb4:	4a4a      	ldr	r2, [pc, #296]	; (800bee0 <xTaskIncrementTick+0x148>)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d120      	bne.n	800be02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdc0:	4b48      	ldr	r3, [pc, #288]	; (800bee4 <xTaskIncrementTick+0x14c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <xTaskIncrementTick+0x48>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	603b      	str	r3, [r7, #0]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <xTaskIncrementTick+0x46>
 800bde0:	4b40      	ldr	r3, [pc, #256]	; (800bee4 <xTaskIncrementTick+0x14c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	4b40      	ldr	r3, [pc, #256]	; (800bee8 <xTaskIncrementTick+0x150>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a3e      	ldr	r2, [pc, #248]	; (800bee4 <xTaskIncrementTick+0x14c>)
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	4a3e      	ldr	r2, [pc, #248]	; (800bee8 <xTaskIncrementTick+0x150>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	4b3d      	ldr	r3, [pc, #244]	; (800beec <xTaskIncrementTick+0x154>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	4a3c      	ldr	r2, [pc, #240]	; (800beec <xTaskIncrementTick+0x154>)
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	f000 faa9 	bl	800c354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be02:	4b3b      	ldr	r3, [pc, #236]	; (800bef0 <xTaskIncrementTick+0x158>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d348      	bcc.n	800be9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be0c:	4b35      	ldr	r3, [pc, #212]	; (800bee4 <xTaskIncrementTick+0x14c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d104      	bne.n	800be20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be16:	4b36      	ldr	r3, [pc, #216]	; (800bef0 <xTaskIncrementTick+0x158>)
 800be18:	f04f 32ff 	mov.w	r2, #4294967295
 800be1c:	601a      	str	r2, [r3, #0]
					break;
 800be1e:	e03e      	b.n	800be9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be20:	4b30      	ldr	r3, [pc, #192]	; (800bee4 <xTaskIncrementTick+0x14c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	429a      	cmp	r2, r3
 800be36:	d203      	bcs.n	800be40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be38:	4a2d      	ldr	r2, [pc, #180]	; (800bef0 <xTaskIncrementTick+0x158>)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be3e:	e02e      	b.n	800be9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	3304      	adds	r3, #4
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff fa5b 	bl	800b300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d004      	beq.n	800be5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3318      	adds	r3, #24
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff fa52 	bl	800b300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be60:	2201      	movs	r2, #1
 800be62:	409a      	lsls	r2, r3
 800be64:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <xTaskIncrementTick+0x15c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4313      	orrs	r3, r2
 800be6a:	4a22      	ldr	r2, [pc, #136]	; (800bef4 <xTaskIncrementTick+0x15c>)
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4a1f      	ldr	r2, [pc, #124]	; (800bef8 <xTaskIncrementTick+0x160>)
 800be7c:	441a      	add	r2, r3
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	3304      	adds	r3, #4
 800be82:	4619      	mov	r1, r3
 800be84:	4610      	mov	r0, r2
 800be86:	f7ff f9de 	bl	800b246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8e:	4b1b      	ldr	r3, [pc, #108]	; (800befc <xTaskIncrementTick+0x164>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be94:	429a      	cmp	r2, r3
 800be96:	d3b9      	bcc.n	800be0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be98:	2301      	movs	r3, #1
 800be9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be9c:	e7b6      	b.n	800be0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be9e:	4b17      	ldr	r3, [pc, #92]	; (800befc <xTaskIncrementTick+0x164>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea4:	4914      	ldr	r1, [pc, #80]	; (800bef8 <xTaskIncrementTick+0x160>)
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	440b      	add	r3, r1
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d901      	bls.n	800beba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800beb6:	2301      	movs	r3, #1
 800beb8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <xTaskIncrementTick+0x168>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d007      	beq.n	800bed2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bec2:	2301      	movs	r3, #1
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	e004      	b.n	800bed2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bec8:	4b0e      	ldr	r3, [pc, #56]	; (800bf04 <xTaskIncrementTick+0x16c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	4a0d      	ldr	r2, [pc, #52]	; (800bf04 <xTaskIncrementTick+0x16c>)
 800bed0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bed2:	697b      	ldr	r3, [r7, #20]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3718      	adds	r7, #24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	20000a7c 	.word	0x20000a7c
 800bee0:	20000a58 	.word	0x20000a58
 800bee4:	20000a0c 	.word	0x20000a0c
 800bee8:	20000a10 	.word	0x20000a10
 800beec:	20000a6c 	.word	0x20000a6c
 800bef0:	20000a74 	.word	0x20000a74
 800bef4:	20000a5c 	.word	0x20000a5c
 800bef8:	20000958 	.word	0x20000958
 800befc:	20000954 	.word	0x20000954
 800bf00:	20000a68 	.word	0x20000a68
 800bf04:	20000a64 	.word	0x20000a64

0800bf08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf0e:	4b29      	ldr	r3, [pc, #164]	; (800bfb4 <vTaskSwitchContext+0xac>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf16:	4b28      	ldr	r3, [pc, #160]	; (800bfb8 <vTaskSwitchContext+0xb0>)
 800bf18:	2201      	movs	r2, #1
 800bf1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf1c:	e044      	b.n	800bfa8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bf1e:	4b26      	ldr	r3, [pc, #152]	; (800bfb8 <vTaskSwitchContext+0xb0>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf24:	4b25      	ldr	r3, [pc, #148]	; (800bfbc <vTaskSwitchContext+0xb4>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	fab3 f383 	clz	r3, r3
 800bf30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf32:	7afb      	ldrb	r3, [r7, #11]
 800bf34:	f1c3 031f 	rsb	r3, r3, #31
 800bf38:	617b      	str	r3, [r7, #20]
 800bf3a:	4921      	ldr	r1, [pc, #132]	; (800bfc0 <vTaskSwitchContext+0xb8>)
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	440b      	add	r3, r1
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10a      	bne.n	800bf64 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	607b      	str	r3, [r7, #4]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <vTaskSwitchContext+0x5a>
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4a14      	ldr	r2, [pc, #80]	; (800bfc0 <vTaskSwitchContext+0xb8>)
 800bf70:	4413      	add	r3, r2
 800bf72:	613b      	str	r3, [r7, #16]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	605a      	str	r2, [r3, #4]
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	3308      	adds	r3, #8
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d104      	bne.n	800bf94 <vTaskSwitchContext+0x8c>
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	605a      	str	r2, [r3, #4]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <vTaskSwitchContext+0xbc>)
 800bf9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <vTaskSwitchContext+0xbc>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	334c      	adds	r3, #76	; 0x4c
 800bfa4:	4a08      	ldr	r2, [pc, #32]	; (800bfc8 <vTaskSwitchContext+0xc0>)
 800bfa6:	6013      	str	r3, [r2, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	20000a7c 	.word	0x20000a7c
 800bfb8:	20000a68 	.word	0x20000a68
 800bfbc:	20000a5c 	.word	0x20000a5c
 800bfc0:	20000958 	.word	0x20000958
 800bfc4:	20000954 	.word	0x20000954
 800bfc8:	200002dc 	.word	0x200002dc

0800bfcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10a      	bne.n	800bff2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	60fb      	str	r3, [r7, #12]
}
 800bfee:	bf00      	nop
 800bff0:	e7fe      	b.n	800bff0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <vTaskPlaceOnEventList+0x44>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3318      	adds	r3, #24
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff f947 	bl	800b28e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c000:	2101      	movs	r1, #1
 800c002:	6838      	ldr	r0, [r7, #0]
 800c004:	f000 f9e4 	bl	800c3d0 <prvAddCurrentTaskToDelayedList>
}
 800c008:	bf00      	nop
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	20000954 	.word	0x20000954

0800c014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10a      	bne.n	800c040 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	60fb      	str	r3, [r7, #12]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	3318      	adds	r3, #24
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff f95b 	bl	800b300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c04a:	4b1d      	ldr	r3, [pc, #116]	; (800c0c0 <xTaskRemoveFromEventList+0xac>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d11c      	bne.n	800c08c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	3304      	adds	r3, #4
 800c056:	4618      	mov	r0, r3
 800c058:	f7ff f952 	bl	800b300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	2201      	movs	r2, #1
 800c062:	409a      	lsls	r2, r3
 800c064:	4b17      	ldr	r3, [pc, #92]	; (800c0c4 <xTaskRemoveFromEventList+0xb0>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4313      	orrs	r3, r2
 800c06a:	4a16      	ldr	r2, [pc, #88]	; (800c0c4 <xTaskRemoveFromEventList+0xb0>)
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c072:	4613      	mov	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4a13      	ldr	r2, [pc, #76]	; (800c0c8 <xTaskRemoveFromEventList+0xb4>)
 800c07c:	441a      	add	r2, r3
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	3304      	adds	r3, #4
 800c082:	4619      	mov	r1, r3
 800c084:	4610      	mov	r0, r2
 800c086:	f7ff f8de 	bl	800b246 <vListInsertEnd>
 800c08a:	e005      	b.n	800c098 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	3318      	adds	r3, #24
 800c090:	4619      	mov	r1, r3
 800c092:	480e      	ldr	r0, [pc, #56]	; (800c0cc <xTaskRemoveFromEventList+0xb8>)
 800c094:	f7ff f8d7 	bl	800b246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09c:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <xTaskRemoveFromEventList+0xbc>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d905      	bls.n	800c0b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <xTaskRemoveFromEventList+0xc0>)
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	e001      	b.n	800c0b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0b6:	697b      	ldr	r3, [r7, #20]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20000a7c 	.word	0x20000a7c
 800c0c4:	20000a5c 	.word	0x20000a5c
 800c0c8:	20000958 	.word	0x20000958
 800c0cc:	20000a14 	.word	0x20000a14
 800c0d0:	20000954 	.word	0x20000954
 800c0d4:	20000a68 	.word	0x20000a68

0800c0d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0e0:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <vTaskInternalSetTimeOutState+0x24>)
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0e8:	4b05      	ldr	r3, [pc, #20]	; (800c100 <vTaskInternalSetTimeOutState+0x28>)
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	605a      	str	r2, [r3, #4]
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	20000a6c 	.word	0x20000a6c
 800c100:	20000a58 	.word	0x20000a58

0800c104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10a      	bne.n	800c12a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	613b      	str	r3, [r7, #16]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c146:	f000 fad5 	bl	800c6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c14a:	4b1d      	ldr	r3, [pc, #116]	; (800c1c0 <xTaskCheckForTimeOut+0xbc>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c162:	d102      	bne.n	800c16a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	e023      	b.n	800c1b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	4b15      	ldr	r3, [pc, #84]	; (800c1c4 <xTaskCheckForTimeOut+0xc0>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	429a      	cmp	r2, r3
 800c174:	d007      	beq.n	800c186 <xTaskCheckForTimeOut+0x82>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d302      	bcc.n	800c186 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c180:	2301      	movs	r3, #1
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	e015      	b.n	800c1b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d20b      	bcs.n	800c1a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7ff ff9b 	bl	800c0d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	e004      	b.n	800c1b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1b2:	f000 facf 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800c1b6:	69fb      	ldr	r3, [r7, #28]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3720      	adds	r7, #32
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20000a58 	.word	0x20000a58
 800c1c4:	20000a6c 	.word	0x20000a6c

0800c1c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1cc:	4b03      	ldr	r3, [pc, #12]	; (800c1dc <vTaskMissedYield+0x14>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20000a68 	.word	0x20000a68

0800c1e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1e8:	f000 f852 	bl	800c290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1ec:	4b06      	ldr	r3, [pc, #24]	; (800c208 <prvIdleTask+0x28>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d9f9      	bls.n	800c1e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c1f4:	4b05      	ldr	r3, [pc, #20]	; (800c20c <prvIdleTask+0x2c>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c204:	e7f0      	b.n	800c1e8 <prvIdleTask+0x8>
 800c206:	bf00      	nop
 800c208:	20000958 	.word	0x20000958
 800c20c:	e000ed04 	.word	0xe000ed04

0800c210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c216:	2300      	movs	r3, #0
 800c218:	607b      	str	r3, [r7, #4]
 800c21a:	e00c      	b.n	800c236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4a12      	ldr	r2, [pc, #72]	; (800c270 <prvInitialiseTaskLists+0x60>)
 800c228:	4413      	add	r3, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe ffde 	bl	800b1ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3301      	adds	r3, #1
 800c234:	607b      	str	r3, [r7, #4]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b06      	cmp	r3, #6
 800c23a:	d9ef      	bls.n	800c21c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c23c:	480d      	ldr	r0, [pc, #52]	; (800c274 <prvInitialiseTaskLists+0x64>)
 800c23e:	f7fe ffd5 	bl	800b1ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c242:	480d      	ldr	r0, [pc, #52]	; (800c278 <prvInitialiseTaskLists+0x68>)
 800c244:	f7fe ffd2 	bl	800b1ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c248:	480c      	ldr	r0, [pc, #48]	; (800c27c <prvInitialiseTaskLists+0x6c>)
 800c24a:	f7fe ffcf 	bl	800b1ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c24e:	480c      	ldr	r0, [pc, #48]	; (800c280 <prvInitialiseTaskLists+0x70>)
 800c250:	f7fe ffcc 	bl	800b1ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c254:	480b      	ldr	r0, [pc, #44]	; (800c284 <prvInitialiseTaskLists+0x74>)
 800c256:	f7fe ffc9 	bl	800b1ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c25a:	4b0b      	ldr	r3, [pc, #44]	; (800c288 <prvInitialiseTaskLists+0x78>)
 800c25c:	4a05      	ldr	r2, [pc, #20]	; (800c274 <prvInitialiseTaskLists+0x64>)
 800c25e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c260:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <prvInitialiseTaskLists+0x7c>)
 800c262:	4a05      	ldr	r2, [pc, #20]	; (800c278 <prvInitialiseTaskLists+0x68>)
 800c264:	601a      	str	r2, [r3, #0]
}
 800c266:	bf00      	nop
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20000958 	.word	0x20000958
 800c274:	200009e4 	.word	0x200009e4
 800c278:	200009f8 	.word	0x200009f8
 800c27c:	20000a14 	.word	0x20000a14
 800c280:	20000a28 	.word	0x20000a28
 800c284:	20000a40 	.word	0x20000a40
 800c288:	20000a0c 	.word	0x20000a0c
 800c28c:	20000a10 	.word	0x20000a10

0800c290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c296:	e019      	b.n	800c2cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c298:	f000 fa2c 	bl	800c6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c29c:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <prvCheckTasksWaitingTermination+0x50>)
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff f829 	bl	800b300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2ae:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <prvCheckTasksWaitingTermination+0x54>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	4a0b      	ldr	r2, [pc, #44]	; (800c2e4 <prvCheckTasksWaitingTermination+0x54>)
 800c2b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2b8:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <prvCheckTasksWaitingTermination+0x58>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	4a0a      	ldr	r2, [pc, #40]	; (800c2e8 <prvCheckTasksWaitingTermination+0x58>)
 800c2c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2c2:	f000 fa47 	bl	800c754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f810 	bl	800c2ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2cc:	4b06      	ldr	r3, [pc, #24]	; (800c2e8 <prvCheckTasksWaitingTermination+0x58>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e1      	bne.n	800c298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000a28 	.word	0x20000a28
 800c2e4:	20000a54 	.word	0x20000a54
 800c2e8:	20000a3c 	.word	0x20000a3c

0800c2ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	334c      	adds	r3, #76	; 0x4c
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fef7 	bl	800d0ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c304:	2b00      	cmp	r3, #0
 800c306:	d108      	bne.n	800c31a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fb9f 	bl	800ca50 <vPortFree>
				vPortFree( pxTCB );
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fb9c 	bl	800ca50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c318:	e018      	b.n	800c34c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c320:	2b01      	cmp	r3, #1
 800c322:	d103      	bne.n	800c32c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fb93 	bl	800ca50 <vPortFree>
	}
 800c32a:	e00f      	b.n	800c34c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c332:	2b02      	cmp	r3, #2
 800c334:	d00a      	beq.n	800c34c <prvDeleteTCB+0x60>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	60fb      	str	r3, [r7, #12]
}
 800c348:	bf00      	nop
 800c34a:	e7fe      	b.n	800c34a <prvDeleteTCB+0x5e>
	}
 800c34c:	bf00      	nop
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c35a:	4b0c      	ldr	r3, [pc, #48]	; (800c38c <prvResetNextTaskUnblockTime+0x38>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d104      	bne.n	800c36e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c364:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <prvResetNextTaskUnblockTime+0x3c>)
 800c366:	f04f 32ff 	mov.w	r2, #4294967295
 800c36a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c36c:	e008      	b.n	800c380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <prvResetNextTaskUnblockTime+0x38>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	4a04      	ldr	r2, [pc, #16]	; (800c390 <prvResetNextTaskUnblockTime+0x3c>)
 800c37e:	6013      	str	r3, [r2, #0]
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	20000a0c 	.word	0x20000a0c
 800c390:	20000a74 	.word	0x20000a74

0800c394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c39a:	4b0b      	ldr	r3, [pc, #44]	; (800c3c8 <xTaskGetSchedulerState+0x34>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	607b      	str	r3, [r7, #4]
 800c3a6:	e008      	b.n	800c3ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3a8:	4b08      	ldr	r3, [pc, #32]	; (800c3cc <xTaskGetSchedulerState+0x38>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	607b      	str	r3, [r7, #4]
 800c3b4:	e001      	b.n	800c3ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3ba:	687b      	ldr	r3, [r7, #4]
	}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	20000a60 	.word	0x20000a60
 800c3cc:	20000a7c 	.word	0x20000a7c

0800c3d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3da:	4b29      	ldr	r3, [pc, #164]	; (800c480 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3e0:	4b28      	ldr	r3, [pc, #160]	; (800c484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe ff8a 	bl	800b300 <uxListRemove>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10b      	bne.n	800c40a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3fe:	43da      	mvns	r2, r3
 800c400:	4b21      	ldr	r3, [pc, #132]	; (800c488 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4013      	ands	r3, r2
 800c406:	4a20      	ldr	r2, [pc, #128]	; (800c488 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c408:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d10a      	bne.n	800c428 <prvAddCurrentTaskToDelayedList+0x58>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c418:	4b1a      	ldr	r3, [pc, #104]	; (800c484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3304      	adds	r3, #4
 800c41e:	4619      	mov	r1, r3
 800c420:	481a      	ldr	r0, [pc, #104]	; (800c48c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c422:	f7fe ff10 	bl	800b246 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c426:	e026      	b.n	800c476 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4413      	add	r3, r2
 800c42e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c430:	4b14      	ldr	r3, [pc, #80]	; (800c484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d209      	bcs.n	800c454 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c440:	4b13      	ldr	r3, [pc, #76]	; (800c490 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	4b0f      	ldr	r3, [pc, #60]	; (800c484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	3304      	adds	r3, #4
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fe ff1e 	bl	800b28e <vListInsert>
}
 800c452:	e010      	b.n	800c476 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c454:	4b0f      	ldr	r3, [pc, #60]	; (800c494 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4619      	mov	r1, r3
 800c460:	4610      	mov	r0, r2
 800c462:	f7fe ff14 	bl	800b28e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d202      	bcs.n	800c476 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c470:	4a09      	ldr	r2, [pc, #36]	; (800c498 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	6013      	str	r3, [r2, #0]
}
 800c476:	bf00      	nop
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20000a58 	.word	0x20000a58
 800c484:	20000954 	.word	0x20000954
 800c488:	20000a5c 	.word	0x20000a5c
 800c48c:	20000a40 	.word	0x20000a40
 800c490:	20000a10 	.word	0x20000a10
 800c494:	20000a0c 	.word	0x20000a0c
 800c498:	20000a74 	.word	0x20000a74

0800c49c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3b04      	subs	r3, #4
 800c4ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	f023 0201 	bic.w	r2, r3, #1
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3b04      	subs	r3, #4
 800c4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4cc:	4a0c      	ldr	r2, [pc, #48]	; (800c500 <pxPortInitialiseStack+0x64>)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3b14      	subs	r3, #20
 800c4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f06f 0202 	mvn.w	r2, #2
 800c4ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	3b20      	subs	r3, #32
 800c4f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	0800c505 	.word	0x0800c505

0800c504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c50e:	4b12      	ldr	r3, [pc, #72]	; (800c558 <prvTaskExitError+0x54>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c516:	d00a      	beq.n	800c52e <prvTaskExitError+0x2a>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	60fb      	str	r3, [r7, #12]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <prvTaskExitError+0x28>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	60bb      	str	r3, [r7, #8]
}
 800c540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c542:	bf00      	nop
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0fc      	beq.n	800c544 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c54a:	bf00      	nop
 800c54c:	bf00      	nop
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	200002d8 	.word	0x200002d8
 800c55c:	00000000 	.word	0x00000000

0800c560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <pxCurrentTCBConst2>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6808      	ldr	r0, [r1, #0]
 800c566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56a:	f380 8809 	msr	PSP, r0
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8811 	msr	BASEPRI, r0
 800c57a:	4770      	bx	lr
 800c57c:	f3af 8000 	nop.w

0800c580 <pxCurrentTCBConst2>:
 800c580:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <prvPortStartFirstTask+0x24>)
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	6800      	ldr	r0, [r0, #0]
 800c58e:	f380 8808 	msr	MSP, r0
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8814 	msr	CONTROL, r0
 800c59a:	b662      	cpsie	i
 800c59c:	b661      	cpsie	f
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	df00      	svc	0
 800c5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed08 	.word	0xe000ed08

0800c5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5b6:	4b46      	ldr	r3, [pc, #280]	; (800c6d0 <xPortStartScheduler+0x120>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a46      	ldr	r2, [pc, #280]	; (800c6d4 <xPortStartScheduler+0x124>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d10a      	bne.n	800c5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	613b      	str	r3, [r7, #16]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5d6:	4b3e      	ldr	r3, [pc, #248]	; (800c6d0 <xPortStartScheduler+0x120>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a3f      	ldr	r2, [pc, #252]	; (800c6d8 <xPortStartScheduler+0x128>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d10a      	bne.n	800c5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	60fb      	str	r3, [r7, #12]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5f6:	4b39      	ldr	r3, [pc, #228]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	22ff      	movs	r2, #255	; 0xff
 800c606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	4b31      	ldr	r3, [pc, #196]	; (800c6e0 <xPortStartScheduler+0x130>)
 800c61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c61e:	4b31      	ldr	r3, [pc, #196]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c620:	2207      	movs	r2, #7
 800c622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c624:	e009      	b.n	800c63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c626:	4b2f      	ldr	r3, [pc, #188]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	4a2d      	ldr	r2, [pc, #180]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	b2db      	uxtb	r3, r3
 800c638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c642:	2b80      	cmp	r3, #128	; 0x80
 800c644:	d0ef      	beq.n	800c626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c646:	4b27      	ldr	r3, [pc, #156]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f1c3 0307 	rsb	r3, r3, #7
 800c64e:	2b04      	cmp	r3, #4
 800c650:	d00a      	beq.n	800c668 <xPortStartScheduler+0xb8>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	60bb      	str	r3, [r7, #8]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c668:	4b1e      	ldr	r3, [pc, #120]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	021b      	lsls	r3, r3, #8
 800c66e:	4a1d      	ldr	r2, [pc, #116]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c672:	4b1c      	ldr	r3, [pc, #112]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c67a:	4a1a      	ldr	r2, [pc, #104]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	b2da      	uxtb	r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c686:	4b18      	ldr	r3, [pc, #96]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a17      	ldr	r2, [pc, #92]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c692:	4b15      	ldr	r3, [pc, #84]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a14      	ldr	r2, [pc, #80]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c69e:	f000 f8dd 	bl	800c85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6a2:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <xPortStartScheduler+0x13c>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6a8:	f000 f8fc 	bl	800c8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6ac:	4b10      	ldr	r3, [pc, #64]	; (800c6f0 <xPortStartScheduler+0x140>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a0f      	ldr	r2, [pc, #60]	; (800c6f0 <xPortStartScheduler+0x140>)
 800c6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6b8:	f7ff ff66 	bl	800c588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6bc:	f7ff fc24 	bl	800bf08 <vTaskSwitchContext>
	prvTaskExitError();
 800c6c0:	f7ff ff20 	bl	800c504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	e000ed00 	.word	0xe000ed00
 800c6d4:	410fc271 	.word	0x410fc271
 800c6d8:	410fc270 	.word	0x410fc270
 800c6dc:	e000e400 	.word	0xe000e400
 800c6e0:	20000a80 	.word	0x20000a80
 800c6e4:	20000a84 	.word	0x20000a84
 800c6e8:	e000ed20 	.word	0xe000ed20
 800c6ec:	200002d8 	.word	0x200002d8
 800c6f0:	e000ef34 	.word	0xe000ef34

0800c6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	607b      	str	r3, [r7, #4]
}
 800c70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c70e:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <vPortEnterCritical+0x58>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	4a0d      	ldr	r2, [pc, #52]	; (800c74c <vPortEnterCritical+0x58>)
 800c716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c718:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <vPortEnterCritical+0x58>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d10f      	bne.n	800c740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <vPortEnterCritical+0x5c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <vPortEnterCritical+0x4c>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	603b      	str	r3, [r7, #0]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <vPortEnterCritical+0x4a>
	}
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	200002d8 	.word	0x200002d8
 800c750:	e000ed04 	.word	0xe000ed04

0800c754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c75a:	4b12      	ldr	r3, [pc, #72]	; (800c7a4 <vPortExitCritical+0x50>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <vPortExitCritical+0x24>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	607b      	str	r3, [r7, #4]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <vPortExitCritical+0x50>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <vPortExitCritical+0x50>)
 800c780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c782:	4b08      	ldr	r3, [pc, #32]	; (800c7a4 <vPortExitCritical+0x50>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <vPortExitCritical+0x42>
 800c78a:	2300      	movs	r3, #0
 800c78c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c796:	bf00      	nop
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	200002d8 	.word	0x200002d8
	...

0800c7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7b0:	f3ef 8009 	mrs	r0, PSP
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	4b15      	ldr	r3, [pc, #84]	; (800c810 <pxCurrentTCBConst>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	f01e 0f10 	tst.w	lr, #16
 800c7c0:	bf08      	it	eq
 800c7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	6010      	str	r0, [r2, #0]
 800c7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7d4:	f380 8811 	msr	BASEPRI, r0
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f7ff fb92 	bl	800bf08 <vTaskSwitchContext>
 800c7e4:	f04f 0000 	mov.w	r0, #0
 800c7e8:	f380 8811 	msr	BASEPRI, r0
 800c7ec:	bc09      	pop	{r0, r3}
 800c7ee:	6819      	ldr	r1, [r3, #0]
 800c7f0:	6808      	ldr	r0, [r1, #0]
 800c7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f6:	f01e 0f10 	tst.w	lr, #16
 800c7fa:	bf08      	it	eq
 800c7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c800:	f380 8809 	msr	PSP, r0
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w

0800c810 <pxCurrentTCBConst>:
 800c810:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop

0800c818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	607b      	str	r3, [r7, #4]
}
 800c830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c832:	f7ff fab1 	bl	800bd98 <xTaskIncrementTick>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c83c:	4b06      	ldr	r3, [pc, #24]	; (800c858 <SysTick_Handler+0x40>)
 800c83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	2300      	movs	r3, #0
 800c846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	f383 8811 	msr	BASEPRI, r3
}
 800c84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c850:	bf00      	nop
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	e000ed04 	.word	0xe000ed04

0800c85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c860:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <vPortSetupTimerInterrupt+0x34>)
 800c862:	2200      	movs	r2, #0
 800c864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c866:	4b0b      	ldr	r3, [pc, #44]	; (800c894 <vPortSetupTimerInterrupt+0x38>)
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c86c:	4b0a      	ldr	r3, [pc, #40]	; (800c898 <vPortSetupTimerInterrupt+0x3c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a0a      	ldr	r2, [pc, #40]	; (800c89c <vPortSetupTimerInterrupt+0x40>)
 800c872:	fba2 2303 	umull	r2, r3, r2, r3
 800c876:	099b      	lsrs	r3, r3, #6
 800c878:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <vPortSetupTimerInterrupt+0x44>)
 800c87a:	3b01      	subs	r3, #1
 800c87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c87e:	4b04      	ldr	r3, [pc, #16]	; (800c890 <vPortSetupTimerInterrupt+0x34>)
 800c880:	2207      	movs	r2, #7
 800c882:	601a      	str	r2, [r3, #0]
}
 800c884:	bf00      	nop
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	e000e010 	.word	0xe000e010
 800c894:	e000e018 	.word	0xe000e018
 800c898:	20000010 	.word	0x20000010
 800c89c:	10624dd3 	.word	0x10624dd3
 800c8a0:	e000e014 	.word	0xe000e014

0800c8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8b4 <vPortEnableVFP+0x10>
 800c8a8:	6801      	ldr	r1, [r0, #0]
 800c8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8ae:	6001      	str	r1, [r0, #0]
 800c8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8b2:	bf00      	nop
 800c8b4:	e000ed88 	.word	0xe000ed88

0800c8b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08a      	sub	sp, #40	; 0x28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8c4:	f7ff f9be 	bl	800bc44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8c8:	4b5b      	ldr	r3, [pc, #364]	; (800ca38 <pvPortMalloc+0x180>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8d0:	f000 f920 	bl	800cb14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8d4:	4b59      	ldr	r3, [pc, #356]	; (800ca3c <pvPortMalloc+0x184>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4013      	ands	r3, r2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 8093 	bne.w	800ca08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d01d      	beq.n	800c924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c8e8:	2208      	movs	r2, #8
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d014      	beq.n	800c924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f023 0307 	bic.w	r3, r3, #7
 800c900:	3308      	adds	r3, #8
 800c902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <pvPortMalloc+0x6c>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	617b      	str	r3, [r7, #20]
}
 800c920:	bf00      	nop
 800c922:	e7fe      	b.n	800c922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d06e      	beq.n	800ca08 <pvPortMalloc+0x150>
 800c92a:	4b45      	ldr	r3, [pc, #276]	; (800ca40 <pvPortMalloc+0x188>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	429a      	cmp	r2, r3
 800c932:	d869      	bhi.n	800ca08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c934:	4b43      	ldr	r3, [pc, #268]	; (800ca44 <pvPortMalloc+0x18c>)
 800c936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c938:	4b42      	ldr	r3, [pc, #264]	; (800ca44 <pvPortMalloc+0x18c>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c93e:	e004      	b.n	800c94a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d903      	bls.n	800c95c <pvPortMalloc+0xa4>
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1f1      	bne.n	800c940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c95c:	4b36      	ldr	r3, [pc, #216]	; (800ca38 <pvPortMalloc+0x180>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c962:	429a      	cmp	r2, r3
 800c964:	d050      	beq.n	800ca08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2208      	movs	r2, #8
 800c96c:	4413      	add	r3, r2
 800c96e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	1ad2      	subs	r2, r2, r3
 800c980:	2308      	movs	r3, #8
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	429a      	cmp	r2, r3
 800c986:	d91f      	bls.n	800c9c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4413      	add	r3, r2
 800c98e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	613b      	str	r3, [r7, #16]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	1ad2      	subs	r2, r2, r3
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9c2:	69b8      	ldr	r0, [r7, #24]
 800c9c4:	f000 f908 	bl	800cbd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9c8:	4b1d      	ldr	r3, [pc, #116]	; (800ca40 <pvPortMalloc+0x188>)
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	4a1b      	ldr	r2, [pc, #108]	; (800ca40 <pvPortMalloc+0x188>)
 800c9d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ca40 <pvPortMalloc+0x188>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <pvPortMalloc+0x190>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d203      	bcs.n	800c9ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9e2:	4b17      	ldr	r3, [pc, #92]	; (800ca40 <pvPortMalloc+0x188>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a18      	ldr	r2, [pc, #96]	; (800ca48 <pvPortMalloc+0x190>)
 800c9e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	4b13      	ldr	r3, [pc, #76]	; (800ca3c <pvPortMalloc+0x184>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <pvPortMalloc+0x194>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	4a11      	ldr	r2, [pc, #68]	; (800ca4c <pvPortMalloc+0x194>)
 800ca06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca08:	f7ff f92a 	bl	800bc60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	f003 0307 	and.w	r3, r3, #7
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <pvPortMalloc+0x174>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	60fb      	str	r3, [r7, #12]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <pvPortMalloc+0x172>
	return pvReturn;
 800ca2c:	69fb      	ldr	r3, [r7, #28]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3728      	adds	r7, #40	; 0x28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20004690 	.word	0x20004690
 800ca3c:	200046a4 	.word	0x200046a4
 800ca40:	20004694 	.word	0x20004694
 800ca44:	20004688 	.word	0x20004688
 800ca48:	20004698 	.word	0x20004698
 800ca4c:	2000469c 	.word	0x2000469c

0800ca50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d04d      	beq.n	800cafe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca62:	2308      	movs	r3, #8
 800ca64:	425b      	negs	r3, r3
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	4413      	add	r3, r2
 800ca6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	4b24      	ldr	r3, [pc, #144]	; (800cb08 <vPortFree+0xb8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4013      	ands	r3, r2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <vPortFree+0x44>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	60fb      	str	r3, [r7, #12]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <vPortFree+0x62>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	60bb      	str	r3, [r7, #8]
}
 800caae:	bf00      	nop
 800cab0:	e7fe      	b.n	800cab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <vPortFree+0xb8>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4013      	ands	r3, r2
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01e      	beq.n	800cafe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d11a      	bne.n	800cafe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	4b0e      	ldr	r3, [pc, #56]	; (800cb08 <vPortFree+0xb8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	43db      	mvns	r3, r3
 800cad2:	401a      	ands	r2, r3
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cad8:	f7ff f8b4 	bl	800bc44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <vPortFree+0xbc>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4413      	add	r3, r2
 800cae6:	4a09      	ldr	r2, [pc, #36]	; (800cb0c <vPortFree+0xbc>)
 800cae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caea:	6938      	ldr	r0, [r7, #16]
 800caec:	f000 f874 	bl	800cbd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <vPortFree+0xc0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3301      	adds	r3, #1
 800caf6:	4a06      	ldr	r2, [pc, #24]	; (800cb10 <vPortFree+0xc0>)
 800caf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cafa:	f7ff f8b1 	bl	800bc60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cafe:	bf00      	nop
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	200046a4 	.word	0x200046a4
 800cb0c:	20004694 	.word	0x20004694
 800cb10:	200046a0 	.word	0x200046a0

0800cb14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cb1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb20:	4b27      	ldr	r3, [pc, #156]	; (800cbc0 <prvHeapInit+0xac>)
 800cb22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00c      	beq.n	800cb48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3307      	adds	r3, #7
 800cb32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f023 0307 	bic.w	r3, r3, #7
 800cb3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	4a1f      	ldr	r2, [pc, #124]	; (800cbc0 <prvHeapInit+0xac>)
 800cb44:	4413      	add	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb4c:	4a1d      	ldr	r2, [pc, #116]	; (800cbc4 <prvHeapInit+0xb0>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb52:	4b1c      	ldr	r3, [pc, #112]	; (800cbc4 <prvHeapInit+0xb0>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb60:	2208      	movs	r2, #8
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	1a9b      	subs	r3, r3, r2
 800cb66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb76:	4b14      	ldr	r3, [pc, #80]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb7e:	4b12      	ldr	r3, [pc, #72]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2200      	movs	r2, #0
 800cb84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb94:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <prvHeapInit+0xb4>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	4a0a      	ldr	r2, [pc, #40]	; (800cbcc <prvHeapInit+0xb8>)
 800cba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	4a09      	ldr	r2, [pc, #36]	; (800cbd0 <prvHeapInit+0xbc>)
 800cbaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbac:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <prvHeapInit+0xc0>)
 800cbae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbb2:	601a      	str	r2, [r3, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	20000a88 	.word	0x20000a88
 800cbc4:	20004688 	.word	0x20004688
 800cbc8:	20004690 	.word	0x20004690
 800cbcc:	20004698 	.word	0x20004698
 800cbd0:	20004694 	.word	0x20004694
 800cbd4:	200046a4 	.word	0x200046a4

0800cbd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbe0:	4b28      	ldr	r3, [pc, #160]	; (800cc84 <prvInsertBlockIntoFreeList+0xac>)
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e002      	b.n	800cbec <prvInsertBlockIntoFreeList+0x14>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d8f7      	bhi.n	800cbe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	4413      	add	r3, r2
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d108      	bne.n	800cc1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	441a      	add	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	441a      	add	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d118      	bne.n	800cc60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <prvInsertBlockIntoFreeList+0xb0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d00d      	beq.n	800cc56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	441a      	add	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	e008      	b.n	800cc68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc56:	4b0c      	ldr	r3, [pc, #48]	; (800cc88 <prvInsertBlockIntoFreeList+0xb0>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	e003      	b.n	800cc68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d002      	beq.n	800cc76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc76:	bf00      	nop
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	20004688 	.word	0x20004688
 800cc88:	20004690 	.word	0x20004690

0800cc8c <__errno>:
 800cc8c:	4b01      	ldr	r3, [pc, #4]	; (800cc94 <__errno+0x8>)
 800cc8e:	6818      	ldr	r0, [r3, #0]
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	200002dc 	.word	0x200002dc

0800cc98 <std>:
 800cc98:	2300      	movs	r3, #0
 800cc9a:	b510      	push	{r4, lr}
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	e9c0 3300 	strd	r3, r3, [r0]
 800cca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cca6:	6083      	str	r3, [r0, #8]
 800cca8:	8181      	strh	r1, [r0, #12]
 800ccaa:	6643      	str	r3, [r0, #100]	; 0x64
 800ccac:	81c2      	strh	r2, [r0, #14]
 800ccae:	6183      	str	r3, [r0, #24]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	2208      	movs	r2, #8
 800ccb4:	305c      	adds	r0, #92	; 0x5c
 800ccb6:	f000 f91a 	bl	800ceee <memset>
 800ccba:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <std+0x38>)
 800ccbc:	6263      	str	r3, [r4, #36]	; 0x24
 800ccbe:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <std+0x3c>)
 800ccc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccc2:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <std+0x40>)
 800ccc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccc6:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <std+0x44>)
 800ccc8:	6224      	str	r4, [r4, #32]
 800ccca:	6323      	str	r3, [r4, #48]	; 0x30
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	bf00      	nop
 800ccd0:	0800d1c5 	.word	0x0800d1c5
 800ccd4:	0800d1e7 	.word	0x0800d1e7
 800ccd8:	0800d21f 	.word	0x0800d21f
 800ccdc:	0800d243 	.word	0x0800d243

0800cce0 <_cleanup_r>:
 800cce0:	4901      	ldr	r1, [pc, #4]	; (800cce8 <_cleanup_r+0x8>)
 800cce2:	f000 b8af 	b.w	800ce44 <_fwalk_reent>
 800cce6:	bf00      	nop
 800cce8:	0800d52d 	.word	0x0800d52d

0800ccec <__sfmoreglue>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	1e4a      	subs	r2, r1, #1
 800ccf0:	2568      	movs	r5, #104	; 0x68
 800ccf2:	4355      	muls	r5, r2
 800ccf4:	460e      	mov	r6, r1
 800ccf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccfa:	f000 f901 	bl	800cf00 <_malloc_r>
 800ccfe:	4604      	mov	r4, r0
 800cd00:	b140      	cbz	r0, 800cd14 <__sfmoreglue+0x28>
 800cd02:	2100      	movs	r1, #0
 800cd04:	e9c0 1600 	strd	r1, r6, [r0]
 800cd08:	300c      	adds	r0, #12
 800cd0a:	60a0      	str	r0, [r4, #8]
 800cd0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd10:	f000 f8ed 	bl	800ceee <memset>
 800cd14:	4620      	mov	r0, r4
 800cd16:	bd70      	pop	{r4, r5, r6, pc}

0800cd18 <__sfp_lock_acquire>:
 800cd18:	4801      	ldr	r0, [pc, #4]	; (800cd20 <__sfp_lock_acquire+0x8>)
 800cd1a:	f000 b8d8 	b.w	800cece <__retarget_lock_acquire_recursive>
 800cd1e:	bf00      	nop
 800cd20:	20004da8 	.word	0x20004da8

0800cd24 <__sfp_lock_release>:
 800cd24:	4801      	ldr	r0, [pc, #4]	; (800cd2c <__sfp_lock_release+0x8>)
 800cd26:	f000 b8d3 	b.w	800ced0 <__retarget_lock_release_recursive>
 800cd2a:	bf00      	nop
 800cd2c:	20004da8 	.word	0x20004da8

0800cd30 <__sinit_lock_acquire>:
 800cd30:	4801      	ldr	r0, [pc, #4]	; (800cd38 <__sinit_lock_acquire+0x8>)
 800cd32:	f000 b8cc 	b.w	800cece <__retarget_lock_acquire_recursive>
 800cd36:	bf00      	nop
 800cd38:	20004da3 	.word	0x20004da3

0800cd3c <__sinit_lock_release>:
 800cd3c:	4801      	ldr	r0, [pc, #4]	; (800cd44 <__sinit_lock_release+0x8>)
 800cd3e:	f000 b8c7 	b.w	800ced0 <__retarget_lock_release_recursive>
 800cd42:	bf00      	nop
 800cd44:	20004da3 	.word	0x20004da3

0800cd48 <__sinit>:
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	f7ff fff0 	bl	800cd30 <__sinit_lock_acquire>
 800cd50:	69a3      	ldr	r3, [r4, #24]
 800cd52:	b11b      	cbz	r3, 800cd5c <__sinit+0x14>
 800cd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd58:	f7ff bff0 	b.w	800cd3c <__sinit_lock_release>
 800cd5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd60:	6523      	str	r3, [r4, #80]	; 0x50
 800cd62:	4b13      	ldr	r3, [pc, #76]	; (800cdb0 <__sinit+0x68>)
 800cd64:	4a13      	ldr	r2, [pc, #76]	; (800cdb4 <__sinit+0x6c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd6a:	42a3      	cmp	r3, r4
 800cd6c:	bf04      	itt	eq
 800cd6e:	2301      	moveq	r3, #1
 800cd70:	61a3      	streq	r3, [r4, #24]
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 f820 	bl	800cdb8 <__sfp>
 800cd78:	6060      	str	r0, [r4, #4]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 f81c 	bl	800cdb8 <__sfp>
 800cd80:	60a0      	str	r0, [r4, #8]
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f818 	bl	800cdb8 <__sfp>
 800cd88:	2200      	movs	r2, #0
 800cd8a:	60e0      	str	r0, [r4, #12]
 800cd8c:	2104      	movs	r1, #4
 800cd8e:	6860      	ldr	r0, [r4, #4]
 800cd90:	f7ff ff82 	bl	800cc98 <std>
 800cd94:	68a0      	ldr	r0, [r4, #8]
 800cd96:	2201      	movs	r2, #1
 800cd98:	2109      	movs	r1, #9
 800cd9a:	f7ff ff7d 	bl	800cc98 <std>
 800cd9e:	68e0      	ldr	r0, [r4, #12]
 800cda0:	2202      	movs	r2, #2
 800cda2:	2112      	movs	r1, #18
 800cda4:	f7ff ff78 	bl	800cc98 <std>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	61a3      	str	r3, [r4, #24]
 800cdac:	e7d2      	b.n	800cd54 <__sinit+0xc>
 800cdae:	bf00      	nop
 800cdb0:	0800e330 	.word	0x0800e330
 800cdb4:	0800cce1 	.word	0x0800cce1

0800cdb8 <__sfp>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	4607      	mov	r7, r0
 800cdbc:	f7ff ffac 	bl	800cd18 <__sfp_lock_acquire>
 800cdc0:	4b1e      	ldr	r3, [pc, #120]	; (800ce3c <__sfp+0x84>)
 800cdc2:	681e      	ldr	r6, [r3, #0]
 800cdc4:	69b3      	ldr	r3, [r6, #24]
 800cdc6:	b913      	cbnz	r3, 800cdce <__sfp+0x16>
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7ff ffbd 	bl	800cd48 <__sinit>
 800cdce:	3648      	adds	r6, #72	; 0x48
 800cdd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	d503      	bpl.n	800cde0 <__sfp+0x28>
 800cdd8:	6833      	ldr	r3, [r6, #0]
 800cdda:	b30b      	cbz	r3, 800ce20 <__sfp+0x68>
 800cddc:	6836      	ldr	r6, [r6, #0]
 800cdde:	e7f7      	b.n	800cdd0 <__sfp+0x18>
 800cde0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cde4:	b9d5      	cbnz	r5, 800ce1c <__sfp+0x64>
 800cde6:	4b16      	ldr	r3, [pc, #88]	; (800ce40 <__sfp+0x88>)
 800cde8:	60e3      	str	r3, [r4, #12]
 800cdea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdee:	6665      	str	r5, [r4, #100]	; 0x64
 800cdf0:	f000 f86c 	bl	800cecc <__retarget_lock_init_recursive>
 800cdf4:	f7ff ff96 	bl	800cd24 <__sfp_lock_release>
 800cdf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce00:	6025      	str	r5, [r4, #0]
 800ce02:	61a5      	str	r5, [r4, #24]
 800ce04:	2208      	movs	r2, #8
 800ce06:	4629      	mov	r1, r5
 800ce08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce0c:	f000 f86f 	bl	800ceee <memset>
 800ce10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce18:	4620      	mov	r0, r4
 800ce1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce1c:	3468      	adds	r4, #104	; 0x68
 800ce1e:	e7d9      	b.n	800cdd4 <__sfp+0x1c>
 800ce20:	2104      	movs	r1, #4
 800ce22:	4638      	mov	r0, r7
 800ce24:	f7ff ff62 	bl	800ccec <__sfmoreglue>
 800ce28:	4604      	mov	r4, r0
 800ce2a:	6030      	str	r0, [r6, #0]
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d1d5      	bne.n	800cddc <__sfp+0x24>
 800ce30:	f7ff ff78 	bl	800cd24 <__sfp_lock_release>
 800ce34:	230c      	movs	r3, #12
 800ce36:	603b      	str	r3, [r7, #0]
 800ce38:	e7ee      	b.n	800ce18 <__sfp+0x60>
 800ce3a:	bf00      	nop
 800ce3c:	0800e330 	.word	0x0800e330
 800ce40:	ffff0001 	.word	0xffff0001

0800ce44 <_fwalk_reent>:
 800ce44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce48:	4606      	mov	r6, r0
 800ce4a:	4688      	mov	r8, r1
 800ce4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce50:	2700      	movs	r7, #0
 800ce52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce56:	f1b9 0901 	subs.w	r9, r9, #1
 800ce5a:	d505      	bpl.n	800ce68 <_fwalk_reent+0x24>
 800ce5c:	6824      	ldr	r4, [r4, #0]
 800ce5e:	2c00      	cmp	r4, #0
 800ce60:	d1f7      	bne.n	800ce52 <_fwalk_reent+0xe>
 800ce62:	4638      	mov	r0, r7
 800ce64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce68:	89ab      	ldrh	r3, [r5, #12]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d907      	bls.n	800ce7e <_fwalk_reent+0x3a>
 800ce6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce72:	3301      	adds	r3, #1
 800ce74:	d003      	beq.n	800ce7e <_fwalk_reent+0x3a>
 800ce76:	4629      	mov	r1, r5
 800ce78:	4630      	mov	r0, r6
 800ce7a:	47c0      	blx	r8
 800ce7c:	4307      	orrs	r7, r0
 800ce7e:	3568      	adds	r5, #104	; 0x68
 800ce80:	e7e9      	b.n	800ce56 <_fwalk_reent+0x12>
	...

0800ce84 <__libc_init_array>:
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	4d0d      	ldr	r5, [pc, #52]	; (800cebc <__libc_init_array+0x38>)
 800ce88:	4c0d      	ldr	r4, [pc, #52]	; (800cec0 <__libc_init_array+0x3c>)
 800ce8a:	1b64      	subs	r4, r4, r5
 800ce8c:	10a4      	asrs	r4, r4, #2
 800ce8e:	2600      	movs	r6, #0
 800ce90:	42a6      	cmp	r6, r4
 800ce92:	d109      	bne.n	800cea8 <__libc_init_array+0x24>
 800ce94:	4d0b      	ldr	r5, [pc, #44]	; (800cec4 <__libc_init_array+0x40>)
 800ce96:	4c0c      	ldr	r4, [pc, #48]	; (800cec8 <__libc_init_array+0x44>)
 800ce98:	f000 ff78 	bl	800dd8c <_init>
 800ce9c:	1b64      	subs	r4, r4, r5
 800ce9e:	10a4      	asrs	r4, r4, #2
 800cea0:	2600      	movs	r6, #0
 800cea2:	42a6      	cmp	r6, r4
 800cea4:	d105      	bne.n	800ceb2 <__libc_init_array+0x2e>
 800cea6:	bd70      	pop	{r4, r5, r6, pc}
 800cea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceac:	4798      	blx	r3
 800ceae:	3601      	adds	r6, #1
 800ceb0:	e7ee      	b.n	800ce90 <__libc_init_array+0xc>
 800ceb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceb6:	4798      	blx	r3
 800ceb8:	3601      	adds	r6, #1
 800ceba:	e7f2      	b.n	800cea2 <__libc_init_array+0x1e>
 800cebc:	0800e370 	.word	0x0800e370
 800cec0:	0800e370 	.word	0x0800e370
 800cec4:	0800e370 	.word	0x0800e370
 800cec8:	0800e374 	.word	0x0800e374

0800cecc <__retarget_lock_init_recursive>:
 800cecc:	4770      	bx	lr

0800cece <__retarget_lock_acquire_recursive>:
 800cece:	4770      	bx	lr

0800ced0 <__retarget_lock_release_recursive>:
 800ced0:	4770      	bx	lr

0800ced2 <memcpy>:
 800ced2:	440a      	add	r2, r1
 800ced4:	4291      	cmp	r1, r2
 800ced6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ceda:	d100      	bne.n	800cede <memcpy+0xc>
 800cedc:	4770      	bx	lr
 800cede:	b510      	push	{r4, lr}
 800cee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cee8:	4291      	cmp	r1, r2
 800ceea:	d1f9      	bne.n	800cee0 <memcpy+0xe>
 800ceec:	bd10      	pop	{r4, pc}

0800ceee <memset>:
 800ceee:	4402      	add	r2, r0
 800cef0:	4603      	mov	r3, r0
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d100      	bne.n	800cef8 <memset+0xa>
 800cef6:	4770      	bx	lr
 800cef8:	f803 1b01 	strb.w	r1, [r3], #1
 800cefc:	e7f9      	b.n	800cef2 <memset+0x4>
	...

0800cf00 <_malloc_r>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	1ccd      	adds	r5, r1, #3
 800cf04:	f025 0503 	bic.w	r5, r5, #3
 800cf08:	3508      	adds	r5, #8
 800cf0a:	2d0c      	cmp	r5, #12
 800cf0c:	bf38      	it	cc
 800cf0e:	250c      	movcc	r5, #12
 800cf10:	2d00      	cmp	r5, #0
 800cf12:	4606      	mov	r6, r0
 800cf14:	db01      	blt.n	800cf1a <_malloc_r+0x1a>
 800cf16:	42a9      	cmp	r1, r5
 800cf18:	d903      	bls.n	800cf22 <_malloc_r+0x22>
 800cf1a:	230c      	movs	r3, #12
 800cf1c:	6033      	str	r3, [r6, #0]
 800cf1e:	2000      	movs	r0, #0
 800cf20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf22:	f000 fbb5 	bl	800d690 <__malloc_lock>
 800cf26:	4921      	ldr	r1, [pc, #132]	; (800cfac <_malloc_r+0xac>)
 800cf28:	680a      	ldr	r2, [r1, #0]
 800cf2a:	4614      	mov	r4, r2
 800cf2c:	b99c      	cbnz	r4, 800cf56 <_malloc_r+0x56>
 800cf2e:	4f20      	ldr	r7, [pc, #128]	; (800cfb0 <_malloc_r+0xb0>)
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	b923      	cbnz	r3, 800cf3e <_malloc_r+0x3e>
 800cf34:	4621      	mov	r1, r4
 800cf36:	4630      	mov	r0, r6
 800cf38:	f000 f934 	bl	800d1a4 <_sbrk_r>
 800cf3c:	6038      	str	r0, [r7, #0]
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 f92f 	bl	800d1a4 <_sbrk_r>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d123      	bne.n	800cf92 <_malloc_r+0x92>
 800cf4a:	230c      	movs	r3, #12
 800cf4c:	6033      	str	r3, [r6, #0]
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f000 fba4 	bl	800d69c <__malloc_unlock>
 800cf54:	e7e3      	b.n	800cf1e <_malloc_r+0x1e>
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	1b5b      	subs	r3, r3, r5
 800cf5a:	d417      	bmi.n	800cf8c <_malloc_r+0x8c>
 800cf5c:	2b0b      	cmp	r3, #11
 800cf5e:	d903      	bls.n	800cf68 <_malloc_r+0x68>
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	441c      	add	r4, r3
 800cf64:	6025      	str	r5, [r4, #0]
 800cf66:	e004      	b.n	800cf72 <_malloc_r+0x72>
 800cf68:	6863      	ldr	r3, [r4, #4]
 800cf6a:	42a2      	cmp	r2, r4
 800cf6c:	bf0c      	ite	eq
 800cf6e:	600b      	streq	r3, [r1, #0]
 800cf70:	6053      	strne	r3, [r2, #4]
 800cf72:	4630      	mov	r0, r6
 800cf74:	f000 fb92 	bl	800d69c <__malloc_unlock>
 800cf78:	f104 000b 	add.w	r0, r4, #11
 800cf7c:	1d23      	adds	r3, r4, #4
 800cf7e:	f020 0007 	bic.w	r0, r0, #7
 800cf82:	1ac2      	subs	r2, r0, r3
 800cf84:	d0cc      	beq.n	800cf20 <_malloc_r+0x20>
 800cf86:	1a1b      	subs	r3, r3, r0
 800cf88:	50a3      	str	r3, [r4, r2]
 800cf8a:	e7c9      	b.n	800cf20 <_malloc_r+0x20>
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	6864      	ldr	r4, [r4, #4]
 800cf90:	e7cc      	b.n	800cf2c <_malloc_r+0x2c>
 800cf92:	1cc4      	adds	r4, r0, #3
 800cf94:	f024 0403 	bic.w	r4, r4, #3
 800cf98:	42a0      	cmp	r0, r4
 800cf9a:	d0e3      	beq.n	800cf64 <_malloc_r+0x64>
 800cf9c:	1a21      	subs	r1, r4, r0
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f000 f900 	bl	800d1a4 <_sbrk_r>
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d1dd      	bne.n	800cf64 <_malloc_r+0x64>
 800cfa8:	e7cf      	b.n	800cf4a <_malloc_r+0x4a>
 800cfaa:	bf00      	nop
 800cfac:	200046a8 	.word	0x200046a8
 800cfb0:	200046ac 	.word	0x200046ac

0800cfb4 <iprintf>:
 800cfb4:	b40f      	push	{r0, r1, r2, r3}
 800cfb6:	4b0a      	ldr	r3, [pc, #40]	; (800cfe0 <iprintf+0x2c>)
 800cfb8:	b513      	push	{r0, r1, r4, lr}
 800cfba:	681c      	ldr	r4, [r3, #0]
 800cfbc:	b124      	cbz	r4, 800cfc8 <iprintf+0x14>
 800cfbe:	69a3      	ldr	r3, [r4, #24]
 800cfc0:	b913      	cbnz	r3, 800cfc8 <iprintf+0x14>
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f7ff fec0 	bl	800cd48 <__sinit>
 800cfc8:	ab05      	add	r3, sp, #20
 800cfca:	9a04      	ldr	r2, [sp, #16]
 800cfcc:	68a1      	ldr	r1, [r4, #8]
 800cfce:	9301      	str	r3, [sp, #4]
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 fbe3 	bl	800d79c <_vfiprintf_r>
 800cfd6:	b002      	add	sp, #8
 800cfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfdc:	b004      	add	sp, #16
 800cfde:	4770      	bx	lr
 800cfe0:	200002dc 	.word	0x200002dc

0800cfe4 <_puts_r>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	4605      	mov	r5, r0
 800cfea:	b118      	cbz	r0, 800cff4 <_puts_r+0x10>
 800cfec:	6983      	ldr	r3, [r0, #24]
 800cfee:	b90b      	cbnz	r3, 800cff4 <_puts_r+0x10>
 800cff0:	f7ff feaa 	bl	800cd48 <__sinit>
 800cff4:	69ab      	ldr	r3, [r5, #24]
 800cff6:	68ac      	ldr	r4, [r5, #8]
 800cff8:	b913      	cbnz	r3, 800d000 <_puts_r+0x1c>
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7ff fea4 	bl	800cd48 <__sinit>
 800d000:	4b2c      	ldr	r3, [pc, #176]	; (800d0b4 <_puts_r+0xd0>)
 800d002:	429c      	cmp	r4, r3
 800d004:	d120      	bne.n	800d048 <_puts_r+0x64>
 800d006:	686c      	ldr	r4, [r5, #4]
 800d008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d00a:	07db      	lsls	r3, r3, #31
 800d00c:	d405      	bmi.n	800d01a <_puts_r+0x36>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	0598      	lsls	r0, r3, #22
 800d012:	d402      	bmi.n	800d01a <_puts_r+0x36>
 800d014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d016:	f7ff ff5a 	bl	800cece <__retarget_lock_acquire_recursive>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	0719      	lsls	r1, r3, #28
 800d01e:	d51d      	bpl.n	800d05c <_puts_r+0x78>
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	b1db      	cbz	r3, 800d05c <_puts_r+0x78>
 800d024:	3e01      	subs	r6, #1
 800d026:	68a3      	ldr	r3, [r4, #8]
 800d028:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d02c:	3b01      	subs	r3, #1
 800d02e:	60a3      	str	r3, [r4, #8]
 800d030:	bb39      	cbnz	r1, 800d082 <_puts_r+0x9e>
 800d032:	2b00      	cmp	r3, #0
 800d034:	da38      	bge.n	800d0a8 <_puts_r+0xc4>
 800d036:	4622      	mov	r2, r4
 800d038:	210a      	movs	r1, #10
 800d03a:	4628      	mov	r0, r5
 800d03c:	f000 f90e 	bl	800d25c <__swbuf_r>
 800d040:	3001      	adds	r0, #1
 800d042:	d011      	beq.n	800d068 <_puts_r+0x84>
 800d044:	250a      	movs	r5, #10
 800d046:	e011      	b.n	800d06c <_puts_r+0x88>
 800d048:	4b1b      	ldr	r3, [pc, #108]	; (800d0b8 <_puts_r+0xd4>)
 800d04a:	429c      	cmp	r4, r3
 800d04c:	d101      	bne.n	800d052 <_puts_r+0x6e>
 800d04e:	68ac      	ldr	r4, [r5, #8]
 800d050:	e7da      	b.n	800d008 <_puts_r+0x24>
 800d052:	4b1a      	ldr	r3, [pc, #104]	; (800d0bc <_puts_r+0xd8>)
 800d054:	429c      	cmp	r4, r3
 800d056:	bf08      	it	eq
 800d058:	68ec      	ldreq	r4, [r5, #12]
 800d05a:	e7d5      	b.n	800d008 <_puts_r+0x24>
 800d05c:	4621      	mov	r1, r4
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 f960 	bl	800d324 <__swsetup_r>
 800d064:	2800      	cmp	r0, #0
 800d066:	d0dd      	beq.n	800d024 <_puts_r+0x40>
 800d068:	f04f 35ff 	mov.w	r5, #4294967295
 800d06c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d06e:	07da      	lsls	r2, r3, #31
 800d070:	d405      	bmi.n	800d07e <_puts_r+0x9a>
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	059b      	lsls	r3, r3, #22
 800d076:	d402      	bmi.n	800d07e <_puts_r+0x9a>
 800d078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d07a:	f7ff ff29 	bl	800ced0 <__retarget_lock_release_recursive>
 800d07e:	4628      	mov	r0, r5
 800d080:	bd70      	pop	{r4, r5, r6, pc}
 800d082:	2b00      	cmp	r3, #0
 800d084:	da04      	bge.n	800d090 <_puts_r+0xac>
 800d086:	69a2      	ldr	r2, [r4, #24]
 800d088:	429a      	cmp	r2, r3
 800d08a:	dc06      	bgt.n	800d09a <_puts_r+0xb6>
 800d08c:	290a      	cmp	r1, #10
 800d08e:	d004      	beq.n	800d09a <_puts_r+0xb6>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	6022      	str	r2, [r4, #0]
 800d096:	7019      	strb	r1, [r3, #0]
 800d098:	e7c5      	b.n	800d026 <_puts_r+0x42>
 800d09a:	4622      	mov	r2, r4
 800d09c:	4628      	mov	r0, r5
 800d09e:	f000 f8dd 	bl	800d25c <__swbuf_r>
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	d1bf      	bne.n	800d026 <_puts_r+0x42>
 800d0a6:	e7df      	b.n	800d068 <_puts_r+0x84>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	250a      	movs	r5, #10
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	6022      	str	r2, [r4, #0]
 800d0b0:	701d      	strb	r5, [r3, #0]
 800d0b2:	e7db      	b.n	800d06c <_puts_r+0x88>
 800d0b4:	0800e2f0 	.word	0x0800e2f0
 800d0b8:	0800e310 	.word	0x0800e310
 800d0bc:	0800e2d0 	.word	0x0800e2d0

0800d0c0 <puts>:
 800d0c0:	4b02      	ldr	r3, [pc, #8]	; (800d0cc <puts+0xc>)
 800d0c2:	4601      	mov	r1, r0
 800d0c4:	6818      	ldr	r0, [r3, #0]
 800d0c6:	f7ff bf8d 	b.w	800cfe4 <_puts_r>
 800d0ca:	bf00      	nop
 800d0cc:	200002dc 	.word	0x200002dc

0800d0d0 <cleanup_glue>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	6809      	ldr	r1, [r1, #0]
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	b109      	cbz	r1, 800d0de <cleanup_glue+0xe>
 800d0da:	f7ff fff9 	bl	800d0d0 <cleanup_glue>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0e6:	f000 badf 	b.w	800d6a8 <_free_r>
	...

0800d0ec <_reclaim_reent>:
 800d0ec:	4b2c      	ldr	r3, [pc, #176]	; (800d1a0 <_reclaim_reent+0xb4>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4283      	cmp	r3, r0
 800d0f2:	b570      	push	{r4, r5, r6, lr}
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	d051      	beq.n	800d19c <_reclaim_reent+0xb0>
 800d0f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d0fa:	b143      	cbz	r3, 800d10e <_reclaim_reent+0x22>
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d14a      	bne.n	800d198 <_reclaim_reent+0xac>
 800d102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d104:	6819      	ldr	r1, [r3, #0]
 800d106:	b111      	cbz	r1, 800d10e <_reclaim_reent+0x22>
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 facd 	bl	800d6a8 <_free_r>
 800d10e:	6961      	ldr	r1, [r4, #20]
 800d110:	b111      	cbz	r1, 800d118 <_reclaim_reent+0x2c>
 800d112:	4620      	mov	r0, r4
 800d114:	f000 fac8 	bl	800d6a8 <_free_r>
 800d118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d11a:	b111      	cbz	r1, 800d122 <_reclaim_reent+0x36>
 800d11c:	4620      	mov	r0, r4
 800d11e:	f000 fac3 	bl	800d6a8 <_free_r>
 800d122:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d124:	b111      	cbz	r1, 800d12c <_reclaim_reent+0x40>
 800d126:	4620      	mov	r0, r4
 800d128:	f000 fabe 	bl	800d6a8 <_free_r>
 800d12c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d12e:	b111      	cbz	r1, 800d136 <_reclaim_reent+0x4a>
 800d130:	4620      	mov	r0, r4
 800d132:	f000 fab9 	bl	800d6a8 <_free_r>
 800d136:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d138:	b111      	cbz	r1, 800d140 <_reclaim_reent+0x54>
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fab4 	bl	800d6a8 <_free_r>
 800d140:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d142:	b111      	cbz	r1, 800d14a <_reclaim_reent+0x5e>
 800d144:	4620      	mov	r0, r4
 800d146:	f000 faaf 	bl	800d6a8 <_free_r>
 800d14a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d14c:	b111      	cbz	r1, 800d154 <_reclaim_reent+0x68>
 800d14e:	4620      	mov	r0, r4
 800d150:	f000 faaa 	bl	800d6a8 <_free_r>
 800d154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d156:	b111      	cbz	r1, 800d15e <_reclaim_reent+0x72>
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 faa5 	bl	800d6a8 <_free_r>
 800d15e:	69a3      	ldr	r3, [r4, #24]
 800d160:	b1e3      	cbz	r3, 800d19c <_reclaim_reent+0xb0>
 800d162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d164:	4620      	mov	r0, r4
 800d166:	4798      	blx	r3
 800d168:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d16a:	b1b9      	cbz	r1, 800d19c <_reclaim_reent+0xb0>
 800d16c:	4620      	mov	r0, r4
 800d16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d172:	f7ff bfad 	b.w	800d0d0 <cleanup_glue>
 800d176:	5949      	ldr	r1, [r1, r5]
 800d178:	b941      	cbnz	r1, 800d18c <_reclaim_reent+0xa0>
 800d17a:	3504      	adds	r5, #4
 800d17c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d17e:	2d80      	cmp	r5, #128	; 0x80
 800d180:	68d9      	ldr	r1, [r3, #12]
 800d182:	d1f8      	bne.n	800d176 <_reclaim_reent+0x8a>
 800d184:	4620      	mov	r0, r4
 800d186:	f000 fa8f 	bl	800d6a8 <_free_r>
 800d18a:	e7ba      	b.n	800d102 <_reclaim_reent+0x16>
 800d18c:	680e      	ldr	r6, [r1, #0]
 800d18e:	4620      	mov	r0, r4
 800d190:	f000 fa8a 	bl	800d6a8 <_free_r>
 800d194:	4631      	mov	r1, r6
 800d196:	e7ef      	b.n	800d178 <_reclaim_reent+0x8c>
 800d198:	2500      	movs	r5, #0
 800d19a:	e7ef      	b.n	800d17c <_reclaim_reent+0x90>
 800d19c:	bd70      	pop	{r4, r5, r6, pc}
 800d19e:	bf00      	nop
 800d1a0:	200002dc 	.word	0x200002dc

0800d1a4 <_sbrk_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d06      	ldr	r5, [pc, #24]	; (800d1c0 <_sbrk_r+0x1c>)
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	f7f5 fa70 	bl	8002694 <_sbrk>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d102      	bne.n	800d1be <_sbrk_r+0x1a>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	b103      	cbz	r3, 800d1be <_sbrk_r+0x1a>
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
 800d1c0:	20004dac 	.word	0x20004dac

0800d1c4 <__sread>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1cc:	f000 fdaa 	bl	800dd24 <_read_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	bfab      	itete	ge
 800d1d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d8:	181b      	addge	r3, r3, r0
 800d1da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1de:	bfac      	ite	ge
 800d1e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1e2:	81a3      	strhlt	r3, [r4, #12]
 800d1e4:	bd10      	pop	{r4, pc}

0800d1e6 <__swrite>:
 800d1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	461f      	mov	r7, r3
 800d1ec:	898b      	ldrh	r3, [r1, #12]
 800d1ee:	05db      	lsls	r3, r3, #23
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	4616      	mov	r6, r2
 800d1f6:	d505      	bpl.n	800d204 <__swrite+0x1e>
 800d1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	2200      	movs	r2, #0
 800d200:	f000 f9d0 	bl	800d5a4 <_lseek_r>
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d20a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d20e:	81a3      	strh	r3, [r4, #12]
 800d210:	4632      	mov	r2, r6
 800d212:	463b      	mov	r3, r7
 800d214:	4628      	mov	r0, r5
 800d216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21a:	f000 b871 	b.w	800d300 <_write_r>

0800d21e <__sseek>:
 800d21e:	b510      	push	{r4, lr}
 800d220:	460c      	mov	r4, r1
 800d222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d226:	f000 f9bd 	bl	800d5a4 <_lseek_r>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	bf15      	itete	ne
 800d230:	6560      	strne	r0, [r4, #84]	; 0x54
 800d232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d23a:	81a3      	strheq	r3, [r4, #12]
 800d23c:	bf18      	it	ne
 800d23e:	81a3      	strhne	r3, [r4, #12]
 800d240:	bd10      	pop	{r4, pc}

0800d242 <__sclose>:
 800d242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d246:	f000 b8db 	b.w	800d400 <_close_r>

0800d24a <strcpy>:
 800d24a:	4603      	mov	r3, r0
 800d24c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d250:	f803 2b01 	strb.w	r2, [r3], #1
 800d254:	2a00      	cmp	r2, #0
 800d256:	d1f9      	bne.n	800d24c <strcpy+0x2>
 800d258:	4770      	bx	lr
	...

0800d25c <__swbuf_r>:
 800d25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25e:	460e      	mov	r6, r1
 800d260:	4614      	mov	r4, r2
 800d262:	4605      	mov	r5, r0
 800d264:	b118      	cbz	r0, 800d26e <__swbuf_r+0x12>
 800d266:	6983      	ldr	r3, [r0, #24]
 800d268:	b90b      	cbnz	r3, 800d26e <__swbuf_r+0x12>
 800d26a:	f7ff fd6d 	bl	800cd48 <__sinit>
 800d26e:	4b21      	ldr	r3, [pc, #132]	; (800d2f4 <__swbuf_r+0x98>)
 800d270:	429c      	cmp	r4, r3
 800d272:	d12b      	bne.n	800d2cc <__swbuf_r+0x70>
 800d274:	686c      	ldr	r4, [r5, #4]
 800d276:	69a3      	ldr	r3, [r4, #24]
 800d278:	60a3      	str	r3, [r4, #8]
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	071a      	lsls	r2, r3, #28
 800d27e:	d52f      	bpl.n	800d2e0 <__swbuf_r+0x84>
 800d280:	6923      	ldr	r3, [r4, #16]
 800d282:	b36b      	cbz	r3, 800d2e0 <__swbuf_r+0x84>
 800d284:	6923      	ldr	r3, [r4, #16]
 800d286:	6820      	ldr	r0, [r4, #0]
 800d288:	1ac0      	subs	r0, r0, r3
 800d28a:	6963      	ldr	r3, [r4, #20]
 800d28c:	b2f6      	uxtb	r6, r6
 800d28e:	4283      	cmp	r3, r0
 800d290:	4637      	mov	r7, r6
 800d292:	dc04      	bgt.n	800d29e <__swbuf_r+0x42>
 800d294:	4621      	mov	r1, r4
 800d296:	4628      	mov	r0, r5
 800d298:	f000 f948 	bl	800d52c <_fflush_r>
 800d29c:	bb30      	cbnz	r0, 800d2ec <__swbuf_r+0x90>
 800d29e:	68a3      	ldr	r3, [r4, #8]
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	60a3      	str	r3, [r4, #8]
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	1c5a      	adds	r2, r3, #1
 800d2a8:	6022      	str	r2, [r4, #0]
 800d2aa:	701e      	strb	r6, [r3, #0]
 800d2ac:	6963      	ldr	r3, [r4, #20]
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	4283      	cmp	r3, r0
 800d2b2:	d004      	beq.n	800d2be <__swbuf_r+0x62>
 800d2b4:	89a3      	ldrh	r3, [r4, #12]
 800d2b6:	07db      	lsls	r3, r3, #31
 800d2b8:	d506      	bpl.n	800d2c8 <__swbuf_r+0x6c>
 800d2ba:	2e0a      	cmp	r6, #10
 800d2bc:	d104      	bne.n	800d2c8 <__swbuf_r+0x6c>
 800d2be:	4621      	mov	r1, r4
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	f000 f933 	bl	800d52c <_fflush_r>
 800d2c6:	b988      	cbnz	r0, 800d2ec <__swbuf_r+0x90>
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <__swbuf_r+0x9c>)
 800d2ce:	429c      	cmp	r4, r3
 800d2d0:	d101      	bne.n	800d2d6 <__swbuf_r+0x7a>
 800d2d2:	68ac      	ldr	r4, [r5, #8]
 800d2d4:	e7cf      	b.n	800d276 <__swbuf_r+0x1a>
 800d2d6:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <__swbuf_r+0xa0>)
 800d2d8:	429c      	cmp	r4, r3
 800d2da:	bf08      	it	eq
 800d2dc:	68ec      	ldreq	r4, [r5, #12]
 800d2de:	e7ca      	b.n	800d276 <__swbuf_r+0x1a>
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f000 f81e 	bl	800d324 <__swsetup_r>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d0cb      	beq.n	800d284 <__swbuf_r+0x28>
 800d2ec:	f04f 37ff 	mov.w	r7, #4294967295
 800d2f0:	e7ea      	b.n	800d2c8 <__swbuf_r+0x6c>
 800d2f2:	bf00      	nop
 800d2f4:	0800e2f0 	.word	0x0800e2f0
 800d2f8:	0800e310 	.word	0x0800e310
 800d2fc:	0800e2d0 	.word	0x0800e2d0

0800d300 <_write_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4d07      	ldr	r5, [pc, #28]	; (800d320 <_write_r+0x20>)
 800d304:	4604      	mov	r4, r0
 800d306:	4608      	mov	r0, r1
 800d308:	4611      	mov	r1, r2
 800d30a:	2200      	movs	r2, #0
 800d30c:	602a      	str	r2, [r5, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	f7f5 f96f 	bl	80025f2 <_write>
 800d314:	1c43      	adds	r3, r0, #1
 800d316:	d102      	bne.n	800d31e <_write_r+0x1e>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	b103      	cbz	r3, 800d31e <_write_r+0x1e>
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	20004dac 	.word	0x20004dac

0800d324 <__swsetup_r>:
 800d324:	4b32      	ldr	r3, [pc, #200]	; (800d3f0 <__swsetup_r+0xcc>)
 800d326:	b570      	push	{r4, r5, r6, lr}
 800d328:	681d      	ldr	r5, [r3, #0]
 800d32a:	4606      	mov	r6, r0
 800d32c:	460c      	mov	r4, r1
 800d32e:	b125      	cbz	r5, 800d33a <__swsetup_r+0x16>
 800d330:	69ab      	ldr	r3, [r5, #24]
 800d332:	b913      	cbnz	r3, 800d33a <__swsetup_r+0x16>
 800d334:	4628      	mov	r0, r5
 800d336:	f7ff fd07 	bl	800cd48 <__sinit>
 800d33a:	4b2e      	ldr	r3, [pc, #184]	; (800d3f4 <__swsetup_r+0xd0>)
 800d33c:	429c      	cmp	r4, r3
 800d33e:	d10f      	bne.n	800d360 <__swsetup_r+0x3c>
 800d340:	686c      	ldr	r4, [r5, #4]
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d348:	0719      	lsls	r1, r3, #28
 800d34a:	d42c      	bmi.n	800d3a6 <__swsetup_r+0x82>
 800d34c:	06dd      	lsls	r5, r3, #27
 800d34e:	d411      	bmi.n	800d374 <__swsetup_r+0x50>
 800d350:	2309      	movs	r3, #9
 800d352:	6033      	str	r3, [r6, #0]
 800d354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d358:	81a3      	strh	r3, [r4, #12]
 800d35a:	f04f 30ff 	mov.w	r0, #4294967295
 800d35e:	e03e      	b.n	800d3de <__swsetup_r+0xba>
 800d360:	4b25      	ldr	r3, [pc, #148]	; (800d3f8 <__swsetup_r+0xd4>)
 800d362:	429c      	cmp	r4, r3
 800d364:	d101      	bne.n	800d36a <__swsetup_r+0x46>
 800d366:	68ac      	ldr	r4, [r5, #8]
 800d368:	e7eb      	b.n	800d342 <__swsetup_r+0x1e>
 800d36a:	4b24      	ldr	r3, [pc, #144]	; (800d3fc <__swsetup_r+0xd8>)
 800d36c:	429c      	cmp	r4, r3
 800d36e:	bf08      	it	eq
 800d370:	68ec      	ldreq	r4, [r5, #12]
 800d372:	e7e6      	b.n	800d342 <__swsetup_r+0x1e>
 800d374:	0758      	lsls	r0, r3, #29
 800d376:	d512      	bpl.n	800d39e <__swsetup_r+0x7a>
 800d378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d37a:	b141      	cbz	r1, 800d38e <__swsetup_r+0x6a>
 800d37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d380:	4299      	cmp	r1, r3
 800d382:	d002      	beq.n	800d38a <__swsetup_r+0x66>
 800d384:	4630      	mov	r0, r6
 800d386:	f000 f98f 	bl	800d6a8 <_free_r>
 800d38a:	2300      	movs	r3, #0
 800d38c:	6363      	str	r3, [r4, #52]	; 0x34
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d394:	81a3      	strh	r3, [r4, #12]
 800d396:	2300      	movs	r3, #0
 800d398:	6063      	str	r3, [r4, #4]
 800d39a:	6923      	ldr	r3, [r4, #16]
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	f043 0308 	orr.w	r3, r3, #8
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	6923      	ldr	r3, [r4, #16]
 800d3a8:	b94b      	cbnz	r3, 800d3be <__swsetup_r+0x9a>
 800d3aa:	89a3      	ldrh	r3, [r4, #12]
 800d3ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3b4:	d003      	beq.n	800d3be <__swsetup_r+0x9a>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f000 f929 	bl	800d610 <__smakebuf_r>
 800d3be:	89a0      	ldrh	r0, [r4, #12]
 800d3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3c4:	f010 0301 	ands.w	r3, r0, #1
 800d3c8:	d00a      	beq.n	800d3e0 <__swsetup_r+0xbc>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	60a3      	str	r3, [r4, #8]
 800d3ce:	6963      	ldr	r3, [r4, #20]
 800d3d0:	425b      	negs	r3, r3
 800d3d2:	61a3      	str	r3, [r4, #24]
 800d3d4:	6923      	ldr	r3, [r4, #16]
 800d3d6:	b943      	cbnz	r3, 800d3ea <__swsetup_r+0xc6>
 800d3d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3dc:	d1ba      	bne.n	800d354 <__swsetup_r+0x30>
 800d3de:	bd70      	pop	{r4, r5, r6, pc}
 800d3e0:	0781      	lsls	r1, r0, #30
 800d3e2:	bf58      	it	pl
 800d3e4:	6963      	ldrpl	r3, [r4, #20]
 800d3e6:	60a3      	str	r3, [r4, #8]
 800d3e8:	e7f4      	b.n	800d3d4 <__swsetup_r+0xb0>
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	e7f7      	b.n	800d3de <__swsetup_r+0xba>
 800d3ee:	bf00      	nop
 800d3f0:	200002dc 	.word	0x200002dc
 800d3f4:	0800e2f0 	.word	0x0800e2f0
 800d3f8:	0800e310 	.word	0x0800e310
 800d3fc:	0800e2d0 	.word	0x0800e2d0

0800d400 <_close_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4d06      	ldr	r5, [pc, #24]	; (800d41c <_close_r+0x1c>)
 800d404:	2300      	movs	r3, #0
 800d406:	4604      	mov	r4, r0
 800d408:	4608      	mov	r0, r1
 800d40a:	602b      	str	r3, [r5, #0]
 800d40c:	f7f5 f90d 	bl	800262a <_close>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_close_r+0x1a>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_close_r+0x1a>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	20004dac 	.word	0x20004dac

0800d420 <__sflush_r>:
 800d420:	898a      	ldrh	r2, [r1, #12]
 800d422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d426:	4605      	mov	r5, r0
 800d428:	0710      	lsls	r0, r2, #28
 800d42a:	460c      	mov	r4, r1
 800d42c:	d458      	bmi.n	800d4e0 <__sflush_r+0xc0>
 800d42e:	684b      	ldr	r3, [r1, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	dc05      	bgt.n	800d440 <__sflush_r+0x20>
 800d434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d436:	2b00      	cmp	r3, #0
 800d438:	dc02      	bgt.n	800d440 <__sflush_r+0x20>
 800d43a:	2000      	movs	r0, #0
 800d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d442:	2e00      	cmp	r6, #0
 800d444:	d0f9      	beq.n	800d43a <__sflush_r+0x1a>
 800d446:	2300      	movs	r3, #0
 800d448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d44c:	682f      	ldr	r7, [r5, #0]
 800d44e:	602b      	str	r3, [r5, #0]
 800d450:	d032      	beq.n	800d4b8 <__sflush_r+0x98>
 800d452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	075a      	lsls	r2, r3, #29
 800d458:	d505      	bpl.n	800d466 <__sflush_r+0x46>
 800d45a:	6863      	ldr	r3, [r4, #4]
 800d45c:	1ac0      	subs	r0, r0, r3
 800d45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d460:	b10b      	cbz	r3, 800d466 <__sflush_r+0x46>
 800d462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d464:	1ac0      	subs	r0, r0, r3
 800d466:	2300      	movs	r3, #0
 800d468:	4602      	mov	r2, r0
 800d46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d46c:	6a21      	ldr	r1, [r4, #32]
 800d46e:	4628      	mov	r0, r5
 800d470:	47b0      	blx	r6
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	d106      	bne.n	800d486 <__sflush_r+0x66>
 800d478:	6829      	ldr	r1, [r5, #0]
 800d47a:	291d      	cmp	r1, #29
 800d47c:	d82c      	bhi.n	800d4d8 <__sflush_r+0xb8>
 800d47e:	4a2a      	ldr	r2, [pc, #168]	; (800d528 <__sflush_r+0x108>)
 800d480:	40ca      	lsrs	r2, r1
 800d482:	07d6      	lsls	r6, r2, #31
 800d484:	d528      	bpl.n	800d4d8 <__sflush_r+0xb8>
 800d486:	2200      	movs	r2, #0
 800d488:	6062      	str	r2, [r4, #4]
 800d48a:	04d9      	lsls	r1, r3, #19
 800d48c:	6922      	ldr	r2, [r4, #16]
 800d48e:	6022      	str	r2, [r4, #0]
 800d490:	d504      	bpl.n	800d49c <__sflush_r+0x7c>
 800d492:	1c42      	adds	r2, r0, #1
 800d494:	d101      	bne.n	800d49a <__sflush_r+0x7a>
 800d496:	682b      	ldr	r3, [r5, #0]
 800d498:	b903      	cbnz	r3, 800d49c <__sflush_r+0x7c>
 800d49a:	6560      	str	r0, [r4, #84]	; 0x54
 800d49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d49e:	602f      	str	r7, [r5, #0]
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	d0ca      	beq.n	800d43a <__sflush_r+0x1a>
 800d4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4a8:	4299      	cmp	r1, r3
 800d4aa:	d002      	beq.n	800d4b2 <__sflush_r+0x92>
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f000 f8fb 	bl	800d6a8 <_free_r>
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	6360      	str	r0, [r4, #52]	; 0x34
 800d4b6:	e7c1      	b.n	800d43c <__sflush_r+0x1c>
 800d4b8:	6a21      	ldr	r1, [r4, #32]
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b0      	blx	r6
 800d4c0:	1c41      	adds	r1, r0, #1
 800d4c2:	d1c7      	bne.n	800d454 <__sflush_r+0x34>
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d0c4      	beq.n	800d454 <__sflush_r+0x34>
 800d4ca:	2b1d      	cmp	r3, #29
 800d4cc:	d001      	beq.n	800d4d2 <__sflush_r+0xb2>
 800d4ce:	2b16      	cmp	r3, #22
 800d4d0:	d101      	bne.n	800d4d6 <__sflush_r+0xb6>
 800d4d2:	602f      	str	r7, [r5, #0]
 800d4d4:	e7b1      	b.n	800d43a <__sflush_r+0x1a>
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4dc:	81a3      	strh	r3, [r4, #12]
 800d4de:	e7ad      	b.n	800d43c <__sflush_r+0x1c>
 800d4e0:	690f      	ldr	r7, [r1, #16]
 800d4e2:	2f00      	cmp	r7, #0
 800d4e4:	d0a9      	beq.n	800d43a <__sflush_r+0x1a>
 800d4e6:	0793      	lsls	r3, r2, #30
 800d4e8:	680e      	ldr	r6, [r1, #0]
 800d4ea:	bf08      	it	eq
 800d4ec:	694b      	ldreq	r3, [r1, #20]
 800d4ee:	600f      	str	r7, [r1, #0]
 800d4f0:	bf18      	it	ne
 800d4f2:	2300      	movne	r3, #0
 800d4f4:	eba6 0807 	sub.w	r8, r6, r7
 800d4f8:	608b      	str	r3, [r1, #8]
 800d4fa:	f1b8 0f00 	cmp.w	r8, #0
 800d4fe:	dd9c      	ble.n	800d43a <__sflush_r+0x1a>
 800d500:	6a21      	ldr	r1, [r4, #32]
 800d502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d504:	4643      	mov	r3, r8
 800d506:	463a      	mov	r2, r7
 800d508:	4628      	mov	r0, r5
 800d50a:	47b0      	blx	r6
 800d50c:	2800      	cmp	r0, #0
 800d50e:	dc06      	bgt.n	800d51e <__sflush_r+0xfe>
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	f04f 30ff 	mov.w	r0, #4294967295
 800d51c:	e78e      	b.n	800d43c <__sflush_r+0x1c>
 800d51e:	4407      	add	r7, r0
 800d520:	eba8 0800 	sub.w	r8, r8, r0
 800d524:	e7e9      	b.n	800d4fa <__sflush_r+0xda>
 800d526:	bf00      	nop
 800d528:	20400001 	.word	0x20400001

0800d52c <_fflush_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	690b      	ldr	r3, [r1, #16]
 800d530:	4605      	mov	r5, r0
 800d532:	460c      	mov	r4, r1
 800d534:	b913      	cbnz	r3, 800d53c <_fflush_r+0x10>
 800d536:	2500      	movs	r5, #0
 800d538:	4628      	mov	r0, r5
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	b118      	cbz	r0, 800d546 <_fflush_r+0x1a>
 800d53e:	6983      	ldr	r3, [r0, #24]
 800d540:	b90b      	cbnz	r3, 800d546 <_fflush_r+0x1a>
 800d542:	f7ff fc01 	bl	800cd48 <__sinit>
 800d546:	4b14      	ldr	r3, [pc, #80]	; (800d598 <_fflush_r+0x6c>)
 800d548:	429c      	cmp	r4, r3
 800d54a:	d11b      	bne.n	800d584 <_fflush_r+0x58>
 800d54c:	686c      	ldr	r4, [r5, #4]
 800d54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0ef      	beq.n	800d536 <_fflush_r+0xa>
 800d556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d558:	07d0      	lsls	r0, r2, #31
 800d55a:	d404      	bmi.n	800d566 <_fflush_r+0x3a>
 800d55c:	0599      	lsls	r1, r3, #22
 800d55e:	d402      	bmi.n	800d566 <_fflush_r+0x3a>
 800d560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d562:	f7ff fcb4 	bl	800cece <__retarget_lock_acquire_recursive>
 800d566:	4628      	mov	r0, r5
 800d568:	4621      	mov	r1, r4
 800d56a:	f7ff ff59 	bl	800d420 <__sflush_r>
 800d56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d570:	07da      	lsls	r2, r3, #31
 800d572:	4605      	mov	r5, r0
 800d574:	d4e0      	bmi.n	800d538 <_fflush_r+0xc>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	059b      	lsls	r3, r3, #22
 800d57a:	d4dd      	bmi.n	800d538 <_fflush_r+0xc>
 800d57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d57e:	f7ff fca7 	bl	800ced0 <__retarget_lock_release_recursive>
 800d582:	e7d9      	b.n	800d538 <_fflush_r+0xc>
 800d584:	4b05      	ldr	r3, [pc, #20]	; (800d59c <_fflush_r+0x70>)
 800d586:	429c      	cmp	r4, r3
 800d588:	d101      	bne.n	800d58e <_fflush_r+0x62>
 800d58a:	68ac      	ldr	r4, [r5, #8]
 800d58c:	e7df      	b.n	800d54e <_fflush_r+0x22>
 800d58e:	4b04      	ldr	r3, [pc, #16]	; (800d5a0 <_fflush_r+0x74>)
 800d590:	429c      	cmp	r4, r3
 800d592:	bf08      	it	eq
 800d594:	68ec      	ldreq	r4, [r5, #12]
 800d596:	e7da      	b.n	800d54e <_fflush_r+0x22>
 800d598:	0800e2f0 	.word	0x0800e2f0
 800d59c:	0800e310 	.word	0x0800e310
 800d5a0:	0800e2d0 	.word	0x0800e2d0

0800d5a4 <_lseek_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d07      	ldr	r5, [pc, #28]	; (800d5c4 <_lseek_r+0x20>)
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	602a      	str	r2, [r5, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f7f5 f860 	bl	8002678 <_lseek>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_lseek_r+0x1e>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_lseek_r+0x1e>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20004dac 	.word	0x20004dac

0800d5c8 <__swhatbuf_r>:
 800d5c8:	b570      	push	{r4, r5, r6, lr}
 800d5ca:	460e      	mov	r6, r1
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	2900      	cmp	r1, #0
 800d5d2:	b096      	sub	sp, #88	; 0x58
 800d5d4:	4614      	mov	r4, r2
 800d5d6:	461d      	mov	r5, r3
 800d5d8:	da07      	bge.n	800d5ea <__swhatbuf_r+0x22>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	602b      	str	r3, [r5, #0]
 800d5de:	89b3      	ldrh	r3, [r6, #12]
 800d5e0:	061a      	lsls	r2, r3, #24
 800d5e2:	d410      	bmi.n	800d606 <__swhatbuf_r+0x3e>
 800d5e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5e8:	e00e      	b.n	800d608 <__swhatbuf_r+0x40>
 800d5ea:	466a      	mov	r2, sp
 800d5ec:	f000 fbac 	bl	800dd48 <_fstat_r>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	dbf2      	blt.n	800d5da <__swhatbuf_r+0x12>
 800d5f4:	9a01      	ldr	r2, [sp, #4]
 800d5f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d5fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d5fe:	425a      	negs	r2, r3
 800d600:	415a      	adcs	r2, r3
 800d602:	602a      	str	r2, [r5, #0]
 800d604:	e7ee      	b.n	800d5e4 <__swhatbuf_r+0x1c>
 800d606:	2340      	movs	r3, #64	; 0x40
 800d608:	2000      	movs	r0, #0
 800d60a:	6023      	str	r3, [r4, #0]
 800d60c:	b016      	add	sp, #88	; 0x58
 800d60e:	bd70      	pop	{r4, r5, r6, pc}

0800d610 <__smakebuf_r>:
 800d610:	898b      	ldrh	r3, [r1, #12]
 800d612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d614:	079d      	lsls	r5, r3, #30
 800d616:	4606      	mov	r6, r0
 800d618:	460c      	mov	r4, r1
 800d61a:	d507      	bpl.n	800d62c <__smakebuf_r+0x1c>
 800d61c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	2301      	movs	r3, #1
 800d626:	6163      	str	r3, [r4, #20]
 800d628:	b002      	add	sp, #8
 800d62a:	bd70      	pop	{r4, r5, r6, pc}
 800d62c:	ab01      	add	r3, sp, #4
 800d62e:	466a      	mov	r2, sp
 800d630:	f7ff ffca 	bl	800d5c8 <__swhatbuf_r>
 800d634:	9900      	ldr	r1, [sp, #0]
 800d636:	4605      	mov	r5, r0
 800d638:	4630      	mov	r0, r6
 800d63a:	f7ff fc61 	bl	800cf00 <_malloc_r>
 800d63e:	b948      	cbnz	r0, 800d654 <__smakebuf_r+0x44>
 800d640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d644:	059a      	lsls	r2, r3, #22
 800d646:	d4ef      	bmi.n	800d628 <__smakebuf_r+0x18>
 800d648:	f023 0303 	bic.w	r3, r3, #3
 800d64c:	f043 0302 	orr.w	r3, r3, #2
 800d650:	81a3      	strh	r3, [r4, #12]
 800d652:	e7e3      	b.n	800d61c <__smakebuf_r+0xc>
 800d654:	4b0d      	ldr	r3, [pc, #52]	; (800d68c <__smakebuf_r+0x7c>)
 800d656:	62b3      	str	r3, [r6, #40]	; 0x28
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	6020      	str	r0, [r4, #0]
 800d65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	9b00      	ldr	r3, [sp, #0]
 800d664:	6163      	str	r3, [r4, #20]
 800d666:	9b01      	ldr	r3, [sp, #4]
 800d668:	6120      	str	r0, [r4, #16]
 800d66a:	b15b      	cbz	r3, 800d684 <__smakebuf_r+0x74>
 800d66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d670:	4630      	mov	r0, r6
 800d672:	f000 fb7b 	bl	800dd6c <_isatty_r>
 800d676:	b128      	cbz	r0, 800d684 <__smakebuf_r+0x74>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	f023 0303 	bic.w	r3, r3, #3
 800d67e:	f043 0301 	orr.w	r3, r3, #1
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	89a0      	ldrh	r0, [r4, #12]
 800d686:	4305      	orrs	r5, r0
 800d688:	81a5      	strh	r5, [r4, #12]
 800d68a:	e7cd      	b.n	800d628 <__smakebuf_r+0x18>
 800d68c:	0800cce1 	.word	0x0800cce1

0800d690 <__malloc_lock>:
 800d690:	4801      	ldr	r0, [pc, #4]	; (800d698 <__malloc_lock+0x8>)
 800d692:	f7ff bc1c 	b.w	800cece <__retarget_lock_acquire_recursive>
 800d696:	bf00      	nop
 800d698:	20004da4 	.word	0x20004da4

0800d69c <__malloc_unlock>:
 800d69c:	4801      	ldr	r0, [pc, #4]	; (800d6a4 <__malloc_unlock+0x8>)
 800d69e:	f7ff bc17 	b.w	800ced0 <__retarget_lock_release_recursive>
 800d6a2:	bf00      	nop
 800d6a4:	20004da4 	.word	0x20004da4

0800d6a8 <_free_r>:
 800d6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6aa:	2900      	cmp	r1, #0
 800d6ac:	d048      	beq.n	800d740 <_free_r+0x98>
 800d6ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b2:	9001      	str	r0, [sp, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d6ba:	bfb8      	it	lt
 800d6bc:	18e4      	addlt	r4, r4, r3
 800d6be:	f7ff ffe7 	bl	800d690 <__malloc_lock>
 800d6c2:	4a20      	ldr	r2, [pc, #128]	; (800d744 <_free_r+0x9c>)
 800d6c4:	9801      	ldr	r0, [sp, #4]
 800d6c6:	6813      	ldr	r3, [r2, #0]
 800d6c8:	4615      	mov	r5, r2
 800d6ca:	b933      	cbnz	r3, 800d6da <_free_r+0x32>
 800d6cc:	6063      	str	r3, [r4, #4]
 800d6ce:	6014      	str	r4, [r2, #0]
 800d6d0:	b003      	add	sp, #12
 800d6d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6d6:	f7ff bfe1 	b.w	800d69c <__malloc_unlock>
 800d6da:	42a3      	cmp	r3, r4
 800d6dc:	d90b      	bls.n	800d6f6 <_free_r+0x4e>
 800d6de:	6821      	ldr	r1, [r4, #0]
 800d6e0:	1862      	adds	r2, r4, r1
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	bf04      	itt	eq
 800d6e6:	681a      	ldreq	r2, [r3, #0]
 800d6e8:	685b      	ldreq	r3, [r3, #4]
 800d6ea:	6063      	str	r3, [r4, #4]
 800d6ec:	bf04      	itt	eq
 800d6ee:	1852      	addeq	r2, r2, r1
 800d6f0:	6022      	streq	r2, [r4, #0]
 800d6f2:	602c      	str	r4, [r5, #0]
 800d6f4:	e7ec      	b.n	800d6d0 <_free_r+0x28>
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	b10b      	cbz	r3, 800d700 <_free_r+0x58>
 800d6fc:	42a3      	cmp	r3, r4
 800d6fe:	d9fa      	bls.n	800d6f6 <_free_r+0x4e>
 800d700:	6811      	ldr	r1, [r2, #0]
 800d702:	1855      	adds	r5, r2, r1
 800d704:	42a5      	cmp	r5, r4
 800d706:	d10b      	bne.n	800d720 <_free_r+0x78>
 800d708:	6824      	ldr	r4, [r4, #0]
 800d70a:	4421      	add	r1, r4
 800d70c:	1854      	adds	r4, r2, r1
 800d70e:	42a3      	cmp	r3, r4
 800d710:	6011      	str	r1, [r2, #0]
 800d712:	d1dd      	bne.n	800d6d0 <_free_r+0x28>
 800d714:	681c      	ldr	r4, [r3, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	6053      	str	r3, [r2, #4]
 800d71a:	4421      	add	r1, r4
 800d71c:	6011      	str	r1, [r2, #0]
 800d71e:	e7d7      	b.n	800d6d0 <_free_r+0x28>
 800d720:	d902      	bls.n	800d728 <_free_r+0x80>
 800d722:	230c      	movs	r3, #12
 800d724:	6003      	str	r3, [r0, #0]
 800d726:	e7d3      	b.n	800d6d0 <_free_r+0x28>
 800d728:	6825      	ldr	r5, [r4, #0]
 800d72a:	1961      	adds	r1, r4, r5
 800d72c:	428b      	cmp	r3, r1
 800d72e:	bf04      	itt	eq
 800d730:	6819      	ldreq	r1, [r3, #0]
 800d732:	685b      	ldreq	r3, [r3, #4]
 800d734:	6063      	str	r3, [r4, #4]
 800d736:	bf04      	itt	eq
 800d738:	1949      	addeq	r1, r1, r5
 800d73a:	6021      	streq	r1, [r4, #0]
 800d73c:	6054      	str	r4, [r2, #4]
 800d73e:	e7c7      	b.n	800d6d0 <_free_r+0x28>
 800d740:	b003      	add	sp, #12
 800d742:	bd30      	pop	{r4, r5, pc}
 800d744:	200046a8 	.word	0x200046a8

0800d748 <__sfputc_r>:
 800d748:	6893      	ldr	r3, [r2, #8]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	b410      	push	{r4}
 800d750:	6093      	str	r3, [r2, #8]
 800d752:	da08      	bge.n	800d766 <__sfputc_r+0x1e>
 800d754:	6994      	ldr	r4, [r2, #24]
 800d756:	42a3      	cmp	r3, r4
 800d758:	db01      	blt.n	800d75e <__sfputc_r+0x16>
 800d75a:	290a      	cmp	r1, #10
 800d75c:	d103      	bne.n	800d766 <__sfputc_r+0x1e>
 800d75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d762:	f7ff bd7b 	b.w	800d25c <__swbuf_r>
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	1c58      	adds	r0, r3, #1
 800d76a:	6010      	str	r0, [r2, #0]
 800d76c:	7019      	strb	r1, [r3, #0]
 800d76e:	4608      	mov	r0, r1
 800d770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <__sfputs_r>:
 800d776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d778:	4606      	mov	r6, r0
 800d77a:	460f      	mov	r7, r1
 800d77c:	4614      	mov	r4, r2
 800d77e:	18d5      	adds	r5, r2, r3
 800d780:	42ac      	cmp	r4, r5
 800d782:	d101      	bne.n	800d788 <__sfputs_r+0x12>
 800d784:	2000      	movs	r0, #0
 800d786:	e007      	b.n	800d798 <__sfputs_r+0x22>
 800d788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78c:	463a      	mov	r2, r7
 800d78e:	4630      	mov	r0, r6
 800d790:	f7ff ffda 	bl	800d748 <__sfputc_r>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d1f3      	bne.n	800d780 <__sfputs_r+0xa>
 800d798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d79c <_vfiprintf_r>:
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	b09d      	sub	sp, #116	; 0x74
 800d7a4:	4614      	mov	r4, r2
 800d7a6:	4698      	mov	r8, r3
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	b118      	cbz	r0, 800d7b4 <_vfiprintf_r+0x18>
 800d7ac:	6983      	ldr	r3, [r0, #24]
 800d7ae:	b90b      	cbnz	r3, 800d7b4 <_vfiprintf_r+0x18>
 800d7b0:	f7ff faca 	bl	800cd48 <__sinit>
 800d7b4:	4b89      	ldr	r3, [pc, #548]	; (800d9dc <_vfiprintf_r+0x240>)
 800d7b6:	429d      	cmp	r5, r3
 800d7b8:	d11b      	bne.n	800d7f2 <_vfiprintf_r+0x56>
 800d7ba:	6875      	ldr	r5, [r6, #4]
 800d7bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7be:	07d9      	lsls	r1, r3, #31
 800d7c0:	d405      	bmi.n	800d7ce <_vfiprintf_r+0x32>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	059a      	lsls	r2, r3, #22
 800d7c6:	d402      	bmi.n	800d7ce <_vfiprintf_r+0x32>
 800d7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ca:	f7ff fb80 	bl	800cece <__retarget_lock_acquire_recursive>
 800d7ce:	89ab      	ldrh	r3, [r5, #12]
 800d7d0:	071b      	lsls	r3, r3, #28
 800d7d2:	d501      	bpl.n	800d7d8 <_vfiprintf_r+0x3c>
 800d7d4:	692b      	ldr	r3, [r5, #16]
 800d7d6:	b9eb      	cbnz	r3, 800d814 <_vfiprintf_r+0x78>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff fda2 	bl	800d324 <__swsetup_r>
 800d7e0:	b1c0      	cbz	r0, 800d814 <_vfiprintf_r+0x78>
 800d7e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7e4:	07dc      	lsls	r4, r3, #31
 800d7e6:	d50e      	bpl.n	800d806 <_vfiprintf_r+0x6a>
 800d7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ec:	b01d      	add	sp, #116	; 0x74
 800d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f2:	4b7b      	ldr	r3, [pc, #492]	; (800d9e0 <_vfiprintf_r+0x244>)
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	d101      	bne.n	800d7fc <_vfiprintf_r+0x60>
 800d7f8:	68b5      	ldr	r5, [r6, #8]
 800d7fa:	e7df      	b.n	800d7bc <_vfiprintf_r+0x20>
 800d7fc:	4b79      	ldr	r3, [pc, #484]	; (800d9e4 <_vfiprintf_r+0x248>)
 800d7fe:	429d      	cmp	r5, r3
 800d800:	bf08      	it	eq
 800d802:	68f5      	ldreq	r5, [r6, #12]
 800d804:	e7da      	b.n	800d7bc <_vfiprintf_r+0x20>
 800d806:	89ab      	ldrh	r3, [r5, #12]
 800d808:	0598      	lsls	r0, r3, #22
 800d80a:	d4ed      	bmi.n	800d7e8 <_vfiprintf_r+0x4c>
 800d80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d80e:	f7ff fb5f 	bl	800ced0 <__retarget_lock_release_recursive>
 800d812:	e7e9      	b.n	800d7e8 <_vfiprintf_r+0x4c>
 800d814:	2300      	movs	r3, #0
 800d816:	9309      	str	r3, [sp, #36]	; 0x24
 800d818:	2320      	movs	r3, #32
 800d81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d81e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d822:	2330      	movs	r3, #48	; 0x30
 800d824:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9e8 <_vfiprintf_r+0x24c>
 800d828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d82c:	f04f 0901 	mov.w	r9, #1
 800d830:	4623      	mov	r3, r4
 800d832:	469a      	mov	sl, r3
 800d834:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d838:	b10a      	cbz	r2, 800d83e <_vfiprintf_r+0xa2>
 800d83a:	2a25      	cmp	r2, #37	; 0x25
 800d83c:	d1f9      	bne.n	800d832 <_vfiprintf_r+0x96>
 800d83e:	ebba 0b04 	subs.w	fp, sl, r4
 800d842:	d00b      	beq.n	800d85c <_vfiprintf_r+0xc0>
 800d844:	465b      	mov	r3, fp
 800d846:	4622      	mov	r2, r4
 800d848:	4629      	mov	r1, r5
 800d84a:	4630      	mov	r0, r6
 800d84c:	f7ff ff93 	bl	800d776 <__sfputs_r>
 800d850:	3001      	adds	r0, #1
 800d852:	f000 80aa 	beq.w	800d9aa <_vfiprintf_r+0x20e>
 800d856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d858:	445a      	add	r2, fp
 800d85a:	9209      	str	r2, [sp, #36]	; 0x24
 800d85c:	f89a 3000 	ldrb.w	r3, [sl]
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 80a2 	beq.w	800d9aa <_vfiprintf_r+0x20e>
 800d866:	2300      	movs	r3, #0
 800d868:	f04f 32ff 	mov.w	r2, #4294967295
 800d86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d870:	f10a 0a01 	add.w	sl, sl, #1
 800d874:	9304      	str	r3, [sp, #16]
 800d876:	9307      	str	r3, [sp, #28]
 800d878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d87c:	931a      	str	r3, [sp, #104]	; 0x68
 800d87e:	4654      	mov	r4, sl
 800d880:	2205      	movs	r2, #5
 800d882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d886:	4858      	ldr	r0, [pc, #352]	; (800d9e8 <_vfiprintf_r+0x24c>)
 800d888:	f7f2 fcaa 	bl	80001e0 <memchr>
 800d88c:	9a04      	ldr	r2, [sp, #16]
 800d88e:	b9d8      	cbnz	r0, 800d8c8 <_vfiprintf_r+0x12c>
 800d890:	06d1      	lsls	r1, r2, #27
 800d892:	bf44      	itt	mi
 800d894:	2320      	movmi	r3, #32
 800d896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d89a:	0713      	lsls	r3, r2, #28
 800d89c:	bf44      	itt	mi
 800d89e:	232b      	movmi	r3, #43	; 0x2b
 800d8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8aa:	d015      	beq.n	800d8d8 <_vfiprintf_r+0x13c>
 800d8ac:	9a07      	ldr	r2, [sp, #28]
 800d8ae:	4654      	mov	r4, sl
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	f04f 0c0a 	mov.w	ip, #10
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8bc:	3b30      	subs	r3, #48	; 0x30
 800d8be:	2b09      	cmp	r3, #9
 800d8c0:	d94e      	bls.n	800d960 <_vfiprintf_r+0x1c4>
 800d8c2:	b1b0      	cbz	r0, 800d8f2 <_vfiprintf_r+0x156>
 800d8c4:	9207      	str	r2, [sp, #28]
 800d8c6:	e014      	b.n	800d8f2 <_vfiprintf_r+0x156>
 800d8c8:	eba0 0308 	sub.w	r3, r0, r8
 800d8cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	9304      	str	r3, [sp, #16]
 800d8d4:	46a2      	mov	sl, r4
 800d8d6:	e7d2      	b.n	800d87e <_vfiprintf_r+0xe2>
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	1d19      	adds	r1, r3, #4
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	9103      	str	r1, [sp, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	bfbb      	ittet	lt
 800d8e4:	425b      	neglt	r3, r3
 800d8e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ea:	9307      	strge	r3, [sp, #28]
 800d8ec:	9307      	strlt	r3, [sp, #28]
 800d8ee:	bfb8      	it	lt
 800d8f0:	9204      	strlt	r2, [sp, #16]
 800d8f2:	7823      	ldrb	r3, [r4, #0]
 800d8f4:	2b2e      	cmp	r3, #46	; 0x2e
 800d8f6:	d10c      	bne.n	800d912 <_vfiprintf_r+0x176>
 800d8f8:	7863      	ldrb	r3, [r4, #1]
 800d8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d8fc:	d135      	bne.n	800d96a <_vfiprintf_r+0x1ce>
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	1d1a      	adds	r2, r3, #4
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	9203      	str	r2, [sp, #12]
 800d906:	2b00      	cmp	r3, #0
 800d908:	bfb8      	it	lt
 800d90a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d90e:	3402      	adds	r4, #2
 800d910:	9305      	str	r3, [sp, #20]
 800d912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9f8 <_vfiprintf_r+0x25c>
 800d916:	7821      	ldrb	r1, [r4, #0]
 800d918:	2203      	movs	r2, #3
 800d91a:	4650      	mov	r0, sl
 800d91c:	f7f2 fc60 	bl	80001e0 <memchr>
 800d920:	b140      	cbz	r0, 800d934 <_vfiprintf_r+0x198>
 800d922:	2340      	movs	r3, #64	; 0x40
 800d924:	eba0 000a 	sub.w	r0, r0, sl
 800d928:	fa03 f000 	lsl.w	r0, r3, r0
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	4303      	orrs	r3, r0
 800d930:	3401      	adds	r4, #1
 800d932:	9304      	str	r3, [sp, #16]
 800d934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d938:	482c      	ldr	r0, [pc, #176]	; (800d9ec <_vfiprintf_r+0x250>)
 800d93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d93e:	2206      	movs	r2, #6
 800d940:	f7f2 fc4e 	bl	80001e0 <memchr>
 800d944:	2800      	cmp	r0, #0
 800d946:	d03f      	beq.n	800d9c8 <_vfiprintf_r+0x22c>
 800d948:	4b29      	ldr	r3, [pc, #164]	; (800d9f0 <_vfiprintf_r+0x254>)
 800d94a:	bb1b      	cbnz	r3, 800d994 <_vfiprintf_r+0x1f8>
 800d94c:	9b03      	ldr	r3, [sp, #12]
 800d94e:	3307      	adds	r3, #7
 800d950:	f023 0307 	bic.w	r3, r3, #7
 800d954:	3308      	adds	r3, #8
 800d956:	9303      	str	r3, [sp, #12]
 800d958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95a:	443b      	add	r3, r7
 800d95c:	9309      	str	r3, [sp, #36]	; 0x24
 800d95e:	e767      	b.n	800d830 <_vfiprintf_r+0x94>
 800d960:	fb0c 3202 	mla	r2, ip, r2, r3
 800d964:	460c      	mov	r4, r1
 800d966:	2001      	movs	r0, #1
 800d968:	e7a5      	b.n	800d8b6 <_vfiprintf_r+0x11a>
 800d96a:	2300      	movs	r3, #0
 800d96c:	3401      	adds	r4, #1
 800d96e:	9305      	str	r3, [sp, #20]
 800d970:	4619      	mov	r1, r3
 800d972:	f04f 0c0a 	mov.w	ip, #10
 800d976:	4620      	mov	r0, r4
 800d978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d97c:	3a30      	subs	r2, #48	; 0x30
 800d97e:	2a09      	cmp	r2, #9
 800d980:	d903      	bls.n	800d98a <_vfiprintf_r+0x1ee>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0c5      	beq.n	800d912 <_vfiprintf_r+0x176>
 800d986:	9105      	str	r1, [sp, #20]
 800d988:	e7c3      	b.n	800d912 <_vfiprintf_r+0x176>
 800d98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d98e:	4604      	mov	r4, r0
 800d990:	2301      	movs	r3, #1
 800d992:	e7f0      	b.n	800d976 <_vfiprintf_r+0x1da>
 800d994:	ab03      	add	r3, sp, #12
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	462a      	mov	r2, r5
 800d99a:	4b16      	ldr	r3, [pc, #88]	; (800d9f4 <_vfiprintf_r+0x258>)
 800d99c:	a904      	add	r1, sp, #16
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f3af 8000 	nop.w
 800d9a4:	4607      	mov	r7, r0
 800d9a6:	1c78      	adds	r0, r7, #1
 800d9a8:	d1d6      	bne.n	800d958 <_vfiprintf_r+0x1bc>
 800d9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9ac:	07d9      	lsls	r1, r3, #31
 800d9ae:	d405      	bmi.n	800d9bc <_vfiprintf_r+0x220>
 800d9b0:	89ab      	ldrh	r3, [r5, #12]
 800d9b2:	059a      	lsls	r2, r3, #22
 800d9b4:	d402      	bmi.n	800d9bc <_vfiprintf_r+0x220>
 800d9b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9b8:	f7ff fa8a 	bl	800ced0 <__retarget_lock_release_recursive>
 800d9bc:	89ab      	ldrh	r3, [r5, #12]
 800d9be:	065b      	lsls	r3, r3, #25
 800d9c0:	f53f af12 	bmi.w	800d7e8 <_vfiprintf_r+0x4c>
 800d9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9c6:	e711      	b.n	800d7ec <_vfiprintf_r+0x50>
 800d9c8:	ab03      	add	r3, sp, #12
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	462a      	mov	r2, r5
 800d9ce:	4b09      	ldr	r3, [pc, #36]	; (800d9f4 <_vfiprintf_r+0x258>)
 800d9d0:	a904      	add	r1, sp, #16
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f000 f880 	bl	800dad8 <_printf_i>
 800d9d8:	e7e4      	b.n	800d9a4 <_vfiprintf_r+0x208>
 800d9da:	bf00      	nop
 800d9dc:	0800e2f0 	.word	0x0800e2f0
 800d9e0:	0800e310 	.word	0x0800e310
 800d9e4:	0800e2d0 	.word	0x0800e2d0
 800d9e8:	0800e334 	.word	0x0800e334
 800d9ec:	0800e33e 	.word	0x0800e33e
 800d9f0:	00000000 	.word	0x00000000
 800d9f4:	0800d777 	.word	0x0800d777
 800d9f8:	0800e33a 	.word	0x0800e33a

0800d9fc <_printf_common>:
 800d9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da00:	4616      	mov	r6, r2
 800da02:	4699      	mov	r9, r3
 800da04:	688a      	ldr	r2, [r1, #8]
 800da06:	690b      	ldr	r3, [r1, #16]
 800da08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da0c:	4293      	cmp	r3, r2
 800da0e:	bfb8      	it	lt
 800da10:	4613      	movlt	r3, r2
 800da12:	6033      	str	r3, [r6, #0]
 800da14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da18:	4607      	mov	r7, r0
 800da1a:	460c      	mov	r4, r1
 800da1c:	b10a      	cbz	r2, 800da22 <_printf_common+0x26>
 800da1e:	3301      	adds	r3, #1
 800da20:	6033      	str	r3, [r6, #0]
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	0699      	lsls	r1, r3, #26
 800da26:	bf42      	ittt	mi
 800da28:	6833      	ldrmi	r3, [r6, #0]
 800da2a:	3302      	addmi	r3, #2
 800da2c:	6033      	strmi	r3, [r6, #0]
 800da2e:	6825      	ldr	r5, [r4, #0]
 800da30:	f015 0506 	ands.w	r5, r5, #6
 800da34:	d106      	bne.n	800da44 <_printf_common+0x48>
 800da36:	f104 0a19 	add.w	sl, r4, #25
 800da3a:	68e3      	ldr	r3, [r4, #12]
 800da3c:	6832      	ldr	r2, [r6, #0]
 800da3e:	1a9b      	subs	r3, r3, r2
 800da40:	42ab      	cmp	r3, r5
 800da42:	dc26      	bgt.n	800da92 <_printf_common+0x96>
 800da44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da48:	1e13      	subs	r3, r2, #0
 800da4a:	6822      	ldr	r2, [r4, #0]
 800da4c:	bf18      	it	ne
 800da4e:	2301      	movne	r3, #1
 800da50:	0692      	lsls	r2, r2, #26
 800da52:	d42b      	bmi.n	800daac <_printf_common+0xb0>
 800da54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da58:	4649      	mov	r1, r9
 800da5a:	4638      	mov	r0, r7
 800da5c:	47c0      	blx	r8
 800da5e:	3001      	adds	r0, #1
 800da60:	d01e      	beq.n	800daa0 <_printf_common+0xa4>
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	68e5      	ldr	r5, [r4, #12]
 800da66:	6832      	ldr	r2, [r6, #0]
 800da68:	f003 0306 	and.w	r3, r3, #6
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	bf08      	it	eq
 800da70:	1aad      	subeq	r5, r5, r2
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	6922      	ldr	r2, [r4, #16]
 800da76:	bf0c      	ite	eq
 800da78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da7c:	2500      	movne	r5, #0
 800da7e:	4293      	cmp	r3, r2
 800da80:	bfc4      	itt	gt
 800da82:	1a9b      	subgt	r3, r3, r2
 800da84:	18ed      	addgt	r5, r5, r3
 800da86:	2600      	movs	r6, #0
 800da88:	341a      	adds	r4, #26
 800da8a:	42b5      	cmp	r5, r6
 800da8c:	d11a      	bne.n	800dac4 <_printf_common+0xc8>
 800da8e:	2000      	movs	r0, #0
 800da90:	e008      	b.n	800daa4 <_printf_common+0xa8>
 800da92:	2301      	movs	r3, #1
 800da94:	4652      	mov	r2, sl
 800da96:	4649      	mov	r1, r9
 800da98:	4638      	mov	r0, r7
 800da9a:	47c0      	blx	r8
 800da9c:	3001      	adds	r0, #1
 800da9e:	d103      	bne.n	800daa8 <_printf_common+0xac>
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295
 800daa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa8:	3501      	adds	r5, #1
 800daaa:	e7c6      	b.n	800da3a <_printf_common+0x3e>
 800daac:	18e1      	adds	r1, r4, r3
 800daae:	1c5a      	adds	r2, r3, #1
 800dab0:	2030      	movs	r0, #48	; 0x30
 800dab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dab6:	4422      	add	r2, r4
 800dab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dabc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dac0:	3302      	adds	r3, #2
 800dac2:	e7c7      	b.n	800da54 <_printf_common+0x58>
 800dac4:	2301      	movs	r3, #1
 800dac6:	4622      	mov	r2, r4
 800dac8:	4649      	mov	r1, r9
 800daca:	4638      	mov	r0, r7
 800dacc:	47c0      	blx	r8
 800dace:	3001      	adds	r0, #1
 800dad0:	d0e6      	beq.n	800daa0 <_printf_common+0xa4>
 800dad2:	3601      	adds	r6, #1
 800dad4:	e7d9      	b.n	800da8a <_printf_common+0x8e>
	...

0800dad8 <_printf_i>:
 800dad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dadc:	460c      	mov	r4, r1
 800dade:	4691      	mov	r9, r2
 800dae0:	7e27      	ldrb	r7, [r4, #24]
 800dae2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dae4:	2f78      	cmp	r7, #120	; 0x78
 800dae6:	4680      	mov	r8, r0
 800dae8:	469a      	mov	sl, r3
 800daea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daee:	d807      	bhi.n	800db00 <_printf_i+0x28>
 800daf0:	2f62      	cmp	r7, #98	; 0x62
 800daf2:	d80a      	bhi.n	800db0a <_printf_i+0x32>
 800daf4:	2f00      	cmp	r7, #0
 800daf6:	f000 80d8 	beq.w	800dcaa <_printf_i+0x1d2>
 800dafa:	2f58      	cmp	r7, #88	; 0x58
 800dafc:	f000 80a3 	beq.w	800dc46 <_printf_i+0x16e>
 800db00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db08:	e03a      	b.n	800db80 <_printf_i+0xa8>
 800db0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db0e:	2b15      	cmp	r3, #21
 800db10:	d8f6      	bhi.n	800db00 <_printf_i+0x28>
 800db12:	a001      	add	r0, pc, #4	; (adr r0, 800db18 <_printf_i+0x40>)
 800db14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800db18:	0800db71 	.word	0x0800db71
 800db1c:	0800db85 	.word	0x0800db85
 800db20:	0800db01 	.word	0x0800db01
 800db24:	0800db01 	.word	0x0800db01
 800db28:	0800db01 	.word	0x0800db01
 800db2c:	0800db01 	.word	0x0800db01
 800db30:	0800db85 	.word	0x0800db85
 800db34:	0800db01 	.word	0x0800db01
 800db38:	0800db01 	.word	0x0800db01
 800db3c:	0800db01 	.word	0x0800db01
 800db40:	0800db01 	.word	0x0800db01
 800db44:	0800dc91 	.word	0x0800dc91
 800db48:	0800dbb5 	.word	0x0800dbb5
 800db4c:	0800dc73 	.word	0x0800dc73
 800db50:	0800db01 	.word	0x0800db01
 800db54:	0800db01 	.word	0x0800db01
 800db58:	0800dcb3 	.word	0x0800dcb3
 800db5c:	0800db01 	.word	0x0800db01
 800db60:	0800dbb5 	.word	0x0800dbb5
 800db64:	0800db01 	.word	0x0800db01
 800db68:	0800db01 	.word	0x0800db01
 800db6c:	0800dc7b 	.word	0x0800dc7b
 800db70:	680b      	ldr	r3, [r1, #0]
 800db72:	1d1a      	adds	r2, r3, #4
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	600a      	str	r2, [r1, #0]
 800db78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db80:	2301      	movs	r3, #1
 800db82:	e0a3      	b.n	800dccc <_printf_i+0x1f4>
 800db84:	6825      	ldr	r5, [r4, #0]
 800db86:	6808      	ldr	r0, [r1, #0]
 800db88:	062e      	lsls	r6, r5, #24
 800db8a:	f100 0304 	add.w	r3, r0, #4
 800db8e:	d50a      	bpl.n	800dba6 <_printf_i+0xce>
 800db90:	6805      	ldr	r5, [r0, #0]
 800db92:	600b      	str	r3, [r1, #0]
 800db94:	2d00      	cmp	r5, #0
 800db96:	da03      	bge.n	800dba0 <_printf_i+0xc8>
 800db98:	232d      	movs	r3, #45	; 0x2d
 800db9a:	426d      	negs	r5, r5
 800db9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba0:	485e      	ldr	r0, [pc, #376]	; (800dd1c <_printf_i+0x244>)
 800dba2:	230a      	movs	r3, #10
 800dba4:	e019      	b.n	800dbda <_printf_i+0x102>
 800dba6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dbaa:	6805      	ldr	r5, [r0, #0]
 800dbac:	600b      	str	r3, [r1, #0]
 800dbae:	bf18      	it	ne
 800dbb0:	b22d      	sxthne	r5, r5
 800dbb2:	e7ef      	b.n	800db94 <_printf_i+0xbc>
 800dbb4:	680b      	ldr	r3, [r1, #0]
 800dbb6:	6825      	ldr	r5, [r4, #0]
 800dbb8:	1d18      	adds	r0, r3, #4
 800dbba:	6008      	str	r0, [r1, #0]
 800dbbc:	0628      	lsls	r0, r5, #24
 800dbbe:	d501      	bpl.n	800dbc4 <_printf_i+0xec>
 800dbc0:	681d      	ldr	r5, [r3, #0]
 800dbc2:	e002      	b.n	800dbca <_printf_i+0xf2>
 800dbc4:	0669      	lsls	r1, r5, #25
 800dbc6:	d5fb      	bpl.n	800dbc0 <_printf_i+0xe8>
 800dbc8:	881d      	ldrh	r5, [r3, #0]
 800dbca:	4854      	ldr	r0, [pc, #336]	; (800dd1c <_printf_i+0x244>)
 800dbcc:	2f6f      	cmp	r7, #111	; 0x6f
 800dbce:	bf0c      	ite	eq
 800dbd0:	2308      	moveq	r3, #8
 800dbd2:	230a      	movne	r3, #10
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbda:	6866      	ldr	r6, [r4, #4]
 800dbdc:	60a6      	str	r6, [r4, #8]
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	bfa2      	ittt	ge
 800dbe2:	6821      	ldrge	r1, [r4, #0]
 800dbe4:	f021 0104 	bicge.w	r1, r1, #4
 800dbe8:	6021      	strge	r1, [r4, #0]
 800dbea:	b90d      	cbnz	r5, 800dbf0 <_printf_i+0x118>
 800dbec:	2e00      	cmp	r6, #0
 800dbee:	d04d      	beq.n	800dc8c <_printf_i+0x1b4>
 800dbf0:	4616      	mov	r6, r2
 800dbf2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbf6:	fb03 5711 	mls	r7, r3, r1, r5
 800dbfa:	5dc7      	ldrb	r7, [r0, r7]
 800dbfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dc00:	462f      	mov	r7, r5
 800dc02:	42bb      	cmp	r3, r7
 800dc04:	460d      	mov	r5, r1
 800dc06:	d9f4      	bls.n	800dbf2 <_printf_i+0x11a>
 800dc08:	2b08      	cmp	r3, #8
 800dc0a:	d10b      	bne.n	800dc24 <_printf_i+0x14c>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	07df      	lsls	r7, r3, #31
 800dc10:	d508      	bpl.n	800dc24 <_printf_i+0x14c>
 800dc12:	6923      	ldr	r3, [r4, #16]
 800dc14:	6861      	ldr	r1, [r4, #4]
 800dc16:	4299      	cmp	r1, r3
 800dc18:	bfde      	ittt	le
 800dc1a:	2330      	movle	r3, #48	; 0x30
 800dc1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dc20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dc24:	1b92      	subs	r2, r2, r6
 800dc26:	6122      	str	r2, [r4, #16]
 800dc28:	f8cd a000 	str.w	sl, [sp]
 800dc2c:	464b      	mov	r3, r9
 800dc2e:	aa03      	add	r2, sp, #12
 800dc30:	4621      	mov	r1, r4
 800dc32:	4640      	mov	r0, r8
 800dc34:	f7ff fee2 	bl	800d9fc <_printf_common>
 800dc38:	3001      	adds	r0, #1
 800dc3a:	d14c      	bne.n	800dcd6 <_printf_i+0x1fe>
 800dc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc40:	b004      	add	sp, #16
 800dc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc46:	4835      	ldr	r0, [pc, #212]	; (800dd1c <_printf_i+0x244>)
 800dc48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	680e      	ldr	r6, [r1, #0]
 800dc50:	061f      	lsls	r7, r3, #24
 800dc52:	f856 5b04 	ldr.w	r5, [r6], #4
 800dc56:	600e      	str	r6, [r1, #0]
 800dc58:	d514      	bpl.n	800dc84 <_printf_i+0x1ac>
 800dc5a:	07d9      	lsls	r1, r3, #31
 800dc5c:	bf44      	itt	mi
 800dc5e:	f043 0320 	orrmi.w	r3, r3, #32
 800dc62:	6023      	strmi	r3, [r4, #0]
 800dc64:	b91d      	cbnz	r5, 800dc6e <_printf_i+0x196>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	f023 0320 	bic.w	r3, r3, #32
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	2310      	movs	r3, #16
 800dc70:	e7b0      	b.n	800dbd4 <_printf_i+0xfc>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	f043 0320 	orr.w	r3, r3, #32
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	2378      	movs	r3, #120	; 0x78
 800dc7c:	4828      	ldr	r0, [pc, #160]	; (800dd20 <_printf_i+0x248>)
 800dc7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc82:	e7e3      	b.n	800dc4c <_printf_i+0x174>
 800dc84:	065e      	lsls	r6, r3, #25
 800dc86:	bf48      	it	mi
 800dc88:	b2ad      	uxthmi	r5, r5
 800dc8a:	e7e6      	b.n	800dc5a <_printf_i+0x182>
 800dc8c:	4616      	mov	r6, r2
 800dc8e:	e7bb      	b.n	800dc08 <_printf_i+0x130>
 800dc90:	680b      	ldr	r3, [r1, #0]
 800dc92:	6826      	ldr	r6, [r4, #0]
 800dc94:	6960      	ldr	r0, [r4, #20]
 800dc96:	1d1d      	adds	r5, r3, #4
 800dc98:	600d      	str	r5, [r1, #0]
 800dc9a:	0635      	lsls	r5, r6, #24
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	d501      	bpl.n	800dca4 <_printf_i+0x1cc>
 800dca0:	6018      	str	r0, [r3, #0]
 800dca2:	e002      	b.n	800dcaa <_printf_i+0x1d2>
 800dca4:	0671      	lsls	r1, r6, #25
 800dca6:	d5fb      	bpl.n	800dca0 <_printf_i+0x1c8>
 800dca8:	8018      	strh	r0, [r3, #0]
 800dcaa:	2300      	movs	r3, #0
 800dcac:	6123      	str	r3, [r4, #16]
 800dcae:	4616      	mov	r6, r2
 800dcb0:	e7ba      	b.n	800dc28 <_printf_i+0x150>
 800dcb2:	680b      	ldr	r3, [r1, #0]
 800dcb4:	1d1a      	adds	r2, r3, #4
 800dcb6:	600a      	str	r2, [r1, #0]
 800dcb8:	681e      	ldr	r6, [r3, #0]
 800dcba:	6862      	ldr	r2, [r4, #4]
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f7f2 fa8e 	bl	80001e0 <memchr>
 800dcc4:	b108      	cbz	r0, 800dcca <_printf_i+0x1f2>
 800dcc6:	1b80      	subs	r0, r0, r6
 800dcc8:	6060      	str	r0, [r4, #4]
 800dcca:	6863      	ldr	r3, [r4, #4]
 800dccc:	6123      	str	r3, [r4, #16]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd4:	e7a8      	b.n	800dc28 <_printf_i+0x150>
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	4632      	mov	r2, r6
 800dcda:	4649      	mov	r1, r9
 800dcdc:	4640      	mov	r0, r8
 800dcde:	47d0      	blx	sl
 800dce0:	3001      	adds	r0, #1
 800dce2:	d0ab      	beq.n	800dc3c <_printf_i+0x164>
 800dce4:	6823      	ldr	r3, [r4, #0]
 800dce6:	079b      	lsls	r3, r3, #30
 800dce8:	d413      	bmi.n	800dd12 <_printf_i+0x23a>
 800dcea:	68e0      	ldr	r0, [r4, #12]
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	4298      	cmp	r0, r3
 800dcf0:	bfb8      	it	lt
 800dcf2:	4618      	movlt	r0, r3
 800dcf4:	e7a4      	b.n	800dc40 <_printf_i+0x168>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	47d0      	blx	sl
 800dd00:	3001      	adds	r0, #1
 800dd02:	d09b      	beq.n	800dc3c <_printf_i+0x164>
 800dd04:	3501      	adds	r5, #1
 800dd06:	68e3      	ldr	r3, [r4, #12]
 800dd08:	9903      	ldr	r1, [sp, #12]
 800dd0a:	1a5b      	subs	r3, r3, r1
 800dd0c:	42ab      	cmp	r3, r5
 800dd0e:	dcf2      	bgt.n	800dcf6 <_printf_i+0x21e>
 800dd10:	e7eb      	b.n	800dcea <_printf_i+0x212>
 800dd12:	2500      	movs	r5, #0
 800dd14:	f104 0619 	add.w	r6, r4, #25
 800dd18:	e7f5      	b.n	800dd06 <_printf_i+0x22e>
 800dd1a:	bf00      	nop
 800dd1c:	0800e345 	.word	0x0800e345
 800dd20:	0800e356 	.word	0x0800e356

0800dd24 <_read_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	; (800dd44 <_read_r+0x20>)
 800dd28:	4604      	mov	r4, r0
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	2200      	movs	r2, #0
 800dd30:	602a      	str	r2, [r5, #0]
 800dd32:	461a      	mov	r2, r3
 800dd34:	f7f4 fc40 	bl	80025b8 <_read>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_read_r+0x1e>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_read_r+0x1e>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	20004dac 	.word	0x20004dac

0800dd48 <_fstat_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d07      	ldr	r5, [pc, #28]	; (800dd68 <_fstat_r+0x20>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	4611      	mov	r1, r2
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	f7f4 fc74 	bl	8002642 <_fstat>
 800dd5a:	1c43      	adds	r3, r0, #1
 800dd5c:	d102      	bne.n	800dd64 <_fstat_r+0x1c>
 800dd5e:	682b      	ldr	r3, [r5, #0]
 800dd60:	b103      	cbz	r3, 800dd64 <_fstat_r+0x1c>
 800dd62:	6023      	str	r3, [r4, #0]
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	bf00      	nop
 800dd68:	20004dac 	.word	0x20004dac

0800dd6c <_isatty_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d06      	ldr	r5, [pc, #24]	; (800dd88 <_isatty_r+0x1c>)
 800dd70:	2300      	movs	r3, #0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f7f4 fc73 	bl	8002662 <_isatty>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_isatty_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_isatty_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	20004dac 	.word	0x20004dac

0800dd8c <_init>:
 800dd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8e:	bf00      	nop
 800dd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd92:	bc08      	pop	{r3}
 800dd94:	469e      	mov	lr, r3
 800dd96:	4770      	bx	lr

0800dd98 <_fini>:
 800dd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9a:	bf00      	nop
 800dd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd9e:	bc08      	pop	{r3}
 800dda0:	469e      	mov	lr, r3
 800dda2:	4770      	bx	lr
