
BOTerfly_NucleoF411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011414  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  080115b8  080115b8  000215b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ee0  08011ee0  000304a0  2**0
                  CONTENTS
  4 .ARM          00000008  08011ee0  08011ee0  00021ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ee8  08011ee8  000304a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ee8  08011ee8  00021ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011eec  08011eec  00021eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  08011ef0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000486c  200004a0  08012390  000304a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d0c  08012390  00034d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030a49  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000572e  00000000  00000000  00060f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e30  00000000  00000000  00066648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c30  00000000  00000000  00068478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8a3  00000000  00000000  0006a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025611  00000000  00000000  0008894b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aea5a  00000000  00000000  000adf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c9b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009158  00000000  00000000  0015ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801159c 	.word	0x0801159c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	0801159c 	.word	0x0801159c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Ph_Init>:
////	HAL_ADC_Stop(&hadc1);
//	return uiAnalogData;
//}

uint8_t Ph_Init()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	Ph_GetAverageN(Ph_Data, N_NOISE);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	480f      	ldr	r0, [pc, #60]	; (8000f38 <Ph_Init+0x48>)
 8000efa:	f000 f867 	bl	8000fcc <Ph_GetAverageN>
	Ph_Angle = 0;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <Ph_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	Ph_Norma = 0;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <Ph_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

	for (int i = 0 ; i < 4 ; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e00a      	b.n	8000f26 <Ph_Init+0x36>
	{
		Ph_DataNoise[i] = Ph_Data[i];
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <Ph_Init+0x48>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f18:	490a      	ldr	r1, [pc, #40]	; (8000f44 <Ph_Init+0x54>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < 4 ; i++)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	ddf1      	ble.n	8000f10 <Ph_Init+0x20>
	}
	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200044e4 	.word	0x200044e4
 8000f3c:	200045b0 	.word	0x200045b0
 8000f40:	200045ac 	.word	0x200045ac
 8000f44:	2000458c 	.word	0x2000458c

08000f48 <Ph_GetMeasure>:
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
}

uint8_t Ph_GetMeasure(uint32_t value[])
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	Ph_GetAverageN(value, N_MEASURE);
 8000f50:	2101      	movs	r1, #1
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f83a 	bl	8000fcc <Ph_GetAverageN>
	Ph_Treatment(value);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f895 	bl	8001088 <Ph_Treatment>
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Ph_GetValues>:

uint8_t Ph_GetValues(uint32_t value[])
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, Ph_DataDMA, 4);// A APPELLER POUR CHAQUE MESURE
 8000f70:	2204      	movs	r2, #4
 8000f72:	4913      	ldr	r1, [pc, #76]	; (8000fc0 <Ph_GetValues+0x58>)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <Ph_GetValues+0x5c>)
 8000f76:	f002 f8c3 	bl	8003100 <HAL_ADC_Start_DMA>
	for (int i = 0 ; i < 4 ; i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e00a      	b.n	8000f96 <Ph_GetValues+0x2e>
	{
		Ph_Data[i] = Ph_DataDMA[i];
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <Ph_GetValues+0x58>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f88:	490f      	ldr	r1, [pc, #60]	; (8000fc8 <Ph_GetValues+0x60>)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < 4 ; i++)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	ddf1      	ble.n	8000f80 <Ph_GetValues+0x18>
	}
	// Inversion valeurs 0 et 3 :
	uint32_t Ph_Datatempo = Ph_Data[0];
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <Ph_GetValues+0x60>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60bb      	str	r3, [r7, #8]
	Ph_Data[0] = Ph_Data[3];
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <Ph_GetValues+0x60>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <Ph_GetValues+0x60>)
 8000fa8:	6013      	str	r3, [r2, #0]
	Ph_Data[3] = Ph_Datatempo;
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <Ph_GetValues+0x60>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]

	HAL_ADC_Stop_DMA(&hadc1);
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <Ph_GetValues+0x5c>)
 8000fb2:	f002 f995 	bl	80032e0 <HAL_ADC_Stop_DMA>
	//return uiAnalogData;
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000459c 	.word	0x2000459c
 8000fc4:	200045b4 	.word	0x200045b4
 8000fc8:	200044e4 	.word	0x200044e4

08000fcc <Ph_GetAverageN>:

uint8_t Ph_GetAverageN(uint32_t value[], int n)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint32_t Ph_DataTemp[4];
	for (int i = 0 ; i < 4 ; i++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	e00a      	b.n	8000ff2 <Ph_GetAverageN+0x26>
	{
		Ph_DataTemp[i] = 0;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f843 2c20 	str.w	r2, [r3, #-32]
	for (int i = 0 ; i < 4 ; i++)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	3301      	adds	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	ddf1      	ble.n	8000fdc <Ph_GetAverageN+0x10>
	}

	for (int i = 0 ; i < n ; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e022      	b.n	8001044 <Ph_GetAverageN+0x78>
	{
		Ph_GetValues(value);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb2 	bl	8000f68 <Ph_GetValues>
		for (int j = 0 ; j < 4 ; j++)
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	e016      	b.n	8001038 <Ph_GetAverageN+0x6c>
		{
			Ph_DataTemp[j] += value[j];
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001012:	4413      	add	r3, r2
 8001014:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	440b      	add	r3, r1
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	441a      	add	r2, r3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800102c:	440b      	add	r3, r1
 800102e:	f843 2c20 	str.w	r2, [r3, #-32]
		for (int j = 0 ; j < 4 ; j++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b03      	cmp	r3, #3
 800103c:	dde5      	ble.n	800100a <Ph_GetAverageN+0x3e>
	for (int i = 0 ; i < n ; i++)
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	3301      	adds	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	6a3a      	ldr	r2, [r7, #32]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbd8      	blt.n	8000ffe <Ph_GetAverageN+0x32>
		}
	}

	for (int i = 0 ; i < 4 ; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	e011      	b.n	8001076 <Ph_GetAverageN+0xaa>
	{
		value[i] = Ph_DataTemp[i] / n;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800105a:	4413      	add	r3, r2
 800105c:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4403      	add	r3, r0
 800106a:	fbb1 f2f2 	udiv	r2, r1, r2
 800106e:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	3301      	adds	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b03      	cmp	r3, #3
 800107a:	ddea      	ble.n	8001052 <Ph_GetAverageN+0x86>
	}
	//printf("GetAverageN : PH_Data : %lu, %lu, %lu, %lu - /%d\r\n", value[0], value[1], value[2], value[3], n);
	//return uiAnalogData;
	return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <Ph_Treatment>:

uint8_t Ph_Treatment(uint32_t value[])
{
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	b095      	sub	sp, #84	; 0x54
 800108c:	af0a      	add	r7, sp, #40	; 0x28
 800108e:	6178      	str	r0, [r7, #20]
	//char * PrPrintf[50];
	uint32_t Ph_PourPrintf[4] = {value[0], value[1], value[2], value[3]};
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	623b      	str	r3, [r7, #32]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
			{
				value[i] = 0;
			}
		}
	}
	sprintf(Ph_toprint, "S : %04lu %04lu %04lu %04lu V : %04lu %04lu %04lu %04lu E : %04lu %04lu %04lu %04lu ", value[0], value[1], value[2], value[3], Ph_PourPrintf[0], Ph_PourPrintf[1], Ph_PourPrintf[2], Ph_PourPrintf[3], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3304      	adds	r3, #4
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	60f9      	str	r1, [r7, #12]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3308      	adds	r3, #8
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	320c      	adds	r2, #12
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	69b9      	ldr	r1, [r7, #24]
 80010c4:	69f8      	ldr	r0, [r7, #28]
 80010c6:	60b8      	str	r0, [r7, #8]
 80010c8:	6a3c      	ldr	r4, [r7, #32]
 80010ca:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80010cc:	4e10      	ldr	r6, [pc, #64]	; (8001110 <Ph_Treatment+0x88>)
 80010ce:	6836      	ldr	r6, [r6, #0]
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <Ph_Treatment+0x88>)
 80010d2:	6840      	ldr	r0, [r0, #4]
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <Ph_Treatment+0x88>)
 80010d8:	6880      	ldr	r0, [r0, #8]
 80010da:	6038      	str	r0, [r7, #0]
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <Ph_Treatment+0x88>)
 80010de:	68c0      	ldr	r0, [r0, #12]
 80010e0:	9009      	str	r0, [sp, #36]	; 0x24
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	9008      	str	r0, [sp, #32]
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	9007      	str	r0, [sp, #28]
 80010ea:	9606      	str	r6, [sp, #24]
 80010ec:	9505      	str	r5, [sp, #20]
 80010ee:	9404      	str	r4, [sp, #16]
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	9003      	str	r0, [sp, #12]
 80010f4:	9102      	str	r1, [sp, #8]
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4905      	ldr	r1, [pc, #20]	; (8001114 <Ph_Treatment+0x8c>)
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <Ph_Treatment+0x90>)
 8001102:	f00d ffb1 	bl	800f068 <siprintf>
	//return uiAnalogData;
	return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	372c      	adds	r7, #44	; 0x2c
 800110c:	46bd      	mov	sp, r7
 800110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001110:	2000458c 	.word	0x2000458c
 8001114:	080115b8 	.word	0x080115b8
 8001118:	200044f4 	.word	0x200044f4

0800111c <Ph_GetBestAngle>:
	indice++;
	return indice;
}

int Ph_GetBestAngle(uint32_t value[])
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]

	// Ranger par max :
	//uint32_t DataPerMAX[3];
	int iMax = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e010      	b.n	8001154 <Ph_GetBestAngle+0x38>
	{
		if (value[i] > value[iMax])
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	440b      	add	r3, r1
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d901      	bls.n	800114e <Ph_GetBestAngle+0x32>
		{
			iMax = i;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b02      	cmp	r3, #2
 8001158:	ddeb      	ble.n	8001132 <Ph_GetBestAngle+0x16>
		}
	}

	if (iMax == 1) // Si le max est en face :
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d125      	bne.n	80011ac <Ph_GetBestAngle+0x90>
	{
		int dif1 = value[1] - value[0];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	613b      	str	r3, [r7, #16]
		int dif2 = value[1] - value[2];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3308      	adds	r3, #8
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	60fb      	str	r3, [r7, #12]
		int dif = dif1 - dif2;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	60bb      	str	r3, [r7, #8]
		angle = (int)(100 * (float)((float)dif / 4095));
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80011c4 <Ph_GetBestAngle+0xa8>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80011c8 <Ph_GetBestAngle+0xac>
 800119c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a4:	ee17 3a90 	vmov	r3, s15
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e003      	b.n	80011b4 <Ph_GetBestAngle+0x98>
	}
	else
	{
		angle = Ph_GetBestAngleAncien(value);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f80f 	bl	80011d0 <Ph_GetBestAngleAncien>
 80011b2:	61f8      	str	r0, [r7, #28]
	}

	Ph_Angle = angle;
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <Ph_GetBestAngle+0xb0>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	6013      	str	r3, [r2, #0]
	return angle;
 80011ba:	69fb      	ldr	r3, [r7, #28]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	457ff000 	.word	0x457ff000
 80011c8:	42c80000 	.word	0x42c80000
 80011cc:	200045b0 	.word	0x200045b0

080011d0 <Ph_GetBestAngleAncien>:

int Ph_GetBestAngleAncien(uint32_t value[])
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]

	//GetValues(value);

	// RECHERCHE DES 2 PREMIERS MAXIMUMS :

	int imax1 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
	int imax2 = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
	int maxtemp = 0;//////////////////////////////////////////////////////////////////////////PB
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e012      	b.n	8001214 <Ph_GetBestAngleAncien+0x44>
	{
		if (value[i] > maxtemp)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d907      	bls.n	800120e <Ph_GetBestAngleAncien+0x3e>
		{
			maxtemp = value[i];
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	613b      	str	r3, [r7, #16]
			imax1 = i;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	61bb      	str	r3, [r7, #24]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b02      	cmp	r3, #2
 8001218:	dde9      	ble.n	80011ee <Ph_GetBestAngleAncien+0x1e>
		}
	}
	maxtemp = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	e016      	b.n	8001252 <Ph_GetBestAngleAncien+0x82>
	{
		if (i != imax1)
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	429a      	cmp	r2, r3
 800122a:	d00f      	beq.n	800124c <Ph_GetBestAngleAncien+0x7c>
		{
			if (value[i] > maxtemp)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d907      	bls.n	800124c <Ph_GetBestAngleAncien+0x7c>
			{
				maxtemp = value[i];
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
				imax2 = i;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	617b      	str	r3, [r7, #20]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	3301      	adds	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b02      	cmp	r3, #2
 8001256:	dde5      	ble.n	8001224 <Ph_GetBestAngleAncien+0x54>
		}
	}

	// ASSIGNATION DE L'ANGLE :

	if (imax1 + imax2 == 2) // 0 et 2 --> Deux sources lumineuses : gauche et droite
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	4413      	add	r3, r2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d10a      	bne.n	8001278 <Ph_GetBestAngleAncien+0xa8>
	{
		if (imax1 > imax2)
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	429a      	cmp	r2, r3
 8001268:	dd02      	ble.n	8001270 <Ph_GetBestAngleAncien+0xa0>
		{
			angle = 100;
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e059      	b.n	8001324 <Ph_GetBestAngleAncien+0x154>
		}
		else
		{
			angle = -100;
 8001270:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e055      	b.n	8001324 <Ph_GetBestAngleAncien+0x154>
		}
	}
	else // Milieu avec côté (On considère qu'on a le max1 à gauche et le max2 au milieu)
	{
		if (value[imax1] <= value[imax2] + DELTA_A) // Très proches (à 100 points près)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	440b      	add	r3, r1
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3364      	adds	r3, #100	; 0x64
 800128e:	429a      	cmp	r2, r3
 8001290:	d803      	bhi.n	800129a <Ph_GetBestAngleAncien+0xca>
		{//A
			angle = -50;
 8001292:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	e02b      	b.n	80012f2 <Ph_GetBestAngleAncien+0x122>
		}
		else
		{
			if (((4095 - DELTA_B) <= value[imax1]) && (value[imax1] <= 4095))
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f640 7236 	movw	r2, #3894	; 0xf36
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d90b      	bls.n	80012c4 <Ph_GetBestAngleAncien+0xf4>
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ba:	d203      	bcs.n	80012c4 <Ph_GetBestAngleAncien+0xf4>
			{//B
				angle = -100;
 80012bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e016      	b.n	80012f2 <Ph_GetBestAngleAncien+0x122>
			}
			else
			{//C
				angle = -(int)(100 * (value[imax1] - value[imax2]) / value[imax1]);
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	440b      	add	r3, r1
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2264      	movs	r2, #100	; 0x64
 80012dc:	fb02 f203 	mul.w	r2, r2, r3
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	440b      	add	r3, r1
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	425b      	negs	r3, r3
 80012f0:	61fb      	str	r3, [r7, #28]
			}
		}

		// TRANSPOSITION DE L'ANGLE EN FONCTION DES POSITION DES MAX :
		if ((imax1 == 0) || (imax2 == 0)) // Sur la gauche
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <Ph_GetBestAngleAncien+0x12e>
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d108      	bne.n	8001310 <Ph_GetBestAngleAncien+0x140>
		{
			if (imax1 == 1) // Max au milieu
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10f      	bne.n	8001324 <Ph_GetBestAngleAncien+0x154>
			{
				angle = -100 - angle;
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	61fb      	str	r3, [r7, #28]
			if (imax1 == 1) // Max au milieu
 800130e:	e009      	b.n	8001324 <Ph_GetBestAngleAncien+0x154>
				// On est bon
			}
		}
		else // Sur la droite
		{
			if (imax1 == 1) // Max au  milieu
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d103      	bne.n	800131e <Ph_GetBestAngleAncien+0x14e>
			{
				angle = 100 + angle;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3364      	adds	r3, #100	; 0x64
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	e002      	b.n	8001324 <Ph_GetBestAngleAncien+0x154>
			}
			else // Max à droite
			{
				angle = -angle;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	425b      	negs	r3, r3
 8001322:	61fb      	str	r3, [r7, #28]
	//	strcat(toprint, "\r\n");
	//	char tprnt[50];
	//	sprintf(tprnt, " Angle : %d", angle);
	//	strcat(toprint, tprnt);

	return angle;
 8001324:	69fb      	ldr	r3, [r7, #28]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	0000      	movs	r0, r0
 8001334:	0000      	movs	r0, r0
	...

08001338 <Ph_GetNorma>:

int Ph_GetNorma(uint32_t value[])
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	//Ph_Norma = 100 - (0.9*value[0] + 1.2*value[1] + 0.9*value[2])/(3*40.95);
	uint32_t Ph_DataTemp[3];
	for (int i = 0 ; i < 3 ; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	e013      	b.n	800136e <Ph_GetNorma+0x36>
	{
		Ph_DataTemp[i] = value[i] - Ph_DataNoise[i];
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4931      	ldr	r1, [pc, #196]	; (8001418 <Ph_GetNorma+0xe0>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	f107 0120 	add.w	r1, r7, #32
 8001362:	440b      	add	r3, r1
 8001364:	f843 2c18 	str.w	r2, [r3, #-24]
	for (int i = 0 ; i < 3 ; i++)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3301      	adds	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	2b02      	cmp	r3, #2
 8001372:	dde8      	ble.n	8001346 <Ph_GetNorma+0xe>
	}
	int max = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++)
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e014      	b.n	80013a8 <Ph_GetNorma+0x70>
	{
		if (Ph_DataTemp[i] > Ph_DataTemp[max])
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	4413      	add	r3, r2
 8001388:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	f107 0120 	add.w	r1, r7, #32
 8001394:	440b      	add	r3, r1
 8001396:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800139a:	429a      	cmp	r2, r3
 800139c:	d901      	bls.n	80013a2 <Ph_GetNorma+0x6a>
		{
			max = i;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	dde7      	ble.n	800137e <Ph_GetNorma+0x46>
		}
	}
	Ph_Norma = (uint32_t)(4791.6*exp(-0.001*value[max]));
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8ab 	bl	8000514 <__aeabi_ui2d>
 80013be:	a312      	add	r3, pc, #72	; (adr r3, 8001408 <Ph_GetNorma+0xd0>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f920 	bl	8000608 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	ec43 2b17 	vmov	d7, r2, r3
 80013d0:	eeb0 0a47 	vmov.f32	s0, s14
 80013d4:	eef0 0a67 	vmov.f32	s1, s15
 80013d8:	f00f ff0a 	bl	80111f0 <exp>
 80013dc:	ec51 0b10 	vmov	r0, r1, d0
 80013e0:	a30b      	add	r3, pc, #44	; (adr r3, 8001410 <Ph_GetNorma+0xd8>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f90f 	bl	8000608 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbe1 	bl	8000bb8 <__aeabi_d2uiz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <Ph_GetNorma+0xe4>)
 80013fa:	6013      	str	r3, [r2, #0]
	return Ph_Norma;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <Ph_GetNorma+0xe4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	d2f1a9fc 	.word	0xd2f1a9fc
 800140c:	bf50624d 	.word	0xbf50624d
 8001410:	9999999a 	.word	0x9999999a
 8001414:	40b2b799 	.word	0x40b2b799
 8001418:	2000458c 	.word	0x2000458c
 800141c:	200045ac 	.word	0x200045ac

08001420 <RGB_Init_SetTimer>:
 */

#include "BOTterfly-H/rgb_sensor.h"


uint8_t RGB_Init_SetTimer(RGB_struct* rgbSensor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	rgbSensor->Timer_Handle = htim;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	601a      	str	r2, [r3, #0]
	rgbSensor->Timer_Channel = Channel;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	605a      	str	r2, [r3, #4]

	//HAL_TIM_IC_Start_IT(rgbSensor->Timer_Handle, rgbSensor->Timer_Channel);
	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <RGB_Init_SetParamGPIOs>:

uint8_t RGB_Init_SetParamGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutputEnable_GPIOx, uint16_t OutputEnable_GPIO_Pin,
		GPIO_TypeDef* LED_GPIOx, uint16_t LED_GPIO_Pin){
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutputEnable_GPIOx = OutputEnable_GPIOx;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	609a      	str	r2, [r3, #8]
	rgbSensor->OutputEnable_GPIO_Pin = OutputEnable_GPIO_Pin;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	819a      	strh	r2, [r3, #12]
	rgbSensor->LED_GPIOx = LED_GPIOx;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	611a      	str	r2, [r3, #16]
	rgbSensor->LED_GPIO_Pin = LED_GPIO_Pin;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8b3a      	ldrh	r2, [r7, #24]
 800146c:	829a      	strh	r2, [r3, #20]

	return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <RGB_Init_SetOutFreqGPIOs>:

uint8_t RGB_Init_SetOutFreqGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutFreq1_GPIOx, uint16_t OutFreq1_GPIO_Pin,
		GPIO_TypeDef* OutFreq2_GPIOx, uint16_t OutFreq2_GPIO_Pin){
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutFreq1_GPIOx = OutFreq1_GPIOx;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	619a      	str	r2, [r3, #24]
	rgbSensor->OutFreq1_GPIO_Pin = OutFreq1_GPIO_Pin;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	88fa      	ldrh	r2, [r7, #6]
 8001496:	839a      	strh	r2, [r3, #28]
	rgbSensor->OutFreq2_GPIOx = OutFreq2_GPIOx;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	621a      	str	r2, [r3, #32]
	rgbSensor->OutFreq2_GPIO_Pin = OutFreq2_GPIO_Pin;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8b3a      	ldrh	r2, [r7, #24]
 80014a2:	849a      	strh	r2, [r3, #36]	; 0x24

	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <RGB_Init_SetColorFilterGPIOs>:

uint8_t RGB_Init_SetColorFilterGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* ColorFilter1_GPIOx, uint16_t ColorFilter1_GPIO_Pin,
		GPIO_TypeDef* ColorFilter2_GPIOx, uint16_t ColorFilter2_GPIO_Pin){
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
	rgbSensor->ColorFilter1_GPIOx = ColorFilter1_GPIOx;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
	rgbSensor->ColorFilter1_GPIO_Pin = ColorFilter1_GPIO_Pin;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	859a      	strh	r2, [r3, #44]	; 0x2c
	rgbSensor->ColorFilter2_GPIOx = ColorFilter2_GPIOx;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
	rgbSensor->ColorFilter2_GPIO_Pin = ColorFilter2_GPIO_Pin;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8b3a      	ldrh	r2, [r7, #24]
 80014d8:	869a      	strh	r2, [r3, #52]	; 0x34

	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <RGB_Init>:

uint8_t RGB_Init(RGB_struct* rgbSensor){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	rgbSensor->it.flag = 0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rgbSensor->it.isFirstCaptured = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rgbSensor->it.icVal1 = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rgbSensor->it.icVal2 = 0;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rgbSensor->it.difference = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rgbSensor->it.frequency = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	64da      	str	r2, [r3, #76]	; 0x4c

	// OE : Output Enable -> DISABLE
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_SET);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	899b      	ldrh	r3, [r3, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	4619      	mov	r1, r3
 800152c:	f003 f878 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001530:	20c8      	movs	r0, #200	; 0xc8
 8001532:	f001 fd7d 	bl	8003030 <HAL_Delay>

	RGB_SetOFscaling(rgbSensor, RGB_OF_02_RANGE);
 8001536:	2102      	movs	r1, #2
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f889 	bl	8001650 <RGB_SetOFscaling>
	RGB_SetFilter(rgbSensor, RGB_RED);
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f819 	bl	8001578 <RGB_SetFilter>

	// Turn on the LEDs to lights the floor
	HAL_GPIO_WritePin(rgbSensor->LED_GPIOx, rgbSensor->LED_GPIO_Pin, GPIO_PIN_SET);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6918      	ldr	r0, [r3, #16]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8a9b      	ldrh	r3, [r3, #20]
 800154e:	2201      	movs	r2, #1
 8001550:	4619      	mov	r1, r3
 8001552:	f003 f865 	bl	8004620 <HAL_GPIO_WritePin>

	// OE : Output Enable -> ENABLE
	HAL_Delay(200);
 8001556:	20c8      	movs	r0, #200	; 0xc8
 8001558:	f001 fd6a 	bl	8003030 <HAL_Delay>
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_RESET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	899b      	ldrh	r3, [r3, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	f003 f85a 	bl	8004620 <HAL_GPIO_WritePin>

	return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <RGB_SetFilter>:

uint8_t RGB_SetFilter(RGB_struct* rgbSensor, uint8_t color){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

	switch(color)
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d84e      	bhi.n	800162c <RGB_SetFilter+0xb4>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <RGB_SetFilter+0x1c>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015c7 	.word	0x080015c7
 800159c:	080015e9 	.word	0x080015e9
 80015a0:	0800160b 	.word	0x0800160b
	{
	case RGB_RED:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	f003 f836 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	f003 f82e 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 80015c4:	e039      	b.n	800163a <RGB_SetFilter+0xc2>
	case RGB_BLUE:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	f003 f825 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80015de:	2201      	movs	r2, #1
 80015e0:	4619      	mov	r1, r3
 80015e2:	f003 f81d 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 80015e6:	e028      	b.n	800163a <RGB_SetFilter+0xc2>
	case RGB_GREEN:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	f003 f814 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	f003 f80c 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 8001608:	e017      	b.n	800163a <RGB_SetFilter+0xc2>
	case RGB_CLEAR:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001612:	2201      	movs	r2, #1
 8001614:	4619      	mov	r1, r3
 8001616:	f003 f803 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	f002 fffb 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 800162a:	e006      	b.n	800163a <RGB_SetFilter+0xc2>
	default:
		status = RGB_ERROR_FILTER;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setFilter : %d\r\n", status);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <RGB_SetFilter+0xd4>)
 8001636:	f00d fc0f 	bl	800ee58 <iprintf>
	}
	rgbSensor->it.colorFilter = color;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	return status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	08011650 	.word	0x08011650

08001650 <RGB_SetOFscaling>:

uint8_t RGB_SetOFscaling(RGB_struct* rgbSensor, uint8_t scale){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

	switch(scale)
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d03d      	beq.n	80016e2 <RGB_SetOFscaling+0x92>
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	dc4c      	bgt.n	8001704 <RGB_SetOFscaling+0xb4>
 800166a:	2b14      	cmp	r3, #20
 800166c:	d028      	beq.n	80016c0 <RGB_SetOFscaling+0x70>
 800166e:	2b14      	cmp	r3, #20
 8001670:	dc48      	bgt.n	8001704 <RGB_SetOFscaling+0xb4>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <RGB_SetOFscaling+0x2c>
 8001676:	2b02      	cmp	r3, #2
 8001678:	d011      	beq.n	800169e <RGB_SetOFscaling+0x4e>
 800167a:	e043      	b.n	8001704 <RGB_SetOFscaling+0xb4>
	{
	case 0:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6998      	ldr	r0, [r3, #24]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	8b9b      	ldrh	r3, [r3, #28]
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	f002 ffca 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a18      	ldr	r0, [r3, #32]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	f002 ffc2 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 800169c:	e039      	b.n	8001712 <RGB_SetOFscaling+0xc2>
	case 2:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6998      	ldr	r0, [r3, #24]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8b9b      	ldrh	r3, [r3, #28]
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	f002 ffb9 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a18      	ldr	r0, [r3, #32]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016b6:	2201      	movs	r2, #1
 80016b8:	4619      	mov	r1, r3
 80016ba:	f002 ffb1 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 80016be:	e028      	b.n	8001712 <RGB_SetOFscaling+0xc2>
	case 20:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6998      	ldr	r0, [r3, #24]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	8b9b      	ldrh	r3, [r3, #28]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	f002 ffa8 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a18      	ldr	r0, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	f002 ffa0 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 80016e0:	e017      	b.n	8001712 <RGB_SetOFscaling+0xc2>
	case 100:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6998      	ldr	r0, [r3, #24]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	8b9b      	ldrh	r3, [r3, #28]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4619      	mov	r1, r3
 80016ee:	f002 ff97 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a18      	ldr	r0, [r3, #32]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016fa:	2201      	movs	r2, #1
 80016fc:	4619      	mov	r1, r3
 80016fe:	f002 ff8f 	bl	8004620 <HAL_GPIO_WritePin>
		break;
 8001702:	e006      	b.n	8001712 <RGB_SetOFscaling+0xc2>
	default:
		status = RGB_ERROR_OF_SCALING;
 8001704:	2302      	movs	r3, #2
 8001706:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setOFscaling : %d\r\n", status);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4619      	mov	r1, r3
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <RGB_SetOFscaling+0xcc>)
 800170e:	f00d fba3 	bl	800ee58 <iprintf>
	}

	return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	08011670 	.word	0x08011670

08001720 <RGB_IsTheFloorRed>:


uint8_t RGB_IsTheFloorRed(RGB_struct* rgbSensor){
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	uint8_t status = RGB_ERROR_NONE;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]

	rgbSensor->it.difference = rgbSensor->it.icVal2 - rgbSensor->it.icVal1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b29a      	uxth	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	float refClock = RGB_APBCLOCK/(RGB_PRESCALER);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <RGB_IsTheFloorRed+0x18c>)
 8001746:	60bb      	str	r3, [r7, #8]
	rgbSensor->it.frequency = refClock/rgbSensor->it.difference;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001756:	edd7 6a02 	vldr	s13, [r7, #8]
 800175a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	switch(rgbSensor->it.colorFilter)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800176a:	2b02      	cmp	r3, #2
 800176c:	d01c      	beq.n	80017a8 <RGB_IsTheFloorRed+0x88>
 800176e:	2b02      	cmp	r3, #2
 8001770:	dc46      	bgt.n	8001800 <RGB_IsTheFloorRed+0xe0>
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <RGB_IsTheFloorRed+0x5c>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d02c      	beq.n	80017d4 <RGB_IsTheFloorRed+0xb4>
 800177a:	e041      	b.n	8001800 <RGB_IsTheFloorRed+0xe0>
	{
	case RGB_RED:
		rgbSensor->red = (uint16_t)rgbSensor->it.frequency;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001786:	ee17 3a90 	vmov	r3, s15
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	86da      	strh	r2, [r3, #54]	; 0x36
		rgbSensor->it.colorFilter = RGB_GREEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800179e:	4619      	mov	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fee9 	bl	8001578 <RGB_SetFilter>
		break;
 80017a6:	e02e      	b.n	8001806 <RGB_IsTheFloorRed+0xe6>
	case RGB_GREEN:
		rgbSensor->green = (uint16_t)rgbSensor->it.frequency;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b2:	ee17 3a90 	vmov	r3, s15
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	871a      	strh	r2, [r3, #56]	; 0x38
		rgbSensor->it.colorFilter = RGB_BLUE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fed3 	bl	8001578 <RGB_SetFilter>
		break;
 80017d2:	e018      	b.n	8001806 <RGB_IsTheFloorRed+0xe6>
	case RGB_BLUE:
		rgbSensor->blue = (uint16_t)rgbSensor->it.frequency;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	875a      	strh	r2, [r3, #58]	; 0x3a
		rgbSensor->it.colorFilter = RGB_RED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff febd 	bl	8001578 <RGB_SetFilter>
		break;
 80017fe:	e002      	b.n	8001806 <RGB_IsTheFloorRed+0xe6>
	default:
		printf("RGB - Error setFilter\r\n");
 8001800:	482b      	ldr	r0, [pc, #172]	; (80018b0 <RGB_IsTheFloorRed+0x190>)
 8001802:	f00d fbaf 	bl	800ef64 <puts>
	}
	if((rgbSensor->red >= (1.5*rgbSensor->green)) & (rgbSensor->red >= (1.5*rgbSensor->blue))){
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe92 	bl	8000534 <__aeabi_i2d>
 8001810:	4604      	mov	r4, r0
 8001812:	460d      	mov	r5, r1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe8b 	bl	8000534 <__aeabi_i2d>
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <RGB_IsTheFloorRed+0x194>)
 8001824:	f7fe fef0 	bl	8000608 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	2101      	movs	r1, #1
 800182e:	460e      	mov	r6, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7ff f96e 	bl	8000b14 <__aeabi_dcmpge>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <RGB_IsTheFloorRed+0x122>
 800183e:	2300      	movs	r3, #0
 8001840:	461e      	mov	r6, r3
 8001842:	b2f6      	uxtb	r6, r6
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe73 	bl	8000534 <__aeabi_i2d>
 800184e:	4604      	mov	r4, r0
 8001850:	460d      	mov	r5, r1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe6c 	bl	8000534 <__aeabi_i2d>
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <RGB_IsTheFloorRed+0x194>)
 8001862:	f7fe fed1 	bl	8000608 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	2101      	movs	r1, #1
 800186c:	4688      	mov	r8, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7ff f94f 	bl	8000b14 <__aeabi_dcmpge>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <RGB_IsTheFloorRed+0x160>
 800187c:	2300      	movs	r3, #0
 800187e:	4698      	mov	r8, r3
 8001880:	fa5f f388 	uxtb.w	r3, r8
 8001884:	4033      	ands	r3, r6
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <RGB_IsTheFloorRed+0x176>
		rgbSensor->isFloorRed = 1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001894:	e003      	b.n	800189e <RGB_IsTheFloorRed+0x17e>
	}else{
		rgbSensor->isFloorRed = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018aa:	bf00      	nop
 80018ac:	49742400 	.word	0x49742400
 80018b0:	08011690 	.word	0x08011690
 80018b4:	3ff80000 	.word	0x3ff80000

080018b8 <TOF_Init_SetI2C>:
 *      Author: jerem
 */

#include "BOTterfly-H/tof_sensor.h"

uint8_t TOF_Init_SetI2C(VL53L0X_Dev_t* device, I2C_HandleTypeDef *hi2c, uint8_t I2cAddr){
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	4613      	mov	r3, r2
 80018c4:	71fb      	strb	r3, [r7, #7]
	device->I2cHandle = hi2c;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	device->I2cAddr = I2cAddr;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173

	return 0;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <TOF_Init_SetGPIOs>:

uint8_t TOF_Init_SetGPIOs(VL53L0X_Dev_t* device, GPIO_TypeDef* XSHUT_GPIOx, uint16_t XSHUT_GPIO_Pin,
		GPIO_TypeDef* EXTI_GPIOx, uint16_t EXTI_GPIO_Pin){
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80fb      	strh	r3, [r7, #6]
	device->XSHUT_GPIOx = XSHUT_GPIOx;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	device->XSHUT_GPIO_Pin = XSHUT_GPIO_Pin;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	device->EXTI_GPIOx = EXTI_GPIOx;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	device->EXTI_GPIO_Pin = EXTI_GPIO_Pin;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8b3a      	ldrh	r2, [r7, #24]
 8001910:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170

	return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <TOF_Init_SetEXTI>:

uint8_t TOF_Init_SetEXTI(VL53L0X_Dev_t* device, IRQn_Type EXTIx_IRQn){
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	70fb      	strb	r3, [r7, #3]
	device->EXTI_IRQn = EXTIx_IRQn;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172

	return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TOF_Init>:

uint8_t TOF_Init(VL53L0X_Dev_t* device){
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<TOF_nbOfSensor; i++){
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e021      	b.n	8001996 <TOF_Init+0x52>
		device[i].I2cDevAddr = 0x52;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	2252      	movs	r2, #82	; 0x52
 8001962:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
		device[i].comms_speed_khz = 400;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001978:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
		device[i].comms_type = 1;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b02      	cmp	r3, #2
 800199a:	ddda      	ble.n	8001952 <TOF_Init+0xe>
	}

	// Disable the interruptions
	// Useful for the INITIALIZATION FLOW before changing the address of each device
	for(int i=0; i<TOF_nbOfSensor; i++){
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	e024      	b.n	80019ec <TOF_Init+0xa8>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_RESET);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	f002 fe29 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(device[i].EXTI_IRQn);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	f993 3172 	ldrsb.w	r3, [r3, #370]	; 0x172
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 f8ab 	bl	8003b3c <HAL_NVIC_DisableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	ddd7      	ble.n	80019a2 <TOF_Init+0x5e>
	}
	HAL_Delay(100);
 80019f2:	2064      	movs	r0, #100	; 0x64
 80019f4:	f001 fb1c 	bl	8003030 <HAL_Delay>

	// INITIALIZATION FLOW
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e046      	b.n	8001a8c <TOF_Init+0x148>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_SET);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8001a22:	2201      	movs	r2, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	f002 fdfb 	bl	8004620 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a2a:	2064      	movs	r0, #100	; 0x64
 8001a2c:	f001 fb00 	bl	8003030 <HAL_Delay>
		TOF_InitializationFlow(&device[i], (uint8_t)device[i].EXTI_GPIOx->ODR);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	18d0      	adds	r0, r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	f000 f824 	bl	8001aa2 <TOF_InitializationFlow>
		TOF_SetDeviceAddr(&device[i], device[i].I2cAddr);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	18d0      	adds	r0, r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f000 f8d8 	bl	8001c30 <TOF_SetDeviceAddr>
		HAL_Delay(100);
 8001a80:	2064      	movs	r0, #100	; 0x64
 8001a82:	f001 fad5 	bl	8003030 <HAL_Delay>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	ddb5      	ble.n	80019fe <TOF_Init+0xba>

	// Enable the Interruptions
//	for(int i=0; i<TOF_nbOfSensor; i++){
//		HAL_NVIC_EnableIRQ(device[i].EXTI_IRQn);
//	}
	HAL_Delay(100);
 8001a92:	2064      	movs	r0, #100	; 0x64
 8001a94:	f001 facc 	bl	8003030 <HAL_Delay>

	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <TOF_InitializationFlow>:

uint8_t TOF_InitializationFlow(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
	// Device initialization (~ 40ms)
	TOF_Initialization(device);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f81a 	bl	8001ae8 <TOF_Initialization>
	HAL_Delay(50);
 8001ab4:	2032      	movs	r0, #50	; 0x32
 8001ab6:	f001 fabb 	bl	8003030 <HAL_Delay>

	// Calibration data loading (~ 1ms)
	TOF_Calibration(device);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f842 	bl	8001b44 <TOF_Calibration>
	HAL_Delay(5);
 8001ac0:	2005      	movs	r0, #5
 8001ac2:	f001 fab5 	bl	8003030 <HAL_Delay>

	// System settings (~ 1ms)
	TOF_Settings(device, interruptPin);
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f87a 	bl	8001bc4 <TOF_Settings>
	HAL_Delay(5);
 8001ad0:	2005      	movs	r0, #5
 8001ad2:	f001 faad 	bl	8003030 <HAL_Delay>

	VL53L0X_StartMeasurement(device);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f006 fd78 	bl	80085cc <VL53L0X_StartMeasurement>

	return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <TOF_Initialization>:

uint8_t TOF_Initialization(VL53L0X_Dev_t* device){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if((status = VL53L0X_DataInit(device)) != VL53L0X_ERROR_NONE){
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f005 fd0d 	bl	8007514 <VL53L0X_DataInit>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <TOF_Initialization+0x2a>
		printf("ToF - Error DataInit : %d\r\n", status);
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <TOF_Initialization+0x54>)
 8001b0a:	f00d f9a5 	bl	800ee58 <iprintf>
		return 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <TOF_Initialization+0x4a>
	}

	// StaticInit
	if((status = VL53L0X_StaticInit(device)) != VL53L0X_ERROR_NONE){
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f005 fe62 	bl	80077dc <VL53L0X_StaticInit>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <TOF_Initialization+0x48>
		printf("ToF - Error StaticInit : %d\r\n", status);
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <TOF_Initialization+0x58>)
 8001b28:	f00d f996 	bl	800ee58 <iprintf>
		return 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <TOF_Initialization+0x4a>
	}

	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	080116a8 	.word	0x080116a8
 8001b40:	080116c4 	.word	0x080116c4

08001b44 <TOF_Calibration>:
// SPADs calibration
static uint32_t *refSpadCount; static uint8_t *isApertureSpads;
// Temperature calibration
static uint8_t *pVhvSettings; static uint8_t *pPhaseCal;

uint8_t TOF_Calibration(VL53L0X_Dev_t* device){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]

	// SPADs calibration (~ 10ms)
	if((status = VL53L0X_PerformRefSpadManagement(device, refSpadCount, isApertureSpads)) != VL53L0X_ERROR_NONE){
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <TOF_Calibration+0x68>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <TOF_Calibration+0x6c>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f007 f948 	bl	8008df0 <VL53L0X_PerformRefSpadManagement>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <TOF_Calibration+0x34>
		printf("ToF - Error SPADs calibration : %d\r\n", status);
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <TOF_Calibration+0x70>)
 8001b70:	f00d f972 	bl	800ee58 <iprintf>
		return 1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e014      	b.n	8001ba2 <TOF_Calibration+0x5e>
	}

	// Temperature calibration (~ 40ms)
	if((status = VL53L0X_PerformRefCalibration(device, pVhvSettings, pPhaseCal)) != VL53L0X_ERROR_NONE){
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <TOF_Calibration+0x74>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <TOF_Calibration+0x78>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f006 fca6 	bl	80084d4 <VL53L0X_PerformRefCalibration>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <TOF_Calibration+0x5c>
		printf("ToF - Error Temperature calibration : %d\r\n", status);
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	4619      	mov	r1, r3
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <TOF_Calibration+0x7c>)
 8001b98:	f00d f95e 	bl	800ee58 <iprintf>
		return 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <TOF_Calibration+0x5e>
	}

	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200004bc 	.word	0x200004bc
 8001bb0:	200004c0 	.word	0x200004c0
 8001bb4:	080116e4 	.word	0x080116e4
 8001bb8:	200004c4 	.word	0x200004c4
 8001bbc:	200004c8 	.word	0x200004c8
 8001bc0:	0801170c 	.word	0x0801170c

08001bc4 <TOF_Settings>:

uint8_t TOF_Settings(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]

	// Device mode
	if((status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING)) != VL53L0X_ERROR_NONE){
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f006 f812 	bl	8007c00 <VL53L0X_SetDeviceMode>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <TOF_Settings+0x30>
		printf("ToF - Error SetDeviceMode : %d\r\n", status);
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	4619      	mov	r1, r3
 8001bea:	480f      	ldr	r0, [pc, #60]	; (8001c28 <TOF_Settings+0x64>)
 8001bec:	f00d f934 	bl	800ee58 <iprintf>
		return 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e015      	b.n	8001c20 <TOF_Settings+0x5c>
	}

	// Set GPIO : Pour interruptions
	status = VL53L0X_SetGpioConfig(device, interruptPin, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 8001bf4:	78f9      	ldrb	r1, [r7, #3]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f006 ff3a 	bl	8008a78 <VL53L0X_SetGpioConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
	if(status != VL53L0X_ERROR_NONE){
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <TOF_Settings+0x5a>
		printf("ToF - Error SetGPIO : %d %d\r\n",status,interruptPin);
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <TOF_Settings+0x68>)
 8001c16:	f00d f91f 	bl	800ee58 <iprintf>
		return 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <TOF_Settings+0x5c>
	}

	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev, InterMeasurementPeriodMilliSeconds)

	return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	08011738 	.word	0x08011738
 8001c2c:	0801175c 	.word	0x0801175c

08001c30 <TOF_SetDeviceAddr>:

uint8_t TOF_SetDeviceAddr(VL53L0X_Dev_t* device, uint8_t new_addr){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

	if((status = VL53L0X_SetDeviceAddress(device, new_addr)) != VL53L0X_ERROR_NONE){
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f005 fc4c 	bl	80074e2 <VL53L0X_SetDeviceAddress>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <TOF_SetDeviceAddr+0x32>
		printf("ToF - Error SetDeviceAddress : %d\r\n", status);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4806      	ldr	r0, [pc, #24]	; (8001c74 <TOF_SetDeviceAddr+0x44>)
 8001c5a:	f00d f8fd 	bl	800ee58 <iprintf>
		return 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e004      	b.n	8001c6c <TOF_SetDeviceAddr+0x3c>
	}
	device->I2cDevAddr = new_addr;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0801177c 	.word	0x0801177c

08001c78 <TOF_SetDistance_mm>:
	printf("ProductRevisionMinor : %d\r\n", deviceInfo->ProductRevisionMinor);

	return 0;
}

uint8_t TOF_SetDistance_mm(VL53L0X_Dev_t* device){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
	uint32_t InterruptMask = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

	VL53L0X_GetRangingMeasurementData(device, &VL53L0X_RangingMeasurementData); // ~ 460us
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f006 fda0 	bl	80087d0 <VL53L0X_GetRangingMeasurementData>
	device->rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter; // ~ 0.25us
 8001c90:	8a3a      	ldrh	r2, [r7, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	VL53L0X_ClearInterruptMask(device, InterruptMask); // ~ 295us
 8001c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f007 f846 	bl	8008d2c <VL53L0X_ClearInterruptMask>

	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cc0:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <MX_ADC1_Init+0xf0>)
 8001cc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cee:	4a2c      	ldr	r2, [pc, #176]	; (8001da0 <MX_ADC1_Init+0xf4>)
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d0c:	4822      	ldr	r0, [pc, #136]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d0e:	f001 f9b3 	bl	8003078 <HAL_ADC_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d18:	f000 fde8 	bl	80028ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481a      	ldr	r0, [pc, #104]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d2e:	f001 fb4f 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d38:	f000 fdd8 	bl	80028ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	4813      	ldr	r0, [pc, #76]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d4a:	f001 fb41 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d54:	f000 fdca 	bl	80028ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d66:	f001 fb33 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001d70:	f000 fdbc 	bl	80028ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d74:	2306      	movs	r3, #6
 8001d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_ADC1_Init+0xec>)
 8001d82:	f001 fb25 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001d8c:	f000 fdae 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200045b4 	.word	0x200045b4
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	0f000001 	.word	0x0f000001

08001da4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <HAL_ADC_MspInit+0xdc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d157      	bne.n	8001e76 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_ADC_MspInit+0xe0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_ADC_MspInit+0xe0>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_ADC_MspInit+0xe0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_ADC_MspInit+0xe0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_ADC_MspInit+0xe0>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_ADC_MspInit+0xe0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8001dfe:	2353      	movs	r3, #83	; 0x53
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e02:	2303      	movs	r3, #3
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	481d      	ldr	r0, [pc, #116]	; (8001e88 <HAL_ADC_MspInit+0xe4>)
 8001e12:	f002 fa81 	bl	8004318 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_ADC_MspInit+0xec>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e5a:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e5c:	f001 fe7c 	bl	8003b58 <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e66:	f000 fd41 	bl	80028ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_ADC_MspInit+0xe8>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40012000 	.word	0x40012000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	200045fc 	.word	0x200045fc
 8001e90:	40026410 	.word	0x40026410

08001e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_DMA_Init+0x3c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <MX_DMA_Init+0x3c>)
 8001ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_DMA_Init+0x3c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	2038      	movs	r0, #56	; 0x38
 8001ebc:	f001 fe14 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ec0:	2038      	movs	r0, #56	; 0x38
 8001ec2:	f001 fe2d 	bl	8003b20 <HAL_NVIC_EnableIRQ>

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <vApplicationGetIdleTaskMemory+0x30>)
 8001eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	200004cc 	.word	0x200004cc
 8001f04:	20000580 	.word	0x20000580

08001f08 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_FREERTOS_Init+0x30>)
 8001f10:	1d3c      	adds	r4, r7, #4
 8001f12:	461d      	mov	r5, r3
 8001f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00a f83d 	bl	800bfa4 <osThreadCreate>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <MX_FREERTOS_Init+0x34>)
 8001f2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}
 8001f38:	0801185c 	.word	0x0801185c
 8001f3c:	2000465c 	.word	0x2000465c

08001f40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f00a f877 	bl	800c03c <osDelay>
 8001f4e:	e7fb      	b.n	8001f48 <StartDefaultTask+0x8>

08001f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <MX_GPIO_Init+0x190>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT1_Pin|TOF_XSHUT0_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001fdc:	4841      	ldr	r0, [pc, #260]	; (80020e4 <MX_GPIO_Init+0x194>)
 8001fde:	f002 fb1f 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_LED_Pin|RGB_OE_Pin|RGB_S3_Pin|RGB_S2_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001fe8:	483f      	ldr	r0, [pc, #252]	; (80020e8 <MX_GPIO_Init+0x198>)
 8001fea:	f002 fb19 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_S1_Pin|RGB_S0_Pin|TOF_XSHUT2_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001ff4:	483d      	ldr	r0, [pc, #244]	; (80020ec <MX_GPIO_Init+0x19c>)
 8001ff6:	f002 fb13 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002000:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4836      	ldr	r0, [pc, #216]	; (80020ec <MX_GPIO_Init+0x19c>)
 8002012:	f002 f981 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT1_Pin|TOF_XSHUT0_Pin;
 8002016:	f44f 7348 	mov.w	r3, #800	; 0x320
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <MX_GPIO_Init+0x194>)
 8002030:	f002 f972 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_GPIOI1_Pin|TOF_GPIOI2_Pin;
 8002034:	2303      	movs	r3, #3
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002038:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4827      	ldr	r0, [pc, #156]	; (80020e8 <MX_GPIO_Init+0x198>)
 800204a:	f002 f965 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RGB_LED_Pin|RGB_OE_Pin|RGB_S3_Pin|RGB_S2_Pin;
 800204e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4820      	ldr	r0, [pc, #128]	; (80020e8 <MX_GPIO_Init+0x198>)
 8002068:	f002 f956 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_S1_Pin|RGB_S0_Pin|TOF_XSHUT2_Pin;
 800206c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4819      	ldr	r0, [pc, #100]	; (80020ec <MX_GPIO_Init+0x19c>)
 8002086:	f002 f947 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIOI0_Pin;
 800208a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002090:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIOI0_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <MX_GPIO_Init+0x194>)
 80020a2:	f002 f939 	bl	8004318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2105      	movs	r1, #5
 80020aa:	2006      	movs	r0, #6
 80020ac:	f001 fd1c 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020b0:	2006      	movs	r0, #6
 80020b2:	f001 fd35 	bl	8003b20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2105      	movs	r1, #5
 80020ba:	2007      	movs	r0, #7
 80020bc:	f001 fd14 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020c0:	2007      	movs	r0, #7
 80020c2:	f001 fd2d 	bl	8003b20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2105      	movs	r1, #5
 80020ca:	2028      	movs	r0, #40	; 0x28
 80020cc:	f001 fd0c 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020d0:	2028      	movs	r0, #40	; 0x28
 80020d2:	f001 fd25 	bl	8003b20 <HAL_NVIC_EnableIRQ>

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020400 	.word	0x40020400
 80020ec:	40020800 	.word	0x40020800

080020f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_I2C1_Init+0x50>)
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <MX_I2C1_Init+0x54>)
 80020f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_I2C1_Init+0x50>)
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <MX_I2C1_Init+0x58>)
 80020fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_I2C1_Init+0x50>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_I2C1_Init+0x50>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_I2C1_Init+0x50>)
 800210e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <MX_I2C1_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_I2C1_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <MX_I2C1_Init+0x50>)
 800212e:	f002 faa9 	bl	8004684 <HAL_I2C_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002138:	f000 fbd8 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20004660 	.word	0x20004660
 8002144:	40005400 	.word	0x40005400
 8002148:	00061a80 	.word	0x00061a80

0800214c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_I2C_MspInit+0x84>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12c      	bne.n	80021c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_I2C_MspInit+0x88>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_I2C_MspInit+0x88>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_I2C_MspInit+0x88>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002190:	2312      	movs	r3, #18
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800219c:	2304      	movs	r3, #4
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	480c      	ldr	r0, [pc, #48]	; (80021d8 <HAL_I2C_MspInit+0x8c>)
 80021a8:	f002 f8b6 	bl	8004318 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_I2C_MspInit+0x88>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_I2C_MspInit+0x88>)
 80021b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_I2C_MspInit+0x88>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40005400 	.word	0x40005400
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020400 	.word	0x40020400

080021dc <vTaskSync>:

/*
 * Gère la commande des moteurs en fonction des données des capteurs
 */
void vTaskSync(void* p)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	int i =0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]

	printf("Wait BTN \r\n");
 80021e8:	483b      	ldr	r0, [pc, #236]	; (80022d8 <vTaskSync+0xfc>)
 80021ea:	f00c febb 	bl	800ef64 <puts>
	while(BTN == 0){
 80021ee:	bf00      	nop
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <vTaskSync+0x100>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0fb      	beq.n	80021f0 <vTaskSync+0x14>
		// Ne rien faire
	}
	printf("Start ! \r\n");
 80021f8:	4839      	ldr	r0, [pc, #228]	; (80022e0 <vTaskSync+0x104>)
 80021fa:	f00c feb3 	bl	800ef64 <puts>
//		}

		//printf("\r\n ----------------------- PHOTODIODE ----------------------- \r\n");
		//Ph_Print(0);

		printf("Tof0 = %d mm  Tof1 = %d mm  Tof2 = %d mm\r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter);
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <vTaskSync+0x108>)
 8002200:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8002204:	4619      	mov	r1, r3
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <vTaskSync+0x108>)
 8002208:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800220c:	461a      	mov	r2, r3
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <vTaskSync+0x108>)
 8002210:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002214:	4834      	ldr	r0, [pc, #208]	; (80022e8 <vTaskSync+0x10c>)
 8002216:	f00c fe1f 	bl	800ee58 <iprintf>


		if(i%20 == 0){
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <vTaskSync+0x110>)
 800221e:	fb83 2301 	smull	r2, r3, r3, r1
 8002222:	10da      	asrs	r2, r3, #3
 8002224:	17cb      	asrs	r3, r1, #31
 8002226:	1ad2      	subs	r2, r2, r3
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	1aca      	subs	r2, r1, r3
 8002232:	2a00      	cmp	r2, #0
 8002234:	d107      	bne.n	8002246 <vTaskSync+0x6a>
			xSemaphoreGive(semBinary_CMD);
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <vTaskSync+0x114>)
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	f00a f8b8 	bl	800c3b4 <xQueueGenericSend>
 8002244:	e040      	b.n	80022c8 <vTaskSync+0xec>
		}else if(i%20 == 12){
 8002246:	68f9      	ldr	r1, [r7, #12]
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <vTaskSync+0x110>)
 800224a:	fb83 2301 	smull	r2, r3, r3, r1
 800224e:	10da      	asrs	r2, r3, #3
 8002250:	17cb      	asrs	r3, r1, #31
 8002252:	1ad2      	subs	r2, r2, r3
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	1aca      	subs	r2, r1, r3
 800225e:	2a0c      	cmp	r2, #12
 8002260:	d107      	bne.n	8002272 <vTaskSync+0x96>
			xSemaphoreGive(semBinary_TOF);
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <vTaskSync+0x118>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	f00a f8a2 	bl	800c3b4 <xQueueGenericSend>
 8002270:	e02a      	b.n	80022c8 <vTaskSync+0xec>
		}else if(i%20 == 4){
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <vTaskSync+0x110>)
 8002276:	fb83 2301 	smull	r2, r3, r3, r1
 800227a:	10da      	asrs	r2, r3, #3
 800227c:	17cb      	asrs	r3, r1, #31
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	1aca      	subs	r2, r1, r3
 800228a:	2a04      	cmp	r2, #4
 800228c:	d107      	bne.n	800229e <vTaskSync+0xc2>
			xSemaphoreGive(semBinary_Ph);
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <vTaskSync+0x11c>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	f00a f88c 	bl	800c3b4 <xQueueGenericSend>
 800229c:	e014      	b.n	80022c8 <vTaskSync+0xec>
		}else if(i%20 == 8){
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <vTaskSync+0x110>)
 80022a2:	fb83 2301 	smull	r2, r3, r3, r1
 80022a6:	10da      	asrs	r2, r3, #3
 80022a8:	17cb      	asrs	r3, r1, #31
 80022aa:	1ad2      	subs	r2, r2, r3
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	1aca      	subs	r2, r1, r3
 80022b6:	2a08      	cmp	r2, #8
 80022b8:	d106      	bne.n	80022c8 <vTaskSync+0xec>
			xSemaphoreGive(semBinary_RGB);
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <vTaskSync+0x120>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	f00a f876 	bl	800c3b4 <xQueueGenericSend>
		}

		i++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]

		vTaskDelay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f00a fd2e 	bl	800cd30 <vTaskDelay>
		printf("Tof0 = %d mm  Tof1 = %d mm  Tof2 = %d mm\r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter);
 80022d4:	e793      	b.n	80021fe <vTaskSync+0x22>
 80022d6:	bf00      	nop
 80022d8:	08011878 	.word	0x08011878
 80022dc:	20000780 	.word	0x20000780
 80022e0:	08011884 	.word	0x08011884
 80022e4:	20004710 	.word	0x20004710
 80022e8:	08011890 	.word	0x08011890
 80022ec:	66666667 	.word	0x66666667
 80022f0:	200046b4 	.word	0x200046b4
 80022f4:	20004b98 	.word	0x20004b98
 80022f8:	20004b90 	.word	0x20004b90
 80022fc:	200046b8 	.word	0x200046b8

08002300 <vTaskControl>:
	}
}


void vTaskControl(void * p)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(semBinary_CMD,portMAX_DELAY);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <vTaskControl+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	4618      	mov	r0, r3
 8002312:	f00a f94d 	bl	800c5b0 <xQueueSemaphoreTake>
 8002316:	e7f7      	b.n	8002308 <vTaskControl+0x8>
 8002318:	200046b4 	.word	0x200046b4

0800231c <vTaskToF>:
 * TOF_Sensor[0].rangeMillimeter
 * TOF_Sensor[1].rangeMillimeter
 * TOF_Sensor[2].rangeMillimeter
 */
void vTaskToF(void * p)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_TOF_1 = uxTaskGetStackHighWaterMark(NULL);
 8002324:	2000      	movs	r0, #0
 8002326:	f00b f911 	bl	800d54c <uxTaskGetStackHighWaterMark>
 800232a:	4603      	mov	r3, r0
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <vTaskToF+0x60>)
 800232e:	6013      	str	r3, [r2, #0]

	for(int i=0; i<TOF_nbOfSensor; i++){
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e010      	b.n	8002358 <vTaskToF+0x3c>
		HAL_NVIC_EnableIRQ(TOF_Sensor[i].EXTI_IRQn);
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <vTaskToF+0x64>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	f503 73b9 	add.w	r3, r3, #370	; 0x172
 8002348:	f993 3000 	ldrsb.w	r3, [r3]
 800234c:	4618      	mov	r0, r3
 800234e:	f001 fbe7 	bl	8003b20 <HAL_NVIC_EnableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b02      	cmp	r3, #2
 800235c:	ddeb      	ble.n	8002336 <vTaskToF+0x1a>
	}

	while(1){
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <vTaskToF+0x68>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f04f 31ff 	mov.w	r1, #4294967295
 8002366:	4618      	mov	r0, r3
 8002368:	f00a f922 	bl	800c5b0 <xQueueSemaphoreTake>
//				TOF_SetDistance_mm(&TOF_Sensor[i]);
//				TOF_Sensor[i].it.flag = 0;
//				xSemaphoreGive(semMutex);
//			}
//		}
		uxHighWaterMark_TOF_2 = uxTaskGetStackHighWaterMark(NULL);
 800236c:	2000      	movs	r0, #0
 800236e:	f00b f8ed 	bl	800d54c <uxTaskGetStackHighWaterMark>
 8002372:	4603      	mov	r3, r0
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <vTaskToF+0x6c>)
 8002376:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 8002378:	e7f1      	b.n	800235e <vTaskToF+0x42>
 800237a:	bf00      	nop
 800237c:	200046bc 	.word	0x200046bc
 8002380:	20004710 	.word	0x20004710
 8002384:	20004b98 	.word	0x20004b98
 8002388:	20004b8c 	.word	0x20004b8c

0800238c <vTaskPhotodiodes>:
	}
}


void vTaskPhotodiodes(void * p)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	// Réalise les trois mesures
	// Calcule l'emplacement le plus lumineux
	// Remplie une variable avec un angle compris entre -100 et 100 pour orienter le robot :
	// Orientation
	while(1){
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <vTaskPhotodiodes+0x2c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	4618      	mov	r0, r3
 800239e:	f00a f907 	bl	800c5b0 <xQueueSemaphoreTake>

		Ph_GetMeasure(Ph_Data);
 80023a2:	4806      	ldr	r0, [pc, #24]	; (80023bc <vTaskPhotodiodes+0x30>)
 80023a4:	f7fe fdd0 	bl	8000f48 <Ph_GetMeasure>
		Ph_GetBestAngle(Ph_Data);
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <vTaskPhotodiodes+0x30>)
 80023aa:	f7fe feb7 	bl	800111c <Ph_GetBestAngle>
		Ph_GetNorma(Ph_Data);
 80023ae:	4803      	ldr	r0, [pc, #12]	; (80023bc <vTaskPhotodiodes+0x30>)
 80023b0:	f7fe ffc2 	bl	8001338 <Ph_GetNorma>
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 80023b4:	e7ee      	b.n	8002394 <vTaskPhotodiodes+0x8>
 80023b6:	bf00      	nop
 80023b8:	20004b90 	.word	0x20004b90
 80023bc:	200044e4 	.word	0x200044e4

080023c0 <vTaskCouleur>:
 * Réalise les mesures de couleur
 * Indique si le sol est rouge avec la variable globale :
 * RGB_Sensor.isFloorRed
 */
void vTaskCouleur(void * p)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_RGB_1 = uxTaskGetStackHighWaterMark(NULL);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f00b f8bf 	bl	800d54c <uxTaskGetStackHighWaterMark>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <vTaskCouleur+0x68>)
 80023d2:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(RGB_Sensor.Timer_Handle, RGB_Sensor.Timer_Channel);
 80023d4:	4b15      	ldr	r3, [pc, #84]	; (800242c <vTaskCouleur+0x6c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <vTaskCouleur+0x6c>)
 80023da:	6852      	ldr	r2, [r2, #4]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fe8e 	bl	8006100 <HAL_TIM_IC_Start_IT>

	HAL_GPIO_WritePin(RGB_Sensor.LED_GPIOx, RGB_Sensor.LED_GPIO_Pin, RESET);
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <vTaskCouleur+0x6c>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	4a10      	ldr	r2, [pc, #64]	; (800242c <vTaskCouleur+0x6c>)
 80023ea:	8a91      	ldrh	r1, [r2, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 f916 	bl	8004620 <HAL_GPIO_WritePin>

	while(1){
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <vTaskCouleur+0x70>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00a f8d7 	bl	800c5b0 <xQueueSemaphoreTake>

		//printf("vTask_RGB \r\n");

		if(RGB_Sensor.it.flag){
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <vTaskCouleur+0x6c>)
 8002404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <vTaskCouleur+0x5a>
			// Bloc traitement IT : 10.15 us
			RGB_IsTheFloorRed(&RGB_Sensor);
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <vTaskCouleur+0x6c>)
 800240e:	f7ff f987 	bl	8001720 <RGB_IsTheFloorRed>
			RGB_Sensor.it.flag = 0;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <vTaskCouleur+0x6c>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			//
		}
		uxHighWaterMark_RGB_2 = uxTaskGetStackHighWaterMark(NULL);
 800241a:	2000      	movs	r0, #0
 800241c:	f00b f896 	bl	800d54c <uxTaskGetStackHighWaterMark>
 8002420:	4603      	mov	r3, r0
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <vTaskCouleur+0x74>)
 8002424:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 8002426:	e7e5      	b.n	80023f4 <vTaskCouleur+0x34>
 8002428:	20004b84 	.word	0x20004b84
 800242c:	200046c0 	.word	0x200046c0
 8002430:	200046b8 	.word	0x200046b8
 8002434:	20004b94 	.word	0x20004b94

08002438 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	TaskHandle_t xHandle = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002442:	f000 fdb3 	bl	8002fac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002446:	f000 f93f 	bl	80026c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800244a:	f7ff fd81 	bl	8001f50 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800244e:	f000 fd11 	bl	8002e74 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8002452:	f000 fbfb 	bl	8002c4c <MX_TIM3_Init>
	MX_DMA_Init();
 8002456:	f7ff fd1d 	bl	8001e94 <MX_DMA_Init>
	MX_ADC1_Init();
 800245a:	f7ff fc27 	bl	8001cac <MX_ADC1_Init>
	MX_I2C1_Init();
 800245e:	f7ff fe47 	bl	80020f0 <MX_I2C1_Init>
	MX_TIM5_Init();
 8002462:	f000 fc47 	bl	8002cf4 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\n --------------- BOTterfly --------------- \r\n");
 8002466:	4877      	ldr	r0, [pc, #476]	; (8002644 <main+0x20c>)
 8002468:	f00c fd7c 	bl	800ef64 <puts>

	// INITIALISATION DES CAPTEURS ET DU MOTEUR :
	printf("Initialization \r\n");
 800246c:	4876      	ldr	r0, [pc, #472]	; (8002648 <main+0x210>)
 800246e:	f00c fd79 	bl	800ef64 <puts>

	// Bloc TOF_Init : 1735.410150 ms
	TOF_Init_SetI2C(&TOF_Sensor[0], &hi2c1, 0x55);
 8002472:	2255      	movs	r2, #85	; 0x55
 8002474:	4975      	ldr	r1, [pc, #468]	; (800264c <main+0x214>)
 8002476:	4876      	ldr	r0, [pc, #472]	; (8002650 <main+0x218>)
 8002478:	f7ff fa1e 	bl	80018b8 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[0], TOF_XSHUT0_GPIO_Port, TOF_XSHUT0_Pin, TOF_GPIOI0_GPIO_Port, TOF_GPIOI0_Pin);
 800247c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4b74      	ldr	r3, [pc, #464]	; (8002654 <main+0x21c>)
 8002484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002488:	4972      	ldr	r1, [pc, #456]	; (8002654 <main+0x21c>)
 800248a:	4871      	ldr	r0, [pc, #452]	; (8002650 <main+0x218>)
 800248c:	f7ff fa2a 	bl	80018e4 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[0], TOF_GPIOI0_EXTI_IRQn);
 8002490:	2128      	movs	r1, #40	; 0x28
 8002492:	486f      	ldr	r0, [pc, #444]	; (8002650 <main+0x218>)
 8002494:	f7ff fa45 	bl	8001922 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[1], &hi2c1, 0x58);
 8002498:	2258      	movs	r2, #88	; 0x58
 800249a:	496c      	ldr	r1, [pc, #432]	; (800264c <main+0x214>)
 800249c:	486e      	ldr	r0, [pc, #440]	; (8002658 <main+0x220>)
 800249e:	f7ff fa0b 	bl	80018b8 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[1], TOF_XSHUT1_GPIO_Port, TOF_XSHUT1_Pin, TOF_GPIOI1_GPIO_Port, TOF_GPIOI1_Pin);
 80024a2:	2301      	movs	r3, #1
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <main+0x224>)
 80024a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ac:	4969      	ldr	r1, [pc, #420]	; (8002654 <main+0x21c>)
 80024ae:	486a      	ldr	r0, [pc, #424]	; (8002658 <main+0x220>)
 80024b0:	f7ff fa18 	bl	80018e4 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[1], TOF_GPIOI1_EXTI_IRQn);
 80024b4:	2106      	movs	r1, #6
 80024b6:	4868      	ldr	r0, [pc, #416]	; (8002658 <main+0x220>)
 80024b8:	f7ff fa33 	bl	8001922 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[2], &hi2c1, 0x5b);
 80024bc:	225b      	movs	r2, #91	; 0x5b
 80024be:	4963      	ldr	r1, [pc, #396]	; (800264c <main+0x214>)
 80024c0:	4867      	ldr	r0, [pc, #412]	; (8002660 <main+0x228>)
 80024c2:	f7ff f9f9 	bl	80018b8 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[2], TOF_XSHUT2_GPIO_Port, TOF_XSHUT2_Pin, TOF_GPIOI2_GPIO_Port, TOF_GPIOI2_Pin);
 80024c6:	2302      	movs	r3, #2
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <main+0x224>)
 80024cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d0:	4964      	ldr	r1, [pc, #400]	; (8002664 <main+0x22c>)
 80024d2:	4863      	ldr	r0, [pc, #396]	; (8002660 <main+0x228>)
 80024d4:	f7ff fa06 	bl	80018e4 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[2], TOF_GPIOI2_EXTI_IRQn);
 80024d8:	2107      	movs	r1, #7
 80024da:	4861      	ldr	r0, [pc, #388]	; (8002660 <main+0x228>)
 80024dc:	f7ff fa21 	bl	8001922 <TOF_Init_SetEXTI>

	TOF_Init(TOF_Sensor);
 80024e0:	485b      	ldr	r0, [pc, #364]	; (8002650 <main+0x218>)
 80024e2:	f7ff fa2f 	bl	8001944 <TOF_Init>
	//

	// Bloc RGB_Init : 401.954350 ms
	RGB_Init_SetTimer(&RGB_Sensor, &htim3, TIM_CHANNEL_1);
 80024e6:	2200      	movs	r2, #0
 80024e8:	495f      	ldr	r1, [pc, #380]	; (8002668 <main+0x230>)
 80024ea:	4860      	ldr	r0, [pc, #384]	; (800266c <main+0x234>)
 80024ec:	f7fe ff98 	bl	8001420 <RGB_Init_SetTimer>

	RGB_Init_SetParamGPIOs(&RGB_Sensor, RGB_OE_GPIO_Port, RGB_OE_Pin, RGB_LED_GPIO_Port, RGB_LED_Pin);
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4b59      	ldr	r3, [pc, #356]	; (800265c <main+0x224>)
 80024f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fc:	4957      	ldr	r1, [pc, #348]	; (800265c <main+0x224>)
 80024fe:	485b      	ldr	r0, [pc, #364]	; (800266c <main+0x234>)
 8002500:	f7fe ffa1 	bl	8001446 <RGB_Init_SetParamGPIOs>
	RGB_Init_SetOutFreqGPIOs(&RGB_Sensor, RGB_S0_GPIO_Port, RGB_S0_Pin, RGB_S1_GPIO_Port, RGB_S1_Pin);
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4b56      	ldr	r3, [pc, #344]	; (8002664 <main+0x22c>)
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	4955      	ldr	r1, [pc, #340]	; (8002664 <main+0x22c>)
 800250e:	4857      	ldr	r0, [pc, #348]	; (800266c <main+0x234>)
 8002510:	f7fe ffb4 	bl	800147c <RGB_Init_SetOutFreqGPIOs>
	RGB_Init_SetColorFilterGPIOs(&RGB_Sensor, RGB_S2_GPIO_Port, RGB_S2_Pin, RGB_S3_GPIO_Port, RGB_S3_Pin);
 8002514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	4b50      	ldr	r3, [pc, #320]	; (800265c <main+0x224>)
 800251c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002520:	494e      	ldr	r1, [pc, #312]	; (800265c <main+0x224>)
 8002522:	4852      	ldr	r0, [pc, #328]	; (800266c <main+0x234>)
 8002524:	f7fe ffc5 	bl	80014b2 <RGB_Init_SetColorFilterGPIOs>

	RGB_Init(&RGB_Sensor);
 8002528:	4850      	ldr	r0, [pc, #320]	; (800266c <main+0x234>)
 800252a:	f7fe ffdd 	bl	80014e8 <RGB_Init>
	//

	Ph_Init();
 800252e:	f7fe fcdf 	bl	8000ef0 <Ph_Init>

	// Init Motor
	// Init Ph

	// CRÉATION DES SÉMAPHORES :
	printf("Creation Semaphore \r\n");
 8002532:	484f      	ldr	r0, [pc, #316]	; (8002670 <main+0x238>)
 8002534:	f00c fd16 	bl	800ef64 <puts>

	semBinary_CMD = xSemaphoreCreateBinary();
 8002538:	2203      	movs	r2, #3
 800253a:	2100      	movs	r1, #0
 800253c:	2001      	movs	r0, #1
 800253e:	f009 fead 	bl	800c29c <xQueueGenericCreate>
 8002542:	4603      	mov	r3, r0
 8002544:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <main+0x23c>)
 8002546:	6013      	str	r3, [r2, #0]
	semBinary_TOF = xSemaphoreCreateBinary();
 8002548:	2203      	movs	r2, #3
 800254a:	2100      	movs	r1, #0
 800254c:	2001      	movs	r0, #1
 800254e:	f009 fea5 	bl	800c29c <xQueueGenericCreate>
 8002552:	4603      	mov	r3, r0
 8002554:	4a48      	ldr	r2, [pc, #288]	; (8002678 <main+0x240>)
 8002556:	6013      	str	r3, [r2, #0]
	semBinary_Ph = xSemaphoreCreateBinary();
 8002558:	2203      	movs	r2, #3
 800255a:	2100      	movs	r1, #0
 800255c:	2001      	movs	r0, #1
 800255e:	f009 fe9d 	bl	800c29c <xQueueGenericCreate>
 8002562:	4603      	mov	r3, r0
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <main+0x244>)
 8002566:	6013      	str	r3, [r2, #0]
	semBinary_RGB = xSemaphoreCreateBinary();
 8002568:	2203      	movs	r2, #3
 800256a:	2100      	movs	r1, #0
 800256c:	2001      	movs	r0, #1
 800256e:	f009 fe95 	bl	800c29c <xQueueGenericCreate>
 8002572:	4603      	mov	r3, r0
 8002574:	4a42      	ldr	r2, [pc, #264]	; (8002680 <main+0x248>)
 8002576:	6013      	str	r3, [r2, #0]

	semMutex = xSemaphoreCreateMutex();
 8002578:	2001      	movs	r0, #1
 800257a:	f009 ff02 	bl	800c382 <xQueueCreateMutex>
 800257e:	4603      	mov	r3, r0
 8002580:	4a40      	ldr	r2, [pc, #256]	; (8002684 <main+0x24c>)
 8002582:	6013      	str	r3, [r2, #0]

	// CRÉATION DES BOÎTES AUX LETTRES :


	// CRÉATION DES TÂCHES :
	printf("Creation Task \r\n");
 8002584:	4840      	ldr	r0, [pc, #256]	; (8002688 <main+0x250>)
 8002586:	f00c fced 	bl	800ef64 <puts>

	if (xTaskCreate(vTaskSync, "Sync", SYNC_STACK_SIZE, (void *)NULL, 100, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2364      	movs	r3, #100	; 0x64
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	22fa      	movs	r2, #250	; 0xfa
 8002596:	493d      	ldr	r1, [pc, #244]	; (800268c <main+0x254>)
 8002598:	483d      	ldr	r0, [pc, #244]	; (8002690 <main+0x258>)
 800259a:	f00a fa74 	bl	800ca86 <xTaskCreate>
 800259e:	4603      	mov	r3, r0
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d102      	bne.n	80025ac <main+0x174>
	{
		printf("Task Sync Creation error : Could not allocate required memory\r\n");
 80025a6:	483b      	ldr	r0, [pc, #236]	; (8002694 <main+0x25c>)
 80025a8:	f00c fcdc 	bl	800ef64 <puts>
	}
	if (xTaskCreate(vTaskControl, "Control", CMD_STACK_SIZE, (void *)NULL, 80, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2350      	movs	r3, #80	; 0x50
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025ba:	4937      	ldr	r1, [pc, #220]	; (8002698 <main+0x260>)
 80025bc:	4837      	ldr	r0, [pc, #220]	; (800269c <main+0x264>)
 80025be:	f00a fa62 	bl	800ca86 <xTaskCreate>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d102      	bne.n	80025d0 <main+0x198>
	{
		printf("Task Control Creation error : Could not allocate required memory\r\n");
 80025ca:	4835      	ldr	r0, [pc, #212]	; (80026a0 <main+0x268>)
 80025cc:	f00c fcca 	bl	800ef64 <puts>
	}
	if (xTaskCreate(vTaskToF, "ToF", TOF_STACK_SIZE, (void *)NULL, 60, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	233c      	movs	r3, #60	; 0x3c
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025de:	4931      	ldr	r1, [pc, #196]	; (80026a4 <main+0x26c>)
 80025e0:	4831      	ldr	r0, [pc, #196]	; (80026a8 <main+0x270>)
 80025e2:	f00a fa50 	bl	800ca86 <xTaskCreate>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d102      	bne.n	80025f4 <main+0x1bc>
	{
		printf("Task ToF Creation error : Could not allocate required memory\r\n");
 80025ee:	482f      	ldr	r0, [pc, #188]	; (80026ac <main+0x274>)
 80025f0:	f00c fcb8 	bl	800ef64 <puts>
	}
	if (xTaskCreate(vTaskPhotodiodes, "Photodiodes", Ph_STACK_SIZE, (void *)NULL, 40, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2328      	movs	r3, #40	; 0x28
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002602:	492b      	ldr	r1, [pc, #172]	; (80026b0 <main+0x278>)
 8002604:	482b      	ldr	r0, [pc, #172]	; (80026b4 <main+0x27c>)
 8002606:	f00a fa3e 	bl	800ca86 <xTaskCreate>
 800260a:	4603      	mov	r3, r0
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d102      	bne.n	8002618 <main+0x1e0>
	{
		printf("Task Photodiode Creation error : Could not allocate required memory\r\n");
 8002612:	4829      	ldr	r0, [pc, #164]	; (80026b8 <main+0x280>)
 8002614:	f00c fca6 	bl	800ef64 <puts>
	}
	if (xTaskCreate(vTaskCouleur, "Couleur", RGB_STACK_SIZE, (void *)NULL, 20, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	2314      	movs	r3, #20
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	2250      	movs	r2, #80	; 0x50
 8002624:	4925      	ldr	r1, [pc, #148]	; (80026bc <main+0x284>)
 8002626:	4826      	ldr	r0, [pc, #152]	; (80026c0 <main+0x288>)
 8002628:	f00a fa2d 	bl	800ca86 <xTaskCreate>
 800262c:	4603      	mov	r3, r0
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d102      	bne.n	800263a <main+0x202>
	{
		printf("Task Couleur Creation error : Could not allocate required memory\r\n");
 8002634:	4823      	ldr	r0, [pc, #140]	; (80026c4 <main+0x28c>)
 8002636:	f00c fc95 	bl	800ef64 <puts>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800263a:	f7ff fc65 	bl	8001f08 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 800263e:	f009 fcaa 	bl	800bf96 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002642:	e7fe      	b.n	8002642 <main+0x20a>
 8002644:	080118bc 	.word	0x080118bc
 8002648:	080118ec 	.word	0x080118ec
 800264c:	20004660 	.word	0x20004660
 8002650:	20004710 	.word	0x20004710
 8002654:	40020000 	.word	0x40020000
 8002658:	2000488c 	.word	0x2000488c
 800265c:	40020400 	.word	0x40020400
 8002660:	20004a08 	.word	0x20004a08
 8002664:	40020800 	.word	0x40020800
 8002668:	20004c2c 	.word	0x20004c2c
 800266c:	200046c0 	.word	0x200046c0
 8002670:	08011900 	.word	0x08011900
 8002674:	200046b4 	.word	0x200046b4
 8002678:	20004b98 	.word	0x20004b98
 800267c:	20004b90 	.word	0x20004b90
 8002680:	200046b8 	.word	0x200046b8
 8002684:	20004b88 	.word	0x20004b88
 8002688:	08011918 	.word	0x08011918
 800268c:	08011928 	.word	0x08011928
 8002690:	080021dd 	.word	0x080021dd
 8002694:	08011930 	.word	0x08011930
 8002698:	08011970 	.word	0x08011970
 800269c:	08002301 	.word	0x08002301
 80026a0:	08011978 	.word	0x08011978
 80026a4:	080119bc 	.word	0x080119bc
 80026a8:	0800231d 	.word	0x0800231d
 80026ac:	080119c0 	.word	0x080119c0
 80026b0:	08011a00 	.word	0x08011a00
 80026b4:	0800238d 	.word	0x0800238d
 80026b8:	08011a0c 	.word	0x08011a0c
 80026bc:	08011a54 	.word	0x08011a54
 80026c0:	080023c1 	.word	0x080023c1
 80026c4:	08011a5c 	.word	0x08011a5c

080026c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b094      	sub	sp, #80	; 0x50
 80026cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	f107 0320 	add.w	r3, r7, #32
 80026d2:	2230      	movs	r2, #48	; 0x30
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f00b fef1 	bl	800e4be <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <SystemClock_Config+0xc8>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <SystemClock_Config+0xc8>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <SystemClock_Config+0xc8>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <SystemClock_Config+0xcc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <SystemClock_Config+0xcc>)
 8002712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <SystemClock_Config+0xcc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002728:	2301      	movs	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272c:	2310      	movs	r3, #16
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002730:	2302      	movs	r3, #2
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002738:	2308      	movs	r3, #8
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 800273c:	2350      	movs	r3, #80	; 0x50
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002740:	2302      	movs	r3, #2
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002744:	2304      	movs	r3, #4
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	4618      	mov	r0, r3
 800274e:	f002 ff2f 	bl	80055b0 <HAL_RCC_OscConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002758:	f000 f8c8 	bl	80028ec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275c:	230f      	movs	r3, #15
 800275e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002760:	2302      	movs	r3, #2
 8002762:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	2102      	movs	r1, #2
 8002778:	4618      	mov	r0, r3
 800277a:	f003 f991 	bl	8005aa0 <HAL_RCC_ClockConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002784:	f000 f8b2 	bl	80028ec <Error_Handler>
	}
}
 8002788:	bf00      	nop
 800278a:	3750      	adds	r7, #80	; 0x50
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000

08002798 <HAL_TIM_IC_CaptureCallback>:

uint8_t countTime = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	// Durée de l'IT : 1.550000us ou 1.325000us
	if(htim->Instance == RGB_Sensor.Timer_Handle->Instance)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d12f      	bne.n	800280e <HAL_TIM_IC_CaptureCallback+0x76>
	{
		if(RGB_Sensor.it.isFirstCaptured == 0){
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10e      	bne.n	80027d6 <HAL_TIM_IC_CaptureCallback+0x3e>
			icVal01 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f004 f824 	bl	800680c <HAL_TIM_ReadCapturedValue>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_TIM_IC_CaptureCallback+0x84>)
 80027ca:	801a      	strh	r2, [r3, #0]
			RGB_Sensor.it.isFirstCaptured = 1;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);

			RGB_Sensor.it.flag = 1;
		}
	}
}
 80027d4:	e01b      	b.n	800280e <HAL_TIM_IC_CaptureCallback+0x76>
			RGB_Sensor.it.icVal1 = icVal01;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_TIM_IC_CaptureCallback+0x84>)
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			RGB_Sensor.it.icVal2 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4619      	mov	r1, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f004 f810 	bl	800680c <HAL_TIM_ReadCapturedValue>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			RGB_Sensor.it.isFirstCaptured = 0;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
			RGB_Sensor.it.flag = 1;
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200046c0 	.word	0x200046c0
 800281c:	20000782 	.word	0x20000782

08002820 <HAL_GPIO_EXTI_Callback>:


// VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
	// Durée de l'IT : 0.500000us
	if(GPIO_Pin == TOF_Sensor[0].EXTI_GPIO_Pin){
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 800282c:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	429a      	cmp	r2, r3
 8002834:	d107      	bne.n	8002846 <HAL_GPIO_EXTI_Callback+0x26>
		// IT toutes les 33ms
		TOF_Sensor[0].it.flag = 1;
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
		TOF_SetDistance_mm(&TOF_Sensor[0]);
 800283e:	4815      	ldr	r0, [pc, #84]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 8002840:	f7ff fa1a 	bl	8001c78 <TOF_SetDistance_mm>
	}

	else if(GPIO_Pin == BTN_Pin){
		BTN = 1;
	}
}
 8002844:	e022      	b.n	800288c <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == TOF_Sensor[1].EXTI_GPIO_Pin){
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 8002848:	f8b3 32ec 	ldrh.w	r3, [r3, #748]	; 0x2ec
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	429a      	cmp	r2, r3
 8002850:	d107      	bne.n	8002862 <HAL_GPIO_EXTI_Callback+0x42>
		TOF_Sensor[1].it.flag = 1;
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 8002854:	2201      	movs	r2, #1
 8002856:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
		TOF_SetDistance_mm(&TOF_Sensor[1]);
 800285a:	480f      	ldr	r0, [pc, #60]	; (8002898 <HAL_GPIO_EXTI_Callback+0x78>)
 800285c:	f7ff fa0c 	bl	8001c78 <TOF_SetDistance_mm>
}
 8002860:	e014      	b.n	800288c <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == TOF_Sensor[2].EXTI_GPIO_Pin){
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 8002864:	f8b3 3468 	ldrh.w	r3, [r3, #1128]	; 0x468
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	429a      	cmp	r2, r3
 800286c:	d107      	bne.n	800287e <HAL_GPIO_EXTI_Callback+0x5e>
		TOF_Sensor[2].it.flag = 1;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_GPIO_EXTI_Callback+0x74>)
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		TOF_SetDistance_mm(&TOF_Sensor[2]);
 8002876:	4809      	ldr	r0, [pc, #36]	; (800289c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002878:	f7ff f9fe 	bl	8001c78 <TOF_SetDistance_mm>
}
 800287c:	e006      	b.n	800288c <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == BTN_Pin){
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002884:	d102      	bne.n	800288c <HAL_GPIO_EXTI_Callback+0x6c>
		BTN = 1;
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20004710 	.word	0x20004710
 8002898:	2000488c 	.word	0x2000488c
 800289c:	20004a08 	.word	0x20004a08
 80028a0:	20000780 	.word	0x20000780

080028a4 <__io_putchar>:

int __io_putchar(int ch)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80028ac:	1d39      	adds	r1, r7, #4
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	2201      	movs	r2, #1
 80028b4:	4803      	ldr	r0, [pc, #12]	; (80028c4 <__io_putchar+0x20>)
 80028b6:	f004 fb38 	bl	8006f2a <HAL_UART_Transmit>
	return ch;
 80028ba:	687b      	ldr	r3, [r7, #4]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20004c74 	.word	0x20004c74

080028c8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80028da:	f000 fb89 	bl	8002ff0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40014800 	.word	0x40014800

080028ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028f4:	e7fe      	b.n	80028f4 <Error_Handler+0x8>
	...

080028f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_MspInit+0x54>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_MspInit+0x54>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_MspInit+0x54>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_MspInit+0x54>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_MspInit+0x54>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_MspInit+0x54>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	210f      	movs	r1, #15
 800293a:	f06f 0001 	mvn.w	r0, #1
 800293e:	f001 f8d3 	bl	8003ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	; 0x30
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	201a      	movs	r0, #26
 8002966:	f001 f8bf 	bl	8003ae8 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800296a:	201a      	movs	r0, #26
 800296c:	f001 f8d8 	bl	8003b20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_InitTick+0xa0>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_InitTick+0xa0>)
 800297a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297e:	6453      	str	r3, [r2, #68]	; 0x44
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_InitTick+0xa0>)
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800298c:	f107 0210 	add.w	r2, r7, #16
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fa7e 	bl	8005e98 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800299c:	f003 fa68 	bl	8005e70 <HAL_RCC_GetPCLK2Freq>
 80029a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <HAL_InitTick+0xa4>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	3b01      	subs	r3, #1
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_InitTick+0xa8>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <HAL_InitTick+0xac>)
 80029b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_InitTick+0xa8>)
 80029b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029bc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_InitTick+0xa8>)
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_InitTick+0xa8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_InitTick+0xa8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80029d0:	4809      	ldr	r0, [pc, #36]	; (80029f8 <HAL_InitTick+0xa8>)
 80029d2:	f003 fa93 	bl	8005efc <HAL_TIM_Base_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <HAL_InitTick+0xa8>)
 80029de:	f003 fadd 	bl	8005f9c <HAL_TIM_Base_Start_IT>
 80029e2:	4603      	mov	r3, r0
 80029e4:	e000      	b.n	80029e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	20004b9c 	.word	0x20004b9c
 80029fc:	40014800 	.word	0x40014800

08002a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <NMI_Handler+0x4>

08002a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0a:	e7fe      	b.n	8002a0a <HardFault_Handler+0x4>

08002a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <MemManage_Handler+0x4>

08002a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <BusFault_Handler+0x4>

08002a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <UsageFault_Handler+0x4>

08002a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f001 fe0f 	bl	8004654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a3e:	2002      	movs	r0, #2
 8002a40:	f001 fe08 	bl	8004654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a4e:	f003 fc71 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20004b9c 	.word	0x20004b9c

08002a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM3_IRQHandler+0x10>)
 8002a62:	f003 fc67 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20004c2c 	.word	0x20004c2c

08002a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a78:	f001 fdec 	bl	8004654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002a7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a80:	f001 fde8 	bl	8004654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <DMA2_Stream0_IRQHandler+0x10>)
 8002a8e:	f001 f9d9 	bl	8003e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200045fc 	.word	0x200045fc

08002a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
	return 1;
 8002aa0:	2301      	movs	r3, #1
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_kill>:

int _kill(int pid, int sig)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ab6:	f00b fbd1 	bl	800e25c <__errno>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2216      	movs	r2, #22
 8002abe:	601a      	str	r2, [r3, #0]
	return -1;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_exit>:

void _exit (int status)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffe7 	bl	8002aac <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ade:	e7fe      	b.n	8002ade <_exit+0x12>

08002ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e00a      	b.n	8002b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002af2:	f3af 8000 	nop.w
 8002af6:	4601      	mov	r1, r0
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	60ba      	str	r2, [r7, #8]
 8002afe:	b2ca      	uxtb	r2, r1
 8002b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dbf0      	blt.n	8002af2 <_read+0x12>
	}

return len;
 8002b10:	687b      	ldr	r3, [r7, #4]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e009      	b.n	8002b40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	60ba      	str	r2, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff feb5 	bl	80028a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbf1      	blt.n	8002b2c <_write+0x12>
	}
	return len;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_close>:

int _close(int file)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
	return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_isatty>:

int _isatty(int file)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
	return 1;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	return 0;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <_sbrk+0x5c>)
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <_sbrk+0x60>)
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x64>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <_sbrk+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_sbrk+0x64>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bec:	f00b fb36 	bl	800e25c <__errno>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e009      	b.n	8002c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <_sbrk+0x64>)
 8002c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20020000 	.word	0x20020000
 8002c1c:	00000400 	.word	0x00000400
 8002c20:	20000784 	.word	0x20000784
 8002c24:	20004d10 	.word	0x20004d10

08002c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <SystemInit+0x20>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <SystemInit+0x20>)
 8002c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c6a:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <MX_TIM3_Init+0xa4>)
 8002c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c70:	224f      	movs	r2, #79	; 0x4f
 8002c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002c8e:	4817      	ldr	r0, [pc, #92]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002c90:	f003 f9e6 	bl	8006060 <HAL_TIM_IC_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c9a:	f7ff fe27 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ca6:	f107 0310 	add.w	r3, r7, #16
 8002caa:	4619      	mov	r1, r3
 8002cac:	480f      	ldr	r0, [pc, #60]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002cae:	f004 f86d 	bl	8006d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002cb8:	f7ff fe18 	bl	80028ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ccc:	463b      	mov	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	; (8002cec <MX_TIM3_Init+0xa0>)
 8002cd4:	f003 fc36 	bl	8006544 <HAL_TIM_IC_ConfigChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002cde:	f7ff fe05 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20004c2c 	.word	0x20004c2c
 8002cf0:	40000400 	.word	0x40000400

08002cf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d08:	463b      	mov	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d12:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <MX_TIM5_Init+0x98>)
 8002d14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d36:	4814      	ldr	r0, [pc, #80]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d38:	f003 f8e0 	bl	8005efc <HAL_TIM_Base_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002d42:	f7ff fdd3 	bl	80028ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4619      	mov	r1, r3
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d54:	f003 fc92 	bl	800667c <HAL_TIM_ConfigClockSource>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002d5e:	f7ff fdc5 	bl	80028ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4806      	ldr	r0, [pc, #24]	; (8002d88 <MX_TIM5_Init+0x94>)
 8002d70:	f004 f80c 	bl	8006d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002d7a:	f7ff fdb7 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20004be4 	.word	0x20004be4
 8002d8c:	40000c00 	.word	0x40000c00

08002d90 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_TIM_IC_MspInit+0x94>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d133      	bne.n	8002e1a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_TIM_IC_MspInit+0x98>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_TIM_IC_MspInit+0x98>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_TIM_IC_MspInit+0x98>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_TIM_IC_MspInit+0x98>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_TIM_IC_MspInit+0x98>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_TIM_IC_MspInit+0x98>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dea:	2310      	movs	r3, #16
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	4809      	ldr	r0, [pc, #36]	; (8002e2c <HAL_TIM_IC_MspInit+0x9c>)
 8002e06:	f001 fa87 	bl	8004318 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2105      	movs	r1, #5
 8002e0e:	201d      	movs	r0, #29
 8002e10:	f000 fe6a 	bl	8003ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e14:	201d      	movs	r0, #29
 8002e16:	f000 fe83 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	; 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020400 	.word	0x40020400

08002e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <HAL_TIM_Base_MspInit+0x3c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10d      	bne.n	8002e5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_TIM_Base_MspInit+0x40>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_TIM_Base_MspInit+0x40>)
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_TIM_Base_MspInit+0x40>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40023800 	.word	0x40023800

08002e74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <MX_USART2_UART_Init+0x50>)
 8002e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002eac:	f003 fff0 	bl	8006e90 <HAL_UART_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eb6:	f7ff fd19 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20004c74 	.word	0x20004c74
 8002ec4:	40004400 	.word	0x40004400

08002ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_UART_MspInit+0x84>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d12b      	bne.n	8002f42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <HAL_UART_MspInit+0x88>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_UART_MspInit+0x88>)
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_UART_MspInit+0x88>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_UART_MspInit+0x88>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_UART_MspInit+0x88>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_UART_MspInit+0x88>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f22:	230c      	movs	r3, #12
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f32:	2307      	movs	r3, #7
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	; (8002f54 <HAL_UART_MspInit+0x8c>)
 8002f3e:	f001 f9eb 	bl	8004318 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40004400 	.word	0x40004400
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020000 	.word	0x40020000

08002f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f5c:	480d      	ldr	r0, [pc, #52]	; (8002f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f5e:	490e      	ldr	r1, [pc, #56]	; (8002f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f64:	e002      	b.n	8002f6c <LoopCopyDataInit>

08002f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f6a:	3304      	adds	r3, #4

08002f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f70:	d3f9      	bcc.n	8002f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f74:	4c0b      	ldr	r4, [pc, #44]	; (8002fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f78:	e001      	b.n	8002f7e <LoopFillZerobss>

08002f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f7c:	3204      	adds	r2, #4

08002f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f80:	d3fb      	bcc.n	8002f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f82:	f7ff fe51 	bl	8002c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f86:	f00b fa65 	bl	800e454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f8a:	f7ff fa55 	bl	8002438 <main>
  bx  lr    
 8002f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f98:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8002f9c:	08011ef0 	.word	0x08011ef0
  ldr r2, =_sbss
 8002fa0:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8002fa4:	20004d0c 	.word	0x20004d0c

08002fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa8:	e7fe      	b.n	8002fa8 <ADC_IRQHandler>
	...

08002fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <HAL_Init+0x40>)
 8002fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_Init+0x40>)
 8002fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_Init+0x40>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 fd7c 	bl	8003ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fda:	200f      	movs	r0, #15
 8002fdc:	f7ff fcb8 	bl	8002950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe0:	f7ff fc8a 	bl	80028f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00

08002ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_IncTick+0x20>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_IncTick+0x24>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_IncTick+0x24>)
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000008 	.word	0x20000008
 8003014:	20004cb8 	.word	0x20004cb8

08003018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return uwTick;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_GetTick+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20004cb8 	.word	0x20004cb8

08003030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff ffee 	bl	8003018 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d005      	beq.n	8003056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_Delay+0x44>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003056:	bf00      	nop
 8003058:	f7ff ffde 	bl	8003018 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d8f7      	bhi.n	8003058 <HAL_Delay+0x28>
  {
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000008 	.word	0x20000008

08003078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e033      	b.n	80030f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fe84 	bl	8001da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030be:	f023 0302 	bic.w	r3, r3, #2
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fab2 	bl	8003634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
 80030e6:	e001      	b.n	80030ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADC_Start_DMA+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e0ce      	b.n	80032bc <HAL_ADC_Start_DMA+0x1bc>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d018      	beq.n	8003166 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003144:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_ADC_Start_DMA+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5f      	ldr	r2, [pc, #380]	; (80032c8 <HAL_ADC_Start_DMA+0x1c8>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0c9a      	lsrs	r2, r3, #18
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003158:	e002      	b.n	8003160 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3b01      	subs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f9      	bne.n	800315a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003174:	d107      	bne.n	8003186 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 8086 	bne.w	80032a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d4:	d106      	bne.n	80031e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	f023 0206 	bic.w	r2, r3, #6
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
 80031e2:	e002      	b.n	80031ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_ADC_Start_DMA+0x1cc>)
 80031f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	4a35      	ldr	r2, [pc, #212]	; (80032d0 <HAL_ADC_Start_DMA+0x1d0>)
 80031fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_ADC_Start_DMA+0x1d4>)
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_ADC_Start_DMA+0x1d8>)
 800320c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003216:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003226:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003236:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	334c      	adds	r3, #76	; 0x4c
 8003242:	4619      	mov	r1, r3
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f000 fd34 	bl	8003cb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d129      	bne.n	80032ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	e020      	b.n	80032ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a17      	ldr	r2, [pc, #92]	; (80032dc <HAL_ADC_Start_DMA+0x1dc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11b      	bne.n	80032ba <HAL_ADC_Start_DMA+0x1ba>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d114      	bne.n	80032ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	e00b      	b.n	80032ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000000 	.word	0x20000000
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	40012300 	.word	0x40012300
 80032d0:	0800382d 	.word	0x0800382d
 80032d4:	080038e7 	.word	0x080038e7
 80032d8:	08003903 	.word	0x08003903
 80032dc:	40012000 	.word	0x40012000

080032e0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Stop_DMA+0x1a>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e048      	b.n	800338c <HAL_ADC_Stop_DMA+0xac>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d130      	bne.n	8003382 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d10f      	bne.n	800335e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fd0e 	bl	8003d64 <HAL_DMA_Abort>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800336c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e113      	b.n	8003614 <HAL_ADC_ConfigChannel+0x244>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d925      	bls.n	8003448 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68d9      	ldr	r1, [r3, #12]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	3b1e      	subs	r3, #30
 8003412:	2207      	movs	r2, #7
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43da      	mvns	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	400a      	ands	r2, r1
 8003420:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68d9      	ldr	r1, [r3, #12]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	4603      	mov	r3, r0
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4403      	add	r3, r0
 800343a:	3b1e      	subs	r3, #30
 800343c:	409a      	lsls	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	e022      	b.n	800348e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6919      	ldr	r1, [r3, #16]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	2207      	movs	r2, #7
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6919      	ldr	r1, [r3, #16]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	4603      	mov	r3, r0
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4403      	add	r3, r0
 8003484:	409a      	lsls	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b06      	cmp	r3, #6
 8003494:	d824      	bhi.n	80034e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3b05      	subs	r3, #5
 80034a8:	221f      	movs	r2, #31
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	400a      	ands	r2, r1
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	3b05      	subs	r3, #5
 80034d2:	fa00 f203 	lsl.w	r2, r0, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
 80034de:	e04c      	b.n	800357a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d824      	bhi.n	8003532 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	3b23      	subs	r3, #35	; 0x23
 80034fa:	221f      	movs	r2, #31
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43da      	mvns	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	400a      	ands	r2, r1
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	3b23      	subs	r3, #35	; 0x23
 8003524:	fa00 f203 	lsl.w	r2, r0, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
 8003530:	e023      	b.n	800357a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	3b41      	subs	r3, #65	; 0x41
 8003544:	221f      	movs	r2, #31
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	400a      	ands	r2, r1
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	3b41      	subs	r3, #65	; 0x41
 800356e:	fa00 f203 	lsl.w	r2, r0, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <HAL_ADC_ConfigChannel+0x250>)
 800357c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a28      	ldr	r2, [pc, #160]	; (8003624 <HAL_ADC_ConfigChannel+0x254>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10f      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x1d8>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b12      	cmp	r3, #18
 800358e:	d10b      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_ADC_ConfigChannel+0x254>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12b      	bne.n	800360a <HAL_ADC_ConfigChannel+0x23a>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0x1f4>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b11      	cmp	r3, #17
 80035c2:	d122      	bne.n	800360a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_ADC_ConfigChannel+0x25c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_ADC_ConfigChannel+0x260>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	0c9a      	lsrs	r2, r3, #18
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035fc:	e002      	b.n	8003604 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3b01      	subs	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f9      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40012300 	.word	0x40012300
 8003624:	40012000 	.word	0x40012000
 8003628:	10000012 	.word	0x10000012
 800362c:	20000000 	.word	0x20000000
 8003630:	431bde83 	.word	0x431bde83

08003634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800363c:	4b79      	ldr	r3, [pc, #484]	; (8003824 <ADC_Init+0x1f0>)
 800363e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	021a      	lsls	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800368c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	4a58      	ldr	r2, [pc, #352]	; (8003828 <ADC_Init+0x1f4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6899      	ldr	r1, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	e00f      	b.n	8003732 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0202 	bic.w	r2, r2, #2
 8003740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6899      	ldr	r1, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7e1b      	ldrb	r3, [r3, #24]
 800374c:	005a      	lsls	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800377e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	3b01      	subs	r3, #1
 800378c:	035a      	lsls	r2, r3, #13
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	e007      	b.n	80037a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	051a      	lsls	r2, r3, #20
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037ea:	025a      	lsls	r2, r3, #9
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6899      	ldr	r1, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	029a      	lsls	r2, r3, #10
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40012300 	.word	0x40012300
 8003828:	0f000001 	.word	0x0f000001

0800382c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003842:	2b00      	cmp	r3, #0
 8003844:	d13c      	bne.n	80038c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d12b      	bne.n	80038b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	d127      	bne.n	80038b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003880:	2b00      	cmp	r3, #0
 8003882:	d119      	bne.n	80038b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0220 	bic.w	r2, r2, #32
 8003892:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff fd6b 	bl	8003394 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038be:	e00e      	b.n	80038de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fd75 	bl	80033bc <HAL_ADC_ErrorCallback>
}
 80038d2:	e004      	b.n	80038de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	4798      	blx	r3
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff fd57 	bl	80033a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2240      	movs	r2, #64	; 0x40
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff fd4a 	bl	80033bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800394c:	4013      	ands	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800395c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003962:	4a04      	ldr	r2, [pc, #16]	; (8003974 <__NVIC_SetPriorityGrouping+0x44>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	60d3      	str	r3, [r2, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <__NVIC_GetPriorityGrouping+0x18>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	f003 0307 	and.w	r3, r3, #7
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	db0b      	blt.n	80039be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	4907      	ldr	r1, [pc, #28]	; (80039cc <__NVIC_EnableIRQ+0x38>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2001      	movs	r0, #1
 80039b6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	e000e100 	.word	0xe000e100

080039d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	db12      	blt.n	8003a08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	490a      	ldr	r1, [pc, #40]	; (8003a14 <__NVIC_DisableIRQ+0x44>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2001      	movs	r0, #1
 80039f2:	fa00 f202 	lsl.w	r2, r0, r2
 80039f6:	3320      	adds	r3, #32
 80039f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039fc:	f3bf 8f4f 	dsb	sy
}
 8003a00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a02:	f3bf 8f6f 	isb	sy
}
 8003a06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
         );
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ff28 	bl	8003930 <__NVIC_SetPriorityGrouping>
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afa:	f7ff ff3d 	bl	8003978 <__NVIC_GetPriorityGrouping>
 8003afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	6978      	ldr	r0, [r7, #20]
 8003b06:	f7ff ffb1 	bl	8003a6c <NVIC_EncodePriority>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff80 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff30 	bl	8003994 <__NVIC_EnableIRQ>
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff40 	bl	80039d0 <__NVIC_DisableIRQ>
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff fa58 	bl	8003018 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e099      	b.n	8003ca8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b94:	e00f      	b.n	8003bb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b96:	f7ff fa3f 	bl	8003018 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d908      	bls.n	8003bb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2203      	movs	r2, #3
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e078      	b.n	8003ca8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e8      	bne.n	8003b96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_DMA_Init+0x158>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d107      	bne.n	8003c20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0307 	bic.w	r3, r3, #7
 8003c36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d117      	bne.n	8003c7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fadf 	bl	8004220 <DMA_CheckFifoParam>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c76:	2301      	movs	r3, #1
 8003c78:	e016      	b.n	8003ca8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa96 	bl	80041b4 <DMA_CalcBaseAndBitshift>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	223f      	movs	r2, #63	; 0x3f
 8003c92:	409a      	lsls	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	f010803f 	.word	0xf010803f

08003cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_DMA_Start_IT+0x26>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e040      	b.n	8003d5c <HAL_DMA_Start_IT+0xa8>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d12f      	bne.n	8003d4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fa28 	bl	8004158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	223f      	movs	r2, #63	; 0x3f
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0216 	orr.w	r2, r2, #22
 8003d22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e005      	b.n	8003d5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
 8003d58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d72:	f7ff f951 	bl	8003018 <HAL_GetTick>
 8003d76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d008      	beq.n	8003d96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2280      	movs	r2, #128	; 0x80
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e052      	b.n	8003e3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0216 	bic.w	r2, r2, #22
 8003da4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <HAL_DMA_Abort+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0208 	bic.w	r2, r2, #8
 8003dd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003de6:	e013      	b.n	8003e10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003de8:	f7ff f916 	bl	8003018 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d90c      	bls.n	8003e10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e015      	b.n	8003e3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e4      	bne.n	8003de8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	223f      	movs	r2, #63	; 0x3f
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e50:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_DMA_IRQHandler+0x258>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a92      	ldr	r2, [pc, #584]	; (80040a0 <HAL_DMA_IRQHandler+0x25c>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0a9b      	lsrs	r3, r3, #10
 8003e5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	2208      	movs	r2, #8
 8003e70:	409a      	lsls	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01a      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f043 0202 	orr.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2204      	movs	r2, #4
 8003eec:	409a      	lsls	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d012      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	2204      	movs	r2, #4
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	2210      	movs	r2, #16
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d043      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d03c      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	2210      	movs	r2, #16
 8003f40:	409a      	lsls	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d024      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
 8003f72:	e01f      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e016      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0208 	bic.w	r2, r2, #8
 8003fa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2220      	movs	r2, #32
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 808e 	beq.w	80040e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8086 	beq.w	80040e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	2220      	movs	r2, #32
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d136      	bne.n	800405c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0216 	bic.w	r2, r2, #22
 8003ffc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800400c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <HAL_DMA_IRQHandler+0x1da>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0208 	bic.w	r2, r2, #8
 800402c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	223f      	movs	r2, #63	; 0x3f
 8004034:	409a      	lsls	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d07d      	beq.n	800414e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
        }
        return;
 800405a:	e078      	b.n	800414e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01c      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d108      	bne.n	800408a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	2b00      	cmp	r3, #0
 800407e:	d030      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e02b      	b.n	80040e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d027      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
 800409a:	e022      	b.n	80040e2 <HAL_DMA_IRQHandler+0x29e>
 800409c:	20000000 	.word	0x20000000
 80040a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0210 	bic.w	r2, r2, #16
 80040c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d032      	beq.n	8004150 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d022      	beq.n	800413c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2205      	movs	r2, #5
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	3301      	adds	r3, #1
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	429a      	cmp	r2, r3
 8004118:	d307      	bcc.n	800412a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f2      	bne.n	800410e <HAL_DMA_IRQHandler+0x2ca>
 8004128:	e000      	b.n	800412c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800412a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
 800414c:	e000      	b.n	8004150 <HAL_DMA_IRQHandler+0x30c>
        return;
 800414e:	bf00      	nop
    }
  }
}
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d108      	bne.n	8004198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004196:	e007      	b.n	80041a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3b10      	subs	r3, #16
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <DMA_CalcBaseAndBitshift+0x64>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <DMA_CalcBaseAndBitshift+0x68>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d909      	bls.n	80041f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
 80041f4:	e007      	b.n	8004206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	aaaaaaab 	.word	0xaaaaaaab
 800421c:	08011ac0 	.word	0x08011ac0

08004220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11f      	bne.n	800427a <DMA_CheckFifoParam+0x5a>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d856      	bhi.n	80042ee <DMA_CheckFifoParam+0xce>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <DMA_CheckFifoParam+0x28>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	0800426b 	.word	0x0800426b
 8004250:	08004259 	.word	0x08004259
 8004254:	080042ef 	.word	0x080042ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d046      	beq.n	80042f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e043      	b.n	80042f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004272:	d140      	bne.n	80042f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e03d      	b.n	80042f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d121      	bne.n	80042c8 <DMA_CheckFifoParam+0xa8>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d837      	bhi.n	80042fa <DMA_CheckFifoParam+0xda>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <DMA_CheckFifoParam+0x70>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042a7 	.word	0x080042a7
 8004298:	080042a1 	.word	0x080042a1
 800429c:	080042b9 	.word	0x080042b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      break;
 80042a4:	e030      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d025      	beq.n	80042fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b6:	e022      	b.n	80042fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c0:	d11f      	bne.n	8004302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c6:	e01c      	b.n	8004302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d903      	bls.n	80042d6 <DMA_CheckFifoParam+0xb6>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d003      	beq.n	80042dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d4:	e018      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      break;
 80042da:	e015      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e00b      	b.n	8004306 <DMA_CheckFifoParam+0xe6>
      break;
 80042ee:	bf00      	nop
 80042f0:	e00a      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e008      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e006      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e004      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;   
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
    }
  } 
  
  return status; 
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e159      	b.n	80045e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 8148 	bne.w	80045e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004366:	2b02      	cmp	r3, #2
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d017      	beq.n	8004408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a2 	beq.w	80045e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b57      	ldr	r3, [pc, #348]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <HAL_GPIO_Init+0x2e8>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ba:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_GPIO_Init+0x2ec>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a49      	ldr	r2, [pc, #292]	; (8004608 <HAL_GPIO_Init+0x2f0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d019      	beq.n	800451a <HAL_GPIO_Init+0x202>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a48      	ldr	r2, [pc, #288]	; (800460c <HAL_GPIO_Init+0x2f4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x1fe>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a47      	ldr	r2, [pc, #284]	; (8004610 <HAL_GPIO_Init+0x2f8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x1fa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_GPIO_Init+0x2fc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x1f6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a45      	ldr	r2, [pc, #276]	; (8004618 <HAL_GPIO_Init+0x300>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x1f2>
 8004506:	2304      	movs	r3, #4
 8004508:	e008      	b.n	800451c <HAL_GPIO_Init+0x204>
 800450a:	2307      	movs	r3, #7
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x204>
 800450e:	2303      	movs	r3, #3
 8004510:	e004      	b.n	800451c <HAL_GPIO_Init+0x204>
 8004512:	2302      	movs	r3, #2
 8004514:	e002      	b.n	800451c <HAL_GPIO_Init+0x204>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_GPIO_Init+0x204>
 800451a:	2300      	movs	r3, #0
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f002 0203 	and.w	r2, r2, #3
 8004522:	0092      	lsls	r2, r2, #2
 8004524:	4093      	lsls	r3, r2
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800452c:	4935      	ldr	r1, [pc, #212]	; (8004604 <HAL_GPIO_Init+0x2ec>)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	3302      	adds	r3, #2
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_GPIO_Init+0x304>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800455e:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_GPIO_Init+0x304>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_GPIO_Init+0x304>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_GPIO_Init+0x304>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800458e:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_GPIO_Init+0x304>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_GPIO_Init+0x304>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_GPIO_Init+0x304>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045dc:	4a0f      	ldr	r2, [pc, #60]	; (800461c <HAL_GPIO_Init+0x304>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	f67f aea2 	bls.w	8004334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40013800 	.word	0x40013800
 8004608:	40020000 	.word	0x40020000
 800460c:	40020400 	.word	0x40020400
 8004610:	40020800 	.word	0x40020800
 8004614:	40020c00 	.word	0x40020c00
 8004618:	40021000 	.word	0x40021000
 800461c:	40013c00 	.word	0x40013c00

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800463c:	e003      	b.n	8004646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	619a      	str	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe f8d4 	bl	8002820 <HAL_GPIO_EXTI_Callback>
  }
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40013c00 	.word	0x40013c00

08004684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e12b      	b.n	80048ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fd4e 	bl	800214c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046e8:	f001 fbae 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 80046ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a81      	ldr	r2, [pc, #516]	; (80048f8 <HAL_I2C_Init+0x274>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d807      	bhi.n	8004708 <HAL_I2C_Init+0x84>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a80      	ldr	r2, [pc, #512]	; (80048fc <HAL_I2C_Init+0x278>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf94      	ite	ls
 8004700:	2301      	movls	r3, #1
 8004702:	2300      	movhi	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e006      	b.n	8004716 <HAL_I2C_Init+0x92>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a7d      	ldr	r2, [pc, #500]	; (8004900 <HAL_I2C_Init+0x27c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	bf94      	ite	ls
 8004710:	2301      	movls	r3, #1
 8004712:	2300      	movhi	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0e7      	b.n	80048ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a78      	ldr	r2, [pc, #480]	; (8004904 <HAL_I2C_Init+0x280>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9b      	lsrs	r3, r3, #18
 8004728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a6a      	ldr	r2, [pc, #424]	; (80048f8 <HAL_I2C_Init+0x274>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d802      	bhi.n	8004758 <HAL_I2C_Init+0xd4>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3301      	adds	r3, #1
 8004756:	e009      	b.n	800476c <HAL_I2C_Init+0xe8>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	4a69      	ldr	r2, [pc, #420]	; (8004908 <HAL_I2C_Init+0x284>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	3301      	adds	r3, #1
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	430b      	orrs	r3, r1
 8004772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800477e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	495c      	ldr	r1, [pc, #368]	; (80048f8 <HAL_I2C_Init+0x274>)
 8004788:	428b      	cmp	r3, r1
 800478a:	d819      	bhi.n	80047c0 <HAL_I2C_Init+0x13c>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e59      	subs	r1, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	fbb1 f3f3 	udiv	r3, r1, r3
 800479a:	1c59      	adds	r1, r3, #1
 800479c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a0:	400b      	ands	r3, r1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_I2C_Init+0x138>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1e59      	subs	r1, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	e051      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 80047bc:	2304      	movs	r3, #4
 80047be:	e04f      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d111      	bne.n	80047ec <HAL_I2C_Init+0x168>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e58      	subs	r0, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	440b      	add	r3, r1
 80047d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e012      	b.n	8004812 <HAL_I2C_Init+0x18e>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e58      	subs	r0, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	0099      	lsls	r1, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Init+0x196>
 8004816:	2301      	movs	r3, #1
 8004818:	e022      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10e      	bne.n	8004840 <HAL_I2C_Init+0x1bc>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1e58      	subs	r0, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	440b      	add	r3, r1
 8004830:	fbb0 f3f3 	udiv	r3, r0, r3
 8004834:	3301      	adds	r3, #1
 8004836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e58      	subs	r0, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	0099      	lsls	r1, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	fbb0 f3f3 	udiv	r3, r0, r3
 8004856:	3301      	adds	r3, #1
 8004858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	6809      	ldr	r1, [r1, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800488e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6911      	ldr	r1, [r2, #16]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	000186a0 	.word	0x000186a0
 80048fc:	001e847f 	.word	0x001e847f
 8004900:	003d08ff 	.word	0x003d08ff
 8004904:	431bde83 	.word	0x431bde83
 8004908:	10624dd3 	.word	0x10624dd3

0800490c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	461a      	mov	r2, r3
 8004918:	460b      	mov	r3, r1
 800491a:	817b      	strh	r3, [r7, #10]
 800491c:	4613      	mov	r3, r2
 800491e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004920:	f7fe fb7a 	bl	8003018 <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	f040 80e0 	bne.w	8004af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2319      	movs	r3, #25
 800493a:	2201      	movs	r2, #1
 800493c:	4970      	ldr	r1, [pc, #448]	; (8004b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fc58 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
 800494c:	e0d3      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_I2C_Master_Transmit+0x50>
 8004958:	2302      	movs	r3, #2
 800495a:	e0cc      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d007      	beq.n	8004982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	; 0x21
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2210      	movs	r2, #16
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	893a      	ldrh	r2, [r7, #8]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a50      	ldr	r2, [pc, #320]	; (8004b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80049c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fac2 	bl	8004f54 <I2C_MasterRequestWrite>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e08d      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049f0:	e066      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fcd2 	bl	80053a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06b      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_I2C_Master_Transmit+0x188>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	6a39      	ldr	r1, [r7, #32]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fcc2 	bl	8005422 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d107      	bne.n	8004abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e01a      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d194      	bne.n	80049f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	00100002 	.word	0x00100002
 8004b04:	ffff0000 	.word	0xffff0000

08004b08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	461a      	mov	r2, r3
 8004b14:	460b      	mov	r3, r1
 8004b16:	817b      	strh	r3, [r7, #10]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b1c:	f7fe fa7c 	bl	8003018 <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	f040 820b 	bne.w	8004f46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	2319      	movs	r3, #25
 8004b36:	2201      	movs	r2, #1
 8004b38:	497c      	ldr	r1, [pc, #496]	; (8004d2c <HAL_I2C_Master_Receive+0x224>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb5a 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b46:	2302      	movs	r3, #2
 8004b48:	e1fe      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_I2C_Master_Receive+0x50>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e1f7      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d007      	beq.n	8004b7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2222      	movs	r2, #34	; 0x22
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2210      	movs	r2, #16
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	893a      	ldrh	r2, [r7, #8]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a5c      	ldr	r2, [pc, #368]	; (8004d30 <HAL_I2C_Master_Receive+0x228>)
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bc0:	8979      	ldrh	r1, [r7, #10]
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa46 	bl	8005058 <I2C_MasterRequestRead>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e1b8      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d113      	bne.n	8004c06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	e18c      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d11b      	bne.n	8004c46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e16c      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d11b      	bne.n	8004c86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	e14c      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cac:	e138      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	f200 80f1 	bhi.w	8004e9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d123      	bne.n	8004d08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fbed 	bl	80054a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e139      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d06:	e10b      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d14e      	bne.n	8004dae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	2200      	movs	r2, #0
 8004d18:	4906      	ldr	r1, [pc, #24]	; (8004d34 <HAL_I2C_Master_Receive+0x22c>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa6a 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e10e      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
 8004d2a:	bf00      	nop
 8004d2c:	00100002 	.word	0x00100002
 8004d30:	ffff0000 	.word	0xffff0000
 8004d34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dac:	e0b8      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	4966      	ldr	r1, [pc, #408]	; (8004f50 <HAL_I2C_Master_Receive+0x448>)
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fa1b 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0bf      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	2200      	movs	r2, #0
 8004e12:	494f      	ldr	r1, [pc, #316]	; (8004f50 <HAL_I2C_Master_Receive+0x448>)
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f9ed 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e091      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e98:	e042      	b.n	8004f20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fb00 	bl	80054a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e04c      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d118      	bne.n	8004f20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f47f aec2 	bne.w	8004cae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3728      	adds	r7, #40	; 0x28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	00010004 	.word	0x00010004

08004f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	460b      	mov	r3, r1
 8004f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d006      	beq.n	8004f7e <I2C_MasterRequestWrite+0x2a>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d003      	beq.n	8004f7e <I2C_MasterRequestWrite+0x2a>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f7c:	d108      	bne.n	8004f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e00b      	b.n	8004fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	2b12      	cmp	r3, #18
 8004f96:	d107      	bne.n	8004fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f91d 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	d103      	bne.n	8004fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e035      	b.n	8005048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe4:	d108      	bne.n	8004ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fe6:	897b      	ldrh	r3, [r7, #10]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ff4:	611a      	str	r2, [r3, #16]
 8004ff6:	e01b      	b.n	8005030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ff8:	897b      	ldrh	r3, [r7, #10]
 8004ffa:	11db      	asrs	r3, r3, #7
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0306 	and.w	r3, r3, #6
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f063 030f 	orn	r3, r3, #15
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	490e      	ldr	r1, [pc, #56]	; (8005050 <I2C_MasterRequestWrite+0xfc>)
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f943 	bl	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e010      	b.n	8005048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4907      	ldr	r1, [pc, #28]	; (8005054 <I2C_MasterRequestWrite+0x100>)
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f933 	bl	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	00010008 	.word	0x00010008
 8005054:	00010002 	.word	0x00010002

08005058 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800507c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d006      	beq.n	8005092 <I2C_MasterRequestRead+0x3a>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d003      	beq.n	8005092 <I2C_MasterRequestRead+0x3a>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005090:	d108      	bne.n	80050a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e00b      	b.n	80050bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	2b11      	cmp	r3, #17
 80050aa:	d107      	bne.n	80050bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f893 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e2:	d103      	bne.n	80050ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e079      	b.n	80051e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f8:	d108      	bne.n	800510c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	611a      	str	r2, [r3, #16]
 800510a:	e05f      	b.n	80051cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800510c:	897b      	ldrh	r3, [r7, #10]
 800510e:	11db      	asrs	r3, r3, #7
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 0306 	and.w	r3, r3, #6
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f063 030f 	orn	r3, r3, #15
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4930      	ldr	r1, [pc, #192]	; (80051ec <I2C_MasterRequestRead+0x194>)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f8b9 	bl	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e054      	b.n	80051e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4929      	ldr	r1, [pc, #164]	; (80051f0 <I2C_MasterRequestRead+0x198>)
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f8a9 	bl	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e044      	b.n	80051e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f831 	bl	80051f4 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00d      	beq.n	80051b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a6:	d103      	bne.n	80051b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e017      	b.n	80051e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051b4:	897b      	ldrh	r3, [r7, #10]
 80051b6:	11db      	asrs	r3, r3, #7
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 0306 	and.w	r3, r3, #6
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f063 030e 	orn	r3, r3, #14
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4907      	ldr	r1, [pc, #28]	; (80051f0 <I2C_MasterRequestRead+0x198>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f865 	bl	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	00010008 	.word	0x00010008
 80051f0:	00010002 	.word	0x00010002

080051f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005204:	e025      	b.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d021      	beq.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fd ff03 	bl	8003018 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e023      	b.n	800529a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d10d      	bne.n	8005278 <I2C_WaitOnFlagUntilTimeout+0x84>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	43da      	mvns	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	e00c      	b.n	8005292 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	43da      	mvns	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4013      	ands	r3, r2
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	429a      	cmp	r2, r3
 8005296:	d0b6      	beq.n	8005206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b0:	e051      	b.n	8005356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c0:	d123      	bne.n	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e046      	b.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d021      	beq.n	8005356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005312:	f7fd fe81 	bl	8003018 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d116      	bne.n	8005356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e020      	b.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10c      	bne.n	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	43da      	mvns	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	e00b      	b.n	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	43da      	mvns	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d18d      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ac:	e02d      	b.n	800540a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 f8ce 	bl	8005550 <I2C_IsAcknowledgeFailed>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e02d      	b.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d021      	beq.n	800540a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fd fe27 	bl	8003018 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d116      	bne.n	800540a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e007      	b.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d1ca      	bne.n	80053ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800542e:	e02d      	b.n	800548c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f88d 	bl	8005550 <I2C_IsAcknowledgeFailed>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e02d      	b.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d021      	beq.n	800548c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005448:	f7fd fde6 	bl	8003018 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d116      	bne.n	800548c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e007      	b.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d1ca      	bne.n	8005430 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b0:	e042      	b.n	8005538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d119      	bne.n	80054f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0210 	mvn.w	r2, #16
 80054c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e029      	b.n	8005548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f4:	f7fd fd90 	bl	8003018 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	d302      	bcc.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d116      	bne.n	8005538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e007      	b.n	8005548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d1b5      	bne.n	80054b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005566:	d11b      	bne.n	80055a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f043 0204 	orr.w	r2, r3, #4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e264      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d075      	beq.n	80056ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ce:	4ba3      	ldr	r3, [pc, #652]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d00c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055da:	4ba0      	ldr	r3, [pc, #640]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d112      	bne.n	800560c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e6:	4b9d      	ldr	r3, [pc, #628]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f2:	d10b      	bne.n	800560c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f4:	4b99      	ldr	r3, [pc, #612]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05b      	beq.n	80056b8 <HAL_RCC_OscConfig+0x108>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d157      	bne.n	80056b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e23f      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005614:	d106      	bne.n	8005624 <HAL_RCC_OscConfig+0x74>
 8005616:	4b91      	ldr	r3, [pc, #580]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a90      	ldr	r2, [pc, #576]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e01d      	b.n	8005660 <HAL_RCC_OscConfig+0xb0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800562c:	d10c      	bne.n	8005648 <HAL_RCC_OscConfig+0x98>
 800562e:	4b8b      	ldr	r3, [pc, #556]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a8a      	ldr	r2, [pc, #552]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	4b88      	ldr	r3, [pc, #544]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a87      	ldr	r2, [pc, #540]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e00b      	b.n	8005660 <HAL_RCC_OscConfig+0xb0>
 8005648:	4b84      	ldr	r3, [pc, #528]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a83      	ldr	r2, [pc, #524]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4b81      	ldr	r3, [pc, #516]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a80      	ldr	r2, [pc, #512]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800565a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fd fcd6 	bl	8003018 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005670:	f7fd fcd2 	bl	8003018 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	; 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e204      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005682:	4b76      	ldr	r3, [pc, #472]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0xc0>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7fd fcc2 	bl	8003018 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005698:	f7fd fcbe 	bl	8003018 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	; 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e1f0      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056aa:	4b6c      	ldr	r3, [pc, #432]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0xe8>
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d063      	beq.n	800578e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056c6:	4b65      	ldr	r3, [pc, #404]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d2:	4b62      	ldr	r3, [pc, #392]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d11c      	bne.n	8005718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056de:	4b5f      	ldr	r3, [pc, #380]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d116      	bne.n	8005718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ea:	4b5c      	ldr	r3, [pc, #368]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_RCC_OscConfig+0x152>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d001      	beq.n	8005702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e1c4      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005702:	4b56      	ldr	r3, [pc, #344]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4952      	ldr	r1, [pc, #328]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005716:	e03a      	b.n	800578e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d020      	beq.n	8005762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005720:	4b4f      	ldr	r3, [pc, #316]	; (8005860 <HAL_RCC_OscConfig+0x2b0>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fd fc77 	bl	8003018 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800572e:	f7fd fc73 	bl	8003018 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e1a5      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005740:	4b46      	ldr	r3, [pc, #280]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574c:	4b43      	ldr	r3, [pc, #268]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4940      	ldr	r1, [pc, #256]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]
 8005760:	e015      	b.n	800578e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005762:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_RCC_OscConfig+0x2b0>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fd fc56 	bl	8003018 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005770:	f7fd fc52 	bl	8003018 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e184      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005782:	4b36      	ldr	r3, [pc, #216]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d030      	beq.n	80057fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d016      	beq.n	80057d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a2:	4b30      	ldr	r3, [pc, #192]	; (8005864 <HAL_RCC_OscConfig+0x2b4>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fd fc36 	bl	8003018 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b0:	f7fd fc32 	bl	8003018 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e164      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c2:	4b26      	ldr	r3, [pc, #152]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x200>
 80057ce:	e015      	b.n	80057fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <HAL_RCC_OscConfig+0x2b4>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d6:	f7fd fc1f 	bl	8003018 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057de:	f7fd fc1b 	bl	8003018 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e14d      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f0:	4b1a      	ldr	r3, [pc, #104]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 80057f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80a0 	beq.w	800594a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10f      	bne.n	800583a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	4b0f      	ldr	r3, [pc, #60]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	4a0e      	ldr	r2, [pc, #56]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 8005824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005828:	6413      	str	r3, [r2, #64]	; 0x40
 800582a:	4b0c      	ldr	r3, [pc, #48]	; (800585c <HAL_RCC_OscConfig+0x2ac>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <HAL_RCC_OscConfig+0x2b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d121      	bne.n	800588a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <HAL_RCC_OscConfig+0x2b8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a07      	ldr	r2, [pc, #28]	; (8005868 <HAL_RCC_OscConfig+0x2b8>)
 800584c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005852:	f7fd fbe1 	bl	8003018 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005858:	e011      	b.n	800587e <HAL_RCC_OscConfig+0x2ce>
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800
 8005860:	42470000 	.word	0x42470000
 8005864:	42470e80 	.word	0x42470e80
 8005868:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586c:	f7fd fbd4 	bl	8003018 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e106      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587e:	4b85      	ldr	r3, [pc, #532]	; (8005a94 <HAL_RCC_OscConfig+0x4e4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d106      	bne.n	80058a0 <HAL_RCC_OscConfig+0x2f0>
 8005892:	4b81      	ldr	r3, [pc, #516]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a80      	ldr	r2, [pc, #512]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
 800589e:	e01c      	b.n	80058da <HAL_RCC_OscConfig+0x32a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d10c      	bne.n	80058c2 <HAL_RCC_OscConfig+0x312>
 80058a8:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4a7a      	ldr	r2, [pc, #488]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058ae:	f043 0304 	orr.w	r3, r3, #4
 80058b2:	6713      	str	r3, [r2, #112]	; 0x70
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	4a77      	ldr	r2, [pc, #476]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6713      	str	r3, [r2, #112]	; 0x70
 80058c0:	e00b      	b.n	80058da <HAL_RCC_OscConfig+0x32a>
 80058c2:	4b75      	ldr	r3, [pc, #468]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a74      	ldr	r2, [pc, #464]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	4b72      	ldr	r3, [pc, #456]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	4a71      	ldr	r2, [pc, #452]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80058d4:	f023 0304 	bic.w	r3, r3, #4
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d015      	beq.n	800590e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e2:	f7fd fb99 	bl	8003018 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e8:	e00a      	b.n	8005900 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fd fb95 	bl	8003018 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e0c5      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005900:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ee      	beq.n	80058ea <HAL_RCC_OscConfig+0x33a>
 800590c:	e014      	b.n	8005938 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590e:	f7fd fb83 	bl	8003018 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005914:	e00a      	b.n	800592c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fd fb7f 	bl	8003018 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e0af      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592c:	4b5a      	ldr	r3, [pc, #360]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1ee      	bne.n	8005916 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593e:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	4a55      	ldr	r2, [pc, #340]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005948:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 809b 	beq.w	8005a8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005954:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b08      	cmp	r3, #8
 800595e:	d05c      	beq.n	8005a1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d141      	bne.n	80059ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005968:	4b4c      	ldr	r3, [pc, #304]	; (8005a9c <HAL_RCC_OscConfig+0x4ec>)
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596e:	f7fd fb53 	bl	8003018 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005976:	f7fd fb4f 	bl	8003018 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e081      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005988:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f0      	bne.n	8005976 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	019b      	lsls	r3, r3, #6
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	4937      	ldr	r1, [pc, #220]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059be:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCC_OscConfig+0x4ec>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c4:	f7fd fb28 	bl	8003018 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fd fb24 	bl	8003018 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e056      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x41c>
 80059ea:	e04e      	b.n	8005a8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <HAL_RCC_OscConfig+0x4ec>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f2:	f7fd fb11 	bl	8003018 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fd fb0d 	bl	8003018 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e03f      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <HAL_RCC_OscConfig+0x44a>
 8005a18:	e037      	b.n	8005a8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e032      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCC_OscConfig+0x4e8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d028      	beq.n	8005a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d121      	bne.n	8005a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d11a      	bne.n	8005a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40007000 	.word	0x40007000
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	42470060 	.word	0x42470060

08005aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0cc      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b68      	ldr	r3, [pc, #416]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d90c      	bls.n	8005adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b65      	ldr	r3, [pc, #404]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0b8      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b0c:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b18:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	494d      	ldr	r1, [pc, #308]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d044      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d119      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d003      	beq.n	8005b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5e:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e06f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6e:	4b3b      	ldr	r3, [pc, #236]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e067      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f023 0203 	bic.w	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4934      	ldr	r1, [pc, #208]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b90:	f7fd fa42 	bl	8003018 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b98:	f7fd fa3e 	bl	8003018 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e04f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 020c 	and.w	r2, r3, #12
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1eb      	bne.n	8005b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d20c      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b20      	ldr	r3, [pc, #128]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e032      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4916      	ldr	r1, [pc, #88]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	490e      	ldr	r1, [pc, #56]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c26:	f000 f821 	bl	8005c6c <HAL_RCC_GetSysClockFreq>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	490a      	ldr	r1, [pc, #40]	; (8005c60 <HAL_RCC_ClockConfig+0x1c0>)
 8005c38:	5ccb      	ldrb	r3, [r1, r3]
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1c8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fc fe82 	bl	8002950 <HAL_InitTick>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40023c00 	.word	0x40023c00
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	08011aa8 	.word	0x08011aa8
 8005c64:	20000000 	.word	0x20000000
 8005c68:	20000004 	.word	0x20000004

08005c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c84:	4b67      	ldr	r3, [pc, #412]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d00d      	beq.n	8005cac <HAL_RCC_GetSysClockFreq+0x40>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	f200 80bd 	bhi.w	8005e10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d003      	beq.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c9e:	e0b7      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ca2:	60bb      	str	r3, [r7, #8]
       break;
 8005ca4:	e0b7      	b.n	8005e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ca6:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ca8:	60bb      	str	r3, [r7, #8]
      break;
 8005caa:	e0b4      	b.n	8005e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cac:	4b5d      	ldr	r3, [pc, #372]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cb6:	4b5b      	ldr	r3, [pc, #364]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04d      	beq.n	8005d5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc2:	4b58      	ldr	r3, [pc, #352]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	099b      	lsrs	r3, r3, #6
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	ea02 0800 	and.w	r8, r2, r0
 8005cda:	ea03 0901 	and.w	r9, r3, r1
 8005cde:	4640      	mov	r0, r8
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	014b      	lsls	r3, r1, #5
 8005cec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cf0:	0142      	lsls	r2, r0, #5
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	ebb0 0008 	subs.w	r0, r0, r8
 8005cfa:	eb61 0109 	sbc.w	r1, r1, r9
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	018b      	lsls	r3, r1, #6
 8005d08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d0c:	0182      	lsls	r2, r0, #6
 8005d0e:	1a12      	subs	r2, r2, r0
 8005d10:	eb63 0301 	sbc.w	r3, r3, r1
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f04f 0100 	mov.w	r1, #0
 8005d1c:	00d9      	lsls	r1, r3, #3
 8005d1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d22:	00d0      	lsls	r0, r2, #3
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	eb12 0208 	adds.w	r2, r2, r8
 8005d2c:	eb43 0309 	adc.w	r3, r3, r9
 8005d30:	f04f 0000 	mov.w	r0, #0
 8005d34:	f04f 0100 	mov.w	r1, #0
 8005d38:	0259      	lsls	r1, r3, #9
 8005d3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d3e:	0250      	lsls	r0, r2, #9
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	f7fa ff52 	bl	8000bf8 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4613      	mov	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e04a      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d5e:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	099b      	lsrs	r3, r3, #6
 8005d64:	461a      	mov	r2, r3
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	ea02 0400 	and.w	r4, r2, r0
 8005d76:	ea03 0501 	and.w	r5, r3, r1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f04f 0200 	mov.w	r2, #0
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	014b      	lsls	r3, r1, #5
 8005d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d8c:	0142      	lsls	r2, r0, #5
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	1b00      	subs	r0, r0, r4
 8005d94:	eb61 0105 	sbc.w	r1, r1, r5
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	018b      	lsls	r3, r1, #6
 8005da2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005da6:	0182      	lsls	r2, r0, #6
 8005da8:	1a12      	subs	r2, r2, r0
 8005daa:	eb63 0301 	sbc.w	r3, r3, r1
 8005dae:	f04f 0000 	mov.w	r0, #0
 8005db2:	f04f 0100 	mov.w	r1, #0
 8005db6:	00d9      	lsls	r1, r3, #3
 8005db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dbc:	00d0      	lsls	r0, r2, #3
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	1912      	adds	r2, r2, r4
 8005dc4:	eb45 0303 	adc.w	r3, r5, r3
 8005dc8:	f04f 0000 	mov.w	r0, #0
 8005dcc:	f04f 0100 	mov.w	r1, #0
 8005dd0:	0299      	lsls	r1, r3, #10
 8005dd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005dd6:	0290      	lsls	r0, r2, #10
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	f7fa ff06 	bl	8000bf8 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4613      	mov	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	3301      	adds	r3, #1
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	60bb      	str	r3, [r7, #8]
      break;
 8005e0e:	e002      	b.n	8005e16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e12:	60bb      	str	r3, [r7, #8]
      break;
 8005e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e16:	68bb      	ldr	r3, [r7, #8]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800
 8005e28:	00f42400 	.word	0x00f42400
 8005e2c:	007a1200 	.word	0x007a1200

08005e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000000 	.word	0x20000000

08005e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e4c:	f7ff fff0 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	0a9b      	lsrs	r3, r3, #10
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4903      	ldr	r1, [pc, #12]	; (8005e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	08011ab8 	.word	0x08011ab8

08005e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e74:	f7ff ffdc 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	0b5b      	lsrs	r3, r3, #13
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	4903      	ldr	r1, [pc, #12]	; (8005e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	08011ab8 	.word	0x08011ab8

08005e98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	220f      	movs	r2, #15
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 0203 	and.w	r2, r3, #3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <HAL_RCC_GetClockConfig+0x60>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0207 	and.w	r2, r3, #7
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	601a      	str	r2, [r3, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	40023c00 	.word	0x40023c00

08005efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e041      	b.n	8005f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fc ff84 	bl	8002e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f000 fcc8 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e044      	b.n	800603e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	; (800604c <HAL_TIM_Base_Start_IT+0xb0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x6c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d013      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x6c>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1a      	ldr	r2, [pc, #104]	; (8006050 <HAL_TIM_Base_Start_IT+0xb4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x6c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x6c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	; (8006058 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x6c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a16      	ldr	r2, [pc, #88]	; (800605c <HAL_TIM_Base_Start_IT+0xc0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d111      	bne.n	800602c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b06      	cmp	r3, #6
 8006018:	d010      	beq.n	800603c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602a:	e007      	b.n	800603c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40014000 	.word	0x40014000

08006060 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e041      	b.n	80060f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fc fe82 	bl	8002d90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f000 fc16 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_TIM_IC_Start_IT+0x1e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800611a:	b2db      	uxtb	r3, r3
 800611c:	e013      	b.n	8006146 <HAL_TIM_IC_Start_IT+0x46>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d104      	bne.n	800612e <HAL_TIM_IC_Start_IT+0x2e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800612a:	b2db      	uxtb	r3, r3
 800612c:	e00b      	b.n	8006146 <HAL_TIM_IC_Start_IT+0x46>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d104      	bne.n	800613e <HAL_TIM_IC_Start_IT+0x3e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800613a:	b2db      	uxtb	r3, r3
 800613c:	e003      	b.n	8006146 <HAL_TIM_IC_Start_IT+0x46>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006144:	b2db      	uxtb	r3, r3
 8006146:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <HAL_TIM_IC_Start_IT+0x58>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e013      	b.n	8006180 <HAL_TIM_IC_Start_IT+0x80>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d104      	bne.n	8006168 <HAL_TIM_IC_Start_IT+0x68>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e00b      	b.n	8006180 <HAL_TIM_IC_Start_IT+0x80>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b08      	cmp	r3, #8
 800616c:	d104      	bne.n	8006178 <HAL_TIM_IC_Start_IT+0x78>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e003      	b.n	8006180 <HAL_TIM_IC_Start_IT+0x80>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800617e:	b2db      	uxtb	r3, r3
 8006180:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d102      	bne.n	800618e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006188:	7b7b      	ldrb	r3, [r7, #13]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e0c2      	b.n	8006318 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_IC_Start_IT+0xa2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a0:	e013      	b.n	80061ca <HAL_TIM_IC_Start_IT+0xca>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_IC_Start_IT+0xb2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	e00b      	b.n	80061ca <HAL_TIM_IC_Start_IT+0xca>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_IC_Start_IT+0xc2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c0:	e003      	b.n	80061ca <HAL_TIM_IC_Start_IT+0xca>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <HAL_TIM_IC_Start_IT+0xda>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d8:	e013      	b.n	8006202 <HAL_TIM_IC_Start_IT+0x102>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d104      	bne.n	80061ea <HAL_TIM_IC_Start_IT+0xea>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061e8:	e00b      	b.n	8006202 <HAL_TIM_IC_Start_IT+0x102>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_IC_Start_IT+0xfa>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f8:	e003      	b.n	8006202 <HAL_TIM_IC_Start_IT+0x102>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b0c      	cmp	r3, #12
 8006206:	d841      	bhi.n	800628c <HAL_TIM_IC_Start_IT+0x18c>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_TIM_IC_Start_IT+0x110>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006245 	.word	0x08006245
 8006214:	0800628d 	.word	0x0800628d
 8006218:	0800628d 	.word	0x0800628d
 800621c:	0800628d 	.word	0x0800628d
 8006220:	08006257 	.word	0x08006257
 8006224:	0800628d 	.word	0x0800628d
 8006228:	0800628d 	.word	0x0800628d
 800622c:	0800628d 	.word	0x0800628d
 8006230:	08006269 	.word	0x08006269
 8006234:	0800628d 	.word	0x0800628d
 8006238:	0800628d 	.word	0x0800628d
 800623c:	0800628d 	.word	0x0800628d
 8006240:	0800627b 	.word	0x0800627b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0202 	orr.w	r2, r2, #2
 8006252:	60da      	str	r2, [r3, #12]
      break;
 8006254:	e01d      	b.n	8006292 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0204 	orr.w	r2, r2, #4
 8006264:	60da      	str	r2, [r3, #12]
      break;
 8006266:	e014      	b.n	8006292 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0208 	orr.w	r2, r2, #8
 8006276:	60da      	str	r2, [r3, #12]
      break;
 8006278:	e00b      	b.n	8006292 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0210 	orr.w	r2, r2, #16
 8006288:	60da      	str	r2, [r3, #12]
      break;
 800628a:	e002      	b.n	8006292 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
      break;
 8006290:	bf00      	nop
  }

  if (status == HAL_OK)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d13e      	bne.n	8006316 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2201      	movs	r2, #1
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fd4d 	bl	8006d40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_TIM_IC_Start_IT+0x220>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d013      	beq.n	80062e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <HAL_TIM_IC_Start_IT+0x224>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a17      	ldr	r2, [pc, #92]	; (8006328 <HAL_TIM_IC_Start_IT+0x228>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <HAL_TIM_IC_Start_IT+0x22c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_TIM_IC_Start_IT+0x230>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d111      	bne.n	8006306 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d010      	beq.n	8006316 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	e007      	b.n	8006316 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40010000 	.word	0x40010000
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40014000 	.word	0x40014000

08006334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d122      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b02      	cmp	r3, #2
 8006356:	d11b      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0202 	mvn.w	r2, #2
 8006360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fc fa0e 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 800637c:	e005      	b.n	800638a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa88 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa8f 	bl	80068a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d122      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11b      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0204 	mvn.w	r2, #4
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc f9e4 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa5e 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa65 	bl	80068a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0208 	mvn.w	r2, #8
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fc f9ba 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa34 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa3b 	bl	80068a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b10      	cmp	r3, #16
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0210 	mvn.w	r2, #16
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2208      	movs	r2, #8
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc f990 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa0a 	bl	8006894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa11 	bl	80068a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10e      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0201 	mvn.w	r2, #1
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fa08 	bl	80028c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d10e      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d107      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fccc 	bl	8006e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d10e      	bne.n	8006510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f9d6 	bl	80068bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b20      	cmp	r3, #32
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b20      	cmp	r3, #32
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0220 	mvn.w	r2, #32
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fc96 	bl	8006e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_TIM_IC_ConfigChannel+0x1e>
 800655e:	2302      	movs	r3, #2
 8006560:	e088      	b.n	8006674 <HAL_TIM_IC_ConfigChannel+0x130>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11b      	bne.n	80065a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6819      	ldr	r1, [r3, #0]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f000 fa26 	bl	80069d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 020c 	bic.w	r2, r2, #12
 8006592:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	619a      	str	r2, [r3, #24]
 80065a6:	e060      	b.n	800666a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d11c      	bne.n	80065e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f000 fa9e 	bl	8006afe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6999      	ldr	r1, [r3, #24]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	021a      	lsls	r2, r3, #8
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	619a      	str	r2, [r3, #24]
 80065e6:	e040      	b.n	800666a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d11b      	bne.n	8006626 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f000 faeb 	bl	8006bd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 020c 	bic.w	r2, r2, #12
 8006610:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	61da      	str	r2, [r3, #28]
 8006624:	e021      	b.n	800666a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b0c      	cmp	r3, #12
 800662a:	d11c      	bne.n	8006666 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f000 fb08 	bl	8006c50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69da      	ldr	r2, [r3, #28]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800664e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69d9      	ldr	r1, [r3, #28]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	61da      	str	r2, [r3, #28]
 8006664:	e001      	b.n	800666a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006672:	7dfb      	ldrb	r3, [r7, #23]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIM_ConfigClockSource+0x1c>
 8006694:	2302      	movs	r3, #2
 8006696:	e0b4      	b.n	8006802 <HAL_TIM_ConfigClockSource+0x186>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d0:	d03e      	beq.n	8006750 <HAL_TIM_ConfigClockSource+0xd4>
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d6:	f200 8087 	bhi.w	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	f000 8086 	beq.w	80067ee <HAL_TIM_ConfigClockSource+0x172>
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	d87f      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b70      	cmp	r3, #112	; 0x70
 80066ea:	d01a      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0xa6>
 80066ec:	2b70      	cmp	r3, #112	; 0x70
 80066ee:	d87b      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b60      	cmp	r3, #96	; 0x60
 80066f2:	d050      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x11a>
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d877      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b50      	cmp	r3, #80	; 0x50
 80066fa:	d03c      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0xfa>
 80066fc:	2b50      	cmp	r3, #80	; 0x50
 80066fe:	d873      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d058      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d86f      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d064      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d86b      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d060      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d867      	bhi.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d05c      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b10      	cmp	r3, #16
 800671e:	d05a      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006720:	e062      	b.n	80067e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6899      	ldr	r1, [r3, #8]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f000 fae5 	bl	8006d00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	609a      	str	r2, [r3, #8]
      break;
 800674e:	e04f      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6899      	ldr	r1, [r3, #8]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f000 face 	bl	8006d00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006772:	609a      	str	r2, [r3, #8]
      break;
 8006774:	e03c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6859      	ldr	r1, [r3, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	461a      	mov	r2, r3
 8006784:	f000 f98c 	bl	8006aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2150      	movs	r1, #80	; 0x50
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fa9b 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 8006794:	e02c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6859      	ldr	r1, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	461a      	mov	r2, r3
 80067a4:	f000 f9e8 	bl	8006b78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2160      	movs	r1, #96	; 0x60
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fa8b 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 80067b4:	e01c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 f96c 	bl	8006aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fa7b 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 80067d4:	e00c      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f000 fa72 	bl	8006cca <TIM_ITRx_SetConfig>
      break;
 80067e6:	e003      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	e000      	b.n	80067f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b0c      	cmp	r3, #12
 800681e:	d831      	bhi.n	8006884 <HAL_TIM_ReadCapturedValue+0x78>
 8006820:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800685d 	.word	0x0800685d
 800682c:	08006885 	.word	0x08006885
 8006830:	08006885 	.word	0x08006885
 8006834:	08006885 	.word	0x08006885
 8006838:	08006867 	.word	0x08006867
 800683c:	08006885 	.word	0x08006885
 8006840:	08006885 	.word	0x08006885
 8006844:	08006885 	.word	0x08006885
 8006848:	08006871 	.word	0x08006871
 800684c:	08006885 	.word	0x08006885
 8006850:	08006885 	.word	0x08006885
 8006854:	08006885 	.word	0x08006885
 8006858:	0800687b 	.word	0x0800687b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	60fb      	str	r3, [r7, #12]

      break;
 8006864:	e00f      	b.n	8006886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	60fb      	str	r3, [r7, #12]

      break;
 800686e:	e00a      	b.n	8006886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006876:	60fb      	str	r3, [r7, #12]

      break;
 8006878:	e005      	b.n	8006886 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	60fb      	str	r3, [r7, #12]

      break;
 8006882:	e000      	b.n	8006886 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006884:	bf00      	nop
  }

  return tmpreg;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a34      	ldr	r2, [pc, #208]	; (80069b4 <TIM_Base_SetConfig+0xe4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0x38>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0x38>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a31      	ldr	r2, [pc, #196]	; (80069b8 <TIM_Base_SetConfig+0xe8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0x38>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a30      	ldr	r2, [pc, #192]	; (80069bc <TIM_Base_SetConfig+0xec>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0x38>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a2f      	ldr	r2, [pc, #188]	; (80069c0 <TIM_Base_SetConfig+0xf0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a25      	ldr	r2, [pc, #148]	; (80069b4 <TIM_Base_SetConfig+0xe4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01b      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d017      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a22      	ldr	r2, [pc, #136]	; (80069b8 <TIM_Base_SetConfig+0xe8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a21      	ldr	r2, [pc, #132]	; (80069bc <TIM_Base_SetConfig+0xec>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00f      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <TIM_Base_SetConfig+0xf0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00b      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <TIM_Base_SetConfig+0xf4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <TIM_Base_SetConfig+0xf8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1d      	ldr	r2, [pc, #116]	; (80069cc <TIM_Base_SetConfig+0xfc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d108      	bne.n	800696c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <TIM_Base_SetConfig+0xe4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d103      	bne.n	80069a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	615a      	str	r2, [r3, #20]
}
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800

080069d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a24      	ldr	r2, [pc, #144]	; (8006a8c <TIM_TI1_SetConfig+0xbc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <TIM_TI1_SetConfig+0x56>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a04:	d00f      	beq.n	8006a26 <TIM_TI1_SetConfig+0x56>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4a21      	ldr	r2, [pc, #132]	; (8006a90 <TIM_TI1_SetConfig+0xc0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_TI1_SetConfig+0x56>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a20      	ldr	r2, [pc, #128]	; (8006a94 <TIM_TI1_SetConfig+0xc4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_TI1_SetConfig+0x56>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a1f      	ldr	r2, [pc, #124]	; (8006a98 <TIM_TI1_SetConfig+0xc8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_TI1_SetConfig+0x56>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <TIM_TI1_SetConfig+0xcc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <TIM_TI1_SetConfig+0x5a>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <TIM_TI1_SetConfig+0x5c>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e003      	b.n	8006a4a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f023 030a 	bic.w	r3, r3, #10
 8006a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f003 030a 	and.w	r3, r3, #10
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40014000 	.word	0x40014000

08006aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0201 	bic.w	r2, r3, #1
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f023 030a 	bic.w	r3, r3, #10
 8006adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b087      	sub	sp, #28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f023 0210 	bic.w	r2, r3, #16
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	031b      	lsls	r3, r3, #12
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	621a      	str	r2, [r3, #32]
}
 8006b6c:	bf00      	nop
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f023 0210 	bic.w	r2, r3, #16
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	031b      	lsls	r3, r3, #12
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	621a      	str	r2, [r3, #32]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	031b      	lsls	r3, r3, #12
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	031b      	lsls	r3, r3, #12
 8006ca8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f043 0307 	orr.w	r3, r3, #7
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	609a      	str	r2, [r3, #8]
}
 8006d34:	bf00      	nop
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	2201      	movs	r2, #1
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	401a      	ands	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1a      	ldr	r2, [r3, #32]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	fa01 f303 	lsl.w	r3, r1, r3
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e050      	b.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d018      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d013      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d10c      	bne.n	8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40014000 	.word	0x40014000

08006e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e03f      	b.n	8006f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fc f806 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2224      	movs	r2, #36	; 0x24
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f929 	bl	800712c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b08a      	sub	sp, #40	; 0x28
 8006f2e:	af02      	add	r7, sp, #8
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d17c      	bne.n	8007044 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_UART_Transmit+0x2c>
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e075      	b.n	8007046 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_UART_Transmit+0x3e>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e06e      	b.n	8007046 <HAL_UART_Transmit+0x11c>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2221      	movs	r2, #33	; 0x21
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f7e:	f7fc f84b 	bl	8003018 <HAL_GetTick>
 8006f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	88fa      	ldrh	r2, [r7, #6]
 8006f8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f98:	d108      	bne.n	8006fac <HAL_UART_Transmit+0x82>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e003      	b.n	8006fb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fbc:	e02a      	b.n	8007014 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f840 	bl	800704e <UART_WaitOnFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e036      	b.n	8007046 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	e007      	b.n	8007006 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	781a      	ldrb	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1cf      	bne.n	8006fbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2200      	movs	r2, #0
 8007026:	2140      	movs	r1, #64	; 0x40
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f810 	bl	800704e <UART_WaitOnFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e006      	b.n	8007046 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b090      	sub	sp, #64	; 0x40
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	603b      	str	r3, [r7, #0]
 800705a:	4613      	mov	r3, r2
 800705c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705e:	e050      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007066:	d04c      	beq.n	8007102 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0x30>
 800706e:	f7fb ffd3 	bl	8003018 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707a:	429a      	cmp	r2, r3
 800707c:	d241      	bcs.n	8007102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800709e:	637a      	str	r2, [r7, #52]	; 0x34
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3314      	adds	r3, #20
 80070b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	613b      	str	r3, [r7, #16]
   return(result);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f023 0301 	bic.w	r3, r3, #1
 80070c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d2:	623a      	str	r2, [r7, #32]
 80070d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	69f9      	ldr	r1, [r7, #28]
 80070d8:	6a3a      	ldr	r2, [r7, #32]
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e5      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e00f      	b.n	8007122 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4013      	ands	r3, r2
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	bf0c      	ite	eq
 8007112:	2301      	moveq	r3, #1
 8007114:	2300      	movne	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	429a      	cmp	r2, r3
 800711e:	d09f      	beq.n	8007060 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3740      	adds	r7, #64	; 0x40
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	b09f      	sub	sp, #124	; 0x7c
 8007132:	af00      	add	r7, sp, #0
 8007134:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007142:	68d9      	ldr	r1, [r3, #12]
 8007144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	ea40 0301 	orr.w	r3, r0, r1
 800714c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	431a      	orrs	r2, r3
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	431a      	orrs	r2, r3
 800715e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	4313      	orrs	r3, r2
 8007164:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007170:	f021 010c 	bic.w	r1, r1, #12
 8007174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800717a:	430b      	orrs	r3, r1
 800717c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800717e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718a:	6999      	ldr	r1, [r3, #24]
 800718c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	ea40 0301 	orr.w	r3, r0, r1
 8007194:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4bc5      	ldr	r3, [pc, #788]	; (80074b0 <UART_SetConfig+0x384>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d004      	beq.n	80071aa <UART_SetConfig+0x7e>
 80071a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4bc3      	ldr	r3, [pc, #780]	; (80074b4 <UART_SetConfig+0x388>)
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d103      	bne.n	80071b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071aa:	f7fe fe61 	bl	8005e70 <HAL_RCC_GetPCLK2Freq>
 80071ae:	6778      	str	r0, [r7, #116]	; 0x74
 80071b0:	e002      	b.n	80071b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071b2:	f7fe fe49 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 80071b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c0:	f040 80b6 	bne.w	8007330 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071c6:	461c      	mov	r4, r3
 80071c8:	f04f 0500 	mov.w	r5, #0
 80071cc:	4622      	mov	r2, r4
 80071ce:	462b      	mov	r3, r5
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	6439      	str	r1, [r7, #64]	; 0x40
 80071d4:	415b      	adcs	r3, r3
 80071d6:	647b      	str	r3, [r7, #68]	; 0x44
 80071d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071dc:	1912      	adds	r2, r2, r4
 80071de:	eb45 0303 	adc.w	r3, r5, r3
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f04f 0100 	mov.w	r1, #0
 80071ea:	00d9      	lsls	r1, r3, #3
 80071ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071f0:	00d0      	lsls	r0, r2, #3
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	1911      	adds	r1, r2, r4
 80071f8:	6639      	str	r1, [r7, #96]	; 0x60
 80071fa:	416b      	adcs	r3, r5
 80071fc:	667b      	str	r3, [r7, #100]	; 0x64
 80071fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	461a      	mov	r2, r3
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	1891      	adds	r1, r2, r2
 800720a:	63b9      	str	r1, [r7, #56]	; 0x38
 800720c:	415b      	adcs	r3, r3
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007214:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007218:	f7f9 fcee 	bl	8000bf8 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4ba5      	ldr	r3, [pc, #660]	; (80074b8 <UART_SetConfig+0x38c>)
 8007222:	fba3 2302 	umull	r2, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	011e      	lsls	r6, r3, #4
 800722a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722c:	461c      	mov	r4, r3
 800722e:	f04f 0500 	mov.w	r5, #0
 8007232:	4622      	mov	r2, r4
 8007234:	462b      	mov	r3, r5
 8007236:	1891      	adds	r1, r2, r2
 8007238:	6339      	str	r1, [r7, #48]	; 0x30
 800723a:	415b      	adcs	r3, r3
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
 800723e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007242:	1912      	adds	r2, r2, r4
 8007244:	eb45 0303 	adc.w	r3, r5, r3
 8007248:	f04f 0000 	mov.w	r0, #0
 800724c:	f04f 0100 	mov.w	r1, #0
 8007250:	00d9      	lsls	r1, r3, #3
 8007252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007256:	00d0      	lsls	r0, r2, #3
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	1911      	adds	r1, r2, r4
 800725e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007260:	416b      	adcs	r3, r5
 8007262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	461a      	mov	r2, r3
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	1891      	adds	r1, r2, r2
 8007270:	62b9      	str	r1, [r7, #40]	; 0x28
 8007272:	415b      	adcs	r3, r3
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800727a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800727e:	f7f9 fcbb 	bl	8000bf8 <__aeabi_uldivmod>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4b8c      	ldr	r3, [pc, #560]	; (80074b8 <UART_SetConfig+0x38c>)
 8007288:	fba3 1302 	umull	r1, r3, r3, r2
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	2164      	movs	r1, #100	; 0x64
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	3332      	adds	r3, #50	; 0x32
 800729a:	4a87      	ldr	r2, [pc, #540]	; (80074b8 <UART_SetConfig+0x38c>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072a8:	441e      	add	r6, r3
 80072aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ac:	4618      	mov	r0, r3
 80072ae:	f04f 0100 	mov.w	r1, #0
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	1894      	adds	r4, r2, r2
 80072b8:	623c      	str	r4, [r7, #32]
 80072ba:	415b      	adcs	r3, r3
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
 80072be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072c2:	1812      	adds	r2, r2, r0
 80072c4:	eb41 0303 	adc.w	r3, r1, r3
 80072c8:	f04f 0400 	mov.w	r4, #0
 80072cc:	f04f 0500 	mov.w	r5, #0
 80072d0:	00dd      	lsls	r5, r3, #3
 80072d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072d6:	00d4      	lsls	r4, r2, #3
 80072d8:	4622      	mov	r2, r4
 80072da:	462b      	mov	r3, r5
 80072dc:	1814      	adds	r4, r2, r0
 80072de:	653c      	str	r4, [r7, #80]	; 0x50
 80072e0:	414b      	adcs	r3, r1
 80072e2:	657b      	str	r3, [r7, #84]	; 0x54
 80072e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	461a      	mov	r2, r3
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	61b9      	str	r1, [r7, #24]
 80072f2:	415b      	adcs	r3, r3
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072fe:	f7f9 fc7b 	bl	8000bf8 <__aeabi_uldivmod>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4b6c      	ldr	r3, [pc, #432]	; (80074b8 <UART_SetConfig+0x38c>)
 8007308:	fba3 1302 	umull	r1, r3, r3, r2
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	2164      	movs	r1, #100	; 0x64
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	3332      	adds	r3, #50	; 0x32
 800731a:	4a67      	ldr	r2, [pc, #412]	; (80074b8 <UART_SetConfig+0x38c>)
 800731c:	fba2 2303 	umull	r2, r3, r2, r3
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	f003 0207 	and.w	r2, r3, #7
 8007326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4432      	add	r2, r6
 800732c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800732e:	e0b9      	b.n	80074a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007332:	461c      	mov	r4, r3
 8007334:	f04f 0500 	mov.w	r5, #0
 8007338:	4622      	mov	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	1891      	adds	r1, r2, r2
 800733e:	6139      	str	r1, [r7, #16]
 8007340:	415b      	adcs	r3, r3
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007348:	1912      	adds	r2, r2, r4
 800734a:	eb45 0303 	adc.w	r3, r5, r3
 800734e:	f04f 0000 	mov.w	r0, #0
 8007352:	f04f 0100 	mov.w	r1, #0
 8007356:	00d9      	lsls	r1, r3, #3
 8007358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800735c:	00d0      	lsls	r0, r2, #3
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	eb12 0804 	adds.w	r8, r2, r4
 8007366:	eb43 0905 	adc.w	r9, r3, r5
 800736a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	4618      	mov	r0, r3
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	008b      	lsls	r3, r1, #2
 800737e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007382:	0082      	lsls	r2, r0, #2
 8007384:	4640      	mov	r0, r8
 8007386:	4649      	mov	r1, r9
 8007388:	f7f9 fc36 	bl	8000bf8 <__aeabi_uldivmod>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4b49      	ldr	r3, [pc, #292]	; (80074b8 <UART_SetConfig+0x38c>)
 8007392:	fba3 2302 	umull	r2, r3, r3, r2
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	011e      	lsls	r6, r3, #4
 800739a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739c:	4618      	mov	r0, r3
 800739e:	f04f 0100 	mov.w	r1, #0
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	1894      	adds	r4, r2, r2
 80073a8:	60bc      	str	r4, [r7, #8]
 80073aa:	415b      	adcs	r3, r3
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b2:	1812      	adds	r2, r2, r0
 80073b4:	eb41 0303 	adc.w	r3, r1, r3
 80073b8:	f04f 0400 	mov.w	r4, #0
 80073bc:	f04f 0500 	mov.w	r5, #0
 80073c0:	00dd      	lsls	r5, r3, #3
 80073c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073c6:	00d4      	lsls	r4, r2, #3
 80073c8:	4622      	mov	r2, r4
 80073ca:	462b      	mov	r3, r5
 80073cc:	1814      	adds	r4, r2, r0
 80073ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80073d0:	414b      	adcs	r3, r1
 80073d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4618      	mov	r0, r3
 80073da:	f04f 0100 	mov.w	r1, #0
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	008b      	lsls	r3, r1, #2
 80073e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073ec:	0082      	lsls	r2, r0, #2
 80073ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073f2:	f7f9 fc01 	bl	8000bf8 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4b2f      	ldr	r3, [pc, #188]	; (80074b8 <UART_SetConfig+0x38c>)
 80073fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	2164      	movs	r1, #100	; 0x64
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	3332      	adds	r3, #50	; 0x32
 800740e:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <UART_SetConfig+0x38c>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800741a:	441e      	add	r6, r3
 800741c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800741e:	4618      	mov	r0, r3
 8007420:	f04f 0100 	mov.w	r1, #0
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	1894      	adds	r4, r2, r2
 800742a:	603c      	str	r4, [r7, #0]
 800742c:	415b      	adcs	r3, r3
 800742e:	607b      	str	r3, [r7, #4]
 8007430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007434:	1812      	adds	r2, r2, r0
 8007436:	eb41 0303 	adc.w	r3, r1, r3
 800743a:	f04f 0400 	mov.w	r4, #0
 800743e:	f04f 0500 	mov.w	r5, #0
 8007442:	00dd      	lsls	r5, r3, #3
 8007444:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007448:	00d4      	lsls	r4, r2, #3
 800744a:	4622      	mov	r2, r4
 800744c:	462b      	mov	r3, r5
 800744e:	eb12 0a00 	adds.w	sl, r2, r0
 8007452:	eb43 0b01 	adc.w	fp, r3, r1
 8007456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4618      	mov	r0, r3
 800745c:	f04f 0100 	mov.w	r1, #0
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	008b      	lsls	r3, r1, #2
 800746a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800746e:	0082      	lsls	r2, r0, #2
 8007470:	4650      	mov	r0, sl
 8007472:	4659      	mov	r1, fp
 8007474:	f7f9 fbc0 	bl	8000bf8 <__aeabi_uldivmod>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <UART_SetConfig+0x38c>)
 800747e:	fba3 1302 	umull	r1, r3, r3, r2
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	2164      	movs	r1, #100	; 0x64
 8007486:	fb01 f303 	mul.w	r3, r1, r3
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	3332      	adds	r3, #50	; 0x32
 8007490:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <UART_SetConfig+0x38c>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4432      	add	r2, r6
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	377c      	adds	r7, #124	; 0x7c
 80074a8:	46bd      	mov	sp, r7
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	bf00      	nop
 80074b0:	40011000 	.word	0x40011000
 80074b4:	40011400 	.word	0x40011400
 80074b8:	51eb851f 	.word	0x51eb851f

080074bc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fca4 	bl	8008e1a <VL53L0X_get_offset_calibration_data_micro_meter>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80074d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	218a      	movs	r1, #138	; 0x8a
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f004 fc03 	bl	800bd08 <VL53L0X_WrByte>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8007506:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007514:	b5b0      	push	{r4, r5, r7, lr}
 8007516:	b096      	sub	sp, #88	; 0x58
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007522:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007526:	2b00      	cmp	r3, #0
 8007528:	d107      	bne.n	800753a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800752a:	2200      	movs	r2, #0
 800752c:	2188      	movs	r1, #136	; 0x88
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f004 fbea 	bl	800bd08 <VL53L0X_WrByte>
 8007534:	4603      	mov	r3, r0
 8007536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007548:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007552:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a9e      	ldr	r2, [pc, #632]	; (80077d4 <VL53L0X_DataInit+0x2c0>)
 800755a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a9d      	ldr	r2, [pc, #628]	; (80077d8 <VL53L0X_DataInit+0x2c4>)
 8007562:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800756c:	f107 0310 	add.w	r3, r7, #16
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fab4 	bl	8007ae0 <VL53L0X_GetDeviceParameters>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800757e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007582:	2b00      	cmp	r3, #0
 8007584:	d112      	bne.n	80075ac <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007586:	2300      	movs	r3, #0
 8007588:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800758a:	2300      	movs	r3, #0
 800758c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f103 0410 	add.w	r4, r3, #16
 8007594:	f107 0510 	add.w	r5, r7, #16
 8007598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800759a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800759c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80075a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2264      	movs	r2, #100	; 0x64
 80075b0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80075ba:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80075c4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80075ce:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80075da:	2201      	movs	r2, #1
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f004 fb92 	bl	800bd08 <VL53L0X_WrByte>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80075f2:	2201      	movs	r2, #1
 80075f4:	21ff      	movs	r1, #255	; 0xff
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f004 fb86 	bl	800bd08 <VL53L0X_WrByte>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461a      	mov	r2, r3
 8007600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007604:	4313      	orrs	r3, r2
 8007606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800760a:	2200      	movs	r2, #0
 800760c:	2100      	movs	r1, #0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f004 fb7a 	bl	800bd08 <VL53L0X_WrByte>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800761c:	4313      	orrs	r3, r2
 800761e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007622:	f107 030f 	add.w	r3, r7, #15
 8007626:	461a      	mov	r2, r3
 8007628:	2191      	movs	r1, #145	; 0x91
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f004 fbee 	bl	800be0c <VL53L0X_RdByte>
 8007630:	4603      	mov	r3, r0
 8007632:	461a      	mov	r2, r3
 8007634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007638:	4313      	orrs	r3, r2
 800763a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800763e:	7bfa      	ldrb	r2, [r7, #15]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007646:	2201      	movs	r2, #1
 8007648:	2100      	movs	r1, #0
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f004 fb5c 	bl	800bd08 <VL53L0X_WrByte>
 8007650:	4603      	mov	r3, r0
 8007652:	461a      	mov	r2, r3
 8007654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007658:	4313      	orrs	r3, r2
 800765a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800765e:	2200      	movs	r2, #0
 8007660:	21ff      	movs	r1, #255	; 0xff
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f004 fb50 	bl	800bd08 <VL53L0X_WrByte>
 8007668:	4603      	mov	r3, r0
 800766a:	461a      	mov	r2, r3
 800766c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007670:	4313      	orrs	r3, r2
 8007672:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007676:	2200      	movs	r2, #0
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f004 fb44 	bl	800bd08 <VL53L0X_WrByte>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007688:	4313      	orrs	r3, r2
 800768a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800768e:	2300      	movs	r3, #0
 8007690:	653b      	str	r3, [r7, #80]	; 0x50
 8007692:	e014      	b.n	80076be <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007694:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007698:	2b00      	cmp	r3, #0
 800769a:	d114      	bne.n	80076c6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800769c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2201      	movs	r2, #1
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fd0f 	bl	80080c8 <VL53L0X_SetLimitCheckEnable>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461a      	mov	r2, r3
 80076ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80076b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ba:	3301      	adds	r3, #1
 80076bc:	653b      	str	r3, [r7, #80]	; 0x50
 80076be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c0:	2b05      	cmp	r3, #5
 80076c2:	dde7      	ble.n	8007694 <VL53L0X_DataInit+0x180>
 80076c4:	e000      	b.n	80076c8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80076c6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80076c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d107      	bne.n	80076e0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80076d0:	2200      	movs	r2, #0
 80076d2:	2102      	movs	r1, #2
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fcf7 	bl	80080c8 <VL53L0X_SetLimitCheckEnable>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80076e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80076e8:	2200      	movs	r2, #0
 80076ea:	2103      	movs	r1, #3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fceb 	bl	80080c8 <VL53L0X_SetLimitCheckEnable>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80076f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d107      	bne.n	8007710 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007700:	2200      	movs	r2, #0
 8007702:	2104      	movs	r1, #4
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fcdf 	bl	80080c8 <VL53L0X_SetLimitCheckEnable>
 800770a:	4603      	mov	r3, r0
 800770c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007710:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007714:	2b00      	cmp	r3, #0
 8007716:	d107      	bne.n	8007728 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007718:	2200      	movs	r2, #0
 800771a:	2105      	movs	r1, #5
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fcd3 	bl	80080c8 <VL53L0X_SetLimitCheckEnable>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007728:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007730:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd76 	bl	8008228 <VL53L0X_SetLimitCheckValue>
 800773c:	4603      	mov	r3, r0
 800773e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007742:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007746:	2b00      	cmp	r3, #0
 8007748:	d108      	bne.n	800775c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800774a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800774e:	2101      	movs	r1, #1
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fd69 	bl	8008228 <VL53L0X_SetLimitCheckValue>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800775c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007764:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007768:	2102      	movs	r1, #2
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fd5c 	bl	8008228 <VL53L0X_SetLimitCheckValue>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007776:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800777a:	2b00      	cmp	r3, #0
 800777c:	d107      	bne.n	800778e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800777e:	2200      	movs	r2, #0
 8007780:	2103      	movs	r1, #3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fd50 	bl	8008228 <VL53L0X_SetLimitCheckValue>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800778e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10f      	bne.n	80077b6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	22ff      	movs	r2, #255	; 0xff
 800779a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800779e:	22ff      	movs	r2, #255	; 0xff
 80077a0:	2101      	movs	r1, #1
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f004 fab0 	bl	800bd08 <VL53L0X_WrByte>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80077b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80077c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3758      	adds	r7, #88	; 0x58
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bdb0      	pop	{r4, r5, r7, pc}
 80077d2:	bf00      	nop
 80077d4:	00016b85 	.word	0x00016b85
 80077d8:	000970a4 	.word	0x000970a4

080077dc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80077dc:	b5b0      	push	{r4, r5, r7, lr}
 80077de:	b09e      	sub	sp, #120	; 0x78
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80077ea:	f107 031c 	add.w	r3, r7, #28
 80077ee:	2240      	movs	r2, #64	; 0x40
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f006 fe63 	bl	800e4be <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8007818:	2101      	movs	r1, #1
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f002 fa40 	bl	8009ca0 <VL53L0X_get_info_from_device>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800782c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8007838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800783c:	2b01      	cmp	r3, #1
 800783e:	d80d      	bhi.n	800785c <VL53L0X_StaticInit+0x80>
 8007840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007844:	2b01      	cmp	r3, #1
 8007846:	d102      	bne.n	800784e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800784a:	2b20      	cmp	r3, #32
 800784c:	d806      	bhi.n	800785c <VL53L0X_StaticInit+0x80>
 800784e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10e      	bne.n	8007874 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d90b      	bls.n	8007874 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800785c:	f107 0218 	add.w	r2, r7, #24
 8007860:	f107 0314 	add.w	r3, r7, #20
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 fcd2 	bl	8009210 <VL53L0X_perform_ref_spad_management>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007872:	e009      	b.n	8007888 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007878:	461a      	mov	r2, r3
 800787a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fed3 	bl	8009628 <VL53L0X_set_reference_spads>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007888:	4b94      	ldr	r3, [pc, #592]	; (8007adc <VL53L0X_StaticInit+0x300>)
 800788a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800788c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10f      	bne.n	80078b4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800789a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800789e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80078ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ae:	e001      	b.n	80078b4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80078b0:	4b8a      	ldr	r3, [pc, #552]	; (8007adc <VL53L0X_StaticInit+0x300>)
 80078b2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80078b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80078bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f003 fb0c 	bl	800aedc <VL53L0X_load_tuning_settings>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80078ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80078d2:	2300      	movs	r3, #0
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2304      	movs	r3, #4
 80078d8:	2200      	movs	r2, #0
 80078da:	2100      	movs	r1, #0
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f8cb 	bl	8008a78 <VL53L0X_SetGpioConfig>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d121      	bne.n	8007934 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80078f0:	2201      	movs	r2, #1
 80078f2:	21ff      	movs	r1, #255	; 0xff
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f004 fa07 	bl	800bd08 <VL53L0X_WrByte>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007900:	f107 031a 	add.w	r3, r7, #26
 8007904:	461a      	mov	r2, r3
 8007906:	2184      	movs	r1, #132	; 0x84
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f004 faa9 	bl	800be60 <VL53L0X_RdWord>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007916:	4313      	orrs	r3, r2
 8007918:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800791c:	2200      	movs	r2, #0
 800791e:	21ff      	movs	r1, #255	; 0xff
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f004 f9f1 	bl	800bd08 <VL53L0X_WrByte>
 8007926:	4603      	mov	r3, r0
 8007928:	461a      	mov	r2, r3
 800792a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800792e:	4313      	orrs	r3, r2
 8007930:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007934:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007938:	2b00      	cmp	r3, #0
 800793a:	d105      	bne.n	8007948 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800793c:	8b7b      	ldrh	r3, [r7, #26]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	461a      	mov	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007948:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800794c:	2b00      	cmp	r3, #0
 800794e:	d108      	bne.n	8007962 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007950:	f107 031c 	add.w	r3, r7, #28
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8c2 	bl	8007ae0 <VL53L0X_GetDeviceParameters>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007962:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007966:	2b00      	cmp	r3, #0
 8007968:	d110      	bne.n	800798c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800796a:	f107 0319 	add.w	r3, r7, #25
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f984 	bl	8007c7e <VL53L0X_GetFractionEnable>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800797c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007984:	7e7a      	ldrb	r2, [r7, #25]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800798c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10e      	bne.n	80079b2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f103 0410 	add.w	r4, r3, #16
 800799a:	f107 051c 	add.w	r5, r7, #28
 800799e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80079b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d111      	bne.n	80079de <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80079ba:	f107 0319 	add.w	r3, r7, #25
 80079be:	461a      	mov	r2, r3
 80079c0:	2101      	movs	r1, #1
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f004 fa22 	bl	800be0c <VL53L0X_RdByte>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80079ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80079d6:	7e7a      	ldrb	r2, [r7, #25]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80079de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80079e6:	2200      	movs	r2, #0
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9a4 	bl	8007d38 <VL53L0X_SetSequenceStepEnable>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80079f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d107      	bne.n	8007a0e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80079fe:	2200      	movs	r2, #0
 8007a00:	2102      	movs	r1, #2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f998 	bl	8007d38 <VL53L0X_SetSequenceStepEnable>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007a0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d103      	bne.n	8007a1e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007a1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007a26:	f107 0313 	add.w	r3, r7, #19
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f96a 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007a42:	7cfa      	ldrb	r2, [r7, #19]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007a4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007a52:	f107 0313 	add.w	r3, r7, #19
 8007a56:	461a      	mov	r2, r3
 8007a58:	2101      	movs	r1, #1
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f954 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007a6e:	7cfa      	ldrb	r2, [r7, #19]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007a76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	461a      	mov	r2, r3
 8007a84:	2103      	movs	r1, #3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 fe8c 	bl	800a7a4 <get_sequence_step_timeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007aa2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8007aaa:	f107 030c 	add.w	r3, r7, #12
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2104      	movs	r1, #4
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f002 fe76 	bl	800a7a4 <get_sequence_step_timeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007abe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ace:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3770      	adds	r7, #112	; 0x70
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8007ada:	bf00      	nop
 8007adc:	2000000c 	.word	0x2000000c

08007ae0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8b0 	bl	8007c58 <VL53L0X_GetDeviceMode>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d107      	bne.n	8007b14 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa60 	bl	8007fd0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	3310      	adds	r3, #16
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa96 	bl	8008062 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8007b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d107      	bne.n	8007b52 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fcb7 	bl	80074bc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d134      	bne.n	8007bc4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	e02a      	b.n	8007bb6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d12a      	bne.n	8007bbe <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	b299      	uxth	r1, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4413      	add	r3, r2
 8007b76:	3304      	adds	r3, #4
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fbb6 	bl	80082ec <VL53L0X_GetLimitCheckValue>
 8007b80:	4603      	mov	r3, r0
 8007b82:	461a      	mov	r2, r3
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d117      	bne.n	8007bc2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	b299      	uxth	r1, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	3318      	adds	r3, #24
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fb1d 	bl	80081e0 <VL53L0X_GetLimitCheckEnable>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	461a      	mov	r2, r3
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b05      	cmp	r3, #5
 8007bba:	ddd1      	ble.n	8007b60 <VL53L0X_GetDeviceParameters+0x80>
 8007bbc:	e002      	b.n	8007bc4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007bbe:	bf00      	nop
 8007bc0:	e000      	b.n	8007bc4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007bc2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d107      	bne.n	8007bdc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	333c      	adds	r3, #60	; 0x3c
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fc18 	bl	8008408 <VL53L0X_GetWrapAroundCheckEnable>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f879 	bl	8007ce2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2b15      	cmp	r3, #21
 8007c14:	bf8c      	ite	hi
 8007c16:	2201      	movhi	r2, #1
 8007c18:	2200      	movls	r2, #0
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	d10e      	bne.n	8007c3e <VL53L0X_SetDeviceMode+0x3e>
 8007c20:	2201      	movs	r2, #1
 8007c22:	409a      	lsls	r2, r3
 8007c24:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <VL53L0X_SetDeviceMode+0x54>)
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	78fa      	ldrb	r2, [r7, #3]
 8007c3a:	741a      	strb	r2, [r3, #16]
		break;
 8007c3c:	e001      	b.n	8007c42 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007c3e:	23f8      	movs	r3, #248	; 0xf8
 8007c40:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	0030000b 	.word	0x0030000b

08007c58 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7c1a      	ldrb	r2, [r3, #16]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	2109      	movs	r1, #9
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f004 f8bb 	bl	800be0c <VL53L0X_RdByte>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f002 ff73 	bl	800abb8 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f003 f840 	bl	800ad78 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	460b      	mov	r3, r1
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f002 ff12 	bl	800ab4a <VL53L0X_get_vcsel_pulse_period>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
 8007d44:	4613      	mov	r3, r2
 8007d46:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d54:	f107 030f 	add.w	r3, r7, #15
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f004 f855 	bl	800be0c <VL53L0X_RdByte>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d15a      	bne.n	8007e28 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007d72:	78bb      	ldrb	r3, [r7, #2]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d12b      	bne.n	8007dd0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d825      	bhi.n	8007dca <VL53L0X_SetSequenceStepEnable+0x92>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d99 	.word	0x08007d99
 8007d88:	08007da3 	.word	0x08007da3
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007db7 	.word	0x08007db7
 8007d94:	08007dc1 	.word	0x08007dc1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007d98:	7dbb      	ldrb	r3, [r7, #22]
 8007d9a:	f043 0310 	orr.w	r3, r3, #16
 8007d9e:	75bb      	strb	r3, [r7, #22]
				break;
 8007da0:	e043      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007da2:	7dbb      	ldrb	r3, [r7, #22]
 8007da4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007da8:	75bb      	strb	r3, [r7, #22]
				break;
 8007daa:	e03e      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007dac:	7dbb      	ldrb	r3, [r7, #22]
 8007dae:	f043 0304 	orr.w	r3, r3, #4
 8007db2:	75bb      	strb	r3, [r7, #22]
				break;
 8007db4:	e039      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007db6:	7dbb      	ldrb	r3, [r7, #22]
 8007db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dbc:	75bb      	strb	r3, [r7, #22]
				break;
 8007dbe:	e034      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007dc0:	7dbb      	ldrb	r3, [r7, #22]
 8007dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dc6:	75bb      	strb	r3, [r7, #22]
				break;
 8007dc8:	e02f      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007dca:	23fc      	movs	r3, #252	; 0xfc
 8007dcc:	75fb      	strb	r3, [r7, #23]
 8007dce:	e02c      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d825      	bhi.n	8007e22 <VL53L0X_SetSequenceStepEnable+0xea>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007df1 	.word	0x08007df1
 8007de0:	08007dfb 	.word	0x08007dfb
 8007de4:	08007e05 	.word	0x08007e05
 8007de8:	08007e0f 	.word	0x08007e0f
 8007dec:	08007e19 	.word	0x08007e19
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007df0:	7dbb      	ldrb	r3, [r7, #22]
 8007df2:	f023 0310 	bic.w	r3, r3, #16
 8007df6:	75bb      	strb	r3, [r7, #22]
				break;
 8007df8:	e017      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007e00:	75bb      	strb	r3, [r7, #22]
				break;
 8007e02:	e012      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007e04:	7dbb      	ldrb	r3, [r7, #22]
 8007e06:	f023 0304 	bic.w	r3, r3, #4
 8007e0a:	75bb      	strb	r3, [r7, #22]
				break;
 8007e0c:	e00d      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007e0e:	7dbb      	ldrb	r3, [r7, #22]
 8007e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e14:	75bb      	strb	r3, [r7, #22]
				break;
 8007e16:	e008      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007e18:	7dbb      	ldrb	r3, [r7, #22]
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	75bb      	strb	r3, [r7, #22]
				break;
 8007e20:	e003      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e22:	23fc      	movs	r3, #252	; 0xfc
 8007e24:	75fb      	strb	r3, [r7, #23]
 8007e26:	e000      	b.n	8007e2a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007e28:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	7dba      	ldrb	r2, [r7, #22]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d01e      	beq.n	8007e70 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d107      	bne.n	8007e4a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007e3a:	7dbb      	ldrb	r3, [r7, #22]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2101      	movs	r1, #1
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f003 ff61 	bl	800bd08 <VL53L0X_WrByte>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d103      	bne.n	8007e5a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	7dba      	ldrb	r2, [r7, #22]
 8007e56:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007e68:	6939      	ldr	r1, [r7, #16]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff ff26 	bl	8007cbc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	72fb      	strb	r3, [r7, #11]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d836      	bhi.n	8007f0c <sequence_step_enabled+0x90>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <sequence_step_enabled+0x28>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007eb9 	.word	0x08007eb9
 8007ea8:	08007ecb 	.word	0x08007ecb
 8007eac:	08007edd 	.word	0x08007edd
 8007eb0:	08007eef 	.word	0x08007eef
 8007eb4:	08007f01 	.word	0x08007f01
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007eb8:	7abb      	ldrb	r3, [r7, #10]
 8007eba:	111b      	asrs	r3, r3, #4
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	701a      	strb	r2, [r3, #0]
		break;
 8007ec8:	e022      	b.n	8007f10 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007eca:	7abb      	ldrb	r3, [r7, #10]
 8007ecc:	10db      	asrs	r3, r3, #3
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	701a      	strb	r2, [r3, #0]
		break;
 8007eda:	e019      	b.n	8007f10 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007edc:	7abb      	ldrb	r3, [r7, #10]
 8007ede:	109b      	asrs	r3, r3, #2
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	701a      	strb	r2, [r3, #0]
		break;
 8007eec:	e010      	b.n	8007f10 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007eee:	7abb      	ldrb	r3, [r7, #10]
 8007ef0:	119b      	asrs	r3, r3, #6
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	701a      	strb	r2, [r3, #0]
		break;
 8007efe:	e007      	b.n	8007f10 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007f00:	7abb      	ldrb	r3, [r7, #10]
 8007f02:	09db      	lsrs	r3, r3, #7
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	701a      	strb	r2, [r3, #0]
		break;
 8007f0a:	e001      	b.n	8007f10 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f0c:	23fc      	movs	r3, #252	; 0xfc
 8007f0e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f32:	f107 030e 	add.w	r3, r7, #14
 8007f36:	461a      	mov	r2, r3
 8007f38:	2101      	movs	r1, #1
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f003 ff66 	bl	800be0c <VL53L0X_RdByte>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d107      	bne.n	8007f5c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007f4c:	7bba      	ldrb	r2, [r7, #14]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2100      	movs	r1, #0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff ff92 	bl	8007e7c <sequence_step_enabled>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d108      	bne.n	8007f76 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007f64:	7bba      	ldrb	r2, [r7, #14]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	3302      	adds	r3, #2
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff ff85 	bl	8007e7c <sequence_step_enabled>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007f7e:	7bba      	ldrb	r2, [r7, #14]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	2102      	movs	r1, #2
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff ff78 	bl	8007e7c <sequence_step_enabled>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d108      	bne.n	8007faa <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007f98:	7bba      	ldrb	r2, [r7, #14]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3303      	adds	r3, #3
 8007f9e:	2103      	movs	r1, #3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff ff6b 	bl	8007e7c <sequence_step_enabled>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d108      	bne.n	8007fc4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007fb2:	7bba      	ldrb	r2, [r7, #14]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	2104      	movs	r1, #4
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff ff5e 	bl	8007e7c <sequence_step_enabled>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	21f8      	movs	r1, #248	; 0xf8
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f003 ff3a 	bl	800be60 <VL53L0X_RdWord>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d108      	bne.n	800800a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007ff8:	f107 0308 	add.w	r3, r7, #8
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	2104      	movs	r1, #4
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f003 ff65 	bl	800bed0 <VL53L0X_RdDWord>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800800a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10c      	bne.n	800802c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008012:	89bb      	ldrh	r3, [r7, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	89ba      	ldrh	r2, [r7, #12]
 800801c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800802c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	7f1b      	ldrb	r3, [r3, #28]
 800804a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	7bba      	ldrb	r2, [r7, #14]
 8008050:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800806c:	2300      	movs	r3, #0
 800806e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008070:	f107 030e 	add.w	r3, r7, #14
 8008074:	461a      	mov	r2, r3
 8008076:	2120      	movs	r1, #32
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f003 fef1 	bl	800be60 <VL53L0X_RdWord>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d118      	bne.n	80080bc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800808a:	89fb      	ldrh	r3, [r7, #14]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	771a      	strb	r2, [r3, #28]
 80080a2:	e00b      	b.n	80080bc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	807b      	strh	r3, [r7, #2]
 80080d4:	4613      	mov	r3, r2
 80080d6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080d8:	2300      	movs	r3, #0
 80080da:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80080e8:	887b      	ldrh	r3, [r7, #2]
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	d902      	bls.n	80080f4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080ee:	23fc      	movs	r3, #252	; 0xfc
 80080f0:	75fb      	strb	r3, [r7, #23]
 80080f2:	e05b      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80080f4:	787b      	ldrb	r3, [r7, #1]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008102:	2301      	movs	r3, #1
 8008104:	73bb      	strb	r3, [r7, #14]
 8008106:	e00a      	b.n	800811e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008108:	887b      	ldrh	r3, [r7, #2]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	330c      	adds	r3, #12
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800811e:	887b      	ldrh	r3, [r7, #2]
 8008120:	2b05      	cmp	r3, #5
 8008122:	d841      	bhi.n	80081a8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <VL53L0X_SetLimitCheckEnable+0x64>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008145 	.word	0x08008145
 8008130:	0800814f 	.word	0x0800814f
 8008134:	08008165 	.word	0x08008165
 8008138:	0800816f 	.word	0x0800816f
 800813c:	08008179 	.word	0x08008179
 8008140:	08008191 	.word	0x08008191

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	7bfa      	ldrb	r2, [r7, #15]
 8008148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800814c:	e02e      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008152:	b29b      	uxth	r3, r3
 8008154:	461a      	mov	r2, r3
 8008156:	2144      	movs	r1, #68	; 0x44
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f003 fdf9 	bl	800bd50 <VL53L0X_WrWord>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]

			break;
 8008162:	e023      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7bfa      	ldrb	r2, [r7, #15]
 8008168:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800816c:	e01e      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7bfa      	ldrb	r2, [r7, #15]
 8008172:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008176:	e019      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800817e:	7b7b      	ldrb	r3, [r7, #13]
 8008180:	22fe      	movs	r2, #254	; 0xfe
 8008182:	2160      	movs	r1, #96	; 0x60
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f003 fe0d 	bl	800bda4 <VL53L0X_UpdateByte>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800818e:	e00d      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008196:	7b7b      	ldrb	r3, [r7, #13]
 8008198:	22ef      	movs	r2, #239	; 0xef
 800819a:	2160      	movs	r1, #96	; 0x60
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f003 fe01 	bl	800bda4 <VL53L0X_UpdateByte>
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80081a6:	e001      	b.n	80081ac <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081a8:	23fc      	movs	r3, #252	; 0xfc
 80081aa:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10f      	bne.n	80081d4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80081b4:	787b      	ldrb	r3, [r7, #1]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d106      	bne.n	80081c8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80081ba:	887b      	ldrh	r3, [r7, #2]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4413      	add	r3, r2
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80081c6:	e005      	b.n	80081d4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80081c8:	887b      	ldrh	r3, [r7, #2]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	460b      	mov	r3, r1
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80081f2:	897b      	ldrh	r3, [r7, #10]
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	d905      	bls.n	8008204 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081f8:	23fc      	movs	r3, #252	; 0xfc
 80081fa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e008      	b.n	8008216 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008204:	897b      	ldrh	r3, [r7, #10]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800820e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7dba      	ldrb	r2, [r7, #22]
 8008214:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800821a:	4618      	mov	r0, r3
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	460b      	mov	r3, r1
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008236:	2300      	movs	r3, #0
 8008238:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800823a:	897b      	ldrh	r3, [r7, #10]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008244:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008246:	7dbb      	ldrb	r3, [r7, #22]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d107      	bne.n	800825c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800824c:	897b      	ldrh	r3, [r7, #10]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	330c      	adds	r3, #12
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	e040      	b.n	80082de <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800825c:	897b      	ldrh	r3, [r7, #10]
 800825e:	2b05      	cmp	r3, #5
 8008260:	d830      	bhi.n	80082c4 <VL53L0X_SetLimitCheckValue+0x9c>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <VL53L0X_SetLimitCheckValue+0x40>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008281 	.word	0x08008281
 800826c:	08008289 	.word	0x08008289
 8008270:	0800829f 	.word	0x0800829f
 8008274:	080082a7 	.word	0x080082a7
 8008278:	080082af 	.word	0x080082af
 800827c:	080082af 	.word	0x080082af

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008286:	e01f      	b.n	80082c8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800828c:	b29b      	uxth	r3, r3
 800828e:	461a      	mov	r2, r3
 8008290:	2144      	movs	r1, #68	; 0x44
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f003 fd5c 	bl	800bd50 <VL53L0X_WrWord>
 8008298:	4603      	mov	r3, r0
 800829a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800829c:	e014      	b.n	80082c8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80082a4:	e010      	b.n	80082c8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80082ac:	e00c      	b.n	80082c8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	2164      	movs	r1, #100	; 0x64
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f003 fd49 	bl	800bd50 <VL53L0X_WrWord>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80082c2:	e001      	b.n	80082c8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082c4:	23fc      	movs	r3, #252	; 0xfc
 80082c6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80082c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80082d0:	897b      	ldrh	r3, [r7, #10]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	330c      	adds	r3, #12
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop

080082ec <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	460b      	mov	r3, r1
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008302:	897b      	ldrh	r3, [r7, #10]
 8008304:	2b05      	cmp	r3, #5
 8008306:	d847      	bhi.n	8008398 <VL53L0X_GetLimitCheckValue+0xac>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <VL53L0X_GetLimitCheckValue+0x24>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008329 	.word	0x08008329
 8008314:	08008335 	.word	0x08008335
 8008318:	0800835b 	.word	0x0800835b
 800831c:	08008367 	.word	0x08008367
 8008320:	08008373 	.word	0x08008373
 8008324:	08008373 	.word	0x08008373

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	77bb      	strb	r3, [r7, #30]
		break;
 8008332:	e033      	b.n	800839c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008334:	f107 0316 	add.w	r3, r7, #22
 8008338:	461a      	mov	r2, r3
 800833a:	2144      	movs	r1, #68	; 0x44
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f003 fd8f 	bl	800be60 <VL53L0X_RdWord>
 8008342:	4603      	mov	r3, r0
 8008344:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008346:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	025b      	lsls	r3, r3, #9
 8008352:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008354:	2301      	movs	r3, #1
 8008356:	77bb      	strb	r3, [r7, #30]
		break;
 8008358:	e020      	b.n	800839c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	77bb      	strb	r3, [r7, #30]
		break;
 8008364:	e01a      	b.n	800839c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	77bb      	strb	r3, [r7, #30]
		break;
 8008370:	e014      	b.n	800839c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008372:	f107 0316 	add.w	r3, r7, #22
 8008376:	461a      	mov	r2, r3
 8008378:	2164      	movs	r1, #100	; 0x64
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f003 fd70 	bl	800be60 <VL53L0X_RdWord>
 8008380:	4603      	mov	r3, r0
 8008382:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008384:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800838c:	8afb      	ldrh	r3, [r7, #22]
 800838e:	025b      	lsls	r3, r3, #9
 8008390:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	77bb      	strb	r3, [r7, #30]
		break;
 8008396:	e001      	b.n	800839c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008398:	23fc      	movs	r3, #252	; 0xfc
 800839a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800839c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d12a      	bne.n	80083fa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80083a4:	7fbb      	ldrb	r3, [r7, #30]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d124      	bne.n	80083f4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d110      	bne.n	80083d2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80083b0:	897b      	ldrh	r3, [r7, #10]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	330c      	adds	r3, #12
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80083c4:	897b      	ldrh	r3, [r7, #10]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80083d0:	e013      	b.n	80083fa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80083d8:	897b      	ldrh	r3, [r7, #10]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	330c      	adds	r3, #12
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80083e6:	897b      	ldrh	r3, [r7, #10]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80083f2:	e002      	b.n	80083fa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083fa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80083fe:	4618      	mov	r0, r3
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop

08008408 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008416:	f107 030e 	add.w	r3, r7, #14
 800841a:	461a      	mov	r2, r3
 800841c:	2101      	movs	r1, #1
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f003 fcf4 	bl	800be0c <VL53L0X_RdByte>
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10e      	bne.n	800844e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008430:	7bba      	ldrb	r2, [r7, #14]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	b25b      	sxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	da03      	bge.n	8008448 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2201      	movs	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e002      	b.n	800844e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2200      	movs	r2, #0
 800844c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800844e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008478:	f107 030e 	add.w	r3, r7, #14
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fbea 	bl	8007c58 <VL53L0X_GetDeviceMode>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d107      	bne.n	80084a0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d104      	bne.n	80084a0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f898 	bl	80085cc <VL53L0X_StartMeasurement>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80084a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fb3f 	bl	8009b2c <VL53L0X_measurement_poll_for_completion>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80084b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2203      	movs	r2, #3
 80084c4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80084c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80084e4:	2301      	movs	r3, #1
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fae1 	bl	8009ab2 <VL53L0X_perform_ref_calibration>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80084f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800850c:	2300      	movs	r3, #0
 800850e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008516:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008518:	7dbb      	ldrb	r3, [r7, #22]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d005      	beq.n	800852a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800851e:	7dbb      	ldrb	r3, [r7, #22]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d002      	beq.n	800852a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008524:	7dbb      	ldrb	r3, [r7, #22]
 8008526:	2b03      	cmp	r3, #3
 8008528:	d147      	bne.n	80085ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	f107 0210 	add.w	r2, r7, #16
 8008532:	2101      	movs	r1, #1
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fbc3 	bl	8008cc0 <VL53L0X_GetInterruptThresholds>
 800853a:	4603      	mov	r3, r0
 800853c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008544:	d803      	bhi.n	800854e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008546:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008548:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800854c:	d935      	bls.n	80085ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800854e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d131      	bne.n	80085ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d006      	beq.n	800856a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800855c:	491a      	ldr	r1, [pc, #104]	; (80085c8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 fcbc 	bl	800aedc <VL53L0X_load_tuning_settings>
 8008564:	4603      	mov	r3, r0
 8008566:	75fb      	strb	r3, [r7, #23]
 8008568:	e027      	b.n	80085ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800856a:	2204      	movs	r2, #4
 800856c:	21ff      	movs	r1, #255	; 0xff
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f003 fbca 	bl	800bd08 <VL53L0X_WrByte>
 8008574:	4603      	mov	r3, r0
 8008576:	461a      	mov	r2, r3
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	4313      	orrs	r3, r2
 800857c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800857e:	2200      	movs	r2, #0
 8008580:	2170      	movs	r1, #112	; 0x70
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f003 fbc0 	bl	800bd08 <VL53L0X_WrByte>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	4313      	orrs	r3, r2
 8008590:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008592:	2200      	movs	r2, #0
 8008594:	21ff      	movs	r1, #255	; 0xff
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f003 fbb6 	bl	800bd08 <VL53L0X_WrByte>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80085a6:	2200      	movs	r2, #0
 80085a8:	2180      	movs	r1, #128	; 0x80
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f003 fbac 	bl	800bd08 <VL53L0X_WrByte>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80085ba:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000100 	.word	0x20000100

080085cc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80085dc:	f107 030e 	add.w	r3, r7, #14
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fb38 	bl	8007c58 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80085e8:	2201      	movs	r2, #1
 80085ea:	2180      	movs	r1, #128	; 0x80
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f003 fb8b 	bl	800bd08 <VL53L0X_WrByte>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80085f6:	2201      	movs	r2, #1
 80085f8:	21ff      	movs	r1, #255	; 0xff
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f003 fb84 	bl	800bd08 <VL53L0X_WrByte>
 8008600:	4603      	mov	r3, r0
 8008602:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f003 fb7d 	bl	800bd08 <VL53L0X_WrByte>
 800860e:	4603      	mov	r3, r0
 8008610:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008618:	461a      	mov	r2, r3
 800861a:	2191      	movs	r1, #145	; 0x91
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f003 fb73 	bl	800bd08 <VL53L0X_WrByte>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008626:	2201      	movs	r2, #1
 8008628:	2100      	movs	r1, #0
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f003 fb6c 	bl	800bd08 <VL53L0X_WrByte>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008634:	2200      	movs	r2, #0
 8008636:	21ff      	movs	r1, #255	; 0xff
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f003 fb65 	bl	800bd08 <VL53L0X_WrByte>
 800863e:	4603      	mov	r3, r0
 8008640:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008642:	2200      	movs	r2, #0
 8008644:	2180      	movs	r1, #128	; 0x80
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f003 fb5e 	bl	800bd08 <VL53L0X_WrByte>
 800864c:	4603      	mov	r3, r0
 800864e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b03      	cmp	r3, #3
 8008654:	d054      	beq.n	8008700 <VL53L0X_StartMeasurement+0x134>
 8008656:	2b03      	cmp	r3, #3
 8008658:	dc6c      	bgt.n	8008734 <VL53L0X_StartMeasurement+0x168>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <VL53L0X_StartMeasurement+0x98>
 800865e:	2b01      	cmp	r3, #1
 8008660:	d034      	beq.n	80086cc <VL53L0X_StartMeasurement+0x100>
 8008662:	e067      	b.n	8008734 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008664:	2201      	movs	r2, #1
 8008666:	2100      	movs	r1, #0
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f003 fb4d 	bl	800bd08 <VL53L0X_WrByte>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d15d      	bne.n	800873a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008688:	f107 030d 	add.w	r3, r7, #13
 800868c:	461a      	mov	r2, r3
 800868e:	2100      	movs	r1, #0
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f003 fbbb 	bl	800be0c <VL53L0X_RdByte>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3301      	adds	r3, #1
 800869e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80086a0:	7b7a      	ldrb	r2, [r7, #13]
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	4013      	ands	r3, r2
 80086a6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80086a8:	7bfa      	ldrb	r2, [r7, #15]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d107      	bne.n	80086be <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80086ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80086bc:	d3e1      	bcc.n	8008682 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80086c4:	d339      	bcc.n	800873a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80086c6:	23f9      	movs	r3, #249	; 0xf9
 80086c8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80086ca:	e036      	b.n	800873a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80086cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80086d4:	2101      	movs	r1, #1
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff ff12 	bl	8008500 <VL53L0X_CheckAndLoadInterruptSettings>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80086e0:	2202      	movs	r2, #2
 80086e2:	2100      	movs	r1, #0
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f003 fb0f 	bl	800bd08 <VL53L0X_WrByte>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80086ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d123      	bne.n	800873e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2204      	movs	r2, #4
 80086fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80086fe:	e01e      	b.n	800873e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008708:	2101      	movs	r1, #1
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fef8 	bl	8008500 <VL53L0X_CheckAndLoadInterruptSettings>
 8008710:	4603      	mov	r3, r0
 8008712:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008714:	2204      	movs	r2, #4
 8008716:	2100      	movs	r1, #0
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f003 faf5 	bl	800bd08 <VL53L0X_WrByte>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10b      	bne.n	8008742 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2204      	movs	r2, #4
 800872e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008732:	e006      	b.n	8008742 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008734:	23f8      	movs	r3, #248	; 0xf8
 8008736:	75fb      	strb	r3, [r7, #23]
 8008738:	e004      	b.n	8008744 <VL53L0X_StartMeasurement+0x178>
		break;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <VL53L0X_StartMeasurement+0x178>
		break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <VL53L0X_StartMeasurement+0x178>
		break;
 8008742:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008744:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008764:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	2b04      	cmp	r3, #4
 800876a:	d112      	bne.n	8008792 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800876c:	f107 0308 	add.w	r3, r7, #8
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fb1a 	bl	8008dac <VL53L0X_GetInterruptMaskStatus>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b04      	cmp	r3, #4
 8008780:	d103      	bne.n	800878a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2201      	movs	r2, #1
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	e01c      	b.n	80087c4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e018      	b.n	80087c4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008792:	f107 030d 	add.w	r3, r7, #13
 8008796:	461a      	mov	r2, r3
 8008798:	2114      	movs	r1, #20
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f003 fb36 	bl	800be0c <VL53L0X_RdByte>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80087a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80087ac:	7b7b      	ldrb	r3, [r7, #13]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2201      	movs	r2, #1
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	e002      	b.n	80087c4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2200      	movs	r2, #0
 80087c2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80087d0:	b5b0      	push	{r4, r5, r7, lr}
 80087d2:	b096      	sub	sp, #88	; 0x58
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087da:	2300      	movs	r3, #0
 80087dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80087e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087e4:	230c      	movs	r3, #12
 80087e6:	2114      	movs	r1, #20
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f003 fa61 	bl	800bcb0 <VL53L0X_ReadMulti>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80087f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f040 80d1 	bne.w	80089a0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2200      	movs	r2, #0
 8008802:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800880a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800880e:	b29b      	uxth	r3, r3
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	b29a      	uxth	r2, r3
 8008814:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008818:	b29b      	uxth	r3, r3
 800881a:	4413      	add	r3, r2
 800881c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008826:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800882a:	b29b      	uxth	r3, r3
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	b29a      	uxth	r2, r3
 8008830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008834:	b29b      	uxth	r3, r3
 8008836:	4413      	add	r3, r2
 8008838:	b29b      	uxth	r3, r3
 800883a:	025b      	lsls	r3, r3, #9
 800883c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008842:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008844:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008848:	b29b      	uxth	r3, r3
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	b29a      	uxth	r2, r3
 800884e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008852:	b29b      	uxth	r3, r3
 8008854:	4413      	add	r3, r2
 8008856:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800885a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800885e:	025b      	lsls	r3, r3, #9
 8008860:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008866:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800886a:	b29b      	uxth	r3, r3
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b29a      	uxth	r2, r3
 8008870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008874:	b29b      	uxth	r3, r3
 8008876:	4413      	add	r3, r2
 8008878:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008882:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8008892:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800889a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800889e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088a4:	d046      	beq.n	8008934 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80088a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80088b4:	4a57      	ldr	r2, [pc, #348]	; (8008a14 <VL53L0X_GetRangingMeasurementData+0x244>)
 80088b6:	fb82 1203 	smull	r1, r2, r2, r3
 80088ba:	1192      	asrs	r2, r2, #6
 80088bc:	17db      	asrs	r3, r3, #31
 80088be:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80088c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7f1b      	ldrb	r3, [r3, #28]
 80088ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80088d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d02c      	beq.n	8008934 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80088da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80088dc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80088e0:	fb02 f303 	mul.w	r3, r2, r3
 80088e4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80088e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d10d      	bne.n	8008908 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80088ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80088f4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80088f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80088fc:	e016      	b.n	800892c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80088fe:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008902:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008906:	e011      	b.n	800892c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008908:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800890c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800890e:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008912:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008914:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008918:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800891c:	121b      	asrs	r3, r3, #8
 800891e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008924:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800892c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008930:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008934:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00d      	beq.n	8008958 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800893c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008940:	089b      	lsrs	r3, r3, #2
 8008942:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008948:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800894c:	b2db      	uxtb	r3, r3
 800894e:	019b      	lsls	r3, r3, #6
 8008950:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	75da      	strb	r2, [r3, #23]
 8008956:	e006      	b.n	8008966 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800895e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2200      	movs	r2, #0
 8008964:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008966:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800896a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800896e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	4613      	mov	r3, r2
 800897a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f002 ff4b 	bl	800b818 <VL53L0X_get_pal_range_status>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800898a:	4313      	orrs	r3, r2
 800898c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008990:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008998:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d12f      	bne.n	8008a08 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f107 040c 	add.w	r4, r7, #12
 80089ae:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80089b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80089ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80089c2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80089c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80089d0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80089d6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80089dc:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80089e2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80089e8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80089ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80089f8:	f107 050c 	add.w	r5, r7, #12
 80089fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a08:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3750      	adds	r7, #80	; 0x50
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bdb0      	pop	{r4, r5, r7, pc}
 8008a14:	10624dd3 	.word	0x10624dd3

08008a18 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008a26:	2100      	movs	r1, #0
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff f8e9 	bl	8007c00 <VL53L0X_SetDeviceMode>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fd16 	bl	800846c <VL53L0X_PerformSingleMeasurement>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff febe 	bl	80087d0 <VL53L0X_GetRangingMeasurementData>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008a60:	2100      	movs	r1, #0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f962 	bl	8008d2c <VL53L0X_ClearInterruptMask>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	4603      	mov	r3, r0
 8008a88:	70fb      	strb	r3, [r7, #3]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70bb      	strb	r3, [r7, #2]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008a9c:	23f6      	movs	r3, #246	; 0xf6
 8008a9e:	73fb      	strb	r3, [r7, #15]
 8008aa0:	e107      	b.n	8008cb2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008aa2:	78bb      	ldrb	r3, [r7, #2]
 8008aa4:	2b14      	cmp	r3, #20
 8008aa6:	d110      	bne.n	8008aca <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008aa8:	7e3b      	ldrb	r3, [r7, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008aae:	2310      	movs	r3, #16
 8008ab0:	73bb      	strb	r3, [r7, #14]
 8008ab2:	e001      	b.n	8008ab8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	461a      	mov	r2, r3
 8008abc:	2184      	movs	r1, #132	; 0x84
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f003 f922 	bl	800bd08 <VL53L0X_WrByte>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
 8008ac8:	e0f3      	b.n	8008cb2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008aca:	78bb      	ldrb	r3, [r7, #2]
 8008acc:	2b15      	cmp	r3, #21
 8008ace:	f040 8097 	bne.w	8008c00 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	21ff      	movs	r1, #255	; 0xff
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f003 f916 	bl	800bd08 <VL53L0X_WrByte>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f003 f90c 	bl	800bd08 <VL53L0X_WrByte>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008afa:	2200      	movs	r2, #0
 8008afc:	21ff      	movs	r1, #255	; 0xff
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f003 f902 	bl	800bd08 <VL53L0X_WrByte>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008b0e:	2201      	movs	r2, #1
 8008b10:	2180      	movs	r1, #128	; 0x80
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f003 f8f8 	bl	800bd08 <VL53L0X_WrByte>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008b22:	2202      	movs	r2, #2
 8008b24:	2185      	movs	r1, #133	; 0x85
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f003 f8ee 	bl	800bd08 <VL53L0X_WrByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008b36:	2204      	movs	r2, #4
 8008b38:	21ff      	movs	r1, #255	; 0xff
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f003 f8e4 	bl	800bd08 <VL53L0X_WrByte>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	21cd      	movs	r1, #205	; 0xcd
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f003 f8da 	bl	800bd08 <VL53L0X_WrByte>
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008b5e:	2211      	movs	r2, #17
 8008b60:	21cc      	movs	r1, #204	; 0xcc
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f003 f8d0 	bl	800bd08 <VL53L0X_WrByte>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008b72:	2207      	movs	r2, #7
 8008b74:	21ff      	movs	r1, #255	; 0xff
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f003 f8c6 	bl	800bd08 <VL53L0X_WrByte>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008b86:	2200      	movs	r2, #0
 8008b88:	21be      	movs	r1, #190	; 0xbe
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f003 f8bc 	bl	800bd08 <VL53L0X_WrByte>
 8008b90:	4603      	mov	r3, r0
 8008b92:	461a      	mov	r2, r3
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008b9a:	2206      	movs	r2, #6
 8008b9c:	21ff      	movs	r1, #255	; 0xff
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f003 f8b2 	bl	800bd08 <VL53L0X_WrByte>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008bae:	2209      	movs	r2, #9
 8008bb0:	21cc      	movs	r1, #204	; 0xcc
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f003 f8a8 	bl	800bd08 <VL53L0X_WrByte>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	21ff      	movs	r1, #255	; 0xff
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f003 f89e 	bl	800bd08 <VL53L0X_WrByte>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	21ff      	movs	r1, #255	; 0xff
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f003 f894 	bl	800bd08 <VL53L0X_WrByte>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008bea:	2200      	movs	r2, #0
 8008bec:	2100      	movs	r1, #0
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f003 f88a 	bl	800bd08 <VL53L0X_WrByte>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	73fb      	strb	r3, [r7, #15]
 8008bfe:	e058      	b.n	8008cb2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d121      	bne.n	8008c4c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008c08:	787b      	ldrb	r3, [r7, #1]
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d81b      	bhi.n	8008c46 <VL53L0X_SetGpioConfig+0x1ce>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <VL53L0X_SetGpioConfig+0x19c>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c2f 	.word	0x08008c2f
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c3b 	.word	0x08008c3b
 8008c24:	08008c41 	.word	0x08008c41
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]
				break;
 8008c2c:	e00f      	b.n	8008c4e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	73bb      	strb	r3, [r7, #14]
				break;
 8008c32:	e00c      	b.n	8008c4e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008c34:	2302      	movs	r3, #2
 8008c36:	73bb      	strb	r3, [r7, #14]
				break;
 8008c38:	e009      	b.n	8008c4e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73bb      	strb	r3, [r7, #14]
				break;
 8008c3e:	e006      	b.n	8008c4e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008c40:	2304      	movs	r3, #4
 8008c42:	73bb      	strb	r3, [r7, #14]
				break;
 8008c44:	e003      	b.n	8008c4e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008c46:	23f5      	movs	r3, #245	; 0xf5
 8008c48:	73fb      	strb	r3, [r7, #15]
 8008c4a:	e000      	b.n	8008c4e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008c4c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	210a      	movs	r1, #10
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f003 f853 	bl	800bd08 <VL53L0X_WrByte>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10f      	bne.n	8008c8e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008c6e:	7e3b      	ldrb	r3, [r7, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]
 8008c78:	e001      	b.n	8008c7e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008c7a:	2310      	movs	r3, #16
 8008c7c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	22ef      	movs	r2, #239	; 0xef
 8008c82:	2184      	movs	r1, #132	; 0x84
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f003 f88d 	bl	800bda4 <VL53L0X_UpdateByte>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	787a      	ldrb	r2, [r7, #1]
 8008c9a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f83f 	bl	8008d2c <VL53L0X_ClearInterruptMask>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop

08008cc0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	461a      	mov	r2, r3
 8008cda:	210e      	movs	r1, #14
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f003 f8bf 	bl	800be60 <VL53L0X_RdWord>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008ce6:	8abb      	ldrh	r3, [r7, #20]
 8008ce8:	045b      	lsls	r3, r3, #17
 8008cea:	461a      	mov	r2, r3
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <VL53L0X_GetInterruptThresholds+0x68>)
 8008cee:	4013      	ands	r3, r2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10f      	bne.n	8008d1c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	461a      	mov	r2, r3
 8008d02:	210c      	movs	r1, #12
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f003 f8ab 	bl	800be60 <VL53L0X_RdWord>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008d0e:	8abb      	ldrh	r3, [r7, #20]
 8008d10:	045b      	lsls	r3, r3, #17
 8008d12:	461a      	mov	r2, r3
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <VL53L0X_GetInterruptThresholds+0x68>)
 8008d16:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	1ffe0000 	.word	0x1ffe0000

08008d2c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008d3e:	2201      	movs	r2, #1
 8008d40:	210b      	movs	r1, #11
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f002 ffe0 	bl	800bd08 <VL53L0X_WrByte>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	210b      	movs	r1, #11
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f002 ffd9 	bl	800bd08 <VL53L0X_WrByte>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008d60:	f107 030d 	add.w	r3, r7, #13
 8008d64:	461a      	mov	r2, r3
 8008d66:	2113      	movs	r1, #19
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f003 f84f 	bl	800be0c <VL53L0X_RdByte>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008d7e:	7b7b      	ldrb	r3, [r7, #13]
 8008d80:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d803      	bhi.n	8008d96 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0d3      	beq.n	8008d3e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d901      	bls.n	8008da0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008d9c:	23f4      	movs	r3, #244	; 0xf4
 8008d9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008dba:	f107 030e 	add.w	r3, r7, #14
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2113      	movs	r1, #19
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f003 f822 	bl	800be0c <VL53L0X_RdByte>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	f003 0207 	and.w	r2, r3, #7
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	f003 0318 	and.w	r3, r3, #24
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008de0:	23fa      	movs	r3, #250	; 0xfa
 8008de2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fa03 	bl	8009210 <VL53L0X_perform_ref_spad_management>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008e28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008e2c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e32:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	461a      	mov	r2, r3
 8008e3a:	2128      	movs	r1, #40	; 0x28
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 f80f 	bl	800be60 <VL53L0X_RdWord>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d11e      	bne.n	8008e8c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008e4e:	893b      	ldrh	r3, [r7, #8]
 8008e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008e58:	893b      	ldrh	r3, [r7, #8]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	dd0b      	ble.n	8008e7c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008e64:	893a      	ldrh	r2, [r7, #8]
 8008e66:	897b      	ldrh	r3, [r7, #10]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	b21b      	sxth	r3, r3
 8008e6e:	461a      	mov	r2, r3
					* 250;
 8008e70:	23fa      	movs	r3, #250	; 0xfa
 8008e72:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	e007      	b.n	8008e8c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008e7c:	893b      	ldrh	r3, [r7, #8]
 8008e7e:	b21b      	sxth	r3, r3
 8008e80:	461a      	mov	r2, r3
 8008e82:	23fa      	movs	r3, #250	; 0xfa
 8008e84:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b08b      	sub	sp, #44	; 0x2c
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008ea6:	2308      	movs	r3, #8
 8008ea8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebe:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ec8:	69b9      	ldr	r1, [r7, #24]
 8008eca:	fb01 f202 	mul.w	r2, r1, r2
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed6:	e030      	b.n	8008f3a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	4413      	add	r3, r2
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d11e      	bne.n	8008f2c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008eee:	7ffa      	ldrb	r2, [r7, #31]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	fa42 f303 	asr.w	r3, r2, r3
 8008ef6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008efc:	e016      	b.n	8008f2c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008efe:	7ffb      	ldrb	r3, [r7, #31]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <get_next_good_spad+0x88>
				success = 1;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	fb02 f203 	mul.w	r2, r2, r3
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	4413      	add	r3, r2
 8008f18:	461a      	mov	r2, r3
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	601a      	str	r2, [r3, #0]
				break;
 8008f1e:	e009      	b.n	8008f34 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008f20:	7ffb      	ldrb	r3, [r7, #31]
 8008f22:	085b      	lsrs	r3, r3, #1
 8008f24:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008f2c:	6a3a      	ldr	r2, [r7, #32]
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d3e4      	bcc.n	8008efe <get_next_good_spad+0x66>
				coarseIndex++) {
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	3301      	adds	r3, #1
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d202      	bcs.n	8008f48 <get_next_good_spad+0xb0>
 8008f42:	7fbb      	ldrb	r3, [r7, #30]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0c7      	beq.n	8008ed8 <get_next_good_spad+0x40>
		}
	}
}
 8008f48:	bf00      	nop
 8008f4a:	372c      	adds	r7, #44	; 0x2c
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	099b      	lsrs	r3, r3, #6
 8008f64:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008f66:	4a07      	ldr	r2, [pc, #28]	; (8008f84 <is_aperture+0x30>)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <is_aperture+0x22>
		isAperture = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	200002b8 	.word	0x200002b8

08008f88 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008f98:	2308      	movs	r3, #8
 8008f9a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fae:	69b9      	ldr	r1, [r7, #24]
 8008fb0:	fb01 f202 	mul.w	r2, r1, r2
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d302      	bcc.n	8008fc6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008fc0:	23ce      	movs	r3, #206	; 0xce
 8008fc2:	77fb      	strb	r3, [r7, #31]
 8008fc4:	e010      	b.n	8008fe8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	4413      	add	r3, r2
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	b25a      	sxtb	r2, r3
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd8:	b25b      	sxtb	r3, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	b259      	sxtb	r1, r3
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	b2ca      	uxtb	r2, r1
 8008fe6:	701a      	strb	r2, [r3, #0]

	return status;
 8008fe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3724      	adds	r7, #36	; 0x24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009002:	2306      	movs	r3, #6
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	21b0      	movs	r1, #176	; 0xb0
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f002 fe21 	bl	800bc50 <VL53L0X_WriteMulti>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009028:	2306      	movs	r3, #6
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	21b0      	movs	r1, #176	; 0xb0
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f002 fe3e 	bl	800bcb0 <VL53L0X_ReadMulti>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08c      	sub	sp, #48	; 0x30
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	460b      	mov	r3, r1
 8009052:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009054:	2300      	movs	r3, #0
 8009056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800905a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800905c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800905e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009060:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009062:	2300      	movs	r3, #0
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
 8009066:	e02b      	b.n	80090c0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009068:	f107 031c 	add.w	r3, r7, #28
 800906c:	6a3a      	ldr	r2, [r7, #32]
 800906e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff11 	bl	8008e98 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d103      	bne.n	8009086 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800907e:	23ce      	movs	r3, #206	; 0xce
 8009080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009084:	e020      	b.n	80090c8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	461a      	mov	r2, r3
 800908a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908c:	4413      	add	r3, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff ff60 	bl	8008f54 <is_aperture>
 8009094:	4603      	mov	r3, r0
 8009096:	461a      	mov	r2, r3
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	4293      	cmp	r3, r2
 800909c:	d003      	beq.n	80090a6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800909e:	23ce      	movs	r3, #206	; 0xce
 80090a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80090a4:	e010      	b.n	80090c8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80090aa:	6a3a      	ldr	r2, [r7, #32]
 80090ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090ae:	6838      	ldr	r0, [r7, #0]
 80090b0:	f7ff ff6a 	bl	8008f88 <enable_spad_bit>
		currentSpad++;
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	3301      	adds	r3, #1
 80090b8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	3301      	adds	r3, #1
 80090be:	62bb      	str	r3, [r7, #40]	; 0x28
 80090c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d3cf      	bcc.n	8009068 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80090c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ca:	6a3a      	ldr	r2, [r7, #32]
 80090cc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80090ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff ff8d 	bl	8008ff8 <set_ref_spad_map>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80090e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d121      	bne.n	8009130 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80090ec:	f107 0314 	add.w	r3, r7, #20
 80090f0:	4619      	mov	r1, r3
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff ff93 	bl	800901e <get_ref_spad_map>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009102:	e011      	b.n	8009128 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	4413      	add	r3, r2
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	f107 0114 	add.w	r1, r7, #20
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	440b      	add	r3, r1
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d003      	beq.n	8009122 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800911a:	23ce      	movs	r3, #206	; 0xce
 800911c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009120:	e006      	b.n	8009130 <enable_ref_spads+0xec>
			}
			i++;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	3301      	adds	r3, #1
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	429a      	cmp	r2, r3
 800912e:	d3e9      	bcc.n	8009104 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009130:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009134:	4618      	mov	r0, r3
 8009136:	3730      	adds	r7, #48	; 0x30
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	; 0x28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009146:	2300      	movs	r3, #0
 8009148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800915c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009160:	2b00      	cmp	r3, #0
 8009162:	d107      	bne.n	8009174 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009164:	22c0      	movs	r2, #192	; 0xc0
 8009166:	2101      	movs	r1, #1
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f002 fdcd 	bl	800bd08 <VL53L0X_WrByte>
 800916e:	4603      	mov	r3, r0
 8009170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fc48 	bl	8008a18 <VL53L0X_PerformSingleRangingMeasurement>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800918e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009196:	2201      	movs	r2, #1
 8009198:	21ff      	movs	r1, #255	; 0xff
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f002 fdb4 	bl	800bd08 <VL53L0X_WrByte>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80091a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d107      	bne.n	80091be <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	21b6      	movs	r1, #182	; 0xb6
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f002 fe54 	bl	800be60 <VL53L0X_RdWord>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80091be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d107      	bne.n	80091d6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091c6:	2200      	movs	r2, #0
 80091c8:	21ff      	movs	r1, #255	; 0xff
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f002 fd9c 	bl	800bd08 <VL53L0X_WrByte>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80091d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d112      	bne.n	8009204 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80091de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091e2:	461a      	mov	r2, r3
 80091e4:	2101      	movs	r1, #1
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f002 fd8e 	bl	800bd08 <VL53L0X_WrByte>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80091f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009200:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009208:	4618      	mov	r0, r3
 800920a:	3728      	adds	r7, #40	; 0x28
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b09d      	sub	sp, #116	; 0x74
 8009214:	af06      	add	r7, sp, #24
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800921c:	2300      	movs	r3, #0
 800921e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009222:	23b4      	movs	r3, #180	; 0xb4
 8009224:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009228:	2303      	movs	r3, #3
 800922a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800922c:	232c      	movs	r3, #44	; 0x2c
 800922e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800923c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009240:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800924a:	2306      	movs	r3, #6
 800924c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009274:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009276:	2300      	movs	r3, #0
 8009278:	64bb      	str	r3, [r7, #72]	; 0x48
 800927a:	e009      	b.n	8009290 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009280:	4413      	add	r3, r2
 8009282:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800928a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800928c:	3301      	adds	r3, #1
 800928e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	429a      	cmp	r2, r3
 8009296:	d3f1      	bcc.n	800927c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009298:	2201      	movs	r2, #1
 800929a:	21ff      	movs	r1, #255	; 0xff
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f002 fd33 	bl	800bd08 <VL53L0X_WrByte>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80092a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d107      	bne.n	80092c0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80092b0:	2200      	movs	r2, #0
 80092b2:	214f      	movs	r1, #79	; 0x4f
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f002 fd27 	bl	800bd08 <VL53L0X_WrByte>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80092c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d107      	bne.n	80092d8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80092c8:	222c      	movs	r2, #44	; 0x2c
 80092ca:	214e      	movs	r1, #78	; 0x4e
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f002 fd1b 	bl	800bd08 <VL53L0X_WrByte>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80092d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d107      	bne.n	80092f0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092e0:	2200      	movs	r2, #0
 80092e2:	21ff      	movs	r1, #255	; 0xff
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f002 fd0f 	bl	800bd08 <VL53L0X_WrByte>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80092f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d109      	bne.n	800930c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80092f8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80092fc:	461a      	mov	r2, r3
 80092fe:	21b6      	movs	r1, #182	; 0xb6
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f002 fd01 	bl	800bd08 <VL53L0X_WrByte>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800930c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009310:	2b00      	cmp	r3, #0
 8009312:	d107      	bne.n	8009324 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009314:	2200      	movs	r2, #0
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f002 fcf5 	bl	800bd08 <VL53L0X_WrByte>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009324:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	f107 0111 	add.w	r1, r7, #17
 8009334:	2300      	movs	r3, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fbbb 	bl	8009ab2 <VL53L0X_perform_ref_calibration>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009342:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009346:	2b00      	cmp	r3, #0
 8009348:	d121      	bne.n	800938e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800934e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009350:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009358:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009366:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800936a:	f107 0218 	add.w	r2, r7, #24
 800936e:	9204      	str	r2, [sp, #16]
 8009370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009372:	9203      	str	r2, [sp, #12]
 8009374:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009376:	9202      	str	r2, [sp, #8]
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4623      	mov	r3, r4
 8009380:	4602      	mov	r2, r0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fe5e 	bl	8009044 <enable_ref_spads>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800938e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009392:	2b00      	cmp	r3, #0
 8009394:	d174      	bne.n	8009480 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800939a:	f107 0312 	add.w	r3, r7, #18
 800939e:	4619      	mov	r1, r3
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff fecb 	bl	800913c <perform_ref_signal_measurement>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80093ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d161      	bne.n	8009478 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80093b4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80093b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d25d      	bcs.n	8009478 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80093bc:	2300      	movs	r3, #0
 80093be:	64bb      	str	r3, [r7, #72]	; 0x48
 80093c0:	e009      	b.n	80093d6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80093cc:	2200      	movs	r2, #0
 80093ce:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80093d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d2:	3301      	adds	r3, #1
 80093d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	429a      	cmp	r2, r3
 80093dc:	d3f1      	bcc.n	80093c2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80093de:	e002      	b.n	80093e6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80093e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e2:	3301      	adds	r3, #1
 80093e4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80093e6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	4413      	add	r3, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fdb0 	bl	8008f54 <is_aperture>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d103      	bne.n	8009402 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80093fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	429a      	cmp	r2, r3
 8009400:	d3ee      	bcc.n	80093e0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009402:	2301      	movs	r3, #1
 8009404:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009408:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009416:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800941a:	f107 0218 	add.w	r2, r7, #24
 800941e:	9204      	str	r2, [sp, #16]
 8009420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009422:	9203      	str	r2, [sp, #12]
 8009424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009426:	9202      	str	r2, [sp, #8]
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4623      	mov	r3, r4
 8009430:	4602      	mov	r2, r0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fe06 	bl	8009044 <enable_ref_spads>
 8009438:	4603      	mov	r3, r0
 800943a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800943e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009442:	2b00      	cmp	r3, #0
 8009444:	d11b      	bne.n	800947e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800944a:	f107 0312 	add.w	r3, r7, #18
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff fe73 	bl	800913c <perform_ref_signal_measurement>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800945c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10c      	bne.n	800947e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009464:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009466:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009468:	429a      	cmp	r2, r3
 800946a:	d208      	bcs.n	800947e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800946c:	2301      	movs	r3, #1
 800946e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009476:	e002      	b.n	800947e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800947c:	e000      	b.n	8009480 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800947e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009480:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 80af 	bne.w	80095e8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800948a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800948c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800948e:	429a      	cmp	r2, r3
 8009490:	f240 80aa 	bls.w	80095e8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80094a4:	f107 031c 	add.w	r3, r7, #28
 80094a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094aa:	4618      	mov	r0, r3
 80094ac:	f004 fff9 	bl	800e4a2 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80094b0:	8a7b      	ldrh	r3, [r7, #18]
 80094b2:	461a      	mov	r2, r3
 80094b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfb8      	it	lt
 80094bc:	425b      	neglt	r3, r3
 80094be:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80094c6:	e086      	b.n	80095d6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80094ce:	f107 0314 	add.w	r3, r7, #20
 80094d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094d6:	f7ff fcdf 	bl	8008e98 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d103      	bne.n	80094ea <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80094e2:	23ce      	movs	r3, #206	; 0xce
 80094e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80094e8:	e07e      	b.n	80095e8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80094ea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4413      	add	r3, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff fd2e 	bl	8008f54 <is_aperture>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461a      	mov	r2, r3
 80094fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fe:	4293      	cmp	r3, r2
 8009500:	d003      	beq.n	800950a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009508:	e06e      	b.n	80095e8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800950a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950c:	3301      	adds	r3, #1
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800951a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800951c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff fd32 	bl	8008f88 <enable_spad_bit>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800952a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10c      	bne.n	800954c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009534:	3301      	adds	r3, #1
 8009536:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800953e:	4619      	mov	r1, r3
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff fd59 	bl	8008ff8 <set_ref_spad_map>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800954c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009550:	2b00      	cmp	r3, #0
 8009552:	d146      	bne.n	80095e2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009554:	f107 0312 	add.w	r3, r7, #18
 8009558:	4619      	mov	r1, r3
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff fdee 	bl	800913c <perform_ref_signal_measurement>
 8009560:	4603      	mov	r3, r0
 8009562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009566:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800956a:	2b00      	cmp	r3, #0
 800956c:	d13b      	bne.n	80095e6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800956e:	8a7b      	ldrh	r3, [r7, #18]
 8009570:	461a      	mov	r2, r3
 8009572:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	425b      	neglt	r3, r3
 800957c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800957e:	8a7b      	ldrh	r3, [r7, #18]
 8009580:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009582:	429a      	cmp	r2, r3
 8009584:	d21c      	bcs.n	80095c0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958a:	429a      	cmp	r2, r3
 800958c:	d914      	bls.n	80095b8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800958e:	f107 031c 	add.w	r3, r7, #28
 8009592:	4619      	mov	r1, r3
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fd2f 	bl	8008ff8 <set_ref_spad_map>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80095a6:	f107 011c 	add.w	r1, r7, #28
 80095aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ac:	4618      	mov	r0, r3
 80095ae:	f004 ff78 	bl	800e4a2 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80095b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b4:	3b01      	subs	r3, #1
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095be:	e00a      	b.n	80095d6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80095ca:	f107 031c 	add.w	r3, r7, #28
 80095ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d0:	4618      	mov	r0, r3
 80095d2:	f004 ff66 	bl	800e4a2 <memcpy>
		while (!complete) {
 80095d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f43f af74 	beq.w	80094c8 <VL53L0X_perform_ref_spad_management+0x2b8>
 80095e0:	e002      	b.n	80095e8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80095e6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d115      	bne.n	800961c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095f4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80095fc:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	b2da      	uxtb	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800961c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009620:	4618      	mov	r0, r3
 8009622:	375c      	adds	r7, #92	; 0x5c
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}

08009628 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009628:	b590      	push	{r4, r7, lr}
 800962a:	b093      	sub	sp, #76	; 0x4c
 800962c:	af06      	add	r7, sp, #24
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009636:	2300      	movs	r3, #0
 8009638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009640:	23b4      	movs	r3, #180	; 0xb4
 8009642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009646:	2306      	movs	r3, #6
 8009648:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800964a:	232c      	movs	r3, #44	; 0x2c
 800964c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800964e:	2201      	movs	r2, #1
 8009650:	21ff      	movs	r1, #255	; 0xff
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f002 fb58 	bl	800bd08 <VL53L0X_WrByte>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800965e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009666:	2200      	movs	r2, #0
 8009668:	214f      	movs	r1, #79	; 0x4f
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f002 fb4c 	bl	800bd08 <VL53L0X_WrByte>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009676:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800967a:	2b00      	cmp	r3, #0
 800967c:	d107      	bne.n	800968e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800967e:	222c      	movs	r2, #44	; 0x2c
 8009680:	214e      	movs	r1, #78	; 0x4e
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f002 fb40 	bl	800bd08 <VL53L0X_WrByte>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800968e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009692:	2b00      	cmp	r3, #0
 8009694:	d107      	bne.n	80096a6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009696:	2200      	movs	r2, #0
 8009698:	21ff      	movs	r1, #255	; 0xff
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f002 fb34 	bl	800bd08 <VL53L0X_WrByte>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80096a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80096ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096b2:	461a      	mov	r2, r3
 80096b4:	21b6      	movs	r1, #182	; 0xb6
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f002 fb26 	bl	800bd08 <VL53L0X_WrByte>
 80096bc:	4603      	mov	r3, r0
 80096be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80096c2:	2300      	movs	r3, #0
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
 80096c6:	e009      	b.n	80096dc <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	3301      	adds	r3, #1
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
 80096dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d3f1      	bcc.n	80096c8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d011      	beq.n	800970e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80096ea:	e002      	b.n	80096f2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	3301      	adds	r3, #1
 80096f0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80096f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	4413      	add	r3, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff fc2a 	bl	8008f54 <is_aperture>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <VL53L0X_set_reference_spads+0xe6>
 8009706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	429a      	cmp	r2, r3
 800970c:	d3ee      	bcc.n	80096ec <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800971a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800971e:	79f9      	ldrb	r1, [r7, #7]
 8009720:	f107 0214 	add.w	r2, r7, #20
 8009724:	9204      	str	r2, [sp, #16]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	9203      	str	r2, [sp, #12]
 800972a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800972c:	9202      	str	r2, [sp, #8]
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	4623      	mov	r3, r4
 8009736:	4602      	mov	r2, r0
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fc83 	bl	8009044 <enable_ref_spads>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009744:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10c      	bne.n	8009766 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	79fa      	ldrb	r2, [r7, #7]
 8009762:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009766:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800976a:	4618      	mov	r0, r3
 800976c:	3734      	adds	r7, #52	; 0x34
 800976e:	46bd      	mov	sp, r7
 8009770:	bd90      	pop	{r4, r7, pc}

08009772 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10a      	bne.n	80097a0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	f043 0301 	orr.w	r3, r3, #1
 8009790:	b2db      	uxtb	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f002 fab6 	bl	800bd08 <VL53L0X_WrByte>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80097a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9bf 	bl	8009b2c <VL53L0X_measurement_poll_for_completion>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80097b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80097ba:	2100      	movs	r1, #0
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff fab5 	bl	8008d2c <VL53L0X_ClearInterruptMask>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80097c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80097ce:	2200      	movs	r2, #0
 80097d0:	2100      	movs	r1, #0
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f002 fa98 	bl	800bd08 <VL53L0X_WrByte>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]

	return Status;
 80097dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	4608      	mov	r0, r1
 80097f2:	4611      	mov	r1, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	4603      	mov	r3, r0
 80097f8:	70fb      	strb	r3, [r7, #3]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70bb      	strb	r3, [r7, #2]
 80097fe:	4613      	mov	r3, r2
 8009800:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800980a:	2201      	movs	r2, #1
 800980c:	21ff      	movs	r1, #255	; 0xff
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f002 fa7a 	bl	800bd08 <VL53L0X_WrByte>
 8009814:	4603      	mov	r3, r0
 8009816:	461a      	mov	r2, r3
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	4313      	orrs	r3, r2
 800981c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800981e:	2200      	movs	r2, #0
 8009820:	2100      	movs	r1, #0
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f002 fa70 	bl	800bd08 <VL53L0X_WrByte>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	4313      	orrs	r3, r2
 8009830:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009832:	2200      	movs	r2, #0
 8009834:	21ff      	movs	r1, #255	; 0xff
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f002 fa66 	bl	800bd08 <VL53L0X_WrByte>
 800983c:	4603      	mov	r3, r0
 800983e:	461a      	mov	r2, r3
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4313      	orrs	r3, r2
 8009844:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01e      	beq.n	800988a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800984c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d009      	beq.n	8009868 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	21cb      	movs	r1, #203	; 0xcb
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f002 fad7 	bl	800be0c <VL53L0X_RdByte>
 800985e:	4603      	mov	r3, r0
 8009860:	461a      	mov	r2, r3
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	4313      	orrs	r3, r2
 8009866:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	d02a      	beq.n	80098c6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009870:	f107 030e 	add.w	r3, r7, #14
 8009874:	461a      	mov	r2, r3
 8009876:	21ee      	movs	r1, #238	; 0xee
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f002 fac7 	bl	800be0c <VL53L0X_RdByte>
 800987e:	4603      	mov	r3, r0
 8009880:	461a      	mov	r2, r3
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4313      	orrs	r3, r2
 8009886:	73fb      	strb	r3, [r7, #15]
 8009888:	e01d      	b.n	80098c6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800988a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009892:	78bb      	ldrb	r3, [r7, #2]
 8009894:	461a      	mov	r2, r3
 8009896:	21cb      	movs	r1, #203	; 0xcb
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f002 fa35 	bl	800bd08 <VL53L0X_WrByte>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80098a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00a      	beq.n	80098c6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80098b0:	787b      	ldrb	r3, [r7, #1]
 80098b2:	2280      	movs	r2, #128	; 0x80
 80098b4:	21ee      	movs	r1, #238	; 0xee
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f002 fa74 	bl	800bda4 <VL53L0X_UpdateByte>
 80098bc:	4603      	mov	r3, r0
 80098be:	461a      	mov	r2, r3
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80098c6:	2201      	movs	r2, #1
 80098c8:	21ff      	movs	r1, #255	; 0xff
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f002 fa1c 	bl	800bd08 <VL53L0X_WrByte>
 80098d0:	4603      	mov	r3, r0
 80098d2:	461a      	mov	r2, r3
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80098da:	2201      	movs	r2, #1
 80098dc:	2100      	movs	r1, #0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f002 fa12 	bl	800bd08 <VL53L0X_WrByte>
 80098e4:	4603      	mov	r3, r0
 80098e6:	461a      	mov	r2, r3
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80098ee:	2200      	movs	r2, #0
 80098f0:	21ff      	movs	r1, #255	; 0xff
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f002 fa08 	bl	800bd08 <VL53L0X_WrByte>
 80098f8:	4603      	mov	r3, r0
 80098fa:	461a      	mov	r2, r3
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	4313      	orrs	r3, r2
 8009900:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	f023 0310 	bic.w	r3, r3, #16
 8009908:	b2da      	uxtb	r2, r3
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	701a      	strb	r2, [r3, #0]

	return Status;
 800990e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b08a      	sub	sp, #40	; 0x28
 800991e:	af04      	add	r7, sp, #16
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	4611      	mov	r1, r2
 8009926:	461a      	mov	r2, r3
 8009928:	460b      	mov	r3, r1
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	4613      	mov	r3, r2
 800992e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009944:	79bb      	ldrb	r3, [r7, #6]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009950:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009952:	2201      	movs	r2, #1
 8009954:	2101      	movs	r1, #1
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f002 f9d6 	bl	800bd08 <VL53L0X_WrByte>
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009968:	2140      	movs	r1, #64	; 0x40
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7ff ff01 	bl	8009772 <VL53L0X_perform_single_ref_calibration>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009974:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d115      	bne.n	80099a8 <VL53L0X_perform_vhv_calibration+0x8e>
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d112      	bne.n	80099a8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009982:	7d39      	ldrb	r1, [r7, #20]
 8009984:	7d7a      	ldrb	r2, [r7, #21]
 8009986:	2300      	movs	r3, #0
 8009988:	9303      	str	r3, [sp, #12]
 800998a:	2301      	movs	r3, #1
 800998c:	9302      	str	r3, [sp, #8]
 800998e:	f107 0313 	add.w	r3, r7, #19
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	460b      	mov	r3, r1
 800999a:	2101      	movs	r1, #1
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff ff23 	bl	80097e8 <VL53L0X_ref_calibration_io>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]
 80099a6:	e002      	b.n	80099ae <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80099ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d112      	bne.n	80099dc <VL53L0X_perform_vhv_calibration+0xc2>
 80099b6:	79bb      	ldrb	r3, [r7, #6]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00f      	beq.n	80099dc <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80099bc:	7dbb      	ldrb	r3, [r7, #22]
 80099be:	461a      	mov	r2, r3
 80099c0:	2101      	movs	r1, #1
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f002 f9a0 	bl	800bd08 <VL53L0X_WrByte>
 80099c8:	4603      	mov	r3, r0
 80099ca:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80099cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d103      	bne.n	80099dc <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	7dba      	ldrb	r2, [r7, #22]
 80099d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80099dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	; 0x28
 80099ec:	af04      	add	r7, sp, #16
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4611      	mov	r1, r2
 80099f4:	461a      	mov	r2, r3
 80099f6:	460b      	mov	r3, r1
 80099f8:	71fb      	strb	r3, [r7, #7]
 80099fa:	4613      	mov	r3, r2
 80099fc:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099fe:	2300      	movs	r3, #0
 8009a00:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009a0e:	79bb      	ldrb	r3, [r7, #6]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009a1a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	2101      	movs	r1, #1
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f002 f971 	bl	800bd08 <VL53L0X_WrByte>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d105      	bne.n	8009a3e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009a32:	2100      	movs	r1, #0
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff fe9c 	bl	8009772 <VL53L0X_perform_single_ref_calibration>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d115      	bne.n	8009a72 <VL53L0X_perform_phase_calibration+0x8a>
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d112      	bne.n	8009a72 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009a4c:	7d39      	ldrb	r1, [r7, #20]
 8009a4e:	7d7a      	ldrb	r2, [r7, #21]
 8009a50:	2301      	movs	r3, #1
 8009a52:	9303      	str	r3, [sp, #12]
 8009a54:	2300      	movs	r3, #0
 8009a56:	9302      	str	r3, [sp, #8]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	f107 0313 	add.w	r3, r7, #19
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	460b      	mov	r3, r1
 8009a64:	2101      	movs	r1, #1
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7ff febe 	bl	80097e8 <VL53L0X_ref_calibration_io>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	75fb      	strb	r3, [r7, #23]
 8009a70:	e002      	b.n	8009a78 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d112      	bne.n	8009aa6 <VL53L0X_perform_phase_calibration+0xbe>
 8009a80:	79bb      	ldrb	r3, [r7, #6]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00f      	beq.n	8009aa6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a86:	7dbb      	ldrb	r3, [r7, #22]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f002 f93b 	bl	800bd08 <VL53L0X_WrByte>
 8009a92:	4603      	mov	r3, r0
 8009a94:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d103      	bne.n	8009aa6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	7dba      	ldrb	r2, [r7, #22]
 8009aa2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b086      	sub	sp, #24
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	607a      	str	r2, [r7, #4]
 8009abe:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009ace:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff ff1f 	bl	800991a <VL53L0X_perform_vhv_calibration>
 8009adc:	4603      	mov	r3, r0
 8009ade:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d107      	bne.n	8009af8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009ae8:	78fa      	ldrb	r2, [r7, #3]
 8009aea:	2300      	movs	r3, #0
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff ff7a 	bl	80099e8 <VL53L0X_perform_phase_calibration>
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10f      	bne.n	8009b20 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b00:	7dbb      	ldrb	r3, [r7, #22]
 8009b02:	461a      	mov	r2, r3
 8009b04:	2101      	movs	r1, #1
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f002 f8fe 	bl	800bd08 <VL53L0X_WrByte>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	7dba      	ldrb	r2, [r7, #22]
 8009b1c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009b40:	f107 030f 	add.w	r3, r7, #15
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fe fe02 	bl	8008750 <VL53L0X_GetMeasurementDataReady>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d110      	bne.n	8009b7a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d00f      	beq.n	8009b7e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	3301      	adds	r3, #1
 8009b62:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009b6a:	d302      	bcc.n	8009b72 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009b6c:	23f9      	movs	r3, #249	; 0xf9
 8009b6e:	75fb      	strb	r3, [r7, #23]
			break;
 8009b70:	e006      	b.n	8009b80 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f002 f9e8 	bl	800bf48 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009b78:	e7e2      	b.n	8009b40 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009b7a:	bf00      	nop
 8009b7c:	e000      	b.n	8009b80 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009b7e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bc2:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009bc4:	e002      	b.n	8009bcc <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	089b      	lsrs	r3, r3, #2
 8009bca:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d8f8      	bhi.n	8009bc6 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009bd4:	e017      	b.n	8009c06 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4413      	add	r3, r2
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d30b      	bcc.n	8009bfa <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4413      	add	r3, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	085b      	lsrs	r3, r3, #1
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e002      	b.n	8009c00 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	085b      	lsrs	r3, r3, #1
 8009bfe:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	089b      	lsrs	r3, r3, #2
 8009c04:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e4      	bne.n	8009bd6 <VL53L0X_isqrt+0x24>
	}

	return res;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b086      	sub	sp, #24
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c22:	2300      	movs	r3, #0
 8009c24:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2183      	movs	r1, #131	; 0x83
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f002 f86c 	bl	800bd08 <VL53L0X_WrByte>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d11e      	bne.n	8009c80 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009c46:	f107 030f 	add.w	r3, r7, #15
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	2183      	movs	r1, #131	; 0x83
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f002 f8dc 	bl	800be0c <VL53L0X_RdByte>
 8009c54:	4603      	mov	r3, r0
 8009c56:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <VL53L0X_device_read_strobe+0x5a>
 8009c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c72:	d3e8      	bcc.n	8009c46 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009c7a:	d301      	bcc.n	8009c80 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009c7c:	23f9      	movs	r3, #249	; 0xf9
 8009c7e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009c80:	2201      	movs	r2, #1
 8009c82:	2183      	movs	r1, #131	; 0x83
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f002 f83f 	bl	800bd08 <VL53L0X_WrByte>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009c94:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b098      	sub	sp, #96	; 0x60
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009cd0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009cd4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cf0:	2b07      	cmp	r3, #7
 8009cf2:	f000 8408 	beq.w	800a506 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	2180      	movs	r1, #128	; 0x80
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f002 f804 	bl	800bd08 <VL53L0X_WrByte>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d0e:	2201      	movs	r2, #1
 8009d10:	21ff      	movs	r1, #255	; 0xff
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 fff8 	bl	800bd08 <VL53L0X_WrByte>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 ffec 	bl	800bd08 <VL53L0X_WrByte>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009d3e:	2206      	movs	r2, #6
 8009d40:	21ff      	movs	r1, #255	; 0xff
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 ffe0 	bl	800bd08 <VL53L0X_WrByte>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009d56:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	2183      	movs	r1, #131	; 0x83
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f002 f854 	bl	800be0c <VL53L0X_RdByte>
 8009d64:	4603      	mov	r3, r0
 8009d66:	461a      	mov	r2, r3
 8009d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009d72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d76:	f043 0304 	orr.w	r3, r3, #4
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	2183      	movs	r1, #131	; 0x83
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 ffc1 	bl	800bd08 <VL53L0X_WrByte>
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009d94:	2207      	movs	r2, #7
 8009d96:	21ff      	movs	r1, #255	; 0xff
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 ffb5 	bl	800bd08 <VL53L0X_WrByte>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	461a      	mov	r2, r3
 8009da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009da6:	4313      	orrs	r3, r2
 8009da8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009dac:	2201      	movs	r2, #1
 8009dae:	2181      	movs	r1, #129	; 0x81
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 ffa9 	bl	800bd08 <VL53L0X_WrByte>
 8009db6:	4603      	mov	r3, r0
 8009db8:	461a      	mov	r2, r3
 8009dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f002 f8bf 	bl	800bf48 <VL53L0X_PollingDelay>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2180      	movs	r1, #128	; 0x80
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 ff93 	bl	800bd08 <VL53L0X_WrByte>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8098 	beq.w	8009f2c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e00:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f040 8091 	bne.w	8009f2c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009e0a:	226b      	movs	r2, #107	; 0x6b
 8009e0c:	2194      	movs	r1, #148	; 0x94
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 ff7a 	bl	800bd08 <VL53L0X_WrByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff fef9 	bl	8009c1a <VL53L0X_device_read_strobe>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e30:	4313      	orrs	r3, r2
 8009e32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	2190      	movs	r1, #144	; 0x90
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f002 f846 	bl	800bed0 <VL53L0X_RdDWord>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	0a1b      	lsrs	r3, r3, #8
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	0bdb      	lsrs	r3, r3, #15
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009e6e:	2224      	movs	r2, #36	; 0x24
 8009e70:	2194      	movs	r1, #148	; 0x94
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 ff48 	bl	800bd08 <VL53L0X_WrByte>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e80:	4313      	orrs	r3, r2
 8009e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fec7 	bl	8009c1a <VL53L0X_device_read_strobe>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	2190      	movs	r1, #144	; 0x90
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f002 f814 	bl	800bed0 <VL53L0X_RdDWord>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	0e1b      	lsrs	r3, r3, #24
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	0c1b      	lsrs	r3, r3, #16
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	0a1b      	lsrs	r3, r3, #8
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009ed4:	2225      	movs	r2, #37	; 0x25
 8009ed6:	2194      	movs	r1, #148	; 0x94
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 ff15 	bl	800bd08 <VL53L0X_WrByte>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fe94 	bl	8009c1a <VL53L0X_device_read_strobe>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009efa:	4313      	orrs	r3, r2
 8009efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f04:	461a      	mov	r2, r3
 8009f06:	2190      	movs	r1, #144	; 0x90
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 ffe1 	bl	800bed0 <VL53L0X_RdDWord>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	461a      	mov	r2, r3
 8009f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f16:	4313      	orrs	r3, r2
 8009f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	0e1b      	lsrs	r3, r3, #24
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8189 	beq.w	800a24a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009f38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f3c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f040 8182 	bne.w	800a24a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009f46:	2202      	movs	r2, #2
 8009f48:	2194      	movs	r1, #148	; 0x94
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fedc 	bl	800bd08 <VL53L0X_WrByte>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fe5b 	bl	8009c1a <VL53L0X_device_read_strobe>
 8009f64:	4603      	mov	r3, r0
 8009f66:	461a      	mov	r2, r3
 8009f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009f72:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009f76:	461a      	mov	r2, r3
 8009f78:	2190      	movs	r1, #144	; 0x90
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 ff46 	bl	800be0c <VL53L0X_RdByte>
 8009f80:	4603      	mov	r3, r0
 8009f82:	461a      	mov	r2, r3
 8009f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009f8e:	227b      	movs	r2, #123	; 0x7b
 8009f90:	2194      	movs	r1, #148	; 0x94
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 feb8 	bl	800bd08 <VL53L0X_WrByte>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff fe37 	bl	8009c1a <VL53L0X_device_read_strobe>
 8009fac:	4603      	mov	r3, r0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009fba:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	2190      	movs	r1, #144	; 0x90
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 ff22 	bl	800be0c <VL53L0X_RdByte>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009fd6:	2277      	movs	r2, #119	; 0x77
 8009fd8:	2194      	movs	r1, #148	; 0x94
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fe94 	bl	800bd08 <VL53L0X_WrByte>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff fe13 	bl	8009c1a <VL53L0X_device_read_strobe>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a006:	461a      	mov	r2, r3
 800a008:	2190      	movs	r1, #144	; 0x90
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 ff60 	bl	800bed0 <VL53L0X_RdDWord>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a018:	4313      	orrs	r3, r2
 800a01a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	0e5b      	lsrs	r3, r3, #25
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	0c9b      	lsrs	r3, r3, #18
 800a030:	b2db      	uxtb	r3, r3
 800a032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a036:	b2db      	uxtb	r3, r3
 800a038:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	0adb      	lsrs	r3, r3, #11
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a044:	b2db      	uxtb	r3, r3
 800a046:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	091b      	lsrs	r3, r3, #4
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	b2db      	uxtb	r3, r3
 800a054:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a068:	2278      	movs	r2, #120	; 0x78
 800a06a:	2194      	movs	r1, #148	; 0x94
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 fe4b 	bl	800bd08 <VL53L0X_WrByte>
 800a072:	4603      	mov	r3, r0
 800a074:	461a      	mov	r2, r3
 800a076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a07a:	4313      	orrs	r3, r2
 800a07c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff fdca 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a086:	4603      	mov	r3, r0
 800a088:	461a      	mov	r2, r3
 800a08a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a08e:	4313      	orrs	r3, r2
 800a090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a098:	461a      	mov	r2, r3
 800a09a:	2190      	movs	r1, #144	; 0x90
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 ff17 	bl	800bed0 <VL53L0X_RdDWord>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	0f5b      	lsrs	r3, r3, #29
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ba:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a0bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0c0:	4413      	add	r3, r2
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	0d9b      	lsrs	r3, r3, #22
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	0bdb      	lsrs	r3, r3, #15
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	0a1b      	lsrs	r3, r3, #8
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f2:	085b      	lsrs	r3, r3, #1
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a100:	b2db      	uxtb	r3, r3
 800a102:	019b      	lsls	r3, r3, #6
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a110:	2279      	movs	r2, #121	; 0x79
 800a112:	2194      	movs	r1, #148	; 0x94
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f001 fdf7 	bl	800bd08 <VL53L0X_WrByte>
 800a11a:	4603      	mov	r3, r0
 800a11c:	461a      	mov	r2, r3
 800a11e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a122:	4313      	orrs	r3, r2
 800a124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff fd76 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a12e:	4603      	mov	r3, r0
 800a130:	461a      	mov	r2, r3
 800a132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a136:	4313      	orrs	r3, r2
 800a138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a13c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a140:	461a      	mov	r2, r3
 800a142:	2190      	movs	r1, #144	; 0x90
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f001 fec3 	bl	800bed0 <VL53L0X_RdDWord>
 800a14a:	4603      	mov	r3, r0
 800a14c:	461a      	mov	r2, r3
 800a14e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a152:	4313      	orrs	r3, r2
 800a154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	0e9b      	lsrs	r3, r3, #26
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a168:	4413      	add	r3, r2
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	0cdb      	lsrs	r3, r3, #19
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	0b1b      	lsrs	r3, r3, #12
 800a180:	b2db      	uxtb	r3, r3
 800a182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a186:	b2db      	uxtb	r3, r3
 800a188:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	095b      	lsrs	r3, r3, #5
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a194:	b2db      	uxtb	r3, r3
 800a196:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a1aa:	227a      	movs	r2, #122	; 0x7a
 800a1ac:	2194      	movs	r1, #148	; 0x94
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 fdaa 	bl	800bd08 <VL53L0X_WrByte>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fd29 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1da:	461a      	mov	r2, r3
 800a1dc:	2190      	movs	r1, #144	; 0x90
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f001 fe76 	bl	800bed0 <VL53L0X_RdDWord>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	0f9b      	lsrs	r3, r3, #30
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fc:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a1fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a202:	4413      	add	r3, r2
 800a204:	b2db      	uxtb	r3, r3
 800a206:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	0ddb      	lsrs	r3, r3, #23
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a212:	b2db      	uxtb	r3, r3
 800a214:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	0c1b      	lsrs	r3, r3, #16
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a220:	b2db      	uxtb	r3, r3
 800a222:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	0a5b      	lsrs	r3, r3, #9
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	089b      	lsrs	r3, r3, #2
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a244:	2300      	movs	r3, #0
 800a246:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 80f1 	beq.w	800a438 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a256:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a25a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f040 80ea 	bne.w	800a438 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a264:	227b      	movs	r2, #123	; 0x7b
 800a266:	2194      	movs	r1, #148	; 0x94
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 fd4d 	bl	800bd08 <VL53L0X_WrByte>
 800a26e:	4603      	mov	r3, r0
 800a270:	461a      	mov	r2, r3
 800a272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a276:	4313      	orrs	r3, r2
 800a278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff fccc 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a282:	4603      	mov	r3, r0
 800a284:	461a      	mov	r2, r3
 800a286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a28a:	4313      	orrs	r3, r2
 800a28c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a294:	461a      	mov	r2, r3
 800a296:	2190      	movs	r1, #144	; 0x90
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 fe19 	bl	800bed0 <VL53L0X_RdDWord>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a2ac:	227c      	movs	r2, #124	; 0x7c
 800a2ae:	2194      	movs	r1, #148	; 0x94
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fd29 	bl	800bd08 <VL53L0X_WrByte>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff fca8 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a2d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2dc:	461a      	mov	r2, r3
 800a2de:	2190      	movs	r1, #144	; 0x90
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 fdf5 	bl	800bed0 <VL53L0X_RdDWord>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a2f4:	2273      	movs	r2, #115	; 0x73
 800a2f6:	2194      	movs	r1, #148	; 0x94
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 fd05 	bl	800bd08 <VL53L0X_WrByte>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461a      	mov	r2, r3
 800a302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a306:	4313      	orrs	r3, r2
 800a308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff fc84 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a312:	4603      	mov	r3, r0
 800a314:	461a      	mov	r2, r3
 800a316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a31a:	4313      	orrs	r3, r2
 800a31c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a324:	461a      	mov	r2, r3
 800a326:	2190      	movs	r1, #144	; 0x90
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f001 fdd1 	bl	800bed0 <VL53L0X_RdDWord>
 800a32e:	4603      	mov	r3, r0
 800a330:	461a      	mov	r2, r3
 800a332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a336:	4313      	orrs	r3, r2
 800a338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a340:	b29b      	uxth	r3, r3
 800a342:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a344:	2274      	movs	r2, #116	; 0x74
 800a346:	2194      	movs	r1, #148	; 0x94
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 fcdd 	bl	800bd08 <VL53L0X_WrByte>
 800a34e:	4603      	mov	r3, r0
 800a350:	461a      	mov	r2, r3
 800a352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a356:	4313      	orrs	r3, r2
 800a358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fc5c 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a36a:	4313      	orrs	r3, r2
 800a36c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a374:	461a      	mov	r2, r3
 800a376:	2190      	movs	r1, #144	; 0x90
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 fda9 	bl	800bed0 <VL53L0X_RdDWord>
 800a37e:	4603      	mov	r3, r0
 800a380:	461a      	mov	r2, r3
 800a382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a386:	4313      	orrs	r3, r2
 800a388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a390:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a392:	4313      	orrs	r3, r2
 800a394:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a396:	2275      	movs	r2, #117	; 0x75
 800a398:	2194      	movs	r1, #148	; 0x94
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 fcb4 	bl	800bd08 <VL53L0X_WrByte>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff fc33 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a3c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	2190      	movs	r1, #144	; 0x90
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 fd80 	bl	800bed0 <VL53L0X_RdDWord>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a3e6:	2276      	movs	r2, #118	; 0x76
 800a3e8:	2194      	movs	r1, #148	; 0x94
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 fc8c 	bl	800bd08 <VL53L0X_WrByte>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff fc0b 	bl	8009c1a <VL53L0X_device_read_strobe>
 800a404:	4603      	mov	r3, r0
 800a406:	461a      	mov	r2, r3
 800a408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a40c:	4313      	orrs	r3, r2
 800a40e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a416:	461a      	mov	r2, r3
 800a418:	2190      	movs	r1, #144	; 0x90
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fd58 	bl	800bed0 <VL53L0X_RdDWord>
 800a420:	4603      	mov	r3, r0
 800a422:	461a      	mov	r2, r3
 800a424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a428:	4313      	orrs	r3, r2
 800a42a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a434:	4313      	orrs	r3, r2
 800a436:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a438:	2200      	movs	r2, #0
 800a43a:	2181      	movs	r1, #129	; 0x81
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 fc63 	bl	800bd08 <VL53L0X_WrByte>
 800a442:	4603      	mov	r3, r0
 800a444:	461a      	mov	r2, r3
 800a446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a44a:	4313      	orrs	r3, r2
 800a44c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a450:	2206      	movs	r2, #6
 800a452:	21ff      	movs	r1, #255	; 0xff
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fc57 	bl	800bd08 <VL53L0X_WrByte>
 800a45a:	4603      	mov	r3, r0
 800a45c:	461a      	mov	r2, r3
 800a45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a462:	4313      	orrs	r3, r2
 800a464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a468:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a46c:	461a      	mov	r2, r3
 800a46e:	2183      	movs	r1, #131	; 0x83
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 fccb 	bl	800be0c <VL53L0X_RdByte>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a47e:	4313      	orrs	r3, r2
 800a480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a488:	f023 0304 	bic.w	r3, r3, #4
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	2183      	movs	r1, #131	; 0x83
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 fc38 	bl	800bd08 <VL53L0X_WrByte>
 800a498:	4603      	mov	r3, r0
 800a49a:	461a      	mov	r2, r3
 800a49c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	21ff      	movs	r1, #255	; 0xff
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 fc2c 	bl	800bd08 <VL53L0X_WrByte>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a4be:	2201      	movs	r2, #1
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 fc20 	bl	800bd08 <VL53L0X_WrByte>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	21ff      	movs	r1, #255	; 0xff
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 fc14 	bl	800bd08 <VL53L0X_WrByte>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2180      	movs	r1, #128	; 0x80
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 fc08 	bl	800bd08 <VL53L0X_WrByte>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a500:	4313      	orrs	r3, r2
 800a502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a506:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f040 808f 	bne.w	800a62e <VL53L0X_get_info_from_device+0x98e>
 800a510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a514:	2b07      	cmp	r3, #7
 800a516:	f000 808a 	beq.w	800a62e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a51a:	78fb      	ldrb	r3, [r7, #3]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d024      	beq.n	800a56e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a528:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d11e      	bne.n	800a56e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a536:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a540:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a544:	2300      	movs	r3, #0
 800a546:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a548:	e00e      	b.n	800a568 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a54a:	f107 0208 	add.w	r2, r7, #8
 800a54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a550:	4413      	add	r3, r2
 800a552:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a558:	4413      	add	r3, r2
 800a55a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a55e:	460a      	mov	r2, r1
 800a560:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a564:	3301      	adds	r3, #1
 800a566:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a56a:	2b05      	cmp	r3, #5
 800a56c:	dded      	ble.n	800a54a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d018      	beq.n	800a5aa <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a578:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a57c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a580:	2b00      	cmp	r3, #0
 800a582:	d112      	bne.n	800a5aa <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a584:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a58e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	33f3      	adds	r3, #243	; 0xf3
 800a59c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a59e:	f107 0310 	add.w	r3, r7, #16
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5a6:	f004 fdc2 	bl	800f12e <strcpy>

		}

		if (((option & 4) == 4) &&
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d030      	beq.n	800a616 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a5b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5b8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d12a      	bne.n	800a616 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d2:	025b      	lsls	r3, r3, #9
 800a5d4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5da:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d011      	beq.n	800a60e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a5ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a5f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5f8:	fb02 f303 	mul.w	r3, r2, r3
 800a5fc:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a5fe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a602:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a606:	425b      	negs	r3, r3
 800a608:	b29b      	uxth	r3, r3
 800a60a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a60e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a616:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a624:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a62e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a632:	4618      	mov	r0, r3
 800a634:	3760      	adds	r7, #96	; 0x60
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b087      	sub	sp, #28
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a646:	f240 6277 	movw	r2, #1655	; 0x677
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a652:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a656:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	fb02 f303 	mul.w	r3, r2, r3
 800a666:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a668:	68bb      	ldr	r3, [r7, #8]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a676:	b480      	push	{r7}
 800a678:	b087      	sub	sp, #28
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d017      	beq.n	800a6c0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3b01      	subs	r3, #1
 800a694:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a696:	e005      	b.n	800a6a4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	085b      	lsrs	r3, r3, #1
 800a69c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a69e:	89fb      	ldrh	r3, [r7, #14]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f4      	bne.n	800a698 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a6ae:	89fb      	ldrh	r3, [r7, #14]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a6bc:	4413      	add	r3, r2
 800a6be:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a6c0:	8afb      	ldrh	r3, [r7, #22]

}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b085      	sub	sp, #20
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a6e0:	88fa      	ldrh	r2, [r7, #6]
 800a6e2:	0a12      	lsrs	r2, r2, #8
 800a6e4:	b292      	uxth	r2, r2
 800a6e6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	4619      	mov	r1, r3
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff ff91 	bl	800a63a <VL53L0X_calc_macro_period_ps>
 800a718:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a720:	4a0a      	ldr	r2, [pc, #40]	; (800a74c <VL53L0X_calc_timeout_mclks+0x50>)
 800a722:	fba2 2303 	umull	r2, r3, r2, r3
 800a726:	099b      	lsrs	r3, r3, #6
 800a728:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a730:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	441a      	add	r2, r3
	timeout_period_mclks =
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a740:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a742:	69fb      	ldr	r3, [r7, #28]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3720      	adds	r7, #32
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	10624dd3 	.word	0x10624dd3

0800a750 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	807b      	strh	r3, [r7, #2]
 800a75c:	4613      	mov	r3, r2
 800a75e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a764:	787b      	ldrb	r3, [r7, #1]
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff ff66 	bl	800a63a <VL53L0X_calc_macro_period_ps>
 800a76e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a776:	4a0a      	ldr	r2, [pc, #40]	; (800a7a0 <VL53L0X_calc_timeout_us+0x50>)
 800a778:	fba2 2303 	umull	r2, r3, r2, r3
 800a77c:	099b      	lsrs	r3, r3, #6
 800a77e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a780:	887b      	ldrh	r3, [r7, #2]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	fb02 f303 	mul.w	r3, r2, r3
 800a788:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a78c:	4a04      	ldr	r2, [pc, #16]	; (800a7a0 <VL53L0X_calc_timeout_us+0x50>)
 800a78e:	fba2 2303 	umull	r2, r3, r2, r3
 800a792:	099b      	lsrs	r3, r3, #6
 800a794:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a796:	697b      	ldr	r3, [r7, #20]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3718      	adds	r7, #24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	10624dd3 	.word	0x10624dd3

0800a7a4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08c      	sub	sp, #48	; 0x30
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <get_sequence_step_timeout+0x38>
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d002      	beq.n	800a7dc <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a7d6:	7afb      	ldrb	r3, [r7, #11]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d128      	bne.n	800a82e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a7dc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7fd fa8f 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a7f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a7f8:	f107 0320 	add.w	r3, r7, #32
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	2146      	movs	r1, #70	; 0x46
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f001 fb03 	bl	800be0c <VL53L0X_RdByte>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a80c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a810:	b29b      	uxth	r3, r3
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff ff5b 	bl	800a6ce <VL53L0X_decode_timeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a81c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a822:	4619      	mov	r1, r3
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7ff ff93 	bl	800a750 <VL53L0X_calc_timeout_us>
 800a82a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a82c:	e092      	b.n	800a954 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a82e:	7afb      	ldrb	r3, [r7, #11]
 800a830:	2b03      	cmp	r3, #3
 800a832:	d135      	bne.n	800a8a0 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a834:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a838:	461a      	mov	r2, r3
 800a83a:	2100      	movs	r1, #0
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7fd fa63 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800a842:	4603      	mov	r3, r0
 800a844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a848:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f040 8081 	bne.w	800a954 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a852:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a856:	461a      	mov	r2, r3
 800a858:	2100      	movs	r1, #0
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f7fd fa54 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a866:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a86e:	f107 031e 	add.w	r3, r7, #30
 800a872:	461a      	mov	r2, r3
 800a874:	2151      	movs	r1, #81	; 0x51
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f001 faf2 	bl	800be60 <VL53L0X_RdWord>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a882:	8bfb      	ldrh	r3, [r7, #30]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff ff22 	bl	800a6ce <VL53L0X_decode_timeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a88e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a894:	4619      	mov	r1, r3
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f7ff ff5a 	bl	800a750 <VL53L0X_calc_timeout_us>
 800a89c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a89e:	e059      	b.n	800a954 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d156      	bne.n	800a954 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a8a6:	f107 0314 	add.w	r3, r7, #20
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f7fd fb37 	bl	8007f20 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01d      	beq.n	800a8f8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a8bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7fd fa1f 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a8d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10f      	bne.n	800a8f8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a8d8:	f107 031e 	add.w	r3, r7, #30
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2151      	movs	r1, #81	; 0x51
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f001 fabd 	bl	800be60 <VL53L0X_RdWord>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a8ec:	8bfb      	ldrh	r3, [r7, #30]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff feed 	bl	800a6ce <VL53L0X_decode_timeout>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a8f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d109      	bne.n	800a914 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a900:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a904:	461a      	mov	r2, r3
 800a906:	2101      	movs	r1, #1
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7fd f9fd 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800a90e:	4603      	mov	r3, r0
 800a910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a914:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10f      	bne.n	800a93c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a91c:	f107 031c 	add.w	r3, r7, #28
 800a920:	461a      	mov	r2, r3
 800a922:	2171      	movs	r1, #113	; 0x71
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f001 fa9b 	bl	800be60 <VL53L0X_RdWord>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a930:	8bbb      	ldrh	r3, [r7, #28]
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff fecb 	bl	800a6ce <VL53L0X_decode_timeout>
 800a938:	4603      	mov	r3, r0
 800a93a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a93c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a93e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a944:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a94a:	4619      	mov	r1, r3
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f7ff feff 	bl	800a750 <VL53L0X_calc_timeout_us>
 800a952:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a958:	601a      	str	r2, [r3, #0]

	return Status;
 800a95a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3730      	adds	r7, #48	; 0x30
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b08a      	sub	sp, #40	; 0x28
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	460b      	mov	r3, r1
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a974:	2300      	movs	r3, #0
 800a976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <set_sequence_step_timeout+0x26>
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d002      	beq.n	800a98c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d138      	bne.n	800a9fe <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a98c:	f107 031b 	add.w	r3, r7, #27
 800a990:	461a      	mov	r2, r3
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7fd f9b7 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a9a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d11a      	bne.n	800a9de <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a9a8:	7efb      	ldrb	r3, [r7, #27]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff fea4 	bl	800a6fc <VL53L0X_calc_timeout_mclks>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a9b8:	8bbb      	ldrh	r3, [r7, #28]
 800a9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9be:	d903      	bls.n	800a9c8 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a9c0:	23ff      	movs	r3, #255	; 0xff
 800a9c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a9c6:	e004      	b.n	800a9d2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a9c8:	8bbb      	ldrh	r3, [r7, #28]
 800a9ca:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a9d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a9de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f040 80ab 	bne.w	800ab3e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a9e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2146      	movs	r1, #70	; 0x46
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f001 f989 	bl	800bd08 <VL53L0X_WrByte>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a9fc:	e09f      	b.n	800ab3e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d135      	bne.n	800aa70 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800aa04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d11b      	bne.n	800aa44 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa0c:	f107 031b 	add.w	r3, r7, #27
 800aa10:	461a      	mov	r2, r3
 800aa12:	2100      	movs	r1, #0
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7fd f977 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800aa20:	7efb      	ldrb	r3, [r7, #27]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7ff fe68 	bl	800a6fc <VL53L0X_calc_timeout_mclks>
 800aa2c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800aa2e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800aa30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7ff fe1f 	bl	800a676 <VL53L0X_encode_timeout>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aa3c:	8b3a      	ldrh	r2, [r7, #24]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800aa44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d108      	bne.n	800aa5e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800aa4c:	8b3b      	ldrh	r3, [r7, #24]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	2151      	movs	r1, #81	; 0x51
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f001 f97c 	bl	800bd50 <VL53L0X_WrWord>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800aa5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d16b      	bne.n	800ab3e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800aa6e:	e066      	b.n	800ab3e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800aa70:	7afb      	ldrb	r3, [r7, #11]
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d160      	bne.n	800ab38 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800aa76:	f107 0310 	add.w	r3, r7, #16
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7fd fa4f 	bl	8007f20 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800aa86:	7cfb      	ldrb	r3, [r7, #19]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d01d      	beq.n	800aac8 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa8c:	f107 031b 	add.w	r3, r7, #27
 800aa90:	461a      	mov	r2, r3
 800aa92:	2100      	movs	r1, #0
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7fd f937 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800aaa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10f      	bne.n	800aac8 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	461a      	mov	r2, r3
 800aaae:	2151      	movs	r1, #81	; 0x51
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f001 f9d5 	bl	800be60 <VL53L0X_RdWord>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800aabc:	8b3b      	ldrh	r3, [r7, #24]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fe05 	bl	800a6ce <VL53L0X_decode_timeout>
 800aac4:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800aac6:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800aac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d109      	bne.n	800aae4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aad0:	f107 031b 	add.w	r3, r7, #27
 800aad4:	461a      	mov	r2, r3
 800aad6:	2101      	movs	r1, #1
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7fd f915 	bl	8007d08 <VL53L0X_GetVcselPulsePeriod>
 800aade:	4603      	mov	r3, r0
 800aae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800aae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d128      	bne.n	800ab3e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800aaec:	7efb      	ldrb	r3, [r7, #27]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7ff fe02 	bl	800a6fc <VL53L0X_calc_timeout_mclks>
 800aaf8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800aafa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aafc:	6a3a      	ldr	r2, [r7, #32]
 800aafe:	4413      	add	r3, r2
 800ab00:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ab02:	6a38      	ldr	r0, [r7, #32]
 800ab04:	f7ff fdb7 	bl	800a676 <VL53L0X_encode_timeout>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800ab0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d108      	bne.n	800ab26 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ab14:	8bfb      	ldrh	r3, [r7, #30]
 800ab16:	461a      	mov	r2, r3
 800ab18:	2171      	movs	r1, #113	; 0x71
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f001 f918 	bl	800bd50 <VL53L0X_WrWord>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ab26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d107      	bne.n	800ab3e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800ab36:	e002      	b.n	800ab3e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab38:	23fc      	movs	r3, #252	; 0xfc
 800ab3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800ab3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3728      	adds	r7, #40	; 0x28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b086      	sub	sp, #24
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	460b      	mov	r3, r1
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ab5c:	7afb      	ldrb	r3, [r7, #11]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d00a      	beq.n	800ab7c <VL53L0X_get_vcsel_pulse_period+0x32>
 800ab66:	e013      	b.n	800ab90 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ab68:	f107 0316 	add.w	r3, r7, #22
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	2150      	movs	r1, #80	; 0x50
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f001 f94b 	bl	800be0c <VL53L0X_RdByte>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ab7a:	e00b      	b.n	800ab94 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ab7c:	f107 0316 	add.w	r3, r7, #22
 800ab80:	461a      	mov	r2, r3
 800ab82:	2170      	movs	r1, #112	; 0x70
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f001 f941 	bl	800be0c <VL53L0X_RdByte>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ab8e:	e001      	b.n	800ab94 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab90:	23fc      	movs	r3, #252	; 0xfc
 800ab92:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ab94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d107      	bne.n	800abac <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ab9c:	7dbb      	ldrb	r3, [r7, #22]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fff4 	bl	8009b8c <VL53L0X_decode_vcsel_period>
 800aba4:	4603      	mov	r3, r0
 800aba6:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	701a      	strb	r2, [r3, #0]

	return Status;
 800abac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b092      	sub	sp, #72	; 0x48
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800abc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800abcc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800abce:	f240 7376 	movw	r3, #1910	; 0x776
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800abd4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800abd8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800abda:	f44f 7325 	mov.w	r3, #660	; 0x294
 800abde:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800abe0:	f240 234e 	movw	r3, #590	; 0x24e
 800abe4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800abe6:	f240 23b2 	movw	r3, #690	; 0x2b2
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800abec:	f44f 7325 	mov.w	r3, #660	; 0x294
 800abf0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800abf2:	f240 2326 	movw	r3, #550	; 0x226
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800abfc:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ac00:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d205      	bcs.n	800ac1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac0e:	23fc      	movs	r3, #252	; 0xfc
 800ac10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ac14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ac18:	e0aa      	b.n	800ad70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ac1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ac26:	f107 0314 	add.w	r3, r7, #20
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7fd f977 	bl	8007f20 <VL53L0X_GetSequenceStepEnables>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ac38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d15b      	bne.n	800acf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ac40:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d105      	bne.n	800ac52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ac46:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d102      	bne.n	800ac52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ac4c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d052      	beq.n	800acf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ac52:	f107 0310 	add.w	r3, r7, #16
 800ac56:	461a      	mov	r2, r3
 800ac58:	2102      	movs	r1, #2
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff fda2 	bl	800a7a4 <get_sequence_step_timeout>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ac66:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ac6e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ac72:	e07d      	b.n	800ad70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ac74:	7d3b      	ldrb	r3, [r7, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00f      	beq.n	800ac9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ac7a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ac7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac7e:	4413      	add	r3, r2
 800ac80:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d204      	bcs.n	800ac94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ac8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	643b      	str	r3, [r7, #64]	; 0x40
 800ac92:	e002      	b.n	800ac9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac94:	23fc      	movs	r3, #252	; 0xfc
 800ac96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ac9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800aca2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aca6:	e063      	b.n	800ad70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800aca8:	7dbb      	ldrb	r3, [r7, #22]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d011      	beq.n	800acd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	4413      	add	r3, r2
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800acb8:	69fa      	ldr	r2, [r7, #28]
 800acba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d204      	bcs.n	800acca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800acc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	643b      	str	r3, [r7, #64]	; 0x40
 800acc8:	e016      	b.n	800acf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acca:	23fc      	movs	r3, #252	; 0xfc
 800accc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800acd0:	e012      	b.n	800acf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800acd2:	7d7b      	ldrb	r3, [r7, #21]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00f      	beq.n	800acf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acdc:	4413      	add	r3, r2
 800acde:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d204      	bcs.n	800acf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ace8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	643b      	str	r3, [r7, #64]	; 0x40
 800acf0:	e002      	b.n	800acf8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acf2:	23fc      	movs	r3, #252	; 0xfc
 800acf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800acf8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ad00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad04:	e034      	b.n	800ad70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d019      	beq.n	800ad40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ad0c:	f107 030c 	add.w	r3, r7, #12
 800ad10:	461a      	mov	r2, r3
 800ad12:	2103      	movs	r1, #3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fd45 	bl	800a7a4 <get_sequence_step_timeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad24:	4413      	add	r3, r2
 800ad26:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d204      	bcs.n	800ad3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ad30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	643b      	str	r3, [r7, #64]	; 0x40
 800ad38:	e002      	b.n	800ad40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad3a:	23fc      	movs	r3, #252	; 0xfc
 800ad3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800ad40:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d111      	bne.n	800ad6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ad48:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00e      	beq.n	800ad6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800ad4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ad56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad58:	2104      	movs	r1, #4
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff fe03 	bl	800a966 <set_sequence_step_timeout>
 800ad60:	4603      	mov	r3, r0
 800ad62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ad6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3748      	adds	r7, #72	; 0x48
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b090      	sub	sp, #64	; 0x40
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ad88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ad8c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ad8e:	f240 7376 	movw	r3, #1910	; 0x776
 800ad92:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ad94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ad9a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ad9e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ada0:	f240 234e 	movw	r3, #590	; 0x24e
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ada6:	f240 23b2 	movw	r3, #690	; 0x2b2
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800adac:	f44f 7325 	mov.w	r3, #660	; 0x294
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800adb2:	f240 2326 	movw	r3, #550	; 0x226
 800adb6:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800adbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc0:	441a      	add	r2, r3
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800adc6:	f107 0318 	add.w	r3, r7, #24
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7fd f8a7 	bl	8007f20 <VL53L0X_GetSequenceStepEnables>
 800add2:	4603      	mov	r3, r0
 800add4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800add8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ade0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ade4:	e075      	b.n	800aed2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ade6:	7e3b      	ldrb	r3, [r7, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d105      	bne.n	800adf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800adec:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800adf2:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d030      	beq.n	800ae5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800adf8:	f107 0310 	add.w	r3, r7, #16
 800adfc:	461a      	mov	r2, r3
 800adfe:	2102      	movs	r1, #2
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff fccf 	bl	800a7a4 <get_sequence_step_timeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ae0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d122      	bne.n	800ae5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ae14:	7e3b      	ldrb	r3, [r7, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d007      	beq.n	800ae2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ae1e:	6939      	ldr	r1, [r7, #16]
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ae24:	441a      	add	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ae2a:	7ebb      	ldrb	r3, [r7, #26]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d009      	beq.n	800ae44 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ae34:	6939      	ldr	r1, [r7, #16]
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	440b      	add	r3, r1
 800ae3a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ae3c:	441a      	add	r2, r3
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	e00a      	b.n	800ae5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ae44:	7e7b      	ldrb	r3, [r7, #25]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d007      	beq.n	800ae5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ae4e:	6939      	ldr	r1, [r7, #16]
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ae54:	441a      	add	r2, r3
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d114      	bne.n	800ae8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ae62:	7efb      	ldrb	r3, [r7, #27]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ae68:	f107 030c 	add.w	r3, r7, #12
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	2103      	movs	r1, #3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff fc97 	bl	800a7a4 <get_sequence_step_timeout>
 800ae76:	4603      	mov	r3, r0
 800ae78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ae80:	68f9      	ldr	r1, [r7, #12]
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ae86:	441a      	add	r2, r3
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d114      	bne.n	800aebe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ae94:	7f3b      	ldrb	r3, [r7, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d011      	beq.n	800aebe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ae9a:	f107 0314 	add.w	r3, r7, #20
 800ae9e:	461a      	mov	r2, r3
 800aea0:	2104      	movs	r1, #4
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fc7e 	bl	800a7a4 <get_sequence_step_timeout>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800aeb2:	6979      	ldr	r1, [r7, #20]
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800aeb8:	441a      	add	r2, r3
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aebe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aece:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3740      	adds	r7, #64	; 0x40
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aeee:	e0c6      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	4413      	add	r3, r2
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	3301      	adds	r3, #1
 800aefe:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800af00:	7cfb      	ldrb	r3, [r7, #19]
 800af02:	2bff      	cmp	r3, #255	; 0xff
 800af04:	f040 808d 	bne.w	800b022 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	4413      	add	r3, r2
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	747b      	strb	r3, [r7, #17]
			Index++;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	3301      	adds	r3, #1
 800af16:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800af18:	7c7b      	ldrb	r3, [r7, #17]
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d87e      	bhi.n	800b01c <VL53L0X_load_tuning_settings+0x140>
 800af1e:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <VL53L0X_load_tuning_settings+0x48>)
 800af20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af24:	0800af35 	.word	0x0800af35
 800af28:	0800af6f 	.word	0x0800af6f
 800af2c:	0800afa9 	.word	0x0800afa9
 800af30:	0800afe3 	.word	0x0800afe3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4413      	add	r3, r2
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	743b      	strb	r3, [r7, #16]
				Index++;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	3301      	adds	r3, #1
 800af42:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	4413      	add	r3, r2
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	3301      	adds	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800af54:	7c3b      	ldrb	r3, [r7, #16]
 800af56:	b29b      	uxth	r3, r3
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	4413      	add	r3, r2
 800af62:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	89ba      	ldrh	r2, [r7, #12]
 800af68:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800af6c:	e087      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	4413      	add	r3, r2
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	743b      	strb	r3, [r7, #16]
				Index++;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	3301      	adds	r3, #1
 800af7c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	4413      	add	r3, r2
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	73fb      	strb	r3, [r7, #15]
				Index++;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	3301      	adds	r3, #1
 800af8c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800af8e:	7c3b      	ldrb	r3, [r7, #16]
 800af90:	b29b      	uxth	r3, r3
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	b29a      	uxth	r2, r3
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4413      	add	r3, r2
 800af9c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	89ba      	ldrh	r2, [r7, #12]
 800afa2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800afa6:	e06a      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	4413      	add	r3, r2
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	743b      	strb	r3, [r7, #16]
				Index++;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	3301      	adds	r3, #1
 800afb6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	4413      	add	r3, r2
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	3301      	adds	r3, #1
 800afc6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800afc8:	7c3b      	ldrb	r3, [r7, #16]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	b29a      	uxth	r2, r3
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	4413      	add	r3, r2
 800afd6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	89ba      	ldrh	r2, [r7, #12]
 800afdc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800afe0:	e04d      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	4413      	add	r3, r2
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	743b      	strb	r3, [r7, #16]
				Index++;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	3301      	adds	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	4413      	add	r3, r2
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	73fb      	strb	r3, [r7, #15]
				Index++;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	3301      	adds	r3, #1
 800b000:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b002:	7c3b      	ldrb	r3, [r7, #16]
 800b004:	b29b      	uxth	r3, r3
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	b29a      	uxth	r2, r3
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	4413      	add	r3, r2
 800b010:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	89ba      	ldrh	r2, [r7, #12]
 800b016:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b01a:	e030      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b01c:	23fc      	movs	r3, #252	; 0xfc
 800b01e:	77fb      	strb	r3, [r7, #31]
 800b020:	e02d      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b022:	7cfb      	ldrb	r3, [r7, #19]
 800b024:	2b04      	cmp	r3, #4
 800b026:	d828      	bhi.n	800b07a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	4413      	add	r3, r2
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	3301      	adds	r3, #1
 800b036:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b038:	2300      	movs	r3, #0
 800b03a:	61bb      	str	r3, [r7, #24]
 800b03c:	e00f      	b.n	800b05e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	4413      	add	r3, r2
 800b044:	7819      	ldrb	r1, [r3, #0]
 800b046:	f107 0208 	add.w	r2, r7, #8
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	4413      	add	r3, r2
 800b04e:	460a      	mov	r2, r1
 800b050:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	3301      	adds	r3, #1
 800b056:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	3301      	adds	r3, #1
 800b05c:	61bb      	str	r3, [r7, #24]
 800b05e:	7cfb      	ldrb	r3, [r7, #19]
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	429a      	cmp	r2, r3
 800b064:	dbeb      	blt.n	800b03e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b066:	7cfb      	ldrb	r3, [r7, #19]
 800b068:	f107 0208 	add.w	r2, r7, #8
 800b06c:	7cb9      	ldrb	r1, [r7, #18]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fdee 	bl	800bc50 <VL53L0X_WriteMulti>
 800b074:	4603      	mov	r3, r0
 800b076:	77fb      	strb	r3, [r7, #31]
 800b078:	e001      	b.n	800b07e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b07a:	23fc      	movs	r3, #252	; 0xfc
 800b07c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	4413      	add	r3, r2
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <VL53L0X_load_tuning_settings+0x1b8>
 800b08a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f43f af2e 	beq.w	800aef0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b094:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b0b6:	f107 0313 	add.w	r3, r7, #19
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7fc ffbb 	bl	8008038 <VL53L0X_GetXTalkCompensationEnable>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b0c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d111      	bne.n	800b0f2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b0ce:	7cfb      	ldrb	r3, [r7, #19]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00e      	beq.n	800b0f2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	8a9b      	ldrh	r3, [r3, #20]
 800b0de:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	fb02 f303 	mul.w	r3, r2, r3
 800b0e6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	3380      	adds	r3, #128	; 0x80
 800b0ec:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b086      	sub	sp, #24
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	60b9      	str	r1, [r7, #8]
 800b108:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b116:	f107 0310 	add.w	r3, r7, #16
 800b11a:	461a      	mov	r2, r3
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff ffbe 	bl	800b0a0 <VL53L0X_get_total_xtalk_rate>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d105      	bne.n	800b13c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	441a      	add	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	601a      	str	r2, [r3, #0]

	return Status;
 800b13c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b09a      	sub	sp, #104	; 0x68
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b156:	2312      	movs	r3, #18
 800b158:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b15a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b15e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b160:	2342      	movs	r3, #66	; 0x42
 800b162:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b164:	2306      	movs	r3, #6
 800b166:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b168:	2307      	movs	r3, #7
 800b16a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b180:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18e:	3380      	adds	r3, #128	; 0x80
 800b190:	0a1b      	lsrs	r3, r3, #8
 800b192:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01a      	beq.n	800b1de <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	029b      	lsls	r3, r3, #10
 800b1ac:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1b4:	4413      	add	r3, r2
 800b1b6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b1b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b1c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ce:	fb03 f303 	mul.w	r3, r3, r3
 800b1d2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1da:	0c1b      	lsrs	r3, r3, #16
 800b1dc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b1e2:	fb02 f303 	mul.w	r3, r2, r3
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f4:	fb03 f303 	mul.w	r3, r3, r3
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b200:	0c1b      	lsrs	r3, r3, #16
 800b202:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b206:	085a      	lsrs	r2, r3, #1
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	441a      	add	r2, r3
 800b20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b212:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b218:	fb02 f303 	mul.w	r3, r2, r3
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b224:	d302      	bcc.n	800b22c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b226:	4b54      	ldr	r3, [pc, #336]	; (800b378 <VL53L0X_calc_dmax+0x230>)
 800b228:	663b      	str	r3, [r7, #96]	; 0x60
 800b22a:	e015      	b.n	800b258 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b22e:	085a      	lsrs	r2, r3, #1
 800b230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b232:	441a      	add	r2, r3
 800b234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b236:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b240:	fb02 f303 	mul.w	r3, r2, r3
 800b244:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b248:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b24c:	0c1b      	lsrs	r3, r3, #16
 800b24e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b252:	fb03 f303 	mul.w	r3, r3, r3
 800b256:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b25a:	039b      	lsls	r3, r3, #14
 800b25c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b260:	4a46      	ldr	r2, [pc, #280]	; (800b37c <VL53L0X_calc_dmax+0x234>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	099b      	lsrs	r3, r3, #6
 800b268:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	fb03 f303 	mul.w	r3, r3, r3
 800b270:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b274:	fb03 f303 	mul.w	r3, r3, r3
 800b278:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	3308      	adds	r3, #8
 800b27e:	091b      	lsrs	r3, r3, #4
 800b280:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28c:	4613      	mov	r3, r2
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	4413      	add	r3, r2
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b29c:	0b9b      	lsrs	r3, r3, #14
 800b29e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2a4:	4413      	add	r3, r2
 800b2a6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b2a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b2b2:	69ba      	ldr	r2, [r7, #24]
 800b2b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ba:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	039b      	lsls	r3, r3, #14
 800b2c0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	085b      	lsrs	r3, r3, #1
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2da:	fb02 f303 	mul.w	r3, r2, r3
 800b2de:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2e6:	4a25      	ldr	r2, [pc, #148]	; (800b37c <VL53L0X_calc_dmax+0x234>)
 800b2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ec:	099b      	lsrs	r3, r3, #6
 800b2ee:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	011b      	lsls	r3, r3, #4
 800b2f4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2fc:	4a1f      	ldr	r2, [pc, #124]	; (800b37c <VL53L0X_calc_dmax+0x234>)
 800b2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b302:	099b      	lsrs	r3, r3, #6
 800b304:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b308:	3380      	adds	r3, #128	; 0x80
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d008      	beq.n	800b326 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	085a      	lsrs	r2, r3, #1
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	441a      	add	r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b322:	65bb      	str	r3, [r7, #88]	; 0x58
 800b324:	e001      	b.n	800b32a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b32a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b32c:	f7fe fc41 	bl	8009bb2 <VL53L0X_isqrt>
 800b330:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d008      	beq.n	800b34a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	085a      	lsrs	r2, r3, #1
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	441a      	add	r2, r3
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	fbb2 f3f3 	udiv	r3, r2, r3
 800b346:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b348:	e001      	b.n	800b34e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b34e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b350:	f7fe fc2f 	bl	8009bb2 <VL53L0X_isqrt>
 800b354:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b360:	429a      	cmp	r2, r3
 800b362:	d902      	bls.n	800b36a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b366:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b368:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b36a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3768      	adds	r7, #104	; 0x68
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	fff00000 	.word	0xfff00000
 800b37c:	10624dd3 	.word	0x10624dd3

0800b380 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b0b4      	sub	sp, #208	; 0xd0
 800b384:	af04      	add	r7, sp, #16
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b38e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b396:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b39a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b39e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b3a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b3a6:	f241 235c 	movw	r3, #4700	; 0x125c
 800b3aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b3ae:	4b9e      	ldr	r3, [pc, #632]	; (800b628 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b3b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b3b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b3b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b3ba:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b3be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b3c8:	4b98      	ldr	r3, [pc, #608]	; (800b62c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b3ca:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3d0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b3d2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b3d6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b3d8:	f240 6377 	movw	r3, #1655	; 0x677
 800b3dc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3f2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b3f6:	0c1b      	lsrs	r3, r3, #16
 800b3f8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b400:	f107 0310 	add.w	r3, r7, #16
 800b404:	461a      	mov	r2, r3
 800b406:	68b9      	ldr	r1, [r7, #8]
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fe78 	bl	800b0fe <VL53L0X_get_total_signal_rate>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b414:	f107 0314 	add.w	r3, r7, #20
 800b418:	461a      	mov	r2, r3
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff fe3f 	bl	800b0a0 <VL53L0X_get_total_xtalk_rate>
 800b422:	4603      	mov	r3, r0
 800b424:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b436:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b43a:	0c1b      	lsrs	r3, r3, #16
 800b43c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b444:	fb02 f303 	mul.w	r3, r2, r3
 800b448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b44c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b452:	429a      	cmp	r2, r3
 800b454:	d902      	bls.n	800b45c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b45c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b460:	2b00      	cmp	r3, #0
 800b462:	d168      	bne.n	800b536 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b46a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b474:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b478:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b47c:	461a      	mov	r2, r3
 800b47e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff f93a 	bl	800a6fc <VL53L0X_calc_timeout_mclks>
 800b488:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b49a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b49e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7ff f927 	bl	800a6fc <VL53L0X_calc_timeout_mclks>
 800b4ae:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b4b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d102      	bne.n	800b4c4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b4be:	2302      	movs	r3, #2
 800b4c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b4c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b4ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b4ce:	fb02 f303 	mul.w	r3, r2, r3
 800b4d2:	02db      	lsls	r3, r3, #11
 800b4d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b4d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b4e0:	4a53      	ldr	r2, [pc, #332]	; (800b630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e6:	099b      	lsrs	r3, r3, #6
 800b4e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b4ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b4f2:	fb02 f303 	mul.w	r3, r2, r3
 800b4f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b4fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4fe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b502:	4a4b      	ldr	r2, [pc, #300]	; (800b630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b504:	fba2 2303 	umull	r2, r3, r2, r3
 800b508:	099b      	lsrs	r3, r3, #6
 800b50a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3380      	adds	r3, #128	; 0x80
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b51c:	fb02 f303 	mul.w	r3, r2, r3
 800b520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b528:	3380      	adds	r3, #128	; 0x80
 800b52a:	0a1b      	lsrs	r3, r3, #8
 800b52c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b536:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b53e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b542:	e15e      	b.n	800b802 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10c      	bne.n	800b564 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b550:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b558:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	e14c      	b.n	800b7fe <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b56c:	2301      	movs	r3, #1
 800b56e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b576:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b57a:	041a      	lsls	r2, r3, #16
 800b57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d902      	bls.n	800b596 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b596:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b59a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b5a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fafd 	bl	8009bb2 <VL53L0X_isqrt>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	891b      	ldrh	r3, [r3, #8]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ca:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ce:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b5d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5d4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b5d6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b5d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b5dc:	4a14      	ldr	r2, [pc, #80]	; (800b630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	099b      	lsrs	r3, r3, #6
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5e8:	041b      	lsls	r3, r3, #16
 800b5ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b5ee:	4a10      	ldr	r2, [pc, #64]	; (800b630 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f4:	099b      	lsrs	r3, r3, #6
 800b5f6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fa:	021b      	lsls	r3, r3, #8
 800b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b5fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	fbb2 f3f3 	udiv	r3, r2, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfb8      	it	lt
 800b60a:	425b      	neglt	r3, r3
 800b60c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	7e1b      	ldrb	r3, [r3, #24]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b61c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b624:	e033      	b.n	800b68e <VL53L0X_calc_sigma_estimate+0x30e>
 800b626:	bf00      	nop
 800b628:	028f87ae 	.word	0x028f87ae
 800b62c:	0006999a 	.word	0x0006999a
 800b630:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b644:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b64c:	fb02 f303 	mul.w	r3, r2, r3
 800b650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b65a:	4413      	add	r3, r2
 800b65c:	0c1b      	lsrs	r3, r3, #16
 800b65e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b666:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b66a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b672:	085b      	lsrs	r3, r3, #1
 800b674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b67c:	fb03 f303 	mul.w	r3, r3, r3
 800b680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b688:	0b9b      	lsrs	r3, r3, #14
 800b68a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b694:	fb02 f303 	mul.w	r3, r2, r3
 800b698:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b6a0:	0c1b      	lsrs	r3, r3, #16
 800b6a2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	fb03 f303 	mul.w	r3, r3, r3
 800b6aa:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b6ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b6b8:	0c1b      	lsrs	r3, r3, #16
 800b6ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	fb03 f303 	mul.w	r3, r3, r3
 800b6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	4413      	add	r3, r2
 800b6ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b6cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ce:	f7fe fa70 	bl	8009bb2 <VL53L0X_isqrt>
 800b6d2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	3332      	adds	r3, #50	; 0x32
 800b6de:	4a4b      	ldr	r2, [pc, #300]	; (800b80c <VL53L0X_calc_sigma_estimate+0x48c>)
 800b6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e4:	095a      	lsrs	r2, r3, #5
 800b6e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6f4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b6f8:	fb02 f303 	mul.w	r3, r2, r3
 800b6fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b704:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b708:	3308      	adds	r3, #8
 800b70a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b70e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b712:	4a3f      	ldr	r2, [pc, #252]	; (800b810 <VL53L0X_calc_sigma_estimate+0x490>)
 800b714:	fba2 2303 	umull	r2, r3, r2, r3
 800b718:	0b5b      	lsrs	r3, r3, #13
 800b71a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b71e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b724:	429a      	cmp	r2, r3
 800b726:	d902      	bls.n	800b72e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b72a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b72e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b736:	4413      	add	r3, r2
 800b738:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b73c:	4a35      	ldr	r2, [pc, #212]	; (800b814 <VL53L0X_calc_sigma_estimate+0x494>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	099b      	lsrs	r3, r3, #6
 800b744:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b74a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b74e:	441a      	add	r2, r3
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	fbb2 f3f3 	udiv	r3, r2, r3
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe fa2b 	bl	8009bb2 <VL53L0X_isqrt>
 800b75c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b76a:	4a2a      	ldr	r2, [pc, #168]	; (800b814 <VL53L0X_calc_sigma_estimate+0x494>)
 800b76c:	fba2 2303 	umull	r2, r3, r2, r3
 800b770:	099b      	lsrs	r3, r3, #6
 800b772:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b774:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b778:	fb03 f303 	mul.w	r3, r3, r3
 800b77c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	fb03 f303 	mul.w	r3, r3, r3
 800b784:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78a:	4413      	add	r3, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fa10 	bl	8009bb2 <VL53L0X_isqrt>
 800b792:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b79a:	fb02 f303 	mul.w	r3, r2, r3
 800b79e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b7a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d009      	beq.n	800b7bc <VL53L0X_calc_sigma_estimate+0x43c>
 800b7a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <VL53L0X_calc_sigma_estimate+0x43c>
 800b7b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b7b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d903      	bls.n	800b7c4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b7bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b7c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b7ca:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b7d6:	6939      	ldr	r1, [r7, #16]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	9303      	str	r3, [sp, #12]
 800b7dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7e0:	9302      	str	r3, [sp, #8]
 800b7e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7ff fca8 	bl	800b148 <VL53L0X_calc_dmax>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b802:	4618      	mov	r0, r3
 800b804:	37c0      	adds	r7, #192	; 0xc0
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	51eb851f 	.word	0x51eb851f
 800b810:	d1b71759 	.word	0xd1b71759
 800b814:	10624dd3 	.word	0x10624dd3

0800b818 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b090      	sub	sp, #64	; 0x40
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	461a      	mov	r2, r3
 800b824:	460b      	mov	r3, r1
 800b826:	72fb      	strb	r3, [r7, #11]
 800b828:	4613      	mov	r3, r2
 800b82a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b83e:	2300      	movs	r3, #0
 800b840:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	10db      	asrs	r3, r3, #3
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f003 030f 	and.w	r3, r3, #15
 800b874:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b878:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d017      	beq.n	800b8b0 <VL53L0X_get_pal_range_status+0x98>
 800b880:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b884:	2b05      	cmp	r3, #5
 800b886:	d013      	beq.n	800b8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b888:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b88c:	2b07      	cmp	r3, #7
 800b88e:	d00f      	beq.n	800b8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b890:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b894:	2b0c      	cmp	r3, #12
 800b896:	d00b      	beq.n	800b8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b898:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b89c:	2b0d      	cmp	r3, #13
 800b89e:	d007      	beq.n	800b8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b8a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8a4:	2b0e      	cmp	r3, #14
 800b8a6:	d003      	beq.n	800b8b0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b8a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8ac:	2b0f      	cmp	r3, #15
 800b8ae:	d103      	bne.n	800b8b8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b8b6:	e002      	b.n	800b8be <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b8be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d109      	bne.n	800b8da <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b8c6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7fc fc86 	bl	80081e0 <VL53L0X_GetLimitCheckEnable>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b8da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d02e      	beq.n	800b940 <VL53L0X_get_pal_range_status+0x128>
 800b8e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d12a      	bne.n	800b940 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b8ea:	f107 0310 	add.w	r3, r7, #16
 800b8ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b8f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff fd43 	bl	800b380 <VL53L0X_calc_sigma_estimate>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b900:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b904:	2b00      	cmp	r3, #0
 800b906:	d103      	bne.n	800b910 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b90e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b910:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b914:	2b00      	cmp	r3, #0
 800b916:	d113      	bne.n	800b940 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b918:	f107 0320 	add.w	r3, r7, #32
 800b91c:	461a      	mov	r2, r3
 800b91e:	2100      	movs	r1, #0
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f7fc fce3 	bl	80082ec <VL53L0X_GetLimitCheckValue>
 800b926:	4603      	mov	r3, r0
 800b928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d006      	beq.n	800b940 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b934:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b936:	429a      	cmp	r2, r3
 800b938:	d902      	bls.n	800b940 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b940:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b944:	2b00      	cmp	r3, #0
 800b946:	d109      	bne.n	800b95c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b948:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b94c:	461a      	mov	r2, r3
 800b94e:	2102      	movs	r1, #2
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7fc fc45 	bl	80081e0 <VL53L0X_GetLimitCheckEnable>
 800b956:	4603      	mov	r3, r0
 800b958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b95c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b960:	2b00      	cmp	r3, #0
 800b962:	d044      	beq.n	800b9ee <VL53L0X_get_pal_range_status+0x1d6>
 800b964:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d140      	bne.n	800b9ee <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b96c:	f107 031c 	add.w	r3, r7, #28
 800b970:	461a      	mov	r2, r3
 800b972:	2102      	movs	r1, #2
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7fc fcb9 	bl	80082ec <VL53L0X_GetLimitCheckValue>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b980:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b984:	2b00      	cmp	r3, #0
 800b986:	d107      	bne.n	800b998 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b988:	2201      	movs	r2, #1
 800b98a:	21ff      	movs	r1, #255	; 0xff
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 f9bb 	bl	800bd08 <VL53L0X_WrByte>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b998:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d109      	bne.n	800b9b4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b9a0:	f107 0316 	add.w	r3, r7, #22
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	21b6      	movs	r1, #182	; 0xb6
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 fa59 	bl	800be60 <VL53L0X_RdWord>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b9b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d107      	bne.n	800b9cc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b9bc:	2200      	movs	r2, #0
 800b9be:	21ff      	movs	r1, #255	; 0xff
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 f9a1 	bl	800bd08 <VL53L0X_WrByte>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b9cc:	8afb      	ldrh	r3, [r7, #22]
 800b9ce:	025b      	lsls	r3, r3, #9
 800b9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d006      	beq.n	800b9ee <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b9e0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d902      	bls.n	800b9ee <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b9ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d109      	bne.n	800ba0a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b9f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	2103      	movs	r1, #3
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7fc fbee 	bl	80081e0 <VL53L0X_GetLimitCheckEnable>
 800ba04:	4603      	mov	r3, r0
 800ba06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ba0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d023      	beq.n	800ba5a <VL53L0X_get_pal_range_status+0x242>
 800ba12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d11f      	bne.n	800ba5a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ba1a:	893b      	ldrh	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d102      	bne.n	800ba26 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ba20:	2300      	movs	r3, #0
 800ba22:	637b      	str	r3, [r7, #52]	; 0x34
 800ba24:	e005      	b.n	800ba32 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	021a      	lsls	r2, r3, #8
 800ba2a:	893b      	ldrh	r3, [r7, #8]
 800ba2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba30:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ba32:	f107 0318 	add.w	r3, r7, #24
 800ba36:	461a      	mov	r2, r3
 800ba38:	2103      	movs	r1, #3
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7fc fc56 	bl	80082ec <VL53L0X_GetLimitCheckValue>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d006      	beq.n	800ba5a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ba4c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ba4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d202      	bcs.n	800ba5a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d14a      	bne.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ba62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d103      	bne.n	800ba72 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6c:	22ff      	movs	r2, #255	; 0xff
 800ba6e:	701a      	strb	r2, [r3, #0]
 800ba70:	e042      	b.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ba72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d007      	beq.n	800ba8a <VL53L0X_get_pal_range_status+0x272>
 800ba7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d003      	beq.n	800ba8a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ba82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d103      	bne.n	800ba92 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ba8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8c:	2205      	movs	r2, #5
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	e032      	b.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ba92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba96:	2b06      	cmp	r3, #6
 800ba98:	d003      	beq.n	800baa2 <VL53L0X_get_pal_range_status+0x28a>
 800ba9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d103      	bne.n	800baaa <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800baa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa4:	2204      	movs	r2, #4
 800baa6:	701a      	strb	r2, [r3, #0]
 800baa8:	e026      	b.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800baaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baae:	2b08      	cmp	r3, #8
 800bab0:	d007      	beq.n	800bac2 <VL53L0X_get_pal_range_status+0x2aa>
 800bab2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bab6:	2b0a      	cmp	r3, #10
 800bab8:	d003      	beq.n	800bac2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800baba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d103      	bne.n	800baca <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac4:	2203      	movs	r2, #3
 800bac6:	701a      	strb	r2, [r3, #0]
 800bac8:	e016      	b.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800baca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d003      	beq.n	800bada <VL53L0X_get_pal_range_status+0x2c2>
 800bad2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d103      	bne.n	800bae2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800badc:	2202      	movs	r2, #2
 800bade:	701a      	strb	r2, [r3, #0]
 800bae0:	e00a      	b.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bae2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d103      	bne.n	800baf2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800baea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baec:	2201      	movs	r2, #1
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	e002      	b.n	800baf8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800baf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800baf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb02:	2200      	movs	r2, #0
 800bb04:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb06:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7fc fb66 	bl	80081e0 <VL53L0X_GetLimitCheckEnable>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bb1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d14f      	bne.n	800bbc2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bb22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <VL53L0X_get_pal_range_status+0x31a>
 800bb2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d103      	bne.n	800bb3a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bb32:	2301      	movs	r3, #1
 800bb34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb38:	e002      	b.n	800bb40 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bb46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bb4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d003      	beq.n	800bb5a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bb52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d103      	bne.n	800bb62 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb60:	e002      	b.n	800bb68 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bb6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bb72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <VL53L0X_get_pal_range_status+0x36a>
 800bb7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d103      	bne.n	800bb8a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bb82:	2301      	movs	r3, #1
 800bb84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb88:	e002      	b.n	800bb90 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bb96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bb9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <VL53L0X_get_pal_range_status+0x392>
 800bba2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d103      	bne.n	800bbb2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbb0:	e002      	b.n	800bbb8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bbbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3740      	adds	r7, #64	; 0x40
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b088      	sub	sp, #32
 800bbd2:	af02      	add	r7, sp, #8
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	330a      	adds	r3, #10
 800bbde:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800bbec:	b299      	uxth	r1, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	f7f8 fe87 	bl	800490c <HAL_I2C_Master_Transmit>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bc02:	693b      	ldr	r3, [r7, #16]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b088      	sub	sp, #32
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	330a      	adds	r3, #10
 800bc1c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800bc2a:	f043 0301 	orr.w	r3, r3, #1
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	b299      	uxth	r1, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	f7f8 ff63 	bl	8004b08 <HAL_I2C_Master_Receive>
 800bc42:	4603      	mov	r3, r0
 800bc44:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bc46:	693b      	ldr	r3, [r7, #16]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	607a      	str	r2, [r7, #4]
 800bc5a:	603b      	str	r3, [r7, #0]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc60:	2300      	movs	r3, #0
 800bc62:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b3f      	cmp	r3, #63	; 0x3f
 800bc68:	d902      	bls.n	800bc70 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800bc6a:	f06f 0303 	mvn.w	r3, #3
 800bc6e:	e016      	b.n	800bc9e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800bc70:	4a0d      	ldr	r2, [pc, #52]	; (800bca8 <VL53L0X_WriteMulti+0x58>)
 800bc72:	7afb      	ldrb	r3, [r7, #11]
 800bc74:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	6879      	ldr	r1, [r7, #4]
 800bc7a:	480c      	ldr	r0, [pc, #48]	; (800bcac <VL53L0X_WriteMulti+0x5c>)
 800bc7c:	f002 fc11 	bl	800e4a2 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	3301      	adds	r3, #1
 800bc84:	461a      	mov	r2, r3
 800bc86:	4908      	ldr	r1, [pc, #32]	; (800bca8 <VL53L0X_WriteMulti+0x58>)
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7ff ffa0 	bl	800bbce <_I2CWrite>
 800bc8e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc96:	23ec      	movs	r3, #236	; 0xec
 800bc98:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bc9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20004cbc 	.word	0x20004cbc
 800bcac:	20004cbd 	.word	0x20004cbd

0800bcb0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	607a      	str	r2, [r7, #4]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bcc4:	f107 030b 	add.w	r3, r7, #11
 800bcc8:	2201      	movs	r2, #1
 800bcca:	4619      	mov	r1, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f7ff ff7e 	bl	800bbce <_I2CWrite>
 800bcd2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bcda:	23ec      	movs	r3, #236	; 0xec
 800bcdc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bcde:	e00c      	b.n	800bcfa <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f7ff ff91 	bl	800bc0c <_I2CRead>
 800bcea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bcf2:	23ec      	movs	r3, #236	; 0xec
 800bcf4:	75fb      	strb	r3, [r7, #23]
 800bcf6:	e000      	b.n	800bcfa <VL53L0X_ReadMulti+0x4a>
    }
done:
 800bcf8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bcfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
 800bd14:	4613      	mov	r3, r2
 800bd16:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bd1c:	4a0b      	ldr	r2, [pc, #44]	; (800bd4c <VL53L0X_WrByte+0x44>)
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800bd22:	4a0a      	ldr	r2, [pc, #40]	; (800bd4c <VL53L0X_WrByte+0x44>)
 800bd24:	78bb      	ldrb	r3, [r7, #2]
 800bd26:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bd28:	2202      	movs	r2, #2
 800bd2a:	4908      	ldr	r1, [pc, #32]	; (800bd4c <VL53L0X_WrByte+0x44>)
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff ff4e 	bl	800bbce <_I2CWrite>
 800bd32:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd3a:	23ec      	movs	r3, #236	; 0xec
 800bd3c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20004cbc 	.word	0x20004cbc

0800bd50 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bd64:	4a0e      	ldr	r2, [pc, #56]	; (800bda0 <VL53L0X_WrWord+0x50>)
 800bd66:	78fb      	ldrb	r3, [r7, #3]
 800bd68:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bd6a:	883b      	ldrh	r3, [r7, #0]
 800bd6c:	0a1b      	lsrs	r3, r3, #8
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <VL53L0X_WrWord+0x50>)
 800bd74:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bd76:	883b      	ldrh	r3, [r7, #0]
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <VL53L0X_WrWord+0x50>)
 800bd7c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bd7e:	2203      	movs	r2, #3
 800bd80:	4907      	ldr	r1, [pc, #28]	; (800bda0 <VL53L0X_WrWord+0x50>)
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff ff23 	bl	800bbce <_I2CWrite>
 800bd88:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd90:	23ec      	movs	r3, #236	; 0xec
 800bd92:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bd94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20004cbc 	.word	0x20004cbc

0800bda4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	4608      	mov	r0, r1
 800bdae:	4611      	mov	r1, r2
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	70fb      	strb	r3, [r7, #3]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70bb      	strb	r3, [r7, #2]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bdc2:	f107 020e 	add.w	r2, r7, #14
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f81e 	bl	800be0c <VL53L0X_RdByte>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bdd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d110      	bne.n	800bdfe <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bddc:	7bba      	ldrb	r2, [r7, #14]
 800bdde:	78bb      	ldrb	r3, [r7, #2]
 800bde0:	4013      	ands	r3, r2
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	787b      	ldrb	r3, [r7, #1]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bdec:	7bba      	ldrb	r2, [r7, #14]
 800bdee:	78fb      	ldrb	r3, [r7, #3]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff ff88 	bl	800bd08 <VL53L0X_WrByte>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73fb      	strb	r3, [r7, #15]
 800bdfc:	e000      	b.n	800be00 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bdfe:	bf00      	nop
done:
    return Status;
 800be00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	460b      	mov	r3, r1
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800be1e:	f107 030b 	add.w	r3, r7, #11
 800be22:	2201      	movs	r2, #1
 800be24:	4619      	mov	r1, r3
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fed1 	bl	800bbce <_I2CWrite>
 800be2c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be34:	23ec      	movs	r3, #236	; 0xec
 800be36:	75fb      	strb	r3, [r7, #23]
        goto done;
 800be38:	e00c      	b.n	800be54 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800be3a:	2201      	movs	r2, #1
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff fee4 	bl	800bc0c <_I2CRead>
 800be44:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be4c:	23ec      	movs	r3, #236	; 0xec
 800be4e:	75fb      	strb	r3, [r7, #23]
 800be50:	e000      	b.n	800be54 <VL53L0X_RdByte+0x48>
    }
done:
 800be52:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800be54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	460b      	mov	r3, r1
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be6e:	2300      	movs	r3, #0
 800be70:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800be72:	f107 030b 	add.w	r3, r7, #11
 800be76:	2201      	movs	r2, #1
 800be78:	4619      	mov	r1, r3
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7ff fea7 	bl	800bbce <_I2CWrite>
 800be80:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be88:	23ec      	movs	r3, #236	; 0xec
 800be8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800be8c:	e017      	b.n	800bebe <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800be8e:	2202      	movs	r2, #2
 800be90:	490e      	ldr	r1, [pc, #56]	; (800becc <VL53L0X_RdWord+0x6c>)
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff feba 	bl	800bc0c <_I2CRead>
 800be98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bea0:	23ec      	movs	r3, #236	; 0xec
 800bea2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bea4:	e00b      	b.n	800bebe <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <VL53L0X_RdWord+0x6c>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	021b      	lsls	r3, r3, #8
 800beae:	b29a      	uxth	r2, r3
 800beb0:	4b06      	ldr	r3, [pc, #24]	; (800becc <VL53L0X_RdWord+0x6c>)
 800beb2:	785b      	ldrb	r3, [r3, #1]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	4413      	add	r3, r2
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20004cbc 	.word	0x20004cbc

0800bed0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	460b      	mov	r3, r1
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bede:	2300      	movs	r3, #0
 800bee0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bee2:	f107 030b 	add.w	r3, r7, #11
 800bee6:	2201      	movs	r2, #1
 800bee8:	4619      	mov	r1, r3
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f7ff fe6f 	bl	800bbce <_I2CWrite>
 800bef0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bef8:	23ec      	movs	r3, #236	; 0xec
 800befa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800befc:	e01b      	b.n	800bf36 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800befe:	2204      	movs	r2, #4
 800bf00:	4910      	ldr	r1, [pc, #64]	; (800bf44 <VL53L0X_RdDWord+0x74>)
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff fe82 	bl	800bc0c <_I2CRead>
 800bf08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf10:	23ec      	movs	r3, #236	; 0xec
 800bf12:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bf14:	e00f      	b.n	800bf36 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <VL53L0X_RdDWord+0x74>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	061a      	lsls	r2, r3, #24
 800bf1c:	4b09      	ldr	r3, [pc, #36]	; (800bf44 <VL53L0X_RdDWord+0x74>)
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	041b      	lsls	r3, r3, #16
 800bf22:	441a      	add	r2, r3
 800bf24:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <VL53L0X_RdDWord+0x74>)
 800bf26:	789b      	ldrb	r3, [r3, #2]
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	4413      	add	r3, r2
 800bf2c:	4a05      	ldr	r2, [pc, #20]	; (800bf44 <VL53L0X_RdDWord+0x74>)
 800bf2e:	78d2      	ldrb	r2, [r2, #3]
 800bf30:	441a      	add	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bf36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20004cbc 	.word	0x20004cbc

0800bf48 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bf54:	2002      	movs	r0, #2
 800bf56:	f7f7 f86b 	bl	8003030 <HAL_Delay>
    return status;
 800bf5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b085      	sub	sp, #20
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bf70:	2300      	movs	r3, #0
 800bf72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bf74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf78:	2b84      	cmp	r3, #132	; 0x84
 800bf7a:	d005      	beq.n	800bf88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bf7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	3303      	adds	r3, #3
 800bf86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bf88:	68fb      	ldr	r3, [r7, #12]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bf9a:	f000 fefd 	bl	800cd98 <vTaskStartScheduler>
  
  return osOK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa6:	b089      	sub	sp, #36	; 0x24
 800bfa8:	af04      	add	r7, sp, #16
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d020      	beq.n	800bff8 <osThreadCreate+0x54>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d01c      	beq.n	800bff8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685c      	ldr	r4, [r3, #4]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681d      	ldr	r5, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691e      	ldr	r6, [r3, #16]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff ffc8 	bl	800bf66 <makeFreeRtosPriority>
 800bfd6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfe0:	9202      	str	r2, [sp, #8]
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	9100      	str	r1, [sp, #0]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	4632      	mov	r2, r6
 800bfea:	4629      	mov	r1, r5
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 fced 	bl	800c9cc <xTaskCreateStatic>
 800bff2:	4603      	mov	r3, r0
 800bff4:	60fb      	str	r3, [r7, #12]
 800bff6:	e01c      	b.n	800c032 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685c      	ldr	r4, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c004:	b29e      	uxth	r6, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff ffaa 	bl	800bf66 <makeFreeRtosPriority>
 800c012:	4602      	mov	r2, r0
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	9200      	str	r2, [sp, #0]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	4632      	mov	r2, r6
 800c020:	4629      	mov	r1, r5
 800c022:	4620      	mov	r0, r4
 800c024:	f000 fd2f 	bl	800ca86 <xTaskCreate>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d001      	beq.n	800c032 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	e000      	b.n	800c034 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c032:	68fb      	ldr	r3, [r7, #12]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c03c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <osDelay+0x16>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	e000      	b.n	800c054 <osDelay+0x18>
 800c052:	2301      	movs	r3, #1
 800c054:	4618      	mov	r0, r3
 800c056:	f000 fe6b 	bl	800cd30 <vTaskDelay>
  
  return osOK;
 800c05a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f103 0208 	add.w	r2, r3, #8
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f04f 32ff 	mov.w	r2, #4294967295
 800c07c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f103 0208 	add.w	r2, r3, #8
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f103 0208 	add.w	r2, r3, #8
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c0b2:	bf00      	nop
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	601a      	str	r2, [r3, #0]
}
 800c0fa:	bf00      	nop
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c106:	b480      	push	{r7}
 800c108:	b085      	sub	sp, #20
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11c:	d103      	bne.n	800c126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	60fb      	str	r3, [r7, #12]
 800c124:	e00c      	b.n	800c140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3308      	adds	r3, #8
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	e002      	b.n	800c134 <vListInsert+0x2e>
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d2f6      	bcs.n	800c12e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	1c5a      	adds	r2, r3, #1
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	601a      	str	r2, [r3, #0]
}
 800c16c:	bf00      	nop
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	6892      	ldr	r2, [r2, #8]
 800c18e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	6852      	ldr	r2, [r2, #4]
 800c198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d103      	bne.n	800c1ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	1e5a      	subs	r2, r3, #1
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10a      	bne.n	800c1f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c1f6:	f001 fd65 	bl	800dcc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c202:	68f9      	ldr	r1, [r7, #12]
 800c204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c206:	fb01 f303 	mul.w	r3, r1, r3
 800c20a:	441a      	add	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c226:	3b01      	subs	r3, #1
 800c228:	68f9      	ldr	r1, [r7, #12]
 800c22a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c22c:	fb01 f303 	mul.w	r3, r1, r3
 800c230:	441a      	add	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	22ff      	movs	r2, #255	; 0xff
 800c23a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	22ff      	movs	r2, #255	; 0xff
 800c242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d114      	bne.n	800c276 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d01a      	beq.n	800c28a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3310      	adds	r3, #16
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 ffef 	bl	800d23c <xTaskRemoveFromEventList>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d012      	beq.n	800c28a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c264:	4b0c      	ldr	r3, [pc, #48]	; (800c298 <xQueueGenericReset+0xcc>)
 800c266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	e009      	b.n	800c28a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3310      	adds	r3, #16
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff fef2 	bl	800c064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3324      	adds	r3, #36	; 0x24
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff feed 	bl	800c064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c28a:	f001 fd4b 	bl	800dd24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c28e:	2301      	movs	r3, #1
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	e000ed04 	.word	0xe000ed04

0800c29c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08a      	sub	sp, #40	; 0x28
 800c2a0:	af02      	add	r7, sp, #8
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	613b      	str	r3, [r7, #16]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	fb02 f303 	mul.w	r3, r2, r3
 800c2ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	3348      	adds	r3, #72	; 0x48
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f001 fdd7 	bl	800de88 <pvPortMalloc>
 800c2da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d011      	beq.n	800c306 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	3348      	adds	r3, #72	; 0x48
 800c2ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2f4:	79fa      	ldrb	r2, [r7, #7]
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f805 	bl	800c310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c306:	69bb      	ldr	r3, [r7, #24]
	}
 800c308:	4618      	mov	r0, r3
 800c30a:	3720      	adds	r7, #32
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d103      	bne.n	800c32c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	69ba      	ldr	r2, [r7, #24]
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	e002      	b.n	800c332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c33e:	2101      	movs	r1, #1
 800c340:	69b8      	ldr	r0, [r7, #24]
 800c342:	f7ff ff43 	bl	800c1cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c346:	bf00      	nop
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b082      	sub	sp, #8
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00e      	beq.n	800c37a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c36e:	2300      	movs	r3, #0
 800c370:	2200      	movs	r2, #0
 800c372:	2100      	movs	r1, #0
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f81d 	bl	800c3b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c382:	b580      	push	{r7, lr}
 800c384:	b086      	sub	sp, #24
 800c386:	af00      	add	r7, sp, #0
 800c388:	4603      	mov	r3, r0
 800c38a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c38c:	2301      	movs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	2300      	movs	r3, #0
 800c392:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	461a      	mov	r2, r3
 800c398:	6939      	ldr	r1, [r7, #16]
 800c39a:	6978      	ldr	r0, [r7, #20]
 800c39c:	f7ff ff7e 	bl	800c29c <xQueueGenericCreate>
 800c3a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f7ff ffd3 	bl	800c34e <prvInitialiseMutex>

		return xNewQueue;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
	}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
	...

0800c3b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08e      	sub	sp, #56	; 0x38
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <xQueueGenericSend+0x32>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d103      	bne.n	800c3f4 <xQueueGenericSend+0x40>
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <xQueueGenericSend+0x44>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e000      	b.n	800c3fa <xQueueGenericSend+0x46>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <xQueueGenericSend+0x60>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b02      	cmp	r3, #2
 800c418:	d103      	bne.n	800c422 <xQueueGenericSend+0x6e>
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <xQueueGenericSend+0x72>
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <xQueueGenericSend+0x74>
 800c426:	2300      	movs	r3, #0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <xQueueGenericSend+0x8e>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	623b      	str	r3, [r7, #32]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c442:	f001 f8f3 	bl	800d62c <xTaskGetSchedulerState>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <xQueueGenericSend+0x9e>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <xQueueGenericSend+0xa2>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <xQueueGenericSend+0xa4>
 800c456:	2300      	movs	r3, #0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xQueueGenericSend+0xbe>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	61fb      	str	r3, [r7, #28]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c472:	f001 fc27 	bl	800dcc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47e:	429a      	cmp	r2, r3
 800c480:	d302      	bcc.n	800c488 <xQueueGenericSend+0xd4>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b02      	cmp	r3, #2
 800c486:	d129      	bne.n	800c4dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c48e:	f000 f9b3 	bl	800c7f8 <prvCopyDataToQueue>
 800c492:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d010      	beq.n	800c4be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	3324      	adds	r3, #36	; 0x24
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fecb 	bl	800d23c <xTaskRemoveFromEventList>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d013      	beq.n	800c4d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c4ac:	4b3f      	ldr	r3, [pc, #252]	; (800c5ac <xQueueGenericSend+0x1f8>)
 800c4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	e00a      	b.n	800c4d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d007      	beq.n	800c4d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c4c4:	4b39      	ldr	r3, [pc, #228]	; (800c5ac <xQueueGenericSend+0x1f8>)
 800c4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c4d4:	f001 fc26 	bl	800dd24 <vPortExitCritical>
				return pdPASS;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e063      	b.n	800c5a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d103      	bne.n	800c4ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4e2:	f001 fc1f 	bl	800dd24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e05c      	b.n	800c5a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4f0:	f107 0314 	add.w	r3, r7, #20
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 ff03 	bl	800d300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4fe:	f001 fc11 	bl	800dd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c502:	f000 fcb3 	bl	800ce6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c506:	f001 fbdd 	bl	800dcc4 <vPortEnterCritical>
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c510:	b25b      	sxtb	r3, r3
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c516:	d103      	bne.n	800c520 <xQueueGenericSend+0x16c>
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c526:	b25b      	sxtb	r3, r3
 800c528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52c:	d103      	bne.n	800c536 <xQueueGenericSend+0x182>
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	2200      	movs	r2, #0
 800c532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c536:	f001 fbf5 	bl	800dd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c53a:	1d3a      	adds	r2, r7, #4
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	4611      	mov	r1, r2
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fef2 	bl	800d32c <xTaskCheckForTimeOut>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d124      	bne.n	800c598 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c54e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c550:	f000 fa24 	bl	800c99c <prvIsQueueFull>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d018      	beq.n	800c58c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	3310      	adds	r3, #16
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	4611      	mov	r1, r2
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fe46 	bl	800d1f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c56a:	f000 f9af 	bl	800c8cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c56e:	f000 fc8b 	bl	800ce88 <xTaskResumeAll>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	f47f af7c 	bne.w	800c472 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c57a:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <xQueueGenericSend+0x1f8>)
 800c57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	e772      	b.n	800c472 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c58c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c58e:	f000 f99d 	bl	800c8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c592:	f000 fc79 	bl	800ce88 <xTaskResumeAll>
 800c596:	e76c      	b.n	800c472 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c59a:	f000 f997 	bl	800c8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c59e:	f000 fc73 	bl	800ce88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3738      	adds	r7, #56	; 0x38
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	623b      	str	r3, [r7, #32]
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00a      	beq.n	800c600 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	61fb      	str	r3, [r7, #28]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c600:	f001 f814 	bl	800d62c <xTaskGetSchedulerState>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d102      	bne.n	800c610 <xQueueSemaphoreTake+0x60>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <xQueueSemaphoreTake+0x64>
 800c610:	2301      	movs	r3, #1
 800c612:	e000      	b.n	800c616 <xQueueSemaphoreTake+0x66>
 800c614:	2300      	movs	r3, #0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10a      	bne.n	800c630 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	61bb      	str	r3, [r7, #24]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c630:	f001 fb48 	bl	800dcc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d024      	beq.n	800c68a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	1e5a      	subs	r2, r3, #1
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d104      	bne.n	800c65a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c650:	f001 f994 	bl	800d97c <pvTaskIncrementMutexHeldCount>
 800c654:	4602      	mov	r2, r0
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00f      	beq.n	800c682 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	3310      	adds	r3, #16
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fde8 	bl	800d23c <xTaskRemoveFromEventList>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d007      	beq.n	800c682 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c672:	4b54      	ldr	r3, [pc, #336]	; (800c7c4 <xQueueSemaphoreTake+0x214>)
 800c674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c682:	f001 fb4f 	bl	800dd24 <vPortExitCritical>
				return pdPASS;
 800c686:	2301      	movs	r3, #1
 800c688:	e097      	b.n	800c7ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d111      	bne.n	800c6b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	617b      	str	r3, [r7, #20]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6ac:	f001 fb3a 	bl	800dd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e082      	b.n	800c7ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d106      	bne.n	800c6c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ba:	f107 030c 	add.w	r3, r7, #12
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fe1e 	bl	800d300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6c8:	f001 fb2c 	bl	800dd24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6cc:	f000 fbce 	bl	800ce6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6d0:	f001 faf8 	bl	800dcc4 <vPortEnterCritical>
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6da:	b25b      	sxtb	r3, r3
 800c6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e0:	d103      	bne.n	800c6ea <xQueueSemaphoreTake+0x13a>
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6f0:	b25b      	sxtb	r3, r3
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d103      	bne.n	800c700 <xQueueSemaphoreTake+0x150>
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c700:	f001 fb10 	bl	800dd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c704:	463a      	mov	r2, r7
 800c706:	f107 030c 	add.w	r3, r7, #12
 800c70a:	4611      	mov	r1, r2
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fe0d 	bl	800d32c <xTaskCheckForTimeOut>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d132      	bne.n	800c77e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c71a:	f000 f929 	bl	800c970 <prvIsQueueEmpty>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d026      	beq.n	800c772 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d109      	bne.n	800c740 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c72c:	f001 faca 	bl	800dcc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	4618      	mov	r0, r3
 800c736:	f000 ff97 	bl	800d668 <xTaskPriorityInherit>
 800c73a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c73c:	f001 faf2 	bl	800dd24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	3324      	adds	r3, #36	; 0x24
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fd53 	bl	800d1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c750:	f000 f8bc 	bl	800c8cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c754:	f000 fb98 	bl	800ce88 <xTaskResumeAll>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f47f af68 	bne.w	800c630 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c760:	4b18      	ldr	r3, [pc, #96]	; (800c7c4 <xQueueSemaphoreTake+0x214>)
 800c762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	e75e      	b.n	800c630 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c774:	f000 f8aa 	bl	800c8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c778:	f000 fb86 	bl	800ce88 <xTaskResumeAll>
 800c77c:	e758      	b.n	800c630 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c780:	f000 f8a4 	bl	800c8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c784:	f000 fb80 	bl	800ce88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c78a:	f000 f8f1 	bl	800c970 <prvIsQueueEmpty>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	f43f af4d 	beq.w	800c630 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00d      	beq.n	800c7b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c79c:	f001 fa92 	bl	800dcc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a2:	f000 f811 	bl	800c7c8 <prvGetDisinheritPriorityAfterTimeout>
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f001 f856 	bl	800d860 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7b4:	f001 fab6 	bl	800dd24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3738      	adds	r7, #56	; 0x38
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d006      	beq.n	800c7e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f1c3 0307 	rsb	r3, r3, #7
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e001      	b.n	800c7ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
	}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10d      	bne.n	800c832 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d14d      	bne.n	800c8ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 ff96 	bl	800d754 <xTaskPriorityDisinherit>
 800c828:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	609a      	str	r2, [r3, #8]
 800c830:	e043      	b.n	800c8ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d119      	bne.n	800c86c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6858      	ldr	r0, [r3, #4]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c840:	461a      	mov	r2, r3
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	f001 fe2d 	bl	800e4a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c850:	441a      	add	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d32b      	bcc.n	800c8ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	605a      	str	r2, [r3, #4]
 800c86a:	e026      	b.n	800c8ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	68d8      	ldr	r0, [r3, #12]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	461a      	mov	r2, r3
 800c876:	68b9      	ldr	r1, [r7, #8]
 800c878:	f001 fe13 	bl	800e4a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68da      	ldr	r2, [r3, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	425b      	negs	r3, r3
 800c886:	441a      	add	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	68da      	ldr	r2, [r3, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d207      	bcs.n	800c8a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a0:	425b      	negs	r3, r3
 800c8a2:	441a      	add	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d105      	bne.n	800c8ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8c2:	697b      	ldr	r3, [r7, #20]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8d4:	f001 f9f6 	bl	800dcc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8e0:	e011      	b.n	800c906 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d012      	beq.n	800c910 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3324      	adds	r3, #36	; 0x24
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f000 fca4 	bl	800d23c <xTaskRemoveFromEventList>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c8fa:	f000 fd79 	bl	800d3f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	3b01      	subs	r3, #1
 800c902:	b2db      	uxtb	r3, r3
 800c904:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dce9      	bgt.n	800c8e2 <prvUnlockQueue+0x16>
 800c90e:	e000      	b.n	800c912 <prvUnlockQueue+0x46>
					break;
 800c910:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	22ff      	movs	r2, #255	; 0xff
 800c916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c91a:	f001 fa03 	bl	800dd24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c91e:	f001 f9d1 	bl	800dcc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c928:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c92a:	e011      	b.n	800c950 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d012      	beq.n	800c95a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3310      	adds	r3, #16
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 fc7f 	bl	800d23c <xTaskRemoveFromEventList>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c944:	f000 fd54 	bl	800d3f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c954:	2b00      	cmp	r3, #0
 800c956:	dce9      	bgt.n	800c92c <prvUnlockQueue+0x60>
 800c958:	e000      	b.n	800c95c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c95a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	22ff      	movs	r2, #255	; 0xff
 800c960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c964:	f001 f9de 	bl	800dd24 <vPortExitCritical>
}
 800c968:	bf00      	nop
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c978:	f001 f9a4 	bl	800dcc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c980:	2b00      	cmp	r3, #0
 800c982:	d102      	bne.n	800c98a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c984:	2301      	movs	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	e001      	b.n	800c98e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c98e:	f001 f9c9 	bl	800dd24 <vPortExitCritical>

	return xReturn;
 800c992:	68fb      	ldr	r3, [r7, #12]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9a4:	f001 f98e 	bl	800dcc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d102      	bne.n	800c9ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	e001      	b.n	800c9be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9be:	f001 f9b1 	bl	800dd24 <vPortExitCritical>

	return xReturn;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08e      	sub	sp, #56	; 0x38
 800c9d0:	af04      	add	r7, sp, #16
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10a      	bne.n	800c9f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	623b      	str	r3, [r7, #32]
}
 800c9f2:	bf00      	nop
 800c9f4:	e7fe      	b.n	800c9f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <xTaskCreateStatic+0x46>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	61fb      	str	r3, [r7, #28]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca12:	23b4      	movs	r3, #180	; 0xb4
 800ca14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2bb4      	cmp	r3, #180	; 0xb4
 800ca1a:	d00a      	beq.n	800ca32 <xTaskCreateStatic+0x66>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	61bb      	str	r3, [r7, #24]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d01e      	beq.n	800ca78 <xTaskCreateStatic+0xac>
 800ca3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d01b      	beq.n	800ca78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca52:	2300      	movs	r3, #0
 800ca54:	9303      	str	r3, [sp, #12]
 800ca56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca58:	9302      	str	r3, [sp, #8]
 800ca5a:	f107 0314 	add.w	r3, r7, #20
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	68b9      	ldr	r1, [r7, #8]
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f000 f850 	bl	800cb10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca72:	f000 f8f3 	bl	800cc5c <prvAddNewTaskToReadyList>
 800ca76:	e001      	b.n	800ca7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca7c:	697b      	ldr	r3, [r7, #20]
	}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3728      	adds	r7, #40	; 0x28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b08c      	sub	sp, #48	; 0x30
 800ca8a:	af04      	add	r7, sp, #16
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	603b      	str	r3, [r7, #0]
 800ca92:	4613      	mov	r3, r2
 800ca94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca96:	88fb      	ldrh	r3, [r7, #6]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f001 f9f4 	bl	800de88 <pvPortMalloc>
 800caa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00e      	beq.n	800cac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800caa8:	20b4      	movs	r0, #180	; 0xb4
 800caaa:	f001 f9ed 	bl	800de88 <pvPortMalloc>
 800caae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d003      	beq.n	800cabe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	697a      	ldr	r2, [r7, #20]
 800caba:	631a      	str	r2, [r3, #48]	; 0x30
 800cabc:	e005      	b.n	800caca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cabe:	6978      	ldr	r0, [r7, #20]
 800cac0:	f001 faae 	bl	800e020 <vPortFree>
 800cac4:	e001      	b.n	800caca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d017      	beq.n	800cb00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cad8:	88fa      	ldrh	r2, [r7, #6]
 800cada:	2300      	movs	r3, #0
 800cadc:	9303      	str	r3, [sp, #12]
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 f80e 	bl	800cb10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caf4:	69f8      	ldr	r0, [r7, #28]
 800caf6:	f000 f8b1 	bl	800cc5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cafa:	2301      	movs	r3, #1
 800cafc:	61bb      	str	r3, [r7, #24]
 800cafe:	e002      	b.n	800cb06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb00:	f04f 33ff 	mov.w	r3, #4294967295
 800cb04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb06:	69bb      	ldr	r3, [r7, #24]
	}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3720      	adds	r7, #32
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	461a      	mov	r2, r3
 800cb28:	21a5      	movs	r1, #165	; 0xa5
 800cb2a:	f001 fcc8 	bl	800e4be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	f023 0307 	bic.w	r3, r3, #7
 800cb46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00a      	beq.n	800cb68 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	617b      	str	r3, [r7, #20]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d01f      	beq.n	800cbae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb6e:	2300      	movs	r3, #0
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	e012      	b.n	800cb9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	4413      	add	r3, r2
 800cb7a:	7819      	ldrb	r1, [r3, #0]
 800cb7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	4413      	add	r3, r2
 800cb82:	3334      	adds	r3, #52	; 0x34
 800cb84:	460a      	mov	r2, r1
 800cb86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d006      	beq.n	800cba2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	3301      	adds	r3, #1
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	2b0f      	cmp	r3, #15
 800cb9e:	d9e9      	bls.n	800cb74 <prvInitialiseNewTask+0x64>
 800cba0:	e000      	b.n	800cba4 <prvInitialiseNewTask+0x94>
			{
				break;
 800cba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbac:	e003      	b.n	800cbb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	2b06      	cmp	r3, #6
 800cbba:	d901      	bls.n	800cbc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbbc:	2306      	movs	r3, #6
 800cbbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	2200      	movs	r2, #0
 800cbd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff fa64 	bl	800c0a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbde:	3318      	adds	r3, #24
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff fa5f 	bl	800c0a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	f1c3 0207 	rsb	r2, r3, #7
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	334c      	adds	r3, #76	; 0x4c
 800cc10:	2260      	movs	r2, #96	; 0x60
 800cc12:	2100      	movs	r1, #0
 800cc14:	4618      	mov	r0, r3
 800cc16:	f001 fc52 	bl	800e4be <memset>
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	4a0c      	ldr	r2, [pc, #48]	; (800cc50 <prvInitialiseNewTask+0x140>)
 800cc1e:	651a      	str	r2, [r3, #80]	; 0x50
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	4a0c      	ldr	r2, [pc, #48]	; (800cc54 <prvInitialiseNewTask+0x144>)
 800cc24:	655a      	str	r2, [r3, #84]	; 0x54
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	4a0b      	ldr	r2, [pc, #44]	; (800cc58 <prvInitialiseNewTask+0x148>)
 800cc2a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	68f9      	ldr	r1, [r7, #12]
 800cc30:	69b8      	ldr	r0, [r7, #24]
 800cc32:	f000 ff1d 	bl	800da70 <pxPortInitialiseStack>
 800cc36:	4602      	mov	r2, r0
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc48:	bf00      	nop
 800cc4a:	3720      	adds	r7, #32
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	08011ae8 	.word	0x08011ae8
 800cc54:	08011b08 	.word	0x08011b08
 800cc58:	08011ac8 	.word	0x08011ac8

0800cc5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc64:	f001 f82e 	bl	800dcc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc68:	4b2a      	ldr	r3, [pc, #168]	; (800cd14 <prvAddNewTaskToReadyList+0xb8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	4a29      	ldr	r2, [pc, #164]	; (800cd14 <prvAddNewTaskToReadyList+0xb8>)
 800cc70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc72:	4b29      	ldr	r3, [pc, #164]	; (800cd18 <prvAddNewTaskToReadyList+0xbc>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d109      	bne.n	800cc8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc7a:	4a27      	ldr	r2, [pc, #156]	; (800cd18 <prvAddNewTaskToReadyList+0xbc>)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc80:	4b24      	ldr	r3, [pc, #144]	; (800cd14 <prvAddNewTaskToReadyList+0xb8>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d110      	bne.n	800ccaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc88:	f000 fbd6 	bl	800d438 <prvInitialiseTaskLists>
 800cc8c:	e00d      	b.n	800ccaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc8e:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <prvAddNewTaskToReadyList+0xc0>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d109      	bne.n	800ccaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc96:	4b20      	ldr	r3, [pc, #128]	; (800cd18 <prvAddNewTaskToReadyList+0xbc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d802      	bhi.n	800ccaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cca4:	4a1c      	ldr	r2, [pc, #112]	; (800cd18 <prvAddNewTaskToReadyList+0xbc>)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccaa:	4b1d      	ldr	r3, [pc, #116]	; (800cd20 <prvAddNewTaskToReadyList+0xc4>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	4a1b      	ldr	r2, [pc, #108]	; (800cd20 <prvAddNewTaskToReadyList+0xc4>)
 800ccb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb8:	2201      	movs	r2, #1
 800ccba:	409a      	lsls	r2, r3
 800ccbc:	4b19      	ldr	r3, [pc, #100]	; (800cd24 <prvAddNewTaskToReadyList+0xc8>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	4a18      	ldr	r2, [pc, #96]	; (800cd24 <prvAddNewTaskToReadyList+0xc8>)
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccca:	4613      	mov	r3, r2
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4a15      	ldr	r2, [pc, #84]	; (800cd28 <prvAddNewTaskToReadyList+0xcc>)
 800ccd4:	441a      	add	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3304      	adds	r3, #4
 800ccda:	4619      	mov	r1, r3
 800ccdc:	4610      	mov	r0, r2
 800ccde:	f7ff f9ee 	bl	800c0be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cce2:	f001 f81f 	bl	800dd24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cce6:	4b0d      	ldr	r3, [pc, #52]	; (800cd1c <prvAddNewTaskToReadyList+0xc0>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00e      	beq.n	800cd0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccee:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <prvAddNewTaskToReadyList+0xbc>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d207      	bcs.n	800cd0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccfc:	4b0b      	ldr	r3, [pc, #44]	; (800cd2c <prvAddNewTaskToReadyList+0xd0>)
 800ccfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd0c:	bf00      	nop
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20000888 	.word	0x20000888
 800cd18:	20000788 	.word	0x20000788
 800cd1c:	20000894 	.word	0x20000894
 800cd20:	200008a4 	.word	0x200008a4
 800cd24:	20000890 	.word	0x20000890
 800cd28:	2000078c 	.word	0x2000078c
 800cd2c:	e000ed04 	.word	0xe000ed04

0800cd30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d017      	beq.n	800cd72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd42:	4b13      	ldr	r3, [pc, #76]	; (800cd90 <vTaskDelay+0x60>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00a      	beq.n	800cd60 <vTaskDelay+0x30>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	60bb      	str	r3, [r7, #8]
}
 800cd5c:	bf00      	nop
 800cd5e:	e7fe      	b.n	800cd5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd60:	f000 f884 	bl	800ce6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd64:	2100      	movs	r1, #0
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fe1c 	bl	800d9a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd6c:	f000 f88c 	bl	800ce88 <xTaskResumeAll>
 800cd70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d107      	bne.n	800cd88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd78:	4b06      	ldr	r3, [pc, #24]	; (800cd94 <vTaskDelay+0x64>)
 800cd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd88:	bf00      	nop
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	200008b0 	.word	0x200008b0
 800cd94:	e000ed04 	.word	0xe000ed04

0800cd98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cda6:	463a      	mov	r2, r7
 800cda8:	1d39      	adds	r1, r7, #4
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7f5 f890 	bl	8001ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	9202      	str	r2, [sp, #8]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	460a      	mov	r2, r1
 800cdc6:	4921      	ldr	r1, [pc, #132]	; (800ce4c <vTaskStartScheduler+0xb4>)
 800cdc8:	4821      	ldr	r0, [pc, #132]	; (800ce50 <vTaskStartScheduler+0xb8>)
 800cdca:	f7ff fdff 	bl	800c9cc <xTaskCreateStatic>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	4a20      	ldr	r2, [pc, #128]	; (800ce54 <vTaskStartScheduler+0xbc>)
 800cdd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdd4:	4b1f      	ldr	r3, [pc, #124]	; (800ce54 <vTaskStartScheduler+0xbc>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cddc:	2301      	movs	r3, #1
 800cdde:	617b      	str	r3, [r7, #20]
 800cde0:	e001      	b.n	800cde6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d11b      	bne.n	800ce24 <vTaskStartScheduler+0x8c>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	613b      	str	r3, [r7, #16]
}
 800cdfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce00:	4b15      	ldr	r3, [pc, #84]	; (800ce58 <vTaskStartScheduler+0xc0>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	334c      	adds	r3, #76	; 0x4c
 800ce06:	4a15      	ldr	r2, [pc, #84]	; (800ce5c <vTaskStartScheduler+0xc4>)
 800ce08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce0a:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <vTaskStartScheduler+0xc8>)
 800ce0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce12:	4b14      	ldr	r3, [pc, #80]	; (800ce64 <vTaskStartScheduler+0xcc>)
 800ce14:	2201      	movs	r2, #1
 800ce16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce18:	4b13      	ldr	r3, [pc, #76]	; (800ce68 <vTaskStartScheduler+0xd0>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce1e:	f000 feaf 	bl	800db80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce22:	e00e      	b.n	800ce42 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2a:	d10a      	bne.n	800ce42 <vTaskStartScheduler+0xaa>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	60fb      	str	r3, [r7, #12]
}
 800ce3e:	bf00      	nop
 800ce40:	e7fe      	b.n	800ce40 <vTaskStartScheduler+0xa8>
}
 800ce42:	bf00      	nop
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	08011aa0 	.word	0x08011aa0
 800ce50:	0800d409 	.word	0x0800d409
 800ce54:	200008ac 	.word	0x200008ac
 800ce58:	20000788 	.word	0x20000788
 800ce5c:	200002cc 	.word	0x200002cc
 800ce60:	200008a8 	.word	0x200008a8
 800ce64:	20000894 	.word	0x20000894
 800ce68:	2000088c 	.word	0x2000088c

0800ce6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce70:	4b04      	ldr	r3, [pc, #16]	; (800ce84 <vTaskSuspendAll+0x18>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3301      	adds	r3, #1
 800ce76:	4a03      	ldr	r2, [pc, #12]	; (800ce84 <vTaskSuspendAll+0x18>)
 800ce78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce7a:	bf00      	nop
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	200008b0 	.word	0x200008b0

0800ce88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce96:	4b41      	ldr	r3, [pc, #260]	; (800cf9c <xTaskResumeAll+0x114>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	603b      	str	r3, [r7, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	e7fe      	b.n	800ceb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ceb4:	f000 ff06 	bl	800dcc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ceb8:	4b38      	ldr	r3, [pc, #224]	; (800cf9c <xTaskResumeAll+0x114>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	4a37      	ldr	r2, [pc, #220]	; (800cf9c <xTaskResumeAll+0x114>)
 800cec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cec2:	4b36      	ldr	r3, [pc, #216]	; (800cf9c <xTaskResumeAll+0x114>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d161      	bne.n	800cf8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ceca:	4b35      	ldr	r3, [pc, #212]	; (800cfa0 <xTaskResumeAll+0x118>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d05d      	beq.n	800cf8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ced2:	e02e      	b.n	800cf32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ced4:	4b33      	ldr	r3, [pc, #204]	; (800cfa4 <xTaskResumeAll+0x11c>)
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3318      	adds	r3, #24
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7ff f949 	bl	800c178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3304      	adds	r3, #4
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff f944 	bl	800c178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	2201      	movs	r2, #1
 800cef6:	409a      	lsls	r2, r3
 800cef8:	4b2b      	ldr	r3, [pc, #172]	; (800cfa8 <xTaskResumeAll+0x120>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	4a2a      	ldr	r2, [pc, #168]	; (800cfa8 <xTaskResumeAll+0x120>)
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf06:	4613      	mov	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4a27      	ldr	r2, [pc, #156]	; (800cfac <xTaskResumeAll+0x124>)
 800cf10:	441a      	add	r2, r3
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3304      	adds	r3, #4
 800cf16:	4619      	mov	r1, r3
 800cf18:	4610      	mov	r0, r2
 800cf1a:	f7ff f8d0 	bl	800c0be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf22:	4b23      	ldr	r3, [pc, #140]	; (800cfb0 <xTaskResumeAll+0x128>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d302      	bcc.n	800cf32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cf2c:	4b21      	ldr	r3, [pc, #132]	; (800cfb4 <xTaskResumeAll+0x12c>)
 800cf2e:	2201      	movs	r2, #1
 800cf30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf32:	4b1c      	ldr	r3, [pc, #112]	; (800cfa4 <xTaskResumeAll+0x11c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1cc      	bne.n	800ced4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d001      	beq.n	800cf44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf40:	f000 fb54 	bl	800d5ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf44:	4b1c      	ldr	r3, [pc, #112]	; (800cfb8 <xTaskResumeAll+0x130>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d010      	beq.n	800cf72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf50:	f000 f836 	bl	800cfc0 <xTaskIncrementTick>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cf5a:	4b16      	ldr	r3, [pc, #88]	; (800cfb4 <xTaskResumeAll+0x12c>)
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f1      	bne.n	800cf50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cf6c:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <xTaskResumeAll+0x130>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf72:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <xTaskResumeAll+0x12c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d009      	beq.n	800cf8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf7e:	4b0f      	ldr	r3, [pc, #60]	; (800cfbc <xTaskResumeAll+0x134>)
 800cf80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf8e:	f000 fec9 	bl	800dd24 <vPortExitCritical>

	return xAlreadyYielded;
 800cf92:	68bb      	ldr	r3, [r7, #8]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	200008b0 	.word	0x200008b0
 800cfa0:	20000888 	.word	0x20000888
 800cfa4:	20000848 	.word	0x20000848
 800cfa8:	20000890 	.word	0x20000890
 800cfac:	2000078c 	.word	0x2000078c
 800cfb0:	20000788 	.word	0x20000788
 800cfb4:	2000089c 	.word	0x2000089c
 800cfb8:	20000898 	.word	0x20000898
 800cfbc:	e000ed04 	.word	0xe000ed04

0800cfc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfca:	4b4e      	ldr	r3, [pc, #312]	; (800d104 <xTaskIncrementTick+0x144>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 808e 	bne.w	800d0f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfd4:	4b4c      	ldr	r3, [pc, #304]	; (800d108 <xTaskIncrementTick+0x148>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfdc:	4a4a      	ldr	r2, [pc, #296]	; (800d108 <xTaskIncrementTick+0x148>)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d120      	bne.n	800d02a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfe8:	4b48      	ldr	r3, [pc, #288]	; (800d10c <xTaskIncrementTick+0x14c>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <xTaskIncrementTick+0x48>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	603b      	str	r3, [r7, #0]
}
 800d004:	bf00      	nop
 800d006:	e7fe      	b.n	800d006 <xTaskIncrementTick+0x46>
 800d008:	4b40      	ldr	r3, [pc, #256]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	4b40      	ldr	r3, [pc, #256]	; (800d110 <xTaskIncrementTick+0x150>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a3e      	ldr	r2, [pc, #248]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	4a3e      	ldr	r2, [pc, #248]	; (800d110 <xTaskIncrementTick+0x150>)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	4b3d      	ldr	r3, [pc, #244]	; (800d114 <xTaskIncrementTick+0x154>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	3301      	adds	r3, #1
 800d022:	4a3c      	ldr	r2, [pc, #240]	; (800d114 <xTaskIncrementTick+0x154>)
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	f000 fae1 	bl	800d5ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d02a:	4b3b      	ldr	r3, [pc, #236]	; (800d118 <xTaskIncrementTick+0x158>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	693a      	ldr	r2, [r7, #16]
 800d030:	429a      	cmp	r2, r3
 800d032:	d348      	bcc.n	800d0c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d034:	4b35      	ldr	r3, [pc, #212]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d104      	bne.n	800d048 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d03e:	4b36      	ldr	r3, [pc, #216]	; (800d118 <xTaskIncrementTick+0x158>)
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	601a      	str	r2, [r3, #0]
					break;
 800d046:	e03e      	b.n	800d0c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d048:	4b30      	ldr	r3, [pc, #192]	; (800d10c <xTaskIncrementTick+0x14c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d203      	bcs.n	800d068 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d060:	4a2d      	ldr	r2, [pc, #180]	; (800d118 <xTaskIncrementTick+0x158>)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d066:	e02e      	b.n	800d0c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	3304      	adds	r3, #4
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff f883 	bl	800c178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d076:	2b00      	cmp	r3, #0
 800d078:	d004      	beq.n	800d084 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	3318      	adds	r3, #24
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff f87a 	bl	800c178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	2201      	movs	r2, #1
 800d08a:	409a      	lsls	r2, r3
 800d08c:	4b23      	ldr	r3, [pc, #140]	; (800d11c <xTaskIncrementTick+0x15c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4313      	orrs	r3, r2
 800d092:	4a22      	ldr	r2, [pc, #136]	; (800d11c <xTaskIncrementTick+0x15c>)
 800d094:	6013      	str	r3, [r2, #0]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4a1f      	ldr	r2, [pc, #124]	; (800d120 <xTaskIncrementTick+0x160>)
 800d0a4:	441a      	add	r2, r3
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7ff f806 	bl	800c0be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b6:	4b1b      	ldr	r3, [pc, #108]	; (800d124 <xTaskIncrementTick+0x164>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d3b9      	bcc.n	800d034 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0c4:	e7b6      	b.n	800d034 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0c6:	4b17      	ldr	r3, [pc, #92]	; (800d124 <xTaskIncrementTick+0x164>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	4914      	ldr	r1, [pc, #80]	; (800d120 <xTaskIncrementTick+0x160>)
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	440b      	add	r3, r1
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d901      	bls.n	800d0e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0e2:	4b11      	ldr	r3, [pc, #68]	; (800d128 <xTaskIncrementTick+0x168>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d007      	beq.n	800d0fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	617b      	str	r3, [r7, #20]
 800d0ee:	e004      	b.n	800d0fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0f0:	4b0e      	ldr	r3, [pc, #56]	; (800d12c <xTaskIncrementTick+0x16c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	4a0d      	ldr	r2, [pc, #52]	; (800d12c <xTaskIncrementTick+0x16c>)
 800d0f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0fa:	697b      	ldr	r3, [r7, #20]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200008b0 	.word	0x200008b0
 800d108:	2000088c 	.word	0x2000088c
 800d10c:	20000840 	.word	0x20000840
 800d110:	20000844 	.word	0x20000844
 800d114:	200008a0 	.word	0x200008a0
 800d118:	200008a8 	.word	0x200008a8
 800d11c:	20000890 	.word	0x20000890
 800d120:	2000078c 	.word	0x2000078c
 800d124:	20000788 	.word	0x20000788
 800d128:	2000089c 	.word	0x2000089c
 800d12c:	20000898 	.word	0x20000898

0800d130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d130:	b480      	push	{r7}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d136:	4b29      	ldr	r3, [pc, #164]	; (800d1dc <vTaskSwitchContext+0xac>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d13e:	4b28      	ldr	r3, [pc, #160]	; (800d1e0 <vTaskSwitchContext+0xb0>)
 800d140:	2201      	movs	r2, #1
 800d142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d144:	e044      	b.n	800d1d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d146:	4b26      	ldr	r3, [pc, #152]	; (800d1e0 <vTaskSwitchContext+0xb0>)
 800d148:	2200      	movs	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14c:	4b25      	ldr	r3, [pc, #148]	; (800d1e4 <vTaskSwitchContext+0xb4>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	fab3 f383 	clz	r3, r3
 800d158:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d15a:	7afb      	ldrb	r3, [r7, #11]
 800d15c:	f1c3 031f 	rsb	r3, r3, #31
 800d160:	617b      	str	r3, [r7, #20]
 800d162:	4921      	ldr	r1, [pc, #132]	; (800d1e8 <vTaskSwitchContext+0xb8>)
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	4613      	mov	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	440b      	add	r3, r1
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10a      	bne.n	800d18c <vTaskSwitchContext+0x5c>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	607b      	str	r3, [r7, #4]
}
 800d188:	bf00      	nop
 800d18a:	e7fe      	b.n	800d18a <vTaskSwitchContext+0x5a>
 800d18c:	697a      	ldr	r2, [r7, #20]
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4a14      	ldr	r2, [pc, #80]	; (800d1e8 <vTaskSwitchContext+0xb8>)
 800d198:	4413      	add	r3, r2
 800d19a:	613b      	str	r3, [r7, #16]
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	605a      	str	r2, [r3, #4]
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	685a      	ldr	r2, [r3, #4]
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	3308      	adds	r3, #8
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d104      	bne.n	800d1bc <vTaskSwitchContext+0x8c>
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	685a      	ldr	r2, [r3, #4]
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	605a      	str	r2, [r3, #4]
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	4a0a      	ldr	r2, [pc, #40]	; (800d1ec <vTaskSwitchContext+0xbc>)
 800d1c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1c6:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <vTaskSwitchContext+0xbc>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	334c      	adds	r3, #76	; 0x4c
 800d1cc:	4a08      	ldr	r2, [pc, #32]	; (800d1f0 <vTaskSwitchContext+0xc0>)
 800d1ce:	6013      	str	r3, [r2, #0]
}
 800d1d0:	bf00      	nop
 800d1d2:	371c      	adds	r7, #28
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	200008b0 	.word	0x200008b0
 800d1e0:	2000089c 	.word	0x2000089c
 800d1e4:	20000890 	.word	0x20000890
 800d1e8:	2000078c 	.word	0x2000078c
 800d1ec:	20000788 	.word	0x20000788
 800d1f0:	200002cc 	.word	0x200002cc

0800d1f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10a      	bne.n	800d21a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	60fb      	str	r3, [r7, #12]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d21a:	4b07      	ldr	r3, [pc, #28]	; (800d238 <vTaskPlaceOnEventList+0x44>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3318      	adds	r3, #24
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7fe ff6f 	bl	800c106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d228:	2101      	movs	r1, #1
 800d22a:	6838      	ldr	r0, [r7, #0]
 800d22c:	f000 fbba 	bl	800d9a4 <prvAddCurrentTaskToDelayedList>
}
 800d230:	bf00      	nop
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20000788 	.word	0x20000788

0800d23c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10a      	bne.n	800d268 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	60fb      	str	r3, [r7, #12]
}
 800d264:	bf00      	nop
 800d266:	e7fe      	b.n	800d266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	3318      	adds	r3, #24
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe ff83 	bl	800c178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d272:	4b1d      	ldr	r3, [pc, #116]	; (800d2e8 <xTaskRemoveFromEventList+0xac>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d11c      	bne.n	800d2b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe ff7a 	bl	800c178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	2201      	movs	r2, #1
 800d28a:	409a      	lsls	r2, r3
 800d28c:	4b17      	ldr	r3, [pc, #92]	; (800d2ec <xTaskRemoveFromEventList+0xb0>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4313      	orrs	r3, r2
 800d292:	4a16      	ldr	r2, [pc, #88]	; (800d2ec <xTaskRemoveFromEventList+0xb0>)
 800d294:	6013      	str	r3, [r2, #0]
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29a:	4613      	mov	r3, r2
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4a13      	ldr	r2, [pc, #76]	; (800d2f0 <xTaskRemoveFromEventList+0xb4>)
 800d2a4:	441a      	add	r2, r3
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f7fe ff06 	bl	800c0be <vListInsertEnd>
 800d2b2:	e005      	b.n	800d2c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	3318      	adds	r3, #24
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	480e      	ldr	r0, [pc, #56]	; (800d2f4 <xTaskRemoveFromEventList+0xb8>)
 800d2bc:	f7fe feff 	bl	800c0be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c4:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <xTaskRemoveFromEventList+0xbc>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d905      	bls.n	800d2da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2d2:	4b0a      	ldr	r3, [pc, #40]	; (800d2fc <xTaskRemoveFromEventList+0xc0>)
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	e001      	b.n	800d2de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2de:	697b      	ldr	r3, [r7, #20]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3718      	adds	r7, #24
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	200008b0 	.word	0x200008b0
 800d2ec:	20000890 	.word	0x20000890
 800d2f0:	2000078c 	.word	0x2000078c
 800d2f4:	20000848 	.word	0x20000848
 800d2f8:	20000788 	.word	0x20000788
 800d2fc:	2000089c 	.word	0x2000089c

0800d300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d308:	4b06      	ldr	r3, [pc, #24]	; (800d324 <vTaskInternalSetTimeOutState+0x24>)
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <vTaskInternalSetTimeOutState+0x28>)
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	605a      	str	r2, [r3, #4]
}
 800d318:	bf00      	nop
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	200008a0 	.word	0x200008a0
 800d328:	2000088c 	.word	0x2000088c

0800d32c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10a      	bne.n	800d352 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	613b      	str	r3, [r7, #16]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	60fb      	str	r3, [r7, #12]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d36e:	f000 fca9 	bl	800dcc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d372:	4b1d      	ldr	r3, [pc, #116]	; (800d3e8 <xTaskCheckForTimeOut+0xbc>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	69ba      	ldr	r2, [r7, #24]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38a:	d102      	bne.n	800d392 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d38c:	2300      	movs	r3, #0
 800d38e:	61fb      	str	r3, [r7, #28]
 800d390:	e023      	b.n	800d3da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4b15      	ldr	r3, [pc, #84]	; (800d3ec <xTaskCheckForTimeOut+0xc0>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d007      	beq.n	800d3ae <xTaskCheckForTimeOut+0x82>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	69ba      	ldr	r2, [r7, #24]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d302      	bcc.n	800d3ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	61fb      	str	r3, [r7, #28]
 800d3ac:	e015      	b.n	800d3da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d20b      	bcs.n	800d3d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	1ad2      	subs	r2, r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff ff9b 	bl	800d300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	61fb      	str	r3, [r7, #28]
 800d3ce:	e004      	b.n	800d3da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3da:	f000 fca3 	bl	800dd24 <vPortExitCritical>

	return xReturn;
 800d3de:	69fb      	ldr	r3, [r7, #28]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3720      	adds	r7, #32
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	2000088c 	.word	0x2000088c
 800d3ec:	200008a0 	.word	0x200008a0

0800d3f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3f4:	4b03      	ldr	r3, [pc, #12]	; (800d404 <vTaskMissedYield+0x14>)
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	601a      	str	r2, [r3, #0]
}
 800d3fa:	bf00      	nop
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	2000089c 	.word	0x2000089c

0800d408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d410:	f000 f852 	bl	800d4b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d414:	4b06      	ldr	r3, [pc, #24]	; (800d430 <prvIdleTask+0x28>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d9f9      	bls.n	800d410 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d41c:	4b05      	ldr	r3, [pc, #20]	; (800d434 <prvIdleTask+0x2c>)
 800d41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f3bf 8f4f 	dsb	sy
 800d428:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d42c:	e7f0      	b.n	800d410 <prvIdleTask+0x8>
 800d42e:	bf00      	nop
 800d430:	2000078c 	.word	0x2000078c
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d43e:	2300      	movs	r3, #0
 800d440:	607b      	str	r3, [r7, #4]
 800d442:	e00c      	b.n	800d45e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	4613      	mov	r3, r2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	4413      	add	r3, r2
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	4a12      	ldr	r2, [pc, #72]	; (800d498 <prvInitialiseTaskLists+0x60>)
 800d450:	4413      	add	r3, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fe06 	bl	800c064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3301      	adds	r3, #1
 800d45c:	607b      	str	r3, [r7, #4]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b06      	cmp	r3, #6
 800d462:	d9ef      	bls.n	800d444 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d464:	480d      	ldr	r0, [pc, #52]	; (800d49c <prvInitialiseTaskLists+0x64>)
 800d466:	f7fe fdfd 	bl	800c064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d46a:	480d      	ldr	r0, [pc, #52]	; (800d4a0 <prvInitialiseTaskLists+0x68>)
 800d46c:	f7fe fdfa 	bl	800c064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d470:	480c      	ldr	r0, [pc, #48]	; (800d4a4 <prvInitialiseTaskLists+0x6c>)
 800d472:	f7fe fdf7 	bl	800c064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d476:	480c      	ldr	r0, [pc, #48]	; (800d4a8 <prvInitialiseTaskLists+0x70>)
 800d478:	f7fe fdf4 	bl	800c064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d47c:	480b      	ldr	r0, [pc, #44]	; (800d4ac <prvInitialiseTaskLists+0x74>)
 800d47e:	f7fe fdf1 	bl	800c064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d482:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <prvInitialiseTaskLists+0x78>)
 800d484:	4a05      	ldr	r2, [pc, #20]	; (800d49c <prvInitialiseTaskLists+0x64>)
 800d486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d488:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <prvInitialiseTaskLists+0x7c>)
 800d48a:	4a05      	ldr	r2, [pc, #20]	; (800d4a0 <prvInitialiseTaskLists+0x68>)
 800d48c:	601a      	str	r2, [r3, #0]
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	2000078c 	.word	0x2000078c
 800d49c:	20000818 	.word	0x20000818
 800d4a0:	2000082c 	.word	0x2000082c
 800d4a4:	20000848 	.word	0x20000848
 800d4a8:	2000085c 	.word	0x2000085c
 800d4ac:	20000874 	.word	0x20000874
 800d4b0:	20000840 	.word	0x20000840
 800d4b4:	20000844 	.word	0x20000844

0800d4b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4be:	e019      	b.n	800d4f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4c0:	f000 fc00 	bl	800dcc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c4:	4b10      	ldr	r3, [pc, #64]	; (800d508 <prvCheckTasksWaitingTermination+0x50>)
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe fe51 	bl	800c178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	; (800d50c <prvCheckTasksWaitingTermination+0x54>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	4a0b      	ldr	r2, [pc, #44]	; (800d50c <prvCheckTasksWaitingTermination+0x54>)
 800d4de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4e0:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <prvCheckTasksWaitingTermination+0x58>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4a0a      	ldr	r2, [pc, #40]	; (800d510 <prvCheckTasksWaitingTermination+0x58>)
 800d4e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ea:	f000 fc1b 	bl	800dd24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f848 	bl	800d584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4f4:	4b06      	ldr	r3, [pc, #24]	; (800d510 <prvCheckTasksWaitingTermination+0x58>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e1      	bne.n	800d4c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4fc:	bf00      	nop
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	2000085c 	.word	0x2000085c
 800d50c:	20000888 	.word	0x20000888
 800d510:	20000870 	.word	0x20000870

0800d514 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d520:	e005      	b.n	800d52e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	3301      	adds	r3, #1
 800d526:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3301      	adds	r3, #1
 800d52c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2ba5      	cmp	r3, #165	; 0xa5
 800d534:	d0f5      	beq.n	800d522 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	089b      	lsrs	r3, r3, #2
 800d53a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	b29b      	uxth	r3, r3
	}
 800d540:	4618      	mov	r0, r3
 800d542:	3714      	adds	r7, #20
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d102      	bne.n	800d560 <uxTaskGetStackHighWaterMark+0x14>
 800d55a:	4b09      	ldr	r3, [pc, #36]	; (800d580 <uxTaskGetStackHighWaterMark+0x34>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	e000      	b.n	800d562 <uxTaskGetStackHighWaterMark+0x16>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d568:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d56a:	6938      	ldr	r0, [r7, #16]
 800d56c:	f7ff ffd2 	bl	800d514 <prvTaskCheckFreeStackSpace>
 800d570:	4603      	mov	r3, r0
 800d572:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d574:	68fb      	ldr	r3, [r7, #12]
	}
 800d576:	4618      	mov	r0, r3
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20000788 	.word	0x20000788

0800d584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	334c      	adds	r3, #76	; 0x4c
 800d590:	4618      	mov	r0, r3
 800d592:	f001 fcfd 	bl	800ef90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d108      	bne.n	800d5b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fd3b 	bl	800e020 <vPortFree>
				vPortFree( pxTCB );
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fd38 	bl	800e020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5b0:	e018      	b.n	800d5e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d103      	bne.n	800d5c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fd2f 	bl	800e020 <vPortFree>
	}
 800d5c2:	e00f      	b.n	800d5e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d00a      	beq.n	800d5e4 <prvDeleteTCB+0x60>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	60fb      	str	r3, [r7, #12]
}
 800d5e0:	bf00      	nop
 800d5e2:	e7fe      	b.n	800d5e2 <prvDeleteTCB+0x5e>
	}
 800d5e4:	bf00      	nop
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <prvResetNextTaskUnblockTime+0x38>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d104      	bne.n	800d606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <prvResetNextTaskUnblockTime+0x3c>)
 800d5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d604:	e008      	b.n	800d618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <prvResetNextTaskUnblockTime+0x38>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	4a04      	ldr	r2, [pc, #16]	; (800d628 <prvResetNextTaskUnblockTime+0x3c>)
 800d616:	6013      	str	r3, [r2, #0]
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	20000840 	.word	0x20000840
 800d628:	200008a8 	.word	0x200008a8

0800d62c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d632:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <xTaskGetSchedulerState+0x34>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d63a:	2301      	movs	r3, #1
 800d63c:	607b      	str	r3, [r7, #4]
 800d63e:	e008      	b.n	800d652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d640:	4b08      	ldr	r3, [pc, #32]	; (800d664 <xTaskGetSchedulerState+0x38>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d648:	2302      	movs	r3, #2
 800d64a:	607b      	str	r3, [r7, #4]
 800d64c:	e001      	b.n	800d652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d64e:	2300      	movs	r3, #0
 800d650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d652:	687b      	ldr	r3, [r7, #4]
	}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	20000894 	.word	0x20000894
 800d664:	200008b0 	.word	0x200008b0

0800d668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d05e      	beq.n	800d73c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	4b31      	ldr	r3, [pc, #196]	; (800d748 <xTaskPriorityInherit+0xe0>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	429a      	cmp	r2, r3
 800d68a:	d24e      	bcs.n	800d72a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	699b      	ldr	r3, [r3, #24]
 800d690:	2b00      	cmp	r3, #0
 800d692:	db06      	blt.n	800d6a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d694:	4b2c      	ldr	r3, [pc, #176]	; (800d748 <xTaskPriorityInherit+0xe0>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69a:	f1c3 0207 	rsb	r2, r3, #7
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	6959      	ldr	r1, [r3, #20]
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4413      	add	r3, r2
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4a26      	ldr	r2, [pc, #152]	; (800d74c <xTaskPriorityInherit+0xe4>)
 800d6b4:	4413      	add	r3, r2
 800d6b6:	4299      	cmp	r1, r3
 800d6b8:	d12f      	bne.n	800d71a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe fd5a 	bl	800c178 <uxListRemove>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10a      	bne.n	800d6e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d4:	43da      	mvns	r2, r3
 800d6d6:	4b1e      	ldr	r3, [pc, #120]	; (800d750 <xTaskPriorityInherit+0xe8>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	4a1c      	ldr	r2, [pc, #112]	; (800d750 <xTaskPriorityInherit+0xe8>)
 800d6de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6e0:	4b19      	ldr	r3, [pc, #100]	; (800d748 <xTaskPriorityInherit+0xe0>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	409a      	lsls	r2, r3
 800d6f2:	4b17      	ldr	r3, [pc, #92]	; (800d750 <xTaskPriorityInherit+0xe8>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	4a15      	ldr	r2, [pc, #84]	; (800d750 <xTaskPriorityInherit+0xe8>)
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d700:	4613      	mov	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4413      	add	r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4a10      	ldr	r2, [pc, #64]	; (800d74c <xTaskPriorityInherit+0xe4>)
 800d70a:	441a      	add	r2, r3
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	3304      	adds	r3, #4
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f7fe fcd3 	bl	800c0be <vListInsertEnd>
 800d718:	e004      	b.n	800d724 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <xTaskPriorityInherit+0xe0>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d724:	2301      	movs	r3, #1
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	e008      	b.n	800d73c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d72e:	4b06      	ldr	r3, [pc, #24]	; (800d748 <xTaskPriorityInherit+0xe0>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d734:	429a      	cmp	r2, r3
 800d736:	d201      	bcs.n	800d73c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d73c:	68fb      	ldr	r3, [r7, #12]
	}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20000788 	.word	0x20000788
 800d74c:	2000078c 	.word	0x2000078c
 800d750:	20000890 	.word	0x20000890

0800d754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d760:	2300      	movs	r3, #0
 800d762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d06e      	beq.n	800d848 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d76a:	4b3a      	ldr	r3, [pc, #232]	; (800d854 <xTaskPriorityDisinherit+0x100>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	429a      	cmp	r2, r3
 800d772:	d00a      	beq.n	800d78a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	60fb      	str	r3, [r7, #12]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	60bb      	str	r3, [r7, #8]
}
 800d7a4:	bf00      	nop
 800d7a6:	e7fe      	b.n	800d7a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ac:	1e5a      	subs	r2, r3, #1
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d044      	beq.n	800d848 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d140      	bne.n	800d848 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fcd4 	bl	800c178 <uxListRemove>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d115      	bne.n	800d802 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7da:	491f      	ldr	r1, [pc, #124]	; (800d858 <xTaskPriorityDisinherit+0x104>)
 800d7dc:	4613      	mov	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	440b      	add	r3, r1
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10a      	bne.n	800d802 <xTaskPriorityDisinherit+0xae>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f6:	43da      	mvns	r2, r3
 800d7f8:	4b18      	ldr	r3, [pc, #96]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	4a17      	ldr	r2, [pc, #92]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d800:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80e:	f1c3 0207 	rsb	r2, r3, #7
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81a:	2201      	movs	r2, #1
 800d81c:	409a      	lsls	r2, r3
 800d81e:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4313      	orrs	r3, r2
 800d824:	4a0d      	ldr	r2, [pc, #52]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82c:	4613      	mov	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4413      	add	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4a08      	ldr	r2, [pc, #32]	; (800d858 <xTaskPriorityDisinherit+0x104>)
 800d836:	441a      	add	r2, r3
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	3304      	adds	r3, #4
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7fe fc3d 	bl	800c0be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d848:	697b      	ldr	r3, [r7, #20]
	}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20000788 	.word	0x20000788
 800d858:	2000078c 	.word	0x2000078c
 800d85c:	20000890 	.word	0x20000890

0800d860 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d860:	b580      	push	{r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d86e:	2301      	movs	r3, #1
 800d870:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d077      	beq.n	800d968 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	60fb      	str	r3, [r7, #12]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d902      	bls.n	800d8a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	61fb      	str	r3, [r7, #28]
 800d8a4:	e002      	b.n	800d8ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b0:	69fa      	ldr	r2, [r7, #28]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d058      	beq.n	800d968 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d153      	bne.n	800d968 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d8c0:	4b2b      	ldr	r3, [pc, #172]	; (800d970 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	69ba      	ldr	r2, [r7, #24]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d10a      	bne.n	800d8e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	60bb      	str	r3, [r7, #8]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	699b      	ldr	r3, [r3, #24]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	db04      	blt.n	800d8fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	f1c3 0207 	rsb	r2, r3, #7
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	6959      	ldr	r1, [r3, #20]
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	4613      	mov	r3, r2
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4a19      	ldr	r2, [pc, #100]	; (800d974 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d90e:	4413      	add	r3, r2
 800d910:	4299      	cmp	r1, r3
 800d912:	d129      	bne.n	800d968 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	3304      	adds	r3, #4
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fe fc2d 	bl	800c178 <uxListRemove>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d928:	2201      	movs	r2, #1
 800d92a:	fa02 f303 	lsl.w	r3, r2, r3
 800d92e:	43da      	mvns	r2, r3
 800d930:	4b11      	ldr	r3, [pc, #68]	; (800d978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4013      	ands	r3, r2
 800d936:	4a10      	ldr	r2, [pc, #64]	; (800d978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d938:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93e:	2201      	movs	r2, #1
 800d940:	409a      	lsls	r2, r3
 800d942:	4b0d      	ldr	r3, [pc, #52]	; (800d978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4313      	orrs	r3, r2
 800d948:	4a0b      	ldr	r2, [pc, #44]	; (800d978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d950:	4613      	mov	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4a06      	ldr	r2, [pc, #24]	; (800d974 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d95a:	441a      	add	r2, r3
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	3304      	adds	r3, #4
 800d960:	4619      	mov	r1, r3
 800d962:	4610      	mov	r0, r2
 800d964:	f7fe fbab 	bl	800c0be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d968:	bf00      	nop
 800d96a:	3720      	adds	r7, #32
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	20000788 	.word	0x20000788
 800d974:	2000078c 	.word	0x2000078c
 800d978:	20000890 	.word	0x20000890

0800d97c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d97c:	b480      	push	{r7}
 800d97e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d980:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d004      	beq.n	800d992 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d988:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d98e:	3201      	adds	r2, #1
 800d990:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d992:	4b03      	ldr	r3, [pc, #12]	; (800d9a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d994:	681b      	ldr	r3, [r3, #0]
	}
 800d996:	4618      	mov	r0, r3
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	20000788 	.word	0x20000788

0800d9a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9ae:	4b29      	ldr	r3, [pc, #164]	; (800da54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9b4:	4b28      	ldr	r3, [pc, #160]	; (800da58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe fbdc 	bl	800c178 <uxListRemove>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10b      	bne.n	800d9de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d9c6:	4b24      	ldr	r3, [pc, #144]	; (800da58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d2:	43da      	mvns	r2, r3
 800d9d4:	4b21      	ldr	r3, [pc, #132]	; (800da5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4013      	ands	r3, r2
 800d9da:	4a20      	ldr	r2, [pc, #128]	; (800da5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e4:	d10a      	bne.n	800d9fc <prvAddCurrentTaskToDelayedList+0x58>
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d007      	beq.n	800d9fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ec:	4b1a      	ldr	r3, [pc, #104]	; (800da58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	481a      	ldr	r0, [pc, #104]	; (800da60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d9f6:	f7fe fb62 	bl	800c0be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9fa:	e026      	b.n	800da4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da04:	4b14      	ldr	r3, [pc, #80]	; (800da58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	d209      	bcs.n	800da28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da14:	4b13      	ldr	r3, [pc, #76]	; (800da64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	4b0f      	ldr	r3, [pc, #60]	; (800da58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3304      	adds	r3, #4
 800da1e:	4619      	mov	r1, r3
 800da20:	4610      	mov	r0, r2
 800da22:	f7fe fb70 	bl	800c106 <vListInsert>
}
 800da26:	e010      	b.n	800da4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da28:	4b0f      	ldr	r3, [pc, #60]	; (800da68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3304      	adds	r3, #4
 800da32:	4619      	mov	r1, r3
 800da34:	4610      	mov	r0, r2
 800da36:	f7fe fb66 	bl	800c106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da3a:	4b0c      	ldr	r3, [pc, #48]	; (800da6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	429a      	cmp	r2, r3
 800da42:	d202      	bcs.n	800da4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da44:	4a09      	ldr	r2, [pc, #36]	; (800da6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	6013      	str	r3, [r2, #0]
}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	2000088c 	.word	0x2000088c
 800da58:	20000788 	.word	0x20000788
 800da5c:	20000890 	.word	0x20000890
 800da60:	20000874 	.word	0x20000874
 800da64:	20000844 	.word	0x20000844
 800da68:	20000840 	.word	0x20000840
 800da6c:	200008a8 	.word	0x200008a8

0800da70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3b04      	subs	r3, #4
 800da80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	3b04      	subs	r3, #4
 800da8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f023 0201 	bic.w	r2, r3, #1
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3b04      	subs	r3, #4
 800da9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800daa0:	4a0c      	ldr	r2, [pc, #48]	; (800dad4 <pxPortInitialiseStack+0x64>)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3b14      	subs	r3, #20
 800daaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3b04      	subs	r3, #4
 800dab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f06f 0202 	mvn.w	r2, #2
 800dabe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	3b20      	subs	r3, #32
 800dac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dac6:	68fb      	ldr	r3, [r7, #12]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	0800dad9 	.word	0x0800dad9

0800dad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dae2:	4b12      	ldr	r3, [pc, #72]	; (800db2c <prvTaskExitError+0x54>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daea:	d00a      	beq.n	800db02 <prvTaskExitError+0x2a>
	__asm volatile
 800daec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf0:	f383 8811 	msr	BASEPRI, r3
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	60fb      	str	r3, [r7, #12]
}
 800dafe:	bf00      	nop
 800db00:	e7fe      	b.n	800db00 <prvTaskExitError+0x28>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	60bb      	str	r3, [r7, #8]
}
 800db14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db16:	bf00      	nop
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0fc      	beq.n	800db18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db1e:	bf00      	nop
 800db20:	bf00      	nop
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	200002c8 	.word	0x200002c8

0800db30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db30:	4b07      	ldr	r3, [pc, #28]	; (800db50 <pxCurrentTCBConst2>)
 800db32:	6819      	ldr	r1, [r3, #0]
 800db34:	6808      	ldr	r0, [r1, #0]
 800db36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3a:	f380 8809 	msr	PSP, r0
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f04f 0000 	mov.w	r0, #0
 800db46:	f380 8811 	msr	BASEPRI, r0
 800db4a:	4770      	bx	lr
 800db4c:	f3af 8000 	nop.w

0800db50 <pxCurrentTCBConst2>:
 800db50:	20000788 	.word	0x20000788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db54:	bf00      	nop
 800db56:	bf00      	nop

0800db58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db58:	4808      	ldr	r0, [pc, #32]	; (800db7c <prvPortStartFirstTask+0x24>)
 800db5a:	6800      	ldr	r0, [r0, #0]
 800db5c:	6800      	ldr	r0, [r0, #0]
 800db5e:	f380 8808 	msr	MSP, r0
 800db62:	f04f 0000 	mov.w	r0, #0
 800db66:	f380 8814 	msr	CONTROL, r0
 800db6a:	b662      	cpsie	i
 800db6c:	b661      	cpsie	f
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	df00      	svc	0
 800db78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db7a:	bf00      	nop
 800db7c:	e000ed08 	.word	0xe000ed08

0800db80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db86:	4b46      	ldr	r3, [pc, #280]	; (800dca0 <xPortStartScheduler+0x120>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a46      	ldr	r2, [pc, #280]	; (800dca4 <xPortStartScheduler+0x124>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d10a      	bne.n	800dba6 <xPortStartScheduler+0x26>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	613b      	str	r3, [r7, #16]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dba6:	4b3e      	ldr	r3, [pc, #248]	; (800dca0 <xPortStartScheduler+0x120>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a3f      	ldr	r2, [pc, #252]	; (800dca8 <xPortStartScheduler+0x128>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d10a      	bne.n	800dbc6 <xPortStartScheduler+0x46>
	__asm volatile
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	60fb      	str	r3, [r7, #12]
}
 800dbc2:	bf00      	nop
 800dbc4:	e7fe      	b.n	800dbc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dbc6:	4b39      	ldr	r3, [pc, #228]	; (800dcac <xPortStartScheduler+0x12c>)
 800dbc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	22ff      	movs	r2, #255	; 0xff
 800dbd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	4b31      	ldr	r3, [pc, #196]	; (800dcb0 <xPortStartScheduler+0x130>)
 800dbec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dbee:	4b31      	ldr	r3, [pc, #196]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dbf0:	2207      	movs	r2, #7
 800dbf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbf4:	e009      	b.n	800dc0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dbf6:	4b2f      	ldr	r3, [pc, #188]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	4a2d      	ldr	r2, [pc, #180]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dbfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	005b      	lsls	r3, r3, #1
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc0a:	78fb      	ldrb	r3, [r7, #3]
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc12:	2b80      	cmp	r3, #128	; 0x80
 800dc14:	d0ef      	beq.n	800dbf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc16:	4b27      	ldr	r3, [pc, #156]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f1c3 0307 	rsb	r3, r3, #7
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d00a      	beq.n	800dc38 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	60bb      	str	r3, [r7, #8]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc38:	4b1e      	ldr	r3, [pc, #120]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	021b      	lsls	r3, r3, #8
 800dc3e:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc42:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc4a:	4a1a      	ldr	r2, [pc, #104]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc56:	4b18      	ldr	r3, [pc, #96]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a17      	ldr	r2, [pc, #92]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a14      	ldr	r2, [pc, #80]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc6e:	f000 f8dd 	bl	800de2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc72:	4b12      	ldr	r3, [pc, #72]	; (800dcbc <xPortStartScheduler+0x13c>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc78:	f000 f8fc 	bl	800de74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc7c:	4b10      	ldr	r3, [pc, #64]	; (800dcc0 <xPortStartScheduler+0x140>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a0f      	ldr	r2, [pc, #60]	; (800dcc0 <xPortStartScheduler+0x140>)
 800dc82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc88:	f7ff ff66 	bl	800db58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc8c:	f7ff fa50 	bl	800d130 <vTaskSwitchContext>
	prvTaskExitError();
 800dc90:	f7ff ff22 	bl	800dad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3718      	adds	r7, #24
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	e000ed00 	.word	0xe000ed00
 800dca4:	410fc271 	.word	0x410fc271
 800dca8:	410fc270 	.word	0x410fc270
 800dcac:	e000e400 	.word	0xe000e400
 800dcb0:	200008b4 	.word	0x200008b4
 800dcb4:	200008b8 	.word	0x200008b8
 800dcb8:	e000ed20 	.word	0xe000ed20
 800dcbc:	200002c8 	.word	0x200002c8
 800dcc0:	e000ef34 	.word	0xe000ef34

0800dcc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	607b      	str	r3, [r7, #4]
}
 800dcdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <vPortEnterCritical+0x58>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	4a0d      	ldr	r2, [pc, #52]	; (800dd1c <vPortEnterCritical+0x58>)
 800dce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dce8:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <vPortEnterCritical+0x58>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d10f      	bne.n	800dd10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dcf0:	4b0b      	ldr	r3, [pc, #44]	; (800dd20 <vPortEnterCritical+0x5c>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <vPortEnterCritical+0x4c>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	603b      	str	r3, [r7, #0]
}
 800dd0c:	bf00      	nop
 800dd0e:	e7fe      	b.n	800dd0e <vPortEnterCritical+0x4a>
	}
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	200002c8 	.word	0x200002c8
 800dd20:	e000ed04 	.word	0xe000ed04

0800dd24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd2a:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <vPortExitCritical+0x50>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10a      	bne.n	800dd48 <vPortExitCritical+0x24>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	607b      	str	r3, [r7, #4]
}
 800dd44:	bf00      	nop
 800dd46:	e7fe      	b.n	800dd46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd48:	4b0a      	ldr	r3, [pc, #40]	; (800dd74 <vPortExitCritical+0x50>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	4a09      	ldr	r2, [pc, #36]	; (800dd74 <vPortExitCritical+0x50>)
 800dd50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd52:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <vPortExitCritical+0x50>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d105      	bne.n	800dd66 <vPortExitCritical+0x42>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	200002c8 	.word	0x200002c8
	...

0800dd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd80:	f3ef 8009 	mrs	r0, PSP
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	4b15      	ldr	r3, [pc, #84]	; (800dde0 <pxCurrentTCBConst>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	f01e 0f10 	tst.w	lr, #16
 800dd90:	bf08      	it	eq
 800dd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9a:	6010      	str	r0, [r2, #0]
 800dd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dda0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dda4:	f380 8811 	msr	BASEPRI, r0
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f7ff f9be 	bl	800d130 <vTaskSwitchContext>
 800ddb4:	f04f 0000 	mov.w	r0, #0
 800ddb8:	f380 8811 	msr	BASEPRI, r0
 800ddbc:	bc09      	pop	{r0, r3}
 800ddbe:	6819      	ldr	r1, [r3, #0]
 800ddc0:	6808      	ldr	r0, [r1, #0]
 800ddc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc6:	f01e 0f10 	tst.w	lr, #16
 800ddca:	bf08      	it	eq
 800ddcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ddd0:	f380 8809 	msr	PSP, r0
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	f3af 8000 	nop.w

0800dde0 <pxCurrentTCBConst>:
 800dde0:	20000788 	.word	0x20000788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop

0800dde8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	607b      	str	r3, [r7, #4]
}
 800de00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de02:	f7ff f8dd 	bl	800cfc0 <xTaskIncrementTick>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <SysTick_Handler+0x40>)
 800de0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	2300      	movs	r3, #0
 800de16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	f383 8811 	msr	BASEPRI, r3
}
 800de1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de20:	bf00      	nop
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <vPortSetupTimerInterrupt+0x34>)
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de36:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <vPortSetupTimerInterrupt+0x38>)
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de3c:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <vPortSetupTimerInterrupt+0x3c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a0a      	ldr	r2, [pc, #40]	; (800de6c <vPortSetupTimerInterrupt+0x40>)
 800de42:	fba2 2303 	umull	r2, r3, r2, r3
 800de46:	099b      	lsrs	r3, r3, #6
 800de48:	4a09      	ldr	r2, [pc, #36]	; (800de70 <vPortSetupTimerInterrupt+0x44>)
 800de4a:	3b01      	subs	r3, #1
 800de4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de4e:	4b04      	ldr	r3, [pc, #16]	; (800de60 <vPortSetupTimerInterrupt+0x34>)
 800de50:	2207      	movs	r2, #7
 800de52:	601a      	str	r2, [r3, #0]
}
 800de54:	bf00      	nop
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	e000e010 	.word	0xe000e010
 800de64:	e000e018 	.word	0xe000e018
 800de68:	20000000 	.word	0x20000000
 800de6c:	10624dd3 	.word	0x10624dd3
 800de70:	e000e014 	.word	0xe000e014

0800de74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de84 <vPortEnableVFP+0x10>
 800de78:	6801      	ldr	r1, [r0, #0]
 800de7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de7e:	6001      	str	r1, [r0, #0]
 800de80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de82:	bf00      	nop
 800de84:	e000ed88 	.word	0xe000ed88

0800de88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08a      	sub	sp, #40	; 0x28
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de90:	2300      	movs	r3, #0
 800de92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de94:	f7fe ffea 	bl	800ce6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de98:	4b5b      	ldr	r3, [pc, #364]	; (800e008 <pvPortMalloc+0x180>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dea0:	f000 f920 	bl	800e0e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dea4:	4b59      	ldr	r3, [pc, #356]	; (800e00c <pvPortMalloc+0x184>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4013      	ands	r3, r2
 800deac:	2b00      	cmp	r3, #0
 800deae:	f040 8093 	bne.w	800dfd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d01d      	beq.n	800def4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800deb8:	2208      	movs	r2, #8
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4413      	add	r3, r2
 800debe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f003 0307 	and.w	r3, r3, #7
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d014      	beq.n	800def4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f023 0307 	bic.w	r3, r3, #7
 800ded0:	3308      	adds	r3, #8
 800ded2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f003 0307 	and.w	r3, r3, #7
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00a      	beq.n	800def4 <pvPortMalloc+0x6c>
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	617b      	str	r3, [r7, #20]
}
 800def0:	bf00      	nop
 800def2:	e7fe      	b.n	800def2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d06e      	beq.n	800dfd8 <pvPortMalloc+0x150>
 800defa:	4b45      	ldr	r3, [pc, #276]	; (800e010 <pvPortMalloc+0x188>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	429a      	cmp	r2, r3
 800df02:	d869      	bhi.n	800dfd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800df04:	4b43      	ldr	r3, [pc, #268]	; (800e014 <pvPortMalloc+0x18c>)
 800df06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800df08:	4b42      	ldr	r3, [pc, #264]	; (800e014 <pvPortMalloc+0x18c>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df0e:	e004      	b.n	800df1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	429a      	cmp	r2, r3
 800df22:	d903      	bls.n	800df2c <pvPortMalloc+0xa4>
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1f1      	bne.n	800df10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df2c:	4b36      	ldr	r3, [pc, #216]	; (800e008 <pvPortMalloc+0x180>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df32:	429a      	cmp	r2, r3
 800df34:	d050      	beq.n	800dfd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2208      	movs	r2, #8
 800df3c:	4413      	add	r3, r2
 800df3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	1ad2      	subs	r2, r2, r3
 800df50:	2308      	movs	r3, #8
 800df52:	005b      	lsls	r3, r3, #1
 800df54:	429a      	cmp	r2, r3
 800df56:	d91f      	bls.n	800df98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4413      	add	r3, r2
 800df5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <pvPortMalloc+0xf8>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	613b      	str	r3, [r7, #16]
}
 800df7c:	bf00      	nop
 800df7e:	e7fe      	b.n	800df7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	1ad2      	subs	r2, r2, r3
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df92:	69b8      	ldr	r0, [r7, #24]
 800df94:	f000 f908 	bl	800e1a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df98:	4b1d      	ldr	r3, [pc, #116]	; (800e010 <pvPortMalloc+0x188>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	4a1b      	ldr	r2, [pc, #108]	; (800e010 <pvPortMalloc+0x188>)
 800dfa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dfa6:	4b1a      	ldr	r3, [pc, #104]	; (800e010 <pvPortMalloc+0x188>)
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	4b1b      	ldr	r3, [pc, #108]	; (800e018 <pvPortMalloc+0x190>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d203      	bcs.n	800dfba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dfb2:	4b17      	ldr	r3, [pc, #92]	; (800e010 <pvPortMalloc+0x188>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a18      	ldr	r2, [pc, #96]	; (800e018 <pvPortMalloc+0x190>)
 800dfb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	4b13      	ldr	r3, [pc, #76]	; (800e00c <pvPortMalloc+0x184>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dfce:	4b13      	ldr	r3, [pc, #76]	; (800e01c <pvPortMalloc+0x194>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	4a11      	ldr	r2, [pc, #68]	; (800e01c <pvPortMalloc+0x194>)
 800dfd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dfd8:	f7fe ff56 	bl	800ce88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	f003 0307 	and.w	r3, r3, #7
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <pvPortMalloc+0x174>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	60fb      	str	r3, [r7, #12]
}
 800dff8:	bf00      	nop
 800dffa:	e7fe      	b.n	800dffa <pvPortMalloc+0x172>
	return pvReturn;
 800dffc:	69fb      	ldr	r3, [r7, #28]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3728      	adds	r7, #40	; 0x28
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	200044c4 	.word	0x200044c4
 800e00c:	200044d8 	.word	0x200044d8
 800e010:	200044c8 	.word	0x200044c8
 800e014:	200044bc 	.word	0x200044bc
 800e018:	200044cc 	.word	0x200044cc
 800e01c:	200044d0 	.word	0x200044d0

0800e020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d04d      	beq.n	800e0ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e032:	2308      	movs	r3, #8
 800e034:	425b      	negs	r3, r3
 800e036:	697a      	ldr	r2, [r7, #20]
 800e038:	4413      	add	r3, r2
 800e03a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	685a      	ldr	r2, [r3, #4]
 800e044:	4b24      	ldr	r3, [pc, #144]	; (800e0d8 <vPortFree+0xb8>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4013      	ands	r3, r2
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10a      	bne.n	800e064 <vPortFree+0x44>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	60fb      	str	r3, [r7, #12]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00a      	beq.n	800e082 <vPortFree+0x62>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	60bb      	str	r3, [r7, #8]
}
 800e07e:	bf00      	nop
 800e080:	e7fe      	b.n	800e080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	4b14      	ldr	r3, [pc, #80]	; (800e0d8 <vPortFree+0xb8>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4013      	ands	r3, r2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d01e      	beq.n	800e0ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d11a      	bne.n	800e0ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	4b0e      	ldr	r3, [pc, #56]	; (800e0d8 <vPortFree+0xb8>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	43db      	mvns	r3, r3
 800e0a2:	401a      	ands	r2, r3
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e0a8:	f7fe fee0 	bl	800ce6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	685a      	ldr	r2, [r3, #4]
 800e0b0:	4b0a      	ldr	r3, [pc, #40]	; (800e0dc <vPortFree+0xbc>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	4a09      	ldr	r2, [pc, #36]	; (800e0dc <vPortFree+0xbc>)
 800e0b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e0ba:	6938      	ldr	r0, [r7, #16]
 800e0bc:	f000 f874 	bl	800e1a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <vPortFree+0xc0>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	4a06      	ldr	r2, [pc, #24]	; (800e0e0 <vPortFree+0xc0>)
 800e0c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e0ca:	f7fe fedd 	bl	800ce88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e0ce:	bf00      	nop
 800e0d0:	3718      	adds	r7, #24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200044d8 	.word	0x200044d8
 800e0dc:	200044c8 	.word	0x200044c8
 800e0e0:	200044d4 	.word	0x200044d4

0800e0e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e0ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e0ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e0f0:	4b27      	ldr	r3, [pc, #156]	; (800e190 <prvHeapInit+0xac>)
 800e0f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00c      	beq.n	800e118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3307      	adds	r3, #7
 800e102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f023 0307 	bic.w	r3, r3, #7
 800e10a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	4a1f      	ldr	r2, [pc, #124]	; (800e190 <prvHeapInit+0xac>)
 800e114:	4413      	add	r3, r2
 800e116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e11c:	4a1d      	ldr	r2, [pc, #116]	; (800e194 <prvHeapInit+0xb0>)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e122:	4b1c      	ldr	r3, [pc, #112]	; (800e194 <prvHeapInit+0xb0>)
 800e124:	2200      	movs	r2, #0
 800e126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	4413      	add	r3, r2
 800e12e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e130:	2208      	movs	r2, #8
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	1a9b      	subs	r3, r3, r2
 800e136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f023 0307 	bic.w	r3, r3, #7
 800e13e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	4a15      	ldr	r2, [pc, #84]	; (800e198 <prvHeapInit+0xb4>)
 800e144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e146:	4b14      	ldr	r3, [pc, #80]	; (800e198 <prvHeapInit+0xb4>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2200      	movs	r2, #0
 800e14c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e14e:	4b12      	ldr	r3, [pc, #72]	; (800e198 <prvHeapInit+0xb4>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	1ad2      	subs	r2, r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e164:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <prvHeapInit+0xb4>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	4a0a      	ldr	r2, [pc, #40]	; (800e19c <prvHeapInit+0xb8>)
 800e172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	4a09      	ldr	r2, [pc, #36]	; (800e1a0 <prvHeapInit+0xbc>)
 800e17a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e17c:	4b09      	ldr	r3, [pc, #36]	; (800e1a4 <prvHeapInit+0xc0>)
 800e17e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e182:	601a      	str	r2, [r3, #0]
}
 800e184:	bf00      	nop
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	200008bc 	.word	0x200008bc
 800e194:	200044bc 	.word	0x200044bc
 800e198:	200044c4 	.word	0x200044c4
 800e19c:	200044cc 	.word	0x200044cc
 800e1a0:	200044c8 	.word	0x200044c8
 800e1a4:	200044d8 	.word	0x200044d8

0800e1a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1b0:	4b28      	ldr	r3, [pc, #160]	; (800e254 <prvInsertBlockIntoFreeList+0xac>)
 800e1b2:	60fb      	str	r3, [r7, #12]
 800e1b4:	e002      	b.n	800e1bc <prvInsertBlockIntoFreeList+0x14>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	60fb      	str	r3, [r7, #12]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d8f7      	bhi.n	800e1b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d108      	bne.n	800e1ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	441a      	add	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	441a      	add	r2, r3
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d118      	bne.n	800e230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <prvInsertBlockIntoFreeList+0xb0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	429a      	cmp	r2, r3
 800e208:	d00d      	beq.n	800e226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	441a      	add	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	e008      	b.n	800e238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e226:	4b0c      	ldr	r3, [pc, #48]	; (800e258 <prvInsertBlockIntoFreeList+0xb0>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	e003      	b.n	800e238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d002      	beq.n	800e246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e246:	bf00      	nop
 800e248:	3714      	adds	r7, #20
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	200044bc 	.word	0x200044bc
 800e258:	200044c4 	.word	0x200044c4

0800e25c <__errno>:
 800e25c:	4b01      	ldr	r3, [pc, #4]	; (800e264 <__errno+0x8>)
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	200002cc 	.word	0x200002cc

0800e268 <std>:
 800e268:	2300      	movs	r3, #0
 800e26a:	b510      	push	{r4, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	e9c0 3300 	strd	r3, r3, [r0]
 800e272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e276:	6083      	str	r3, [r0, #8]
 800e278:	8181      	strh	r1, [r0, #12]
 800e27a:	6643      	str	r3, [r0, #100]	; 0x64
 800e27c:	81c2      	strh	r2, [r0, #14]
 800e27e:	6183      	str	r3, [r0, #24]
 800e280:	4619      	mov	r1, r3
 800e282:	2208      	movs	r2, #8
 800e284:	305c      	adds	r0, #92	; 0x5c
 800e286:	f000 f91a 	bl	800e4be <memset>
 800e28a:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <std+0x38>)
 800e28c:	6263      	str	r3, [r4, #36]	; 0x24
 800e28e:	4b05      	ldr	r3, [pc, #20]	; (800e2a4 <std+0x3c>)
 800e290:	62a3      	str	r3, [r4, #40]	; 0x28
 800e292:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <std+0x40>)
 800e294:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e296:	4b05      	ldr	r3, [pc, #20]	; (800e2ac <std+0x44>)
 800e298:	6224      	str	r4, [r4, #32]
 800e29a:	6323      	str	r3, [r4, #48]	; 0x30
 800e29c:	bd10      	pop	{r4, pc}
 800e29e:	bf00      	nop
 800e2a0:	0800f0a9 	.word	0x0800f0a9
 800e2a4:	0800f0cb 	.word	0x0800f0cb
 800e2a8:	0800f103 	.word	0x0800f103
 800e2ac:	0800f127 	.word	0x0800f127

0800e2b0 <_cleanup_r>:
 800e2b0:	4901      	ldr	r1, [pc, #4]	; (800e2b8 <_cleanup_r+0x8>)
 800e2b2:	f000 b8af 	b.w	800e414 <_fwalk_reent>
 800e2b6:	bf00      	nop
 800e2b8:	08010105 	.word	0x08010105

0800e2bc <__sfmoreglue>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	1e4a      	subs	r2, r1, #1
 800e2c0:	2568      	movs	r5, #104	; 0x68
 800e2c2:	4355      	muls	r5, r2
 800e2c4:	460e      	mov	r6, r1
 800e2c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e2ca:	f000 f901 	bl	800e4d0 <_malloc_r>
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	b140      	cbz	r0, 800e2e4 <__sfmoreglue+0x28>
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e2d8:	300c      	adds	r0, #12
 800e2da:	60a0      	str	r0, [r4, #8]
 800e2dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2e0:	f000 f8ed 	bl	800e4be <memset>
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}

0800e2e8 <__sfp_lock_acquire>:
 800e2e8:	4801      	ldr	r0, [pc, #4]	; (800e2f0 <__sfp_lock_acquire+0x8>)
 800e2ea:	f000 b8d8 	b.w	800e49e <__retarget_lock_acquire_recursive>
 800e2ee:	bf00      	nop
 800e2f0:	20004d04 	.word	0x20004d04

0800e2f4 <__sfp_lock_release>:
 800e2f4:	4801      	ldr	r0, [pc, #4]	; (800e2fc <__sfp_lock_release+0x8>)
 800e2f6:	f000 b8d3 	b.w	800e4a0 <__retarget_lock_release_recursive>
 800e2fa:	bf00      	nop
 800e2fc:	20004d04 	.word	0x20004d04

0800e300 <__sinit_lock_acquire>:
 800e300:	4801      	ldr	r0, [pc, #4]	; (800e308 <__sinit_lock_acquire+0x8>)
 800e302:	f000 b8cc 	b.w	800e49e <__retarget_lock_acquire_recursive>
 800e306:	bf00      	nop
 800e308:	20004cff 	.word	0x20004cff

0800e30c <__sinit_lock_release>:
 800e30c:	4801      	ldr	r0, [pc, #4]	; (800e314 <__sinit_lock_release+0x8>)
 800e30e:	f000 b8c7 	b.w	800e4a0 <__retarget_lock_release_recursive>
 800e312:	bf00      	nop
 800e314:	20004cff 	.word	0x20004cff

0800e318 <__sinit>:
 800e318:	b510      	push	{r4, lr}
 800e31a:	4604      	mov	r4, r0
 800e31c:	f7ff fff0 	bl	800e300 <__sinit_lock_acquire>
 800e320:	69a3      	ldr	r3, [r4, #24]
 800e322:	b11b      	cbz	r3, 800e32c <__sinit+0x14>
 800e324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e328:	f7ff bff0 	b.w	800e30c <__sinit_lock_release>
 800e32c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e330:	6523      	str	r3, [r4, #80]	; 0x50
 800e332:	4b13      	ldr	r3, [pc, #76]	; (800e380 <__sinit+0x68>)
 800e334:	4a13      	ldr	r2, [pc, #76]	; (800e384 <__sinit+0x6c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	62a2      	str	r2, [r4, #40]	; 0x28
 800e33a:	42a3      	cmp	r3, r4
 800e33c:	bf04      	itt	eq
 800e33e:	2301      	moveq	r3, #1
 800e340:	61a3      	streq	r3, [r4, #24]
 800e342:	4620      	mov	r0, r4
 800e344:	f000 f820 	bl	800e388 <__sfp>
 800e348:	6060      	str	r0, [r4, #4]
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 f81c 	bl	800e388 <__sfp>
 800e350:	60a0      	str	r0, [r4, #8]
 800e352:	4620      	mov	r0, r4
 800e354:	f000 f818 	bl	800e388 <__sfp>
 800e358:	2200      	movs	r2, #0
 800e35a:	60e0      	str	r0, [r4, #12]
 800e35c:	2104      	movs	r1, #4
 800e35e:	6860      	ldr	r0, [r4, #4]
 800e360:	f7ff ff82 	bl	800e268 <std>
 800e364:	68a0      	ldr	r0, [r4, #8]
 800e366:	2201      	movs	r2, #1
 800e368:	2109      	movs	r1, #9
 800e36a:	f7ff ff7d 	bl	800e268 <std>
 800e36e:	68e0      	ldr	r0, [r4, #12]
 800e370:	2202      	movs	r2, #2
 800e372:	2112      	movs	r1, #18
 800e374:	f7ff ff78 	bl	800e268 <std>
 800e378:	2301      	movs	r3, #1
 800e37a:	61a3      	str	r3, [r4, #24]
 800e37c:	e7d2      	b.n	800e324 <__sinit+0xc>
 800e37e:	bf00      	nop
 800e380:	08011b28 	.word	0x08011b28
 800e384:	0800e2b1 	.word	0x0800e2b1

0800e388 <__sfp>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	4607      	mov	r7, r0
 800e38c:	f7ff ffac 	bl	800e2e8 <__sfp_lock_acquire>
 800e390:	4b1e      	ldr	r3, [pc, #120]	; (800e40c <__sfp+0x84>)
 800e392:	681e      	ldr	r6, [r3, #0]
 800e394:	69b3      	ldr	r3, [r6, #24]
 800e396:	b913      	cbnz	r3, 800e39e <__sfp+0x16>
 800e398:	4630      	mov	r0, r6
 800e39a:	f7ff ffbd 	bl	800e318 <__sinit>
 800e39e:	3648      	adds	r6, #72	; 0x48
 800e3a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	d503      	bpl.n	800e3b0 <__sfp+0x28>
 800e3a8:	6833      	ldr	r3, [r6, #0]
 800e3aa:	b30b      	cbz	r3, 800e3f0 <__sfp+0x68>
 800e3ac:	6836      	ldr	r6, [r6, #0]
 800e3ae:	e7f7      	b.n	800e3a0 <__sfp+0x18>
 800e3b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e3b4:	b9d5      	cbnz	r5, 800e3ec <__sfp+0x64>
 800e3b6:	4b16      	ldr	r3, [pc, #88]	; (800e410 <__sfp+0x88>)
 800e3b8:	60e3      	str	r3, [r4, #12]
 800e3ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3be:	6665      	str	r5, [r4, #100]	; 0x64
 800e3c0:	f000 f86c 	bl	800e49c <__retarget_lock_init_recursive>
 800e3c4:	f7ff ff96 	bl	800e2f4 <__sfp_lock_release>
 800e3c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e3cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e3d0:	6025      	str	r5, [r4, #0]
 800e3d2:	61a5      	str	r5, [r4, #24]
 800e3d4:	2208      	movs	r2, #8
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3dc:	f000 f86f 	bl	800e4be <memset>
 800e3e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ec:	3468      	adds	r4, #104	; 0x68
 800e3ee:	e7d9      	b.n	800e3a4 <__sfp+0x1c>
 800e3f0:	2104      	movs	r1, #4
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f7ff ff62 	bl	800e2bc <__sfmoreglue>
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	6030      	str	r0, [r6, #0]
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d1d5      	bne.n	800e3ac <__sfp+0x24>
 800e400:	f7ff ff78 	bl	800e2f4 <__sfp_lock_release>
 800e404:	230c      	movs	r3, #12
 800e406:	603b      	str	r3, [r7, #0]
 800e408:	e7ee      	b.n	800e3e8 <__sfp+0x60>
 800e40a:	bf00      	nop
 800e40c:	08011b28 	.word	0x08011b28
 800e410:	ffff0001 	.word	0xffff0001

0800e414 <_fwalk_reent>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4606      	mov	r6, r0
 800e41a:	4688      	mov	r8, r1
 800e41c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e420:	2700      	movs	r7, #0
 800e422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e426:	f1b9 0901 	subs.w	r9, r9, #1
 800e42a:	d505      	bpl.n	800e438 <_fwalk_reent+0x24>
 800e42c:	6824      	ldr	r4, [r4, #0]
 800e42e:	2c00      	cmp	r4, #0
 800e430:	d1f7      	bne.n	800e422 <_fwalk_reent+0xe>
 800e432:	4638      	mov	r0, r7
 800e434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e438:	89ab      	ldrh	r3, [r5, #12]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d907      	bls.n	800e44e <_fwalk_reent+0x3a>
 800e43e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e442:	3301      	adds	r3, #1
 800e444:	d003      	beq.n	800e44e <_fwalk_reent+0x3a>
 800e446:	4629      	mov	r1, r5
 800e448:	4630      	mov	r0, r6
 800e44a:	47c0      	blx	r8
 800e44c:	4307      	orrs	r7, r0
 800e44e:	3568      	adds	r5, #104	; 0x68
 800e450:	e7e9      	b.n	800e426 <_fwalk_reent+0x12>
	...

0800e454 <__libc_init_array>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	4d0d      	ldr	r5, [pc, #52]	; (800e48c <__libc_init_array+0x38>)
 800e458:	4c0d      	ldr	r4, [pc, #52]	; (800e490 <__libc_init_array+0x3c>)
 800e45a:	1b64      	subs	r4, r4, r5
 800e45c:	10a4      	asrs	r4, r4, #2
 800e45e:	2600      	movs	r6, #0
 800e460:	42a6      	cmp	r6, r4
 800e462:	d109      	bne.n	800e478 <__libc_init_array+0x24>
 800e464:	4d0b      	ldr	r5, [pc, #44]	; (800e494 <__libc_init_array+0x40>)
 800e466:	4c0c      	ldr	r4, [pc, #48]	; (800e498 <__libc_init_array+0x44>)
 800e468:	f003 f898 	bl	801159c <_init>
 800e46c:	1b64      	subs	r4, r4, r5
 800e46e:	10a4      	asrs	r4, r4, #2
 800e470:	2600      	movs	r6, #0
 800e472:	42a6      	cmp	r6, r4
 800e474:	d105      	bne.n	800e482 <__libc_init_array+0x2e>
 800e476:	bd70      	pop	{r4, r5, r6, pc}
 800e478:	f855 3b04 	ldr.w	r3, [r5], #4
 800e47c:	4798      	blx	r3
 800e47e:	3601      	adds	r6, #1
 800e480:	e7ee      	b.n	800e460 <__libc_init_array+0xc>
 800e482:	f855 3b04 	ldr.w	r3, [r5], #4
 800e486:	4798      	blx	r3
 800e488:	3601      	adds	r6, #1
 800e48a:	e7f2      	b.n	800e472 <__libc_init_array+0x1e>
 800e48c:	08011ee8 	.word	0x08011ee8
 800e490:	08011ee8 	.word	0x08011ee8
 800e494:	08011ee8 	.word	0x08011ee8
 800e498:	08011eec 	.word	0x08011eec

0800e49c <__retarget_lock_init_recursive>:
 800e49c:	4770      	bx	lr

0800e49e <__retarget_lock_acquire_recursive>:
 800e49e:	4770      	bx	lr

0800e4a0 <__retarget_lock_release_recursive>:
 800e4a0:	4770      	bx	lr

0800e4a2 <memcpy>:
 800e4a2:	440a      	add	r2, r1
 800e4a4:	4291      	cmp	r1, r2
 800e4a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4aa:	d100      	bne.n	800e4ae <memcpy+0xc>
 800e4ac:	4770      	bx	lr
 800e4ae:	b510      	push	{r4, lr}
 800e4b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4b8:	4291      	cmp	r1, r2
 800e4ba:	d1f9      	bne.n	800e4b0 <memcpy+0xe>
 800e4bc:	bd10      	pop	{r4, pc}

0800e4be <memset>:
 800e4be:	4402      	add	r2, r0
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d100      	bne.n	800e4c8 <memset+0xa>
 800e4c6:	4770      	bx	lr
 800e4c8:	f803 1b01 	strb.w	r1, [r3], #1
 800e4cc:	e7f9      	b.n	800e4c2 <memset+0x4>
	...

0800e4d0 <_malloc_r>:
 800e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d2:	1ccd      	adds	r5, r1, #3
 800e4d4:	f025 0503 	bic.w	r5, r5, #3
 800e4d8:	3508      	adds	r5, #8
 800e4da:	2d0c      	cmp	r5, #12
 800e4dc:	bf38      	it	cc
 800e4de:	250c      	movcc	r5, #12
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	db01      	blt.n	800e4ea <_malloc_r+0x1a>
 800e4e6:	42a9      	cmp	r1, r5
 800e4e8:	d903      	bls.n	800e4f2 <_malloc_r+0x22>
 800e4ea:	230c      	movs	r3, #12
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4f2:	f001 fec5 	bl	8010280 <__malloc_lock>
 800e4f6:	4921      	ldr	r1, [pc, #132]	; (800e57c <_malloc_r+0xac>)
 800e4f8:	680a      	ldr	r2, [r1, #0]
 800e4fa:	4614      	mov	r4, r2
 800e4fc:	b99c      	cbnz	r4, 800e526 <_malloc_r+0x56>
 800e4fe:	4f20      	ldr	r7, [pc, #128]	; (800e580 <_malloc_r+0xb0>)
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	b923      	cbnz	r3, 800e50e <_malloc_r+0x3e>
 800e504:	4621      	mov	r1, r4
 800e506:	4630      	mov	r0, r6
 800e508:	f000 fd9e 	bl	800f048 <_sbrk_r>
 800e50c:	6038      	str	r0, [r7, #0]
 800e50e:	4629      	mov	r1, r5
 800e510:	4630      	mov	r0, r6
 800e512:	f000 fd99 	bl	800f048 <_sbrk_r>
 800e516:	1c43      	adds	r3, r0, #1
 800e518:	d123      	bne.n	800e562 <_malloc_r+0x92>
 800e51a:	230c      	movs	r3, #12
 800e51c:	6033      	str	r3, [r6, #0]
 800e51e:	4630      	mov	r0, r6
 800e520:	f001 feb4 	bl	801028c <__malloc_unlock>
 800e524:	e7e3      	b.n	800e4ee <_malloc_r+0x1e>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	1b5b      	subs	r3, r3, r5
 800e52a:	d417      	bmi.n	800e55c <_malloc_r+0x8c>
 800e52c:	2b0b      	cmp	r3, #11
 800e52e:	d903      	bls.n	800e538 <_malloc_r+0x68>
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	441c      	add	r4, r3
 800e534:	6025      	str	r5, [r4, #0]
 800e536:	e004      	b.n	800e542 <_malloc_r+0x72>
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	42a2      	cmp	r2, r4
 800e53c:	bf0c      	ite	eq
 800e53e:	600b      	streq	r3, [r1, #0]
 800e540:	6053      	strne	r3, [r2, #4]
 800e542:	4630      	mov	r0, r6
 800e544:	f001 fea2 	bl	801028c <__malloc_unlock>
 800e548:	f104 000b 	add.w	r0, r4, #11
 800e54c:	1d23      	adds	r3, r4, #4
 800e54e:	f020 0007 	bic.w	r0, r0, #7
 800e552:	1ac2      	subs	r2, r0, r3
 800e554:	d0cc      	beq.n	800e4f0 <_malloc_r+0x20>
 800e556:	1a1b      	subs	r3, r3, r0
 800e558:	50a3      	str	r3, [r4, r2]
 800e55a:	e7c9      	b.n	800e4f0 <_malloc_r+0x20>
 800e55c:	4622      	mov	r2, r4
 800e55e:	6864      	ldr	r4, [r4, #4]
 800e560:	e7cc      	b.n	800e4fc <_malloc_r+0x2c>
 800e562:	1cc4      	adds	r4, r0, #3
 800e564:	f024 0403 	bic.w	r4, r4, #3
 800e568:	42a0      	cmp	r0, r4
 800e56a:	d0e3      	beq.n	800e534 <_malloc_r+0x64>
 800e56c:	1a21      	subs	r1, r4, r0
 800e56e:	4630      	mov	r0, r6
 800e570:	f000 fd6a 	bl	800f048 <_sbrk_r>
 800e574:	3001      	adds	r0, #1
 800e576:	d1dd      	bne.n	800e534 <_malloc_r+0x64>
 800e578:	e7cf      	b.n	800e51a <_malloc_r+0x4a>
 800e57a:	bf00      	nop
 800e57c:	200044dc 	.word	0x200044dc
 800e580:	200044e0 	.word	0x200044e0

0800e584 <__cvt>:
 800e584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e588:	ec55 4b10 	vmov	r4, r5, d0
 800e58c:	2d00      	cmp	r5, #0
 800e58e:	460e      	mov	r6, r1
 800e590:	4619      	mov	r1, r3
 800e592:	462b      	mov	r3, r5
 800e594:	bfbb      	ittet	lt
 800e596:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e59a:	461d      	movlt	r5, r3
 800e59c:	2300      	movge	r3, #0
 800e59e:	232d      	movlt	r3, #45	; 0x2d
 800e5a0:	700b      	strb	r3, [r1, #0]
 800e5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e5a8:	4691      	mov	r9, r2
 800e5aa:	f023 0820 	bic.w	r8, r3, #32
 800e5ae:	bfbc      	itt	lt
 800e5b0:	4622      	movlt	r2, r4
 800e5b2:	4614      	movlt	r4, r2
 800e5b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5b8:	d005      	beq.n	800e5c6 <__cvt+0x42>
 800e5ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e5be:	d100      	bne.n	800e5c2 <__cvt+0x3e>
 800e5c0:	3601      	adds	r6, #1
 800e5c2:	2102      	movs	r1, #2
 800e5c4:	e000      	b.n	800e5c8 <__cvt+0x44>
 800e5c6:	2103      	movs	r1, #3
 800e5c8:	ab03      	add	r3, sp, #12
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	ab02      	add	r3, sp, #8
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	ec45 4b10 	vmov	d0, r4, r5
 800e5d4:	4653      	mov	r3, sl
 800e5d6:	4632      	mov	r2, r6
 800e5d8:	f000 ff22 	bl	800f420 <_dtoa_r>
 800e5dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	d102      	bne.n	800e5ea <__cvt+0x66>
 800e5e4:	f019 0f01 	tst.w	r9, #1
 800e5e8:	d022      	beq.n	800e630 <__cvt+0xac>
 800e5ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5ee:	eb07 0906 	add.w	r9, r7, r6
 800e5f2:	d110      	bne.n	800e616 <__cvt+0x92>
 800e5f4:	783b      	ldrb	r3, [r7, #0]
 800e5f6:	2b30      	cmp	r3, #48	; 0x30
 800e5f8:	d10a      	bne.n	800e610 <__cvt+0x8c>
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	4620      	mov	r0, r4
 800e600:	4629      	mov	r1, r5
 800e602:	f7f2 fa69 	bl	8000ad8 <__aeabi_dcmpeq>
 800e606:	b918      	cbnz	r0, 800e610 <__cvt+0x8c>
 800e608:	f1c6 0601 	rsb	r6, r6, #1
 800e60c:	f8ca 6000 	str.w	r6, [sl]
 800e610:	f8da 3000 	ldr.w	r3, [sl]
 800e614:	4499      	add	r9, r3
 800e616:	2200      	movs	r2, #0
 800e618:	2300      	movs	r3, #0
 800e61a:	4620      	mov	r0, r4
 800e61c:	4629      	mov	r1, r5
 800e61e:	f7f2 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e622:	b108      	cbz	r0, 800e628 <__cvt+0xa4>
 800e624:	f8cd 900c 	str.w	r9, [sp, #12]
 800e628:	2230      	movs	r2, #48	; 0x30
 800e62a:	9b03      	ldr	r3, [sp, #12]
 800e62c:	454b      	cmp	r3, r9
 800e62e:	d307      	bcc.n	800e640 <__cvt+0xbc>
 800e630:	9b03      	ldr	r3, [sp, #12]
 800e632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e634:	1bdb      	subs	r3, r3, r7
 800e636:	4638      	mov	r0, r7
 800e638:	6013      	str	r3, [r2, #0]
 800e63a:	b004      	add	sp, #16
 800e63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e640:	1c59      	adds	r1, r3, #1
 800e642:	9103      	str	r1, [sp, #12]
 800e644:	701a      	strb	r2, [r3, #0]
 800e646:	e7f0      	b.n	800e62a <__cvt+0xa6>

0800e648 <__exponent>:
 800e648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e64a:	4603      	mov	r3, r0
 800e64c:	2900      	cmp	r1, #0
 800e64e:	bfb8      	it	lt
 800e650:	4249      	neglt	r1, r1
 800e652:	f803 2b02 	strb.w	r2, [r3], #2
 800e656:	bfb4      	ite	lt
 800e658:	222d      	movlt	r2, #45	; 0x2d
 800e65a:	222b      	movge	r2, #43	; 0x2b
 800e65c:	2909      	cmp	r1, #9
 800e65e:	7042      	strb	r2, [r0, #1]
 800e660:	dd2a      	ble.n	800e6b8 <__exponent+0x70>
 800e662:	f10d 0407 	add.w	r4, sp, #7
 800e666:	46a4      	mov	ip, r4
 800e668:	270a      	movs	r7, #10
 800e66a:	46a6      	mov	lr, r4
 800e66c:	460a      	mov	r2, r1
 800e66e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e672:	fb07 1516 	mls	r5, r7, r6, r1
 800e676:	3530      	adds	r5, #48	; 0x30
 800e678:	2a63      	cmp	r2, #99	; 0x63
 800e67a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e67e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e682:	4631      	mov	r1, r6
 800e684:	dcf1      	bgt.n	800e66a <__exponent+0x22>
 800e686:	3130      	adds	r1, #48	; 0x30
 800e688:	f1ae 0502 	sub.w	r5, lr, #2
 800e68c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e690:	1c44      	adds	r4, r0, #1
 800e692:	4629      	mov	r1, r5
 800e694:	4561      	cmp	r1, ip
 800e696:	d30a      	bcc.n	800e6ae <__exponent+0x66>
 800e698:	f10d 0209 	add.w	r2, sp, #9
 800e69c:	eba2 020e 	sub.w	r2, r2, lr
 800e6a0:	4565      	cmp	r5, ip
 800e6a2:	bf88      	it	hi
 800e6a4:	2200      	movhi	r2, #0
 800e6a6:	4413      	add	r3, r2
 800e6a8:	1a18      	subs	r0, r3, r0
 800e6aa:	b003      	add	sp, #12
 800e6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e6b6:	e7ed      	b.n	800e694 <__exponent+0x4c>
 800e6b8:	2330      	movs	r3, #48	; 0x30
 800e6ba:	3130      	adds	r1, #48	; 0x30
 800e6bc:	7083      	strb	r3, [r0, #2]
 800e6be:	70c1      	strb	r1, [r0, #3]
 800e6c0:	1d03      	adds	r3, r0, #4
 800e6c2:	e7f1      	b.n	800e6a8 <__exponent+0x60>

0800e6c4 <_printf_float>:
 800e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c8:	ed2d 8b02 	vpush	{d8}
 800e6cc:	b08d      	sub	sp, #52	; 0x34
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e6d4:	4616      	mov	r6, r2
 800e6d6:	461f      	mov	r7, r3
 800e6d8:	4605      	mov	r5, r0
 800e6da:	f001 fd4f 	bl	801017c <_localeconv_r>
 800e6de:	f8d0 a000 	ldr.w	sl, [r0]
 800e6e2:	4650      	mov	r0, sl
 800e6e4:	f7f1 fd7c 	bl	80001e0 <strlen>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e6ec:	6823      	ldr	r3, [r4, #0]
 800e6ee:	9305      	str	r3, [sp, #20]
 800e6f0:	f8d8 3000 	ldr.w	r3, [r8]
 800e6f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e6f8:	3307      	adds	r3, #7
 800e6fa:	f023 0307 	bic.w	r3, r3, #7
 800e6fe:	f103 0208 	add.w	r2, r3, #8
 800e702:	f8c8 2000 	str.w	r2, [r8]
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e70e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e716:	9307      	str	r3, [sp, #28]
 800e718:	f8cd 8018 	str.w	r8, [sp, #24]
 800e71c:	ee08 0a10 	vmov	s16, r0
 800e720:	4b9f      	ldr	r3, [pc, #636]	; (800e9a0 <_printf_float+0x2dc>)
 800e722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e726:	f04f 32ff 	mov.w	r2, #4294967295
 800e72a:	f7f2 fa07 	bl	8000b3c <__aeabi_dcmpun>
 800e72e:	bb88      	cbnz	r0, 800e794 <_printf_float+0xd0>
 800e730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e734:	4b9a      	ldr	r3, [pc, #616]	; (800e9a0 <_printf_float+0x2dc>)
 800e736:	f04f 32ff 	mov.w	r2, #4294967295
 800e73a:	f7f2 f9e1 	bl	8000b00 <__aeabi_dcmple>
 800e73e:	bb48      	cbnz	r0, 800e794 <_printf_float+0xd0>
 800e740:	2200      	movs	r2, #0
 800e742:	2300      	movs	r3, #0
 800e744:	4640      	mov	r0, r8
 800e746:	4649      	mov	r1, r9
 800e748:	f7f2 f9d0 	bl	8000aec <__aeabi_dcmplt>
 800e74c:	b110      	cbz	r0, 800e754 <_printf_float+0x90>
 800e74e:	232d      	movs	r3, #45	; 0x2d
 800e750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e754:	4b93      	ldr	r3, [pc, #588]	; (800e9a4 <_printf_float+0x2e0>)
 800e756:	4894      	ldr	r0, [pc, #592]	; (800e9a8 <_printf_float+0x2e4>)
 800e758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e75c:	bf94      	ite	ls
 800e75e:	4698      	movls	r8, r3
 800e760:	4680      	movhi	r8, r0
 800e762:	2303      	movs	r3, #3
 800e764:	6123      	str	r3, [r4, #16]
 800e766:	9b05      	ldr	r3, [sp, #20]
 800e768:	f023 0204 	bic.w	r2, r3, #4
 800e76c:	6022      	str	r2, [r4, #0]
 800e76e:	f04f 0900 	mov.w	r9, #0
 800e772:	9700      	str	r7, [sp, #0]
 800e774:	4633      	mov	r3, r6
 800e776:	aa0b      	add	r2, sp, #44	; 0x2c
 800e778:	4621      	mov	r1, r4
 800e77a:	4628      	mov	r0, r5
 800e77c:	f000 f9d8 	bl	800eb30 <_printf_common>
 800e780:	3001      	adds	r0, #1
 800e782:	f040 8090 	bne.w	800e8a6 <_printf_float+0x1e2>
 800e786:	f04f 30ff 	mov.w	r0, #4294967295
 800e78a:	b00d      	add	sp, #52	; 0x34
 800e78c:	ecbd 8b02 	vpop	{d8}
 800e790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e794:	4642      	mov	r2, r8
 800e796:	464b      	mov	r3, r9
 800e798:	4640      	mov	r0, r8
 800e79a:	4649      	mov	r1, r9
 800e79c:	f7f2 f9ce 	bl	8000b3c <__aeabi_dcmpun>
 800e7a0:	b140      	cbz	r0, 800e7b4 <_printf_float+0xf0>
 800e7a2:	464b      	mov	r3, r9
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	bfbc      	itt	lt
 800e7a8:	232d      	movlt	r3, #45	; 0x2d
 800e7aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e7ae:	487f      	ldr	r0, [pc, #508]	; (800e9ac <_printf_float+0x2e8>)
 800e7b0:	4b7f      	ldr	r3, [pc, #508]	; (800e9b0 <_printf_float+0x2ec>)
 800e7b2:	e7d1      	b.n	800e758 <_printf_float+0x94>
 800e7b4:	6863      	ldr	r3, [r4, #4]
 800e7b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e7ba:	9206      	str	r2, [sp, #24]
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	d13f      	bne.n	800e840 <_printf_float+0x17c>
 800e7c0:	2306      	movs	r3, #6
 800e7c2:	6063      	str	r3, [r4, #4]
 800e7c4:	9b05      	ldr	r3, [sp, #20]
 800e7c6:	6861      	ldr	r1, [r4, #4]
 800e7c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9303      	str	r3, [sp, #12]
 800e7d0:	ab0a      	add	r3, sp, #40	; 0x28
 800e7d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e7d6:	ab09      	add	r3, sp, #36	; 0x24
 800e7d8:	ec49 8b10 	vmov	d0, r8, r9
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	6022      	str	r2, [r4, #0]
 800e7e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	f7ff fecd 	bl	800e584 <__cvt>
 800e7ea:	9b06      	ldr	r3, [sp, #24]
 800e7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7ee:	2b47      	cmp	r3, #71	; 0x47
 800e7f0:	4680      	mov	r8, r0
 800e7f2:	d108      	bne.n	800e806 <_printf_float+0x142>
 800e7f4:	1cc8      	adds	r0, r1, #3
 800e7f6:	db02      	blt.n	800e7fe <_printf_float+0x13a>
 800e7f8:	6863      	ldr	r3, [r4, #4]
 800e7fa:	4299      	cmp	r1, r3
 800e7fc:	dd41      	ble.n	800e882 <_printf_float+0x1be>
 800e7fe:	f1ab 0b02 	sub.w	fp, fp, #2
 800e802:	fa5f fb8b 	uxtb.w	fp, fp
 800e806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e80a:	d820      	bhi.n	800e84e <_printf_float+0x18a>
 800e80c:	3901      	subs	r1, #1
 800e80e:	465a      	mov	r2, fp
 800e810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e814:	9109      	str	r1, [sp, #36]	; 0x24
 800e816:	f7ff ff17 	bl	800e648 <__exponent>
 800e81a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e81c:	1813      	adds	r3, r2, r0
 800e81e:	2a01      	cmp	r2, #1
 800e820:	4681      	mov	r9, r0
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	dc02      	bgt.n	800e82c <_printf_float+0x168>
 800e826:	6822      	ldr	r2, [r4, #0]
 800e828:	07d2      	lsls	r2, r2, #31
 800e82a:	d501      	bpl.n	800e830 <_printf_float+0x16c>
 800e82c:	3301      	adds	r3, #1
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e834:	2b00      	cmp	r3, #0
 800e836:	d09c      	beq.n	800e772 <_printf_float+0xae>
 800e838:	232d      	movs	r3, #45	; 0x2d
 800e83a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e83e:	e798      	b.n	800e772 <_printf_float+0xae>
 800e840:	9a06      	ldr	r2, [sp, #24]
 800e842:	2a47      	cmp	r2, #71	; 0x47
 800e844:	d1be      	bne.n	800e7c4 <_printf_float+0x100>
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1bc      	bne.n	800e7c4 <_printf_float+0x100>
 800e84a:	2301      	movs	r3, #1
 800e84c:	e7b9      	b.n	800e7c2 <_printf_float+0xfe>
 800e84e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e852:	d118      	bne.n	800e886 <_printf_float+0x1c2>
 800e854:	2900      	cmp	r1, #0
 800e856:	6863      	ldr	r3, [r4, #4]
 800e858:	dd0b      	ble.n	800e872 <_printf_float+0x1ae>
 800e85a:	6121      	str	r1, [r4, #16]
 800e85c:	b913      	cbnz	r3, 800e864 <_printf_float+0x1a0>
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	07d0      	lsls	r0, r2, #31
 800e862:	d502      	bpl.n	800e86a <_printf_float+0x1a6>
 800e864:	3301      	adds	r3, #1
 800e866:	440b      	add	r3, r1
 800e868:	6123      	str	r3, [r4, #16]
 800e86a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e86c:	f04f 0900 	mov.w	r9, #0
 800e870:	e7de      	b.n	800e830 <_printf_float+0x16c>
 800e872:	b913      	cbnz	r3, 800e87a <_printf_float+0x1b6>
 800e874:	6822      	ldr	r2, [r4, #0]
 800e876:	07d2      	lsls	r2, r2, #31
 800e878:	d501      	bpl.n	800e87e <_printf_float+0x1ba>
 800e87a:	3302      	adds	r3, #2
 800e87c:	e7f4      	b.n	800e868 <_printf_float+0x1a4>
 800e87e:	2301      	movs	r3, #1
 800e880:	e7f2      	b.n	800e868 <_printf_float+0x1a4>
 800e882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e888:	4299      	cmp	r1, r3
 800e88a:	db05      	blt.n	800e898 <_printf_float+0x1d4>
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	6121      	str	r1, [r4, #16]
 800e890:	07d8      	lsls	r0, r3, #31
 800e892:	d5ea      	bpl.n	800e86a <_printf_float+0x1a6>
 800e894:	1c4b      	adds	r3, r1, #1
 800e896:	e7e7      	b.n	800e868 <_printf_float+0x1a4>
 800e898:	2900      	cmp	r1, #0
 800e89a:	bfd4      	ite	le
 800e89c:	f1c1 0202 	rsble	r2, r1, #2
 800e8a0:	2201      	movgt	r2, #1
 800e8a2:	4413      	add	r3, r2
 800e8a4:	e7e0      	b.n	800e868 <_printf_float+0x1a4>
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	055a      	lsls	r2, r3, #21
 800e8aa:	d407      	bmi.n	800e8bc <_printf_float+0x1f8>
 800e8ac:	6923      	ldr	r3, [r4, #16]
 800e8ae:	4642      	mov	r2, r8
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	47b8      	blx	r7
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	d12c      	bne.n	800e914 <_printf_float+0x250>
 800e8ba:	e764      	b.n	800e786 <_printf_float+0xc2>
 800e8bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8c0:	f240 80e0 	bls.w	800ea84 <_printf_float+0x3c0>
 800e8c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	f7f2 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d034      	beq.n	800e93e <_printf_float+0x27a>
 800e8d4:	4a37      	ldr	r2, [pc, #220]	; (800e9b4 <_printf_float+0x2f0>)
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4628      	mov	r0, r5
 800e8dc:	47b8      	blx	r7
 800e8de:	3001      	adds	r0, #1
 800e8e0:	f43f af51 	beq.w	800e786 <_printf_float+0xc2>
 800e8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	db02      	blt.n	800e8f2 <_printf_float+0x22e>
 800e8ec:	6823      	ldr	r3, [r4, #0]
 800e8ee:	07d8      	lsls	r0, r3, #31
 800e8f0:	d510      	bpl.n	800e914 <_printf_float+0x250>
 800e8f2:	ee18 3a10 	vmov	r3, s16
 800e8f6:	4652      	mov	r2, sl
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	47b8      	blx	r7
 800e8fe:	3001      	adds	r0, #1
 800e900:	f43f af41 	beq.w	800e786 <_printf_float+0xc2>
 800e904:	f04f 0800 	mov.w	r8, #0
 800e908:	f104 091a 	add.w	r9, r4, #26
 800e90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e90e:	3b01      	subs	r3, #1
 800e910:	4543      	cmp	r3, r8
 800e912:	dc09      	bgt.n	800e928 <_printf_float+0x264>
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	079b      	lsls	r3, r3, #30
 800e918:	f100 8105 	bmi.w	800eb26 <_printf_float+0x462>
 800e91c:	68e0      	ldr	r0, [r4, #12]
 800e91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e920:	4298      	cmp	r0, r3
 800e922:	bfb8      	it	lt
 800e924:	4618      	movlt	r0, r3
 800e926:	e730      	b.n	800e78a <_printf_float+0xc6>
 800e928:	2301      	movs	r3, #1
 800e92a:	464a      	mov	r2, r9
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	f43f af27 	beq.w	800e786 <_printf_float+0xc2>
 800e938:	f108 0801 	add.w	r8, r8, #1
 800e93c:	e7e6      	b.n	800e90c <_printf_float+0x248>
 800e93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e940:	2b00      	cmp	r3, #0
 800e942:	dc39      	bgt.n	800e9b8 <_printf_float+0x2f4>
 800e944:	4a1b      	ldr	r2, [pc, #108]	; (800e9b4 <_printf_float+0x2f0>)
 800e946:	2301      	movs	r3, #1
 800e948:	4631      	mov	r1, r6
 800e94a:	4628      	mov	r0, r5
 800e94c:	47b8      	blx	r7
 800e94e:	3001      	adds	r0, #1
 800e950:	f43f af19 	beq.w	800e786 <_printf_float+0xc2>
 800e954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e958:	4313      	orrs	r3, r2
 800e95a:	d102      	bne.n	800e962 <_printf_float+0x29e>
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	07d9      	lsls	r1, r3, #31
 800e960:	d5d8      	bpl.n	800e914 <_printf_float+0x250>
 800e962:	ee18 3a10 	vmov	r3, s16
 800e966:	4652      	mov	r2, sl
 800e968:	4631      	mov	r1, r6
 800e96a:	4628      	mov	r0, r5
 800e96c:	47b8      	blx	r7
 800e96e:	3001      	adds	r0, #1
 800e970:	f43f af09 	beq.w	800e786 <_printf_float+0xc2>
 800e974:	f04f 0900 	mov.w	r9, #0
 800e978:	f104 0a1a 	add.w	sl, r4, #26
 800e97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e97e:	425b      	negs	r3, r3
 800e980:	454b      	cmp	r3, r9
 800e982:	dc01      	bgt.n	800e988 <_printf_float+0x2c4>
 800e984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e986:	e792      	b.n	800e8ae <_printf_float+0x1ea>
 800e988:	2301      	movs	r3, #1
 800e98a:	4652      	mov	r2, sl
 800e98c:	4631      	mov	r1, r6
 800e98e:	4628      	mov	r0, r5
 800e990:	47b8      	blx	r7
 800e992:	3001      	adds	r0, #1
 800e994:	f43f aef7 	beq.w	800e786 <_printf_float+0xc2>
 800e998:	f109 0901 	add.w	r9, r9, #1
 800e99c:	e7ee      	b.n	800e97c <_printf_float+0x2b8>
 800e99e:	bf00      	nop
 800e9a0:	7fefffff 	.word	0x7fefffff
 800e9a4:	08011b2c 	.word	0x08011b2c
 800e9a8:	08011b30 	.word	0x08011b30
 800e9ac:	08011b38 	.word	0x08011b38
 800e9b0:	08011b34 	.word	0x08011b34
 800e9b4:	08011b3c 	.word	0x08011b3c
 800e9b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	bfa8      	it	ge
 800e9c0:	461a      	movge	r2, r3
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	4691      	mov	r9, r2
 800e9c6:	dc37      	bgt.n	800ea38 <_printf_float+0x374>
 800e9c8:	f04f 0b00 	mov.w	fp, #0
 800e9cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9d0:	f104 021a 	add.w	r2, r4, #26
 800e9d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9d6:	9305      	str	r3, [sp, #20]
 800e9d8:	eba3 0309 	sub.w	r3, r3, r9
 800e9dc:	455b      	cmp	r3, fp
 800e9de:	dc33      	bgt.n	800ea48 <_printf_float+0x384>
 800e9e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	db3b      	blt.n	800ea60 <_printf_float+0x39c>
 800e9e8:	6823      	ldr	r3, [r4, #0]
 800e9ea:	07da      	lsls	r2, r3, #31
 800e9ec:	d438      	bmi.n	800ea60 <_printf_float+0x39c>
 800e9ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9f0:	9b05      	ldr	r3, [sp, #20]
 800e9f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	eba2 0901 	sub.w	r9, r2, r1
 800e9fa:	4599      	cmp	r9, r3
 800e9fc:	bfa8      	it	ge
 800e9fe:	4699      	movge	r9, r3
 800ea00:	f1b9 0f00 	cmp.w	r9, #0
 800ea04:	dc35      	bgt.n	800ea72 <_printf_float+0x3ae>
 800ea06:	f04f 0800 	mov.w	r8, #0
 800ea0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea0e:	f104 0a1a 	add.w	sl, r4, #26
 800ea12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea16:	1a9b      	subs	r3, r3, r2
 800ea18:	eba3 0309 	sub.w	r3, r3, r9
 800ea1c:	4543      	cmp	r3, r8
 800ea1e:	f77f af79 	ble.w	800e914 <_printf_float+0x250>
 800ea22:	2301      	movs	r3, #1
 800ea24:	4652      	mov	r2, sl
 800ea26:	4631      	mov	r1, r6
 800ea28:	4628      	mov	r0, r5
 800ea2a:	47b8      	blx	r7
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	f43f aeaa 	beq.w	800e786 <_printf_float+0xc2>
 800ea32:	f108 0801 	add.w	r8, r8, #1
 800ea36:	e7ec      	b.n	800ea12 <_printf_float+0x34e>
 800ea38:	4613      	mov	r3, r2
 800ea3a:	4631      	mov	r1, r6
 800ea3c:	4642      	mov	r2, r8
 800ea3e:	4628      	mov	r0, r5
 800ea40:	47b8      	blx	r7
 800ea42:	3001      	adds	r0, #1
 800ea44:	d1c0      	bne.n	800e9c8 <_printf_float+0x304>
 800ea46:	e69e      	b.n	800e786 <_printf_float+0xc2>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	9205      	str	r2, [sp, #20]
 800ea50:	47b8      	blx	r7
 800ea52:	3001      	adds	r0, #1
 800ea54:	f43f ae97 	beq.w	800e786 <_printf_float+0xc2>
 800ea58:	9a05      	ldr	r2, [sp, #20]
 800ea5a:	f10b 0b01 	add.w	fp, fp, #1
 800ea5e:	e7b9      	b.n	800e9d4 <_printf_float+0x310>
 800ea60:	ee18 3a10 	vmov	r3, s16
 800ea64:	4652      	mov	r2, sl
 800ea66:	4631      	mov	r1, r6
 800ea68:	4628      	mov	r0, r5
 800ea6a:	47b8      	blx	r7
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	d1be      	bne.n	800e9ee <_printf_float+0x32a>
 800ea70:	e689      	b.n	800e786 <_printf_float+0xc2>
 800ea72:	9a05      	ldr	r2, [sp, #20]
 800ea74:	464b      	mov	r3, r9
 800ea76:	4442      	add	r2, r8
 800ea78:	4631      	mov	r1, r6
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	47b8      	blx	r7
 800ea7e:	3001      	adds	r0, #1
 800ea80:	d1c1      	bne.n	800ea06 <_printf_float+0x342>
 800ea82:	e680      	b.n	800e786 <_printf_float+0xc2>
 800ea84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea86:	2a01      	cmp	r2, #1
 800ea88:	dc01      	bgt.n	800ea8e <_printf_float+0x3ca>
 800ea8a:	07db      	lsls	r3, r3, #31
 800ea8c:	d538      	bpl.n	800eb00 <_printf_float+0x43c>
 800ea8e:	2301      	movs	r3, #1
 800ea90:	4642      	mov	r2, r8
 800ea92:	4631      	mov	r1, r6
 800ea94:	4628      	mov	r0, r5
 800ea96:	47b8      	blx	r7
 800ea98:	3001      	adds	r0, #1
 800ea9a:	f43f ae74 	beq.w	800e786 <_printf_float+0xc2>
 800ea9e:	ee18 3a10 	vmov	r3, s16
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	47b8      	blx	r7
 800eaaa:	3001      	adds	r0, #1
 800eaac:	f43f ae6b 	beq.w	800e786 <_printf_float+0xc2>
 800eab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eab4:	2200      	movs	r2, #0
 800eab6:	2300      	movs	r3, #0
 800eab8:	f7f2 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 800eabc:	b9d8      	cbnz	r0, 800eaf6 <_printf_float+0x432>
 800eabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eac0:	f108 0201 	add.w	r2, r8, #1
 800eac4:	3b01      	subs	r3, #1
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b8      	blx	r7
 800eacc:	3001      	adds	r0, #1
 800eace:	d10e      	bne.n	800eaee <_printf_float+0x42a>
 800ead0:	e659      	b.n	800e786 <_printf_float+0xc2>
 800ead2:	2301      	movs	r3, #1
 800ead4:	4652      	mov	r2, sl
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	f43f ae52 	beq.w	800e786 <_printf_float+0xc2>
 800eae2:	f108 0801 	add.w	r8, r8, #1
 800eae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eae8:	3b01      	subs	r3, #1
 800eaea:	4543      	cmp	r3, r8
 800eaec:	dcf1      	bgt.n	800ead2 <_printf_float+0x40e>
 800eaee:	464b      	mov	r3, r9
 800eaf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eaf4:	e6dc      	b.n	800e8b0 <_printf_float+0x1ec>
 800eaf6:	f04f 0800 	mov.w	r8, #0
 800eafa:	f104 0a1a 	add.w	sl, r4, #26
 800eafe:	e7f2      	b.n	800eae6 <_printf_float+0x422>
 800eb00:	2301      	movs	r3, #1
 800eb02:	4642      	mov	r2, r8
 800eb04:	e7df      	b.n	800eac6 <_printf_float+0x402>
 800eb06:	2301      	movs	r3, #1
 800eb08:	464a      	mov	r2, r9
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	47b8      	blx	r7
 800eb10:	3001      	adds	r0, #1
 800eb12:	f43f ae38 	beq.w	800e786 <_printf_float+0xc2>
 800eb16:	f108 0801 	add.w	r8, r8, #1
 800eb1a:	68e3      	ldr	r3, [r4, #12]
 800eb1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb1e:	1a5b      	subs	r3, r3, r1
 800eb20:	4543      	cmp	r3, r8
 800eb22:	dcf0      	bgt.n	800eb06 <_printf_float+0x442>
 800eb24:	e6fa      	b.n	800e91c <_printf_float+0x258>
 800eb26:	f04f 0800 	mov.w	r8, #0
 800eb2a:	f104 0919 	add.w	r9, r4, #25
 800eb2e:	e7f4      	b.n	800eb1a <_printf_float+0x456>

0800eb30 <_printf_common>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	4616      	mov	r6, r2
 800eb36:	4699      	mov	r9, r3
 800eb38:	688a      	ldr	r2, [r1, #8]
 800eb3a:	690b      	ldr	r3, [r1, #16]
 800eb3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb40:	4293      	cmp	r3, r2
 800eb42:	bfb8      	it	lt
 800eb44:	4613      	movlt	r3, r2
 800eb46:	6033      	str	r3, [r6, #0]
 800eb48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	460c      	mov	r4, r1
 800eb50:	b10a      	cbz	r2, 800eb56 <_printf_common+0x26>
 800eb52:	3301      	adds	r3, #1
 800eb54:	6033      	str	r3, [r6, #0]
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	0699      	lsls	r1, r3, #26
 800eb5a:	bf42      	ittt	mi
 800eb5c:	6833      	ldrmi	r3, [r6, #0]
 800eb5e:	3302      	addmi	r3, #2
 800eb60:	6033      	strmi	r3, [r6, #0]
 800eb62:	6825      	ldr	r5, [r4, #0]
 800eb64:	f015 0506 	ands.w	r5, r5, #6
 800eb68:	d106      	bne.n	800eb78 <_printf_common+0x48>
 800eb6a:	f104 0a19 	add.w	sl, r4, #25
 800eb6e:	68e3      	ldr	r3, [r4, #12]
 800eb70:	6832      	ldr	r2, [r6, #0]
 800eb72:	1a9b      	subs	r3, r3, r2
 800eb74:	42ab      	cmp	r3, r5
 800eb76:	dc26      	bgt.n	800ebc6 <_printf_common+0x96>
 800eb78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb7c:	1e13      	subs	r3, r2, #0
 800eb7e:	6822      	ldr	r2, [r4, #0]
 800eb80:	bf18      	it	ne
 800eb82:	2301      	movne	r3, #1
 800eb84:	0692      	lsls	r2, r2, #26
 800eb86:	d42b      	bmi.n	800ebe0 <_printf_common+0xb0>
 800eb88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb8c:	4649      	mov	r1, r9
 800eb8e:	4638      	mov	r0, r7
 800eb90:	47c0      	blx	r8
 800eb92:	3001      	adds	r0, #1
 800eb94:	d01e      	beq.n	800ebd4 <_printf_common+0xa4>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	68e5      	ldr	r5, [r4, #12]
 800eb9a:	6832      	ldr	r2, [r6, #0]
 800eb9c:	f003 0306 	and.w	r3, r3, #6
 800eba0:	2b04      	cmp	r3, #4
 800eba2:	bf08      	it	eq
 800eba4:	1aad      	subeq	r5, r5, r2
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	bf0c      	ite	eq
 800ebac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebb0:	2500      	movne	r5, #0
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	bfc4      	itt	gt
 800ebb6:	1a9b      	subgt	r3, r3, r2
 800ebb8:	18ed      	addgt	r5, r5, r3
 800ebba:	2600      	movs	r6, #0
 800ebbc:	341a      	adds	r4, #26
 800ebbe:	42b5      	cmp	r5, r6
 800ebc0:	d11a      	bne.n	800ebf8 <_printf_common+0xc8>
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	e008      	b.n	800ebd8 <_printf_common+0xa8>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	4652      	mov	r2, sl
 800ebca:	4649      	mov	r1, r9
 800ebcc:	4638      	mov	r0, r7
 800ebce:	47c0      	blx	r8
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	d103      	bne.n	800ebdc <_printf_common+0xac>
 800ebd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebdc:	3501      	adds	r5, #1
 800ebde:	e7c6      	b.n	800eb6e <_printf_common+0x3e>
 800ebe0:	18e1      	adds	r1, r4, r3
 800ebe2:	1c5a      	adds	r2, r3, #1
 800ebe4:	2030      	movs	r0, #48	; 0x30
 800ebe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebea:	4422      	add	r2, r4
 800ebec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebf4:	3302      	adds	r3, #2
 800ebf6:	e7c7      	b.n	800eb88 <_printf_common+0x58>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	4622      	mov	r2, r4
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	4638      	mov	r0, r7
 800ec00:	47c0      	blx	r8
 800ec02:	3001      	adds	r0, #1
 800ec04:	d0e6      	beq.n	800ebd4 <_printf_common+0xa4>
 800ec06:	3601      	adds	r6, #1
 800ec08:	e7d9      	b.n	800ebbe <_printf_common+0x8e>
	...

0800ec0c <_printf_i>:
 800ec0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec10:	460c      	mov	r4, r1
 800ec12:	4691      	mov	r9, r2
 800ec14:	7e27      	ldrb	r7, [r4, #24]
 800ec16:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ec18:	2f78      	cmp	r7, #120	; 0x78
 800ec1a:	4680      	mov	r8, r0
 800ec1c:	469a      	mov	sl, r3
 800ec1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec22:	d807      	bhi.n	800ec34 <_printf_i+0x28>
 800ec24:	2f62      	cmp	r7, #98	; 0x62
 800ec26:	d80a      	bhi.n	800ec3e <_printf_i+0x32>
 800ec28:	2f00      	cmp	r7, #0
 800ec2a:	f000 80d8 	beq.w	800edde <_printf_i+0x1d2>
 800ec2e:	2f58      	cmp	r7, #88	; 0x58
 800ec30:	f000 80a3 	beq.w	800ed7a <_printf_i+0x16e>
 800ec34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec3c:	e03a      	b.n	800ecb4 <_printf_i+0xa8>
 800ec3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec42:	2b15      	cmp	r3, #21
 800ec44:	d8f6      	bhi.n	800ec34 <_printf_i+0x28>
 800ec46:	a001      	add	r0, pc, #4	; (adr r0, 800ec4c <_printf_i+0x40>)
 800ec48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec4c:	0800eca5 	.word	0x0800eca5
 800ec50:	0800ecb9 	.word	0x0800ecb9
 800ec54:	0800ec35 	.word	0x0800ec35
 800ec58:	0800ec35 	.word	0x0800ec35
 800ec5c:	0800ec35 	.word	0x0800ec35
 800ec60:	0800ec35 	.word	0x0800ec35
 800ec64:	0800ecb9 	.word	0x0800ecb9
 800ec68:	0800ec35 	.word	0x0800ec35
 800ec6c:	0800ec35 	.word	0x0800ec35
 800ec70:	0800ec35 	.word	0x0800ec35
 800ec74:	0800ec35 	.word	0x0800ec35
 800ec78:	0800edc5 	.word	0x0800edc5
 800ec7c:	0800ece9 	.word	0x0800ece9
 800ec80:	0800eda7 	.word	0x0800eda7
 800ec84:	0800ec35 	.word	0x0800ec35
 800ec88:	0800ec35 	.word	0x0800ec35
 800ec8c:	0800ede7 	.word	0x0800ede7
 800ec90:	0800ec35 	.word	0x0800ec35
 800ec94:	0800ece9 	.word	0x0800ece9
 800ec98:	0800ec35 	.word	0x0800ec35
 800ec9c:	0800ec35 	.word	0x0800ec35
 800eca0:	0800edaf 	.word	0x0800edaf
 800eca4:	680b      	ldr	r3, [r1, #0]
 800eca6:	1d1a      	adds	r2, r3, #4
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	600a      	str	r2, [r1, #0]
 800ecac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ecb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e0a3      	b.n	800ee00 <_printf_i+0x1f4>
 800ecb8:	6825      	ldr	r5, [r4, #0]
 800ecba:	6808      	ldr	r0, [r1, #0]
 800ecbc:	062e      	lsls	r6, r5, #24
 800ecbe:	f100 0304 	add.w	r3, r0, #4
 800ecc2:	d50a      	bpl.n	800ecda <_printf_i+0xce>
 800ecc4:	6805      	ldr	r5, [r0, #0]
 800ecc6:	600b      	str	r3, [r1, #0]
 800ecc8:	2d00      	cmp	r5, #0
 800ecca:	da03      	bge.n	800ecd4 <_printf_i+0xc8>
 800eccc:	232d      	movs	r3, #45	; 0x2d
 800ecce:	426d      	negs	r5, r5
 800ecd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecd4:	485e      	ldr	r0, [pc, #376]	; (800ee50 <_printf_i+0x244>)
 800ecd6:	230a      	movs	r3, #10
 800ecd8:	e019      	b.n	800ed0e <_printf_i+0x102>
 800ecda:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ecde:	6805      	ldr	r5, [r0, #0]
 800ece0:	600b      	str	r3, [r1, #0]
 800ece2:	bf18      	it	ne
 800ece4:	b22d      	sxthne	r5, r5
 800ece6:	e7ef      	b.n	800ecc8 <_printf_i+0xbc>
 800ece8:	680b      	ldr	r3, [r1, #0]
 800ecea:	6825      	ldr	r5, [r4, #0]
 800ecec:	1d18      	adds	r0, r3, #4
 800ecee:	6008      	str	r0, [r1, #0]
 800ecf0:	0628      	lsls	r0, r5, #24
 800ecf2:	d501      	bpl.n	800ecf8 <_printf_i+0xec>
 800ecf4:	681d      	ldr	r5, [r3, #0]
 800ecf6:	e002      	b.n	800ecfe <_printf_i+0xf2>
 800ecf8:	0669      	lsls	r1, r5, #25
 800ecfa:	d5fb      	bpl.n	800ecf4 <_printf_i+0xe8>
 800ecfc:	881d      	ldrh	r5, [r3, #0]
 800ecfe:	4854      	ldr	r0, [pc, #336]	; (800ee50 <_printf_i+0x244>)
 800ed00:	2f6f      	cmp	r7, #111	; 0x6f
 800ed02:	bf0c      	ite	eq
 800ed04:	2308      	moveq	r3, #8
 800ed06:	230a      	movne	r3, #10
 800ed08:	2100      	movs	r1, #0
 800ed0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed0e:	6866      	ldr	r6, [r4, #4]
 800ed10:	60a6      	str	r6, [r4, #8]
 800ed12:	2e00      	cmp	r6, #0
 800ed14:	bfa2      	ittt	ge
 800ed16:	6821      	ldrge	r1, [r4, #0]
 800ed18:	f021 0104 	bicge.w	r1, r1, #4
 800ed1c:	6021      	strge	r1, [r4, #0]
 800ed1e:	b90d      	cbnz	r5, 800ed24 <_printf_i+0x118>
 800ed20:	2e00      	cmp	r6, #0
 800ed22:	d04d      	beq.n	800edc0 <_printf_i+0x1b4>
 800ed24:	4616      	mov	r6, r2
 800ed26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ed2e:	5dc7      	ldrb	r7, [r0, r7]
 800ed30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed34:	462f      	mov	r7, r5
 800ed36:	42bb      	cmp	r3, r7
 800ed38:	460d      	mov	r5, r1
 800ed3a:	d9f4      	bls.n	800ed26 <_printf_i+0x11a>
 800ed3c:	2b08      	cmp	r3, #8
 800ed3e:	d10b      	bne.n	800ed58 <_printf_i+0x14c>
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	07df      	lsls	r7, r3, #31
 800ed44:	d508      	bpl.n	800ed58 <_printf_i+0x14c>
 800ed46:	6923      	ldr	r3, [r4, #16]
 800ed48:	6861      	ldr	r1, [r4, #4]
 800ed4a:	4299      	cmp	r1, r3
 800ed4c:	bfde      	ittt	le
 800ed4e:	2330      	movle	r3, #48	; 0x30
 800ed50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed58:	1b92      	subs	r2, r2, r6
 800ed5a:	6122      	str	r2, [r4, #16]
 800ed5c:	f8cd a000 	str.w	sl, [sp]
 800ed60:	464b      	mov	r3, r9
 800ed62:	aa03      	add	r2, sp, #12
 800ed64:	4621      	mov	r1, r4
 800ed66:	4640      	mov	r0, r8
 800ed68:	f7ff fee2 	bl	800eb30 <_printf_common>
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	d14c      	bne.n	800ee0a <_printf_i+0x1fe>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b004      	add	sp, #16
 800ed76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7a:	4835      	ldr	r0, [pc, #212]	; (800ee50 <_printf_i+0x244>)
 800ed7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed80:	6823      	ldr	r3, [r4, #0]
 800ed82:	680e      	ldr	r6, [r1, #0]
 800ed84:	061f      	lsls	r7, r3, #24
 800ed86:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed8a:	600e      	str	r6, [r1, #0]
 800ed8c:	d514      	bpl.n	800edb8 <_printf_i+0x1ac>
 800ed8e:	07d9      	lsls	r1, r3, #31
 800ed90:	bf44      	itt	mi
 800ed92:	f043 0320 	orrmi.w	r3, r3, #32
 800ed96:	6023      	strmi	r3, [r4, #0]
 800ed98:	b91d      	cbnz	r5, 800eda2 <_printf_i+0x196>
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	f023 0320 	bic.w	r3, r3, #32
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	2310      	movs	r3, #16
 800eda4:	e7b0      	b.n	800ed08 <_printf_i+0xfc>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	f043 0320 	orr.w	r3, r3, #32
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	2378      	movs	r3, #120	; 0x78
 800edb0:	4828      	ldr	r0, [pc, #160]	; (800ee54 <_printf_i+0x248>)
 800edb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edb6:	e7e3      	b.n	800ed80 <_printf_i+0x174>
 800edb8:	065e      	lsls	r6, r3, #25
 800edba:	bf48      	it	mi
 800edbc:	b2ad      	uxthmi	r5, r5
 800edbe:	e7e6      	b.n	800ed8e <_printf_i+0x182>
 800edc0:	4616      	mov	r6, r2
 800edc2:	e7bb      	b.n	800ed3c <_printf_i+0x130>
 800edc4:	680b      	ldr	r3, [r1, #0]
 800edc6:	6826      	ldr	r6, [r4, #0]
 800edc8:	6960      	ldr	r0, [r4, #20]
 800edca:	1d1d      	adds	r5, r3, #4
 800edcc:	600d      	str	r5, [r1, #0]
 800edce:	0635      	lsls	r5, r6, #24
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	d501      	bpl.n	800edd8 <_printf_i+0x1cc>
 800edd4:	6018      	str	r0, [r3, #0]
 800edd6:	e002      	b.n	800edde <_printf_i+0x1d2>
 800edd8:	0671      	lsls	r1, r6, #25
 800edda:	d5fb      	bpl.n	800edd4 <_printf_i+0x1c8>
 800eddc:	8018      	strh	r0, [r3, #0]
 800edde:	2300      	movs	r3, #0
 800ede0:	6123      	str	r3, [r4, #16]
 800ede2:	4616      	mov	r6, r2
 800ede4:	e7ba      	b.n	800ed5c <_printf_i+0x150>
 800ede6:	680b      	ldr	r3, [r1, #0]
 800ede8:	1d1a      	adds	r2, r3, #4
 800edea:	600a      	str	r2, [r1, #0]
 800edec:	681e      	ldr	r6, [r3, #0]
 800edee:	6862      	ldr	r2, [r4, #4]
 800edf0:	2100      	movs	r1, #0
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7f1 f9fc 	bl	80001f0 <memchr>
 800edf8:	b108      	cbz	r0, 800edfe <_printf_i+0x1f2>
 800edfa:	1b80      	subs	r0, r0, r6
 800edfc:	6060      	str	r0, [r4, #4]
 800edfe:	6863      	ldr	r3, [r4, #4]
 800ee00:	6123      	str	r3, [r4, #16]
 800ee02:	2300      	movs	r3, #0
 800ee04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee08:	e7a8      	b.n	800ed5c <_printf_i+0x150>
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	4649      	mov	r1, r9
 800ee10:	4640      	mov	r0, r8
 800ee12:	47d0      	blx	sl
 800ee14:	3001      	adds	r0, #1
 800ee16:	d0ab      	beq.n	800ed70 <_printf_i+0x164>
 800ee18:	6823      	ldr	r3, [r4, #0]
 800ee1a:	079b      	lsls	r3, r3, #30
 800ee1c:	d413      	bmi.n	800ee46 <_printf_i+0x23a>
 800ee1e:	68e0      	ldr	r0, [r4, #12]
 800ee20:	9b03      	ldr	r3, [sp, #12]
 800ee22:	4298      	cmp	r0, r3
 800ee24:	bfb8      	it	lt
 800ee26:	4618      	movlt	r0, r3
 800ee28:	e7a4      	b.n	800ed74 <_printf_i+0x168>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	4649      	mov	r1, r9
 800ee30:	4640      	mov	r0, r8
 800ee32:	47d0      	blx	sl
 800ee34:	3001      	adds	r0, #1
 800ee36:	d09b      	beq.n	800ed70 <_printf_i+0x164>
 800ee38:	3501      	adds	r5, #1
 800ee3a:	68e3      	ldr	r3, [r4, #12]
 800ee3c:	9903      	ldr	r1, [sp, #12]
 800ee3e:	1a5b      	subs	r3, r3, r1
 800ee40:	42ab      	cmp	r3, r5
 800ee42:	dcf2      	bgt.n	800ee2a <_printf_i+0x21e>
 800ee44:	e7eb      	b.n	800ee1e <_printf_i+0x212>
 800ee46:	2500      	movs	r5, #0
 800ee48:	f104 0619 	add.w	r6, r4, #25
 800ee4c:	e7f5      	b.n	800ee3a <_printf_i+0x22e>
 800ee4e:	bf00      	nop
 800ee50:	08011b3e 	.word	0x08011b3e
 800ee54:	08011b4f 	.word	0x08011b4f

0800ee58 <iprintf>:
 800ee58:	b40f      	push	{r0, r1, r2, r3}
 800ee5a:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <iprintf+0x2c>)
 800ee5c:	b513      	push	{r0, r1, r4, lr}
 800ee5e:	681c      	ldr	r4, [r3, #0]
 800ee60:	b124      	cbz	r4, 800ee6c <iprintf+0x14>
 800ee62:	69a3      	ldr	r3, [r4, #24]
 800ee64:	b913      	cbnz	r3, 800ee6c <iprintf+0x14>
 800ee66:	4620      	mov	r0, r4
 800ee68:	f7ff fa56 	bl	800e318 <__sinit>
 800ee6c:	ab05      	add	r3, sp, #20
 800ee6e:	9a04      	ldr	r2, [sp, #16]
 800ee70:	68a1      	ldr	r1, [r4, #8]
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	4620      	mov	r0, r4
 800ee76:	f001 ff73 	bl	8010d60 <_vfiprintf_r>
 800ee7a:	b002      	add	sp, #8
 800ee7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee80:	b004      	add	sp, #16
 800ee82:	4770      	bx	lr
 800ee84:	200002cc 	.word	0x200002cc

0800ee88 <_puts_r>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	460e      	mov	r6, r1
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	b118      	cbz	r0, 800ee98 <_puts_r+0x10>
 800ee90:	6983      	ldr	r3, [r0, #24]
 800ee92:	b90b      	cbnz	r3, 800ee98 <_puts_r+0x10>
 800ee94:	f7ff fa40 	bl	800e318 <__sinit>
 800ee98:	69ab      	ldr	r3, [r5, #24]
 800ee9a:	68ac      	ldr	r4, [r5, #8]
 800ee9c:	b913      	cbnz	r3, 800eea4 <_puts_r+0x1c>
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7ff fa3a 	bl	800e318 <__sinit>
 800eea4:	4b2c      	ldr	r3, [pc, #176]	; (800ef58 <_puts_r+0xd0>)
 800eea6:	429c      	cmp	r4, r3
 800eea8:	d120      	bne.n	800eeec <_puts_r+0x64>
 800eeaa:	686c      	ldr	r4, [r5, #4]
 800eeac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeae:	07db      	lsls	r3, r3, #31
 800eeb0:	d405      	bmi.n	800eebe <_puts_r+0x36>
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	0598      	lsls	r0, r3, #22
 800eeb6:	d402      	bmi.n	800eebe <_puts_r+0x36>
 800eeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeba:	f7ff faf0 	bl	800e49e <__retarget_lock_acquire_recursive>
 800eebe:	89a3      	ldrh	r3, [r4, #12]
 800eec0:	0719      	lsls	r1, r3, #28
 800eec2:	d51d      	bpl.n	800ef00 <_puts_r+0x78>
 800eec4:	6923      	ldr	r3, [r4, #16]
 800eec6:	b1db      	cbz	r3, 800ef00 <_puts_r+0x78>
 800eec8:	3e01      	subs	r6, #1
 800eeca:	68a3      	ldr	r3, [r4, #8]
 800eecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eed0:	3b01      	subs	r3, #1
 800eed2:	60a3      	str	r3, [r4, #8]
 800eed4:	bb39      	cbnz	r1, 800ef26 <_puts_r+0x9e>
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	da38      	bge.n	800ef4c <_puts_r+0xc4>
 800eeda:	4622      	mov	r2, r4
 800eedc:	210a      	movs	r1, #10
 800eede:	4628      	mov	r0, r5
 800eee0:	f000 f92e 	bl	800f140 <__swbuf_r>
 800eee4:	3001      	adds	r0, #1
 800eee6:	d011      	beq.n	800ef0c <_puts_r+0x84>
 800eee8:	250a      	movs	r5, #10
 800eeea:	e011      	b.n	800ef10 <_puts_r+0x88>
 800eeec:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <_puts_r+0xd4>)
 800eeee:	429c      	cmp	r4, r3
 800eef0:	d101      	bne.n	800eef6 <_puts_r+0x6e>
 800eef2:	68ac      	ldr	r4, [r5, #8]
 800eef4:	e7da      	b.n	800eeac <_puts_r+0x24>
 800eef6:	4b1a      	ldr	r3, [pc, #104]	; (800ef60 <_puts_r+0xd8>)
 800eef8:	429c      	cmp	r4, r3
 800eefa:	bf08      	it	eq
 800eefc:	68ec      	ldreq	r4, [r5, #12]
 800eefe:	e7d5      	b.n	800eeac <_puts_r+0x24>
 800ef00:	4621      	mov	r1, r4
 800ef02:	4628      	mov	r0, r5
 800ef04:	f000 f980 	bl	800f208 <__swsetup_r>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d0dd      	beq.n	800eec8 <_puts_r+0x40>
 800ef0c:	f04f 35ff 	mov.w	r5, #4294967295
 800ef10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef12:	07da      	lsls	r2, r3, #31
 800ef14:	d405      	bmi.n	800ef22 <_puts_r+0x9a>
 800ef16:	89a3      	ldrh	r3, [r4, #12]
 800ef18:	059b      	lsls	r3, r3, #22
 800ef1a:	d402      	bmi.n	800ef22 <_puts_r+0x9a>
 800ef1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef1e:	f7ff fabf 	bl	800e4a0 <__retarget_lock_release_recursive>
 800ef22:	4628      	mov	r0, r5
 800ef24:	bd70      	pop	{r4, r5, r6, pc}
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da04      	bge.n	800ef34 <_puts_r+0xac>
 800ef2a:	69a2      	ldr	r2, [r4, #24]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	dc06      	bgt.n	800ef3e <_puts_r+0xb6>
 800ef30:	290a      	cmp	r1, #10
 800ef32:	d004      	beq.n	800ef3e <_puts_r+0xb6>
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	6022      	str	r2, [r4, #0]
 800ef3a:	7019      	strb	r1, [r3, #0]
 800ef3c:	e7c5      	b.n	800eeca <_puts_r+0x42>
 800ef3e:	4622      	mov	r2, r4
 800ef40:	4628      	mov	r0, r5
 800ef42:	f000 f8fd 	bl	800f140 <__swbuf_r>
 800ef46:	3001      	adds	r0, #1
 800ef48:	d1bf      	bne.n	800eeca <_puts_r+0x42>
 800ef4a:	e7df      	b.n	800ef0c <_puts_r+0x84>
 800ef4c:	6823      	ldr	r3, [r4, #0]
 800ef4e:	250a      	movs	r5, #10
 800ef50:	1c5a      	adds	r2, r3, #1
 800ef52:	6022      	str	r2, [r4, #0]
 800ef54:	701d      	strb	r5, [r3, #0]
 800ef56:	e7db      	b.n	800ef10 <_puts_r+0x88>
 800ef58:	08011ae8 	.word	0x08011ae8
 800ef5c:	08011b08 	.word	0x08011b08
 800ef60:	08011ac8 	.word	0x08011ac8

0800ef64 <puts>:
 800ef64:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <puts+0xc>)
 800ef66:	4601      	mov	r1, r0
 800ef68:	6818      	ldr	r0, [r3, #0]
 800ef6a:	f7ff bf8d 	b.w	800ee88 <_puts_r>
 800ef6e:	bf00      	nop
 800ef70:	200002cc 	.word	0x200002cc

0800ef74 <cleanup_glue>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	460c      	mov	r4, r1
 800ef78:	6809      	ldr	r1, [r1, #0]
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	b109      	cbz	r1, 800ef82 <cleanup_glue+0xe>
 800ef7e:	f7ff fff9 	bl	800ef74 <cleanup_glue>
 800ef82:	4621      	mov	r1, r4
 800ef84:	4628      	mov	r0, r5
 800ef86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef8a:	f001 bd13 	b.w	80109b4 <_free_r>
	...

0800ef90 <_reclaim_reent>:
 800ef90:	4b2c      	ldr	r3, [pc, #176]	; (800f044 <_reclaim_reent+0xb4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4283      	cmp	r3, r0
 800ef96:	b570      	push	{r4, r5, r6, lr}
 800ef98:	4604      	mov	r4, r0
 800ef9a:	d051      	beq.n	800f040 <_reclaim_reent+0xb0>
 800ef9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef9e:	b143      	cbz	r3, 800efb2 <_reclaim_reent+0x22>
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d14a      	bne.n	800f03c <_reclaim_reent+0xac>
 800efa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa8:	6819      	ldr	r1, [r3, #0]
 800efaa:	b111      	cbz	r1, 800efb2 <_reclaim_reent+0x22>
 800efac:	4620      	mov	r0, r4
 800efae:	f001 fd01 	bl	80109b4 <_free_r>
 800efb2:	6961      	ldr	r1, [r4, #20]
 800efb4:	b111      	cbz	r1, 800efbc <_reclaim_reent+0x2c>
 800efb6:	4620      	mov	r0, r4
 800efb8:	f001 fcfc 	bl	80109b4 <_free_r>
 800efbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800efbe:	b111      	cbz	r1, 800efc6 <_reclaim_reent+0x36>
 800efc0:	4620      	mov	r0, r4
 800efc2:	f001 fcf7 	bl	80109b4 <_free_r>
 800efc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800efc8:	b111      	cbz	r1, 800efd0 <_reclaim_reent+0x40>
 800efca:	4620      	mov	r0, r4
 800efcc:	f001 fcf2 	bl	80109b4 <_free_r>
 800efd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800efd2:	b111      	cbz	r1, 800efda <_reclaim_reent+0x4a>
 800efd4:	4620      	mov	r0, r4
 800efd6:	f001 fced 	bl	80109b4 <_free_r>
 800efda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800efdc:	b111      	cbz	r1, 800efe4 <_reclaim_reent+0x54>
 800efde:	4620      	mov	r0, r4
 800efe0:	f001 fce8 	bl	80109b4 <_free_r>
 800efe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800efe6:	b111      	cbz	r1, 800efee <_reclaim_reent+0x5e>
 800efe8:	4620      	mov	r0, r4
 800efea:	f001 fce3 	bl	80109b4 <_free_r>
 800efee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eff0:	b111      	cbz	r1, 800eff8 <_reclaim_reent+0x68>
 800eff2:	4620      	mov	r0, r4
 800eff4:	f001 fcde 	bl	80109b4 <_free_r>
 800eff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800effa:	b111      	cbz	r1, 800f002 <_reclaim_reent+0x72>
 800effc:	4620      	mov	r0, r4
 800effe:	f001 fcd9 	bl	80109b4 <_free_r>
 800f002:	69a3      	ldr	r3, [r4, #24]
 800f004:	b1e3      	cbz	r3, 800f040 <_reclaim_reent+0xb0>
 800f006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f008:	4620      	mov	r0, r4
 800f00a:	4798      	blx	r3
 800f00c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f00e:	b1b9      	cbz	r1, 800f040 <_reclaim_reent+0xb0>
 800f010:	4620      	mov	r0, r4
 800f012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f016:	f7ff bfad 	b.w	800ef74 <cleanup_glue>
 800f01a:	5949      	ldr	r1, [r1, r5]
 800f01c:	b941      	cbnz	r1, 800f030 <_reclaim_reent+0xa0>
 800f01e:	3504      	adds	r5, #4
 800f020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f022:	2d80      	cmp	r5, #128	; 0x80
 800f024:	68d9      	ldr	r1, [r3, #12]
 800f026:	d1f8      	bne.n	800f01a <_reclaim_reent+0x8a>
 800f028:	4620      	mov	r0, r4
 800f02a:	f001 fcc3 	bl	80109b4 <_free_r>
 800f02e:	e7ba      	b.n	800efa6 <_reclaim_reent+0x16>
 800f030:	680e      	ldr	r6, [r1, #0]
 800f032:	4620      	mov	r0, r4
 800f034:	f001 fcbe 	bl	80109b4 <_free_r>
 800f038:	4631      	mov	r1, r6
 800f03a:	e7ef      	b.n	800f01c <_reclaim_reent+0x8c>
 800f03c:	2500      	movs	r5, #0
 800f03e:	e7ef      	b.n	800f020 <_reclaim_reent+0x90>
 800f040:	bd70      	pop	{r4, r5, r6, pc}
 800f042:	bf00      	nop
 800f044:	200002cc 	.word	0x200002cc

0800f048 <_sbrk_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	4d06      	ldr	r5, [pc, #24]	; (800f064 <_sbrk_r+0x1c>)
 800f04c:	2300      	movs	r3, #0
 800f04e:	4604      	mov	r4, r0
 800f050:	4608      	mov	r0, r1
 800f052:	602b      	str	r3, [r5, #0]
 800f054:	f7f3 fdb2 	bl	8002bbc <_sbrk>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	d102      	bne.n	800f062 <_sbrk_r+0x1a>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	b103      	cbz	r3, 800f062 <_sbrk_r+0x1a>
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	bd38      	pop	{r3, r4, r5, pc}
 800f064:	20004d08 	.word	0x20004d08

0800f068 <siprintf>:
 800f068:	b40e      	push	{r1, r2, r3}
 800f06a:	b500      	push	{lr}
 800f06c:	b09c      	sub	sp, #112	; 0x70
 800f06e:	ab1d      	add	r3, sp, #116	; 0x74
 800f070:	9002      	str	r0, [sp, #8]
 800f072:	9006      	str	r0, [sp, #24]
 800f074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f078:	4809      	ldr	r0, [pc, #36]	; (800f0a0 <siprintf+0x38>)
 800f07a:	9107      	str	r1, [sp, #28]
 800f07c:	9104      	str	r1, [sp, #16]
 800f07e:	4909      	ldr	r1, [pc, #36]	; (800f0a4 <siprintf+0x3c>)
 800f080:	f853 2b04 	ldr.w	r2, [r3], #4
 800f084:	9105      	str	r1, [sp, #20]
 800f086:	6800      	ldr	r0, [r0, #0]
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	a902      	add	r1, sp, #8
 800f08c:	f001 fd3e 	bl	8010b0c <_svfiprintf_r>
 800f090:	9b02      	ldr	r3, [sp, #8]
 800f092:	2200      	movs	r2, #0
 800f094:	701a      	strb	r2, [r3, #0]
 800f096:	b01c      	add	sp, #112	; 0x70
 800f098:	f85d eb04 	ldr.w	lr, [sp], #4
 800f09c:	b003      	add	sp, #12
 800f09e:	4770      	bx	lr
 800f0a0:	200002cc 	.word	0x200002cc
 800f0a4:	ffff0208 	.word	0xffff0208

0800f0a8 <__sread>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	f001 ff86 	bl	8010fc0 <_read_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	bfab      	itete	ge
 800f0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f0bc:	181b      	addge	r3, r3, r0
 800f0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0c2:	bfac      	ite	ge
 800f0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0c6:	81a3      	strhlt	r3, [r4, #12]
 800f0c8:	bd10      	pop	{r4, pc}

0800f0ca <__swrite>:
 800f0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ce:	461f      	mov	r7, r3
 800f0d0:	898b      	ldrh	r3, [r1, #12]
 800f0d2:	05db      	lsls	r3, r3, #23
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	4616      	mov	r6, r2
 800f0da:	d505      	bpl.n	800f0e8 <__swrite+0x1e>
 800f0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f001 f84e 	bl	8010184 <_lseek_r>
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0f2:	81a3      	strh	r3, [r4, #12]
 800f0f4:	4632      	mov	r2, r6
 800f0f6:	463b      	mov	r3, r7
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fe:	f000 b871 	b.w	800f1e4 <_write_r>

0800f102 <__sseek>:
 800f102:	b510      	push	{r4, lr}
 800f104:	460c      	mov	r4, r1
 800f106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f10a:	f001 f83b 	bl	8010184 <_lseek_r>
 800f10e:	1c43      	adds	r3, r0, #1
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	bf15      	itete	ne
 800f114:	6560      	strne	r0, [r4, #84]	; 0x54
 800f116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f11e:	81a3      	strheq	r3, [r4, #12]
 800f120:	bf18      	it	ne
 800f122:	81a3      	strhne	r3, [r4, #12]
 800f124:	bd10      	pop	{r4, pc}

0800f126 <__sclose>:
 800f126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f12a:	f000 b8db 	b.w	800f2e4 <_close_r>

0800f12e <strcpy>:
 800f12e:	4603      	mov	r3, r0
 800f130:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f134:	f803 2b01 	strb.w	r2, [r3], #1
 800f138:	2a00      	cmp	r2, #0
 800f13a:	d1f9      	bne.n	800f130 <strcpy+0x2>
 800f13c:	4770      	bx	lr
	...

0800f140 <__swbuf_r>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	460e      	mov	r6, r1
 800f144:	4614      	mov	r4, r2
 800f146:	4605      	mov	r5, r0
 800f148:	b118      	cbz	r0, 800f152 <__swbuf_r+0x12>
 800f14a:	6983      	ldr	r3, [r0, #24]
 800f14c:	b90b      	cbnz	r3, 800f152 <__swbuf_r+0x12>
 800f14e:	f7ff f8e3 	bl	800e318 <__sinit>
 800f152:	4b21      	ldr	r3, [pc, #132]	; (800f1d8 <__swbuf_r+0x98>)
 800f154:	429c      	cmp	r4, r3
 800f156:	d12b      	bne.n	800f1b0 <__swbuf_r+0x70>
 800f158:	686c      	ldr	r4, [r5, #4]
 800f15a:	69a3      	ldr	r3, [r4, #24]
 800f15c:	60a3      	str	r3, [r4, #8]
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	071a      	lsls	r2, r3, #28
 800f162:	d52f      	bpl.n	800f1c4 <__swbuf_r+0x84>
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	b36b      	cbz	r3, 800f1c4 <__swbuf_r+0x84>
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	6820      	ldr	r0, [r4, #0]
 800f16c:	1ac0      	subs	r0, r0, r3
 800f16e:	6963      	ldr	r3, [r4, #20]
 800f170:	b2f6      	uxtb	r6, r6
 800f172:	4283      	cmp	r3, r0
 800f174:	4637      	mov	r7, r6
 800f176:	dc04      	bgt.n	800f182 <__swbuf_r+0x42>
 800f178:	4621      	mov	r1, r4
 800f17a:	4628      	mov	r0, r5
 800f17c:	f000 ffc2 	bl	8010104 <_fflush_r>
 800f180:	bb30      	cbnz	r0, 800f1d0 <__swbuf_r+0x90>
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	3b01      	subs	r3, #1
 800f186:	60a3      	str	r3, [r4, #8]
 800f188:	6823      	ldr	r3, [r4, #0]
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	6022      	str	r2, [r4, #0]
 800f18e:	701e      	strb	r6, [r3, #0]
 800f190:	6963      	ldr	r3, [r4, #20]
 800f192:	3001      	adds	r0, #1
 800f194:	4283      	cmp	r3, r0
 800f196:	d004      	beq.n	800f1a2 <__swbuf_r+0x62>
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	07db      	lsls	r3, r3, #31
 800f19c:	d506      	bpl.n	800f1ac <__swbuf_r+0x6c>
 800f19e:	2e0a      	cmp	r6, #10
 800f1a0:	d104      	bne.n	800f1ac <__swbuf_r+0x6c>
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f000 ffad 	bl	8010104 <_fflush_r>
 800f1aa:	b988      	cbnz	r0, 800f1d0 <__swbuf_r+0x90>
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b0:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <__swbuf_r+0x9c>)
 800f1b2:	429c      	cmp	r4, r3
 800f1b4:	d101      	bne.n	800f1ba <__swbuf_r+0x7a>
 800f1b6:	68ac      	ldr	r4, [r5, #8]
 800f1b8:	e7cf      	b.n	800f15a <__swbuf_r+0x1a>
 800f1ba:	4b09      	ldr	r3, [pc, #36]	; (800f1e0 <__swbuf_r+0xa0>)
 800f1bc:	429c      	cmp	r4, r3
 800f1be:	bf08      	it	eq
 800f1c0:	68ec      	ldreq	r4, [r5, #12]
 800f1c2:	e7ca      	b.n	800f15a <__swbuf_r+0x1a>
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 f81e 	bl	800f208 <__swsetup_r>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d0cb      	beq.n	800f168 <__swbuf_r+0x28>
 800f1d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1d4:	e7ea      	b.n	800f1ac <__swbuf_r+0x6c>
 800f1d6:	bf00      	nop
 800f1d8:	08011ae8 	.word	0x08011ae8
 800f1dc:	08011b08 	.word	0x08011b08
 800f1e0:	08011ac8 	.word	0x08011ac8

0800f1e4 <_write_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4d07      	ldr	r5, [pc, #28]	; (800f204 <_write_r+0x20>)
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	602a      	str	r2, [r5, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f7f3 fc91 	bl	8002b1a <_write>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_write_r+0x1e>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_write_r+0x1e>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	20004d08 	.word	0x20004d08

0800f208 <__swsetup_r>:
 800f208:	4b32      	ldr	r3, [pc, #200]	; (800f2d4 <__swsetup_r+0xcc>)
 800f20a:	b570      	push	{r4, r5, r6, lr}
 800f20c:	681d      	ldr	r5, [r3, #0]
 800f20e:	4606      	mov	r6, r0
 800f210:	460c      	mov	r4, r1
 800f212:	b125      	cbz	r5, 800f21e <__swsetup_r+0x16>
 800f214:	69ab      	ldr	r3, [r5, #24]
 800f216:	b913      	cbnz	r3, 800f21e <__swsetup_r+0x16>
 800f218:	4628      	mov	r0, r5
 800f21a:	f7ff f87d 	bl	800e318 <__sinit>
 800f21e:	4b2e      	ldr	r3, [pc, #184]	; (800f2d8 <__swsetup_r+0xd0>)
 800f220:	429c      	cmp	r4, r3
 800f222:	d10f      	bne.n	800f244 <__swsetup_r+0x3c>
 800f224:	686c      	ldr	r4, [r5, #4]
 800f226:	89a3      	ldrh	r3, [r4, #12]
 800f228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f22c:	0719      	lsls	r1, r3, #28
 800f22e:	d42c      	bmi.n	800f28a <__swsetup_r+0x82>
 800f230:	06dd      	lsls	r5, r3, #27
 800f232:	d411      	bmi.n	800f258 <__swsetup_r+0x50>
 800f234:	2309      	movs	r3, #9
 800f236:	6033      	str	r3, [r6, #0]
 800f238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f23c:	81a3      	strh	r3, [r4, #12]
 800f23e:	f04f 30ff 	mov.w	r0, #4294967295
 800f242:	e03e      	b.n	800f2c2 <__swsetup_r+0xba>
 800f244:	4b25      	ldr	r3, [pc, #148]	; (800f2dc <__swsetup_r+0xd4>)
 800f246:	429c      	cmp	r4, r3
 800f248:	d101      	bne.n	800f24e <__swsetup_r+0x46>
 800f24a:	68ac      	ldr	r4, [r5, #8]
 800f24c:	e7eb      	b.n	800f226 <__swsetup_r+0x1e>
 800f24e:	4b24      	ldr	r3, [pc, #144]	; (800f2e0 <__swsetup_r+0xd8>)
 800f250:	429c      	cmp	r4, r3
 800f252:	bf08      	it	eq
 800f254:	68ec      	ldreq	r4, [r5, #12]
 800f256:	e7e6      	b.n	800f226 <__swsetup_r+0x1e>
 800f258:	0758      	lsls	r0, r3, #29
 800f25a:	d512      	bpl.n	800f282 <__swsetup_r+0x7a>
 800f25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f25e:	b141      	cbz	r1, 800f272 <__swsetup_r+0x6a>
 800f260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f264:	4299      	cmp	r1, r3
 800f266:	d002      	beq.n	800f26e <__swsetup_r+0x66>
 800f268:	4630      	mov	r0, r6
 800f26a:	f001 fba3 	bl	80109b4 <_free_r>
 800f26e:	2300      	movs	r3, #0
 800f270:	6363      	str	r3, [r4, #52]	; 0x34
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f278:	81a3      	strh	r3, [r4, #12]
 800f27a:	2300      	movs	r3, #0
 800f27c:	6063      	str	r3, [r4, #4]
 800f27e:	6923      	ldr	r3, [r4, #16]
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	f043 0308 	orr.w	r3, r3, #8
 800f288:	81a3      	strh	r3, [r4, #12]
 800f28a:	6923      	ldr	r3, [r4, #16]
 800f28c:	b94b      	cbnz	r3, 800f2a2 <__swsetup_r+0x9a>
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f298:	d003      	beq.n	800f2a2 <__swsetup_r+0x9a>
 800f29a:	4621      	mov	r1, r4
 800f29c:	4630      	mov	r0, r6
 800f29e:	f000 ffa7 	bl	80101f0 <__smakebuf_r>
 800f2a2:	89a0      	ldrh	r0, [r4, #12]
 800f2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2a8:	f010 0301 	ands.w	r3, r0, #1
 800f2ac:	d00a      	beq.n	800f2c4 <__swsetup_r+0xbc>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	60a3      	str	r3, [r4, #8]
 800f2b2:	6963      	ldr	r3, [r4, #20]
 800f2b4:	425b      	negs	r3, r3
 800f2b6:	61a3      	str	r3, [r4, #24]
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	b943      	cbnz	r3, 800f2ce <__swsetup_r+0xc6>
 800f2bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2c0:	d1ba      	bne.n	800f238 <__swsetup_r+0x30>
 800f2c2:	bd70      	pop	{r4, r5, r6, pc}
 800f2c4:	0781      	lsls	r1, r0, #30
 800f2c6:	bf58      	it	pl
 800f2c8:	6963      	ldrpl	r3, [r4, #20]
 800f2ca:	60a3      	str	r3, [r4, #8]
 800f2cc:	e7f4      	b.n	800f2b8 <__swsetup_r+0xb0>
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	e7f7      	b.n	800f2c2 <__swsetup_r+0xba>
 800f2d2:	bf00      	nop
 800f2d4:	200002cc 	.word	0x200002cc
 800f2d8:	08011ae8 	.word	0x08011ae8
 800f2dc:	08011b08 	.word	0x08011b08
 800f2e0:	08011ac8 	.word	0x08011ac8

0800f2e4 <_close_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d06      	ldr	r5, [pc, #24]	; (800f300 <_close_r+0x1c>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	602b      	str	r3, [r5, #0]
 800f2f0:	f7f3 fc2f 	bl	8002b52 <_close>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d102      	bne.n	800f2fe <_close_r+0x1a>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	b103      	cbz	r3, 800f2fe <_close_r+0x1a>
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	20004d08 	.word	0x20004d08

0800f304 <quorem>:
 800f304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	6903      	ldr	r3, [r0, #16]
 800f30a:	690c      	ldr	r4, [r1, #16]
 800f30c:	42a3      	cmp	r3, r4
 800f30e:	4607      	mov	r7, r0
 800f310:	f2c0 8081 	blt.w	800f416 <quorem+0x112>
 800f314:	3c01      	subs	r4, #1
 800f316:	f101 0814 	add.w	r8, r1, #20
 800f31a:	f100 0514 	add.w	r5, r0, #20
 800f31e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f322:	9301      	str	r3, [sp, #4]
 800f324:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f328:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f32c:	3301      	adds	r3, #1
 800f32e:	429a      	cmp	r2, r3
 800f330:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f334:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f338:	fbb2 f6f3 	udiv	r6, r2, r3
 800f33c:	d331      	bcc.n	800f3a2 <quorem+0x9e>
 800f33e:	f04f 0e00 	mov.w	lr, #0
 800f342:	4640      	mov	r0, r8
 800f344:	46ac      	mov	ip, r5
 800f346:	46f2      	mov	sl, lr
 800f348:	f850 2b04 	ldr.w	r2, [r0], #4
 800f34c:	b293      	uxth	r3, r2
 800f34e:	fb06 e303 	mla	r3, r6, r3, lr
 800f352:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f356:	b29b      	uxth	r3, r3
 800f358:	ebaa 0303 	sub.w	r3, sl, r3
 800f35c:	0c12      	lsrs	r2, r2, #16
 800f35e:	f8dc a000 	ldr.w	sl, [ip]
 800f362:	fb06 e202 	mla	r2, r6, r2, lr
 800f366:	fa13 f38a 	uxtah	r3, r3, sl
 800f36a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f36e:	fa1f fa82 	uxth.w	sl, r2
 800f372:	f8dc 2000 	ldr.w	r2, [ip]
 800f376:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f37a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f37e:	b29b      	uxth	r3, r3
 800f380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f384:	4581      	cmp	r9, r0
 800f386:	f84c 3b04 	str.w	r3, [ip], #4
 800f38a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f38e:	d2db      	bcs.n	800f348 <quorem+0x44>
 800f390:	f855 300b 	ldr.w	r3, [r5, fp]
 800f394:	b92b      	cbnz	r3, 800f3a2 <quorem+0x9e>
 800f396:	9b01      	ldr	r3, [sp, #4]
 800f398:	3b04      	subs	r3, #4
 800f39a:	429d      	cmp	r5, r3
 800f39c:	461a      	mov	r2, r3
 800f39e:	d32e      	bcc.n	800f3fe <quorem+0xfa>
 800f3a0:	613c      	str	r4, [r7, #16]
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	f001 f9f6 	bl	8010794 <__mcmp>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	db24      	blt.n	800f3f6 <quorem+0xf2>
 800f3ac:	3601      	adds	r6, #1
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f04f 0c00 	mov.w	ip, #0
 800f3b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3b8:	f8d0 e000 	ldr.w	lr, [r0]
 800f3bc:	b293      	uxth	r3, r2
 800f3be:	ebac 0303 	sub.w	r3, ip, r3
 800f3c2:	0c12      	lsrs	r2, r2, #16
 800f3c4:	fa13 f38e 	uxtah	r3, r3, lr
 800f3c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f3cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3d6:	45c1      	cmp	r9, r8
 800f3d8:	f840 3b04 	str.w	r3, [r0], #4
 800f3dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f3e0:	d2e8      	bcs.n	800f3b4 <quorem+0xb0>
 800f3e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3ea:	b922      	cbnz	r2, 800f3f6 <quorem+0xf2>
 800f3ec:	3b04      	subs	r3, #4
 800f3ee:	429d      	cmp	r5, r3
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	d30a      	bcc.n	800f40a <quorem+0x106>
 800f3f4:	613c      	str	r4, [r7, #16]
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	b003      	add	sp, #12
 800f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fe:	6812      	ldr	r2, [r2, #0]
 800f400:	3b04      	subs	r3, #4
 800f402:	2a00      	cmp	r2, #0
 800f404:	d1cc      	bne.n	800f3a0 <quorem+0x9c>
 800f406:	3c01      	subs	r4, #1
 800f408:	e7c7      	b.n	800f39a <quorem+0x96>
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	3b04      	subs	r3, #4
 800f40e:	2a00      	cmp	r2, #0
 800f410:	d1f0      	bne.n	800f3f4 <quorem+0xf0>
 800f412:	3c01      	subs	r4, #1
 800f414:	e7eb      	b.n	800f3ee <quorem+0xea>
 800f416:	2000      	movs	r0, #0
 800f418:	e7ee      	b.n	800f3f8 <quorem+0xf4>
 800f41a:	0000      	movs	r0, r0
 800f41c:	0000      	movs	r0, r0
	...

0800f420 <_dtoa_r>:
 800f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f424:	ed2d 8b02 	vpush	{d8}
 800f428:	ec57 6b10 	vmov	r6, r7, d0
 800f42c:	b095      	sub	sp, #84	; 0x54
 800f42e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f430:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f434:	9105      	str	r1, [sp, #20]
 800f436:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f43a:	4604      	mov	r4, r0
 800f43c:	9209      	str	r2, [sp, #36]	; 0x24
 800f43e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f440:	b975      	cbnz	r5, 800f460 <_dtoa_r+0x40>
 800f442:	2010      	movs	r0, #16
 800f444:	f000 ff14 	bl	8010270 <malloc>
 800f448:	4602      	mov	r2, r0
 800f44a:	6260      	str	r0, [r4, #36]	; 0x24
 800f44c:	b920      	cbnz	r0, 800f458 <_dtoa_r+0x38>
 800f44e:	4bb2      	ldr	r3, [pc, #712]	; (800f718 <_dtoa_r+0x2f8>)
 800f450:	21ea      	movs	r1, #234	; 0xea
 800f452:	48b2      	ldr	r0, [pc, #712]	; (800f71c <_dtoa_r+0x2fc>)
 800f454:	f001 fdc6 	bl	8010fe4 <__assert_func>
 800f458:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f45c:	6005      	str	r5, [r0, #0]
 800f45e:	60c5      	str	r5, [r0, #12]
 800f460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f462:	6819      	ldr	r1, [r3, #0]
 800f464:	b151      	cbz	r1, 800f47c <_dtoa_r+0x5c>
 800f466:	685a      	ldr	r2, [r3, #4]
 800f468:	604a      	str	r2, [r1, #4]
 800f46a:	2301      	movs	r3, #1
 800f46c:	4093      	lsls	r3, r2
 800f46e:	608b      	str	r3, [r1, #8]
 800f470:	4620      	mov	r0, r4
 800f472:	f000 ff51 	bl	8010318 <_Bfree>
 800f476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f478:	2200      	movs	r2, #0
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	1e3b      	subs	r3, r7, #0
 800f47e:	bfb9      	ittee	lt
 800f480:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f484:	9303      	strlt	r3, [sp, #12]
 800f486:	2300      	movge	r3, #0
 800f488:	f8c8 3000 	strge.w	r3, [r8]
 800f48c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f490:	4ba3      	ldr	r3, [pc, #652]	; (800f720 <_dtoa_r+0x300>)
 800f492:	bfbc      	itt	lt
 800f494:	2201      	movlt	r2, #1
 800f496:	f8c8 2000 	strlt.w	r2, [r8]
 800f49a:	ea33 0309 	bics.w	r3, r3, r9
 800f49e:	d11b      	bne.n	800f4d8 <_dtoa_r+0xb8>
 800f4a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4a6:	6013      	str	r3, [r2, #0]
 800f4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4ac:	4333      	orrs	r3, r6
 800f4ae:	f000 857a 	beq.w	800ffa6 <_dtoa_r+0xb86>
 800f4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4b4:	b963      	cbnz	r3, 800f4d0 <_dtoa_r+0xb0>
 800f4b6:	4b9b      	ldr	r3, [pc, #620]	; (800f724 <_dtoa_r+0x304>)
 800f4b8:	e024      	b.n	800f504 <_dtoa_r+0xe4>
 800f4ba:	4b9b      	ldr	r3, [pc, #620]	; (800f728 <_dtoa_r+0x308>)
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	3308      	adds	r3, #8
 800f4c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4c2:	6013      	str	r3, [r2, #0]
 800f4c4:	9800      	ldr	r0, [sp, #0]
 800f4c6:	b015      	add	sp, #84	; 0x54
 800f4c8:	ecbd 8b02 	vpop	{d8}
 800f4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d0:	4b94      	ldr	r3, [pc, #592]	; (800f724 <_dtoa_r+0x304>)
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	3303      	adds	r3, #3
 800f4d6:	e7f3      	b.n	800f4c0 <_dtoa_r+0xa0>
 800f4d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	ec51 0b17 	vmov	r0, r1, d7
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f4e8:	f7f1 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4ec:	4680      	mov	r8, r0
 800f4ee:	b158      	cbz	r0, 800f508 <_dtoa_r+0xe8>
 800f4f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	6013      	str	r3, [r2, #0]
 800f4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 8551 	beq.w	800ffa0 <_dtoa_r+0xb80>
 800f4fe:	488b      	ldr	r0, [pc, #556]	; (800f72c <_dtoa_r+0x30c>)
 800f500:	6018      	str	r0, [r3, #0]
 800f502:	1e43      	subs	r3, r0, #1
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	e7dd      	b.n	800f4c4 <_dtoa_r+0xa4>
 800f508:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f50c:	aa12      	add	r2, sp, #72	; 0x48
 800f50e:	a913      	add	r1, sp, #76	; 0x4c
 800f510:	4620      	mov	r0, r4
 800f512:	f001 f9e3 	bl	80108dc <__d2b>
 800f516:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f51a:	4683      	mov	fp, r0
 800f51c:	2d00      	cmp	r5, #0
 800f51e:	d07c      	beq.n	800f61a <_dtoa_r+0x1fa>
 800f520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f522:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f52a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f52e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f532:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f53a:	4b7d      	ldr	r3, [pc, #500]	; (800f730 <_dtoa_r+0x310>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	4630      	mov	r0, r6
 800f540:	4639      	mov	r1, r7
 800f542:	f7f0 fea9 	bl	8000298 <__aeabi_dsub>
 800f546:	a36e      	add	r3, pc, #440	; (adr r3, 800f700 <_dtoa_r+0x2e0>)
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f7f1 f85c 	bl	8000608 <__aeabi_dmul>
 800f550:	a36d      	add	r3, pc, #436	; (adr r3, 800f708 <_dtoa_r+0x2e8>)
 800f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f556:	f7f0 fea1 	bl	800029c <__adddf3>
 800f55a:	4606      	mov	r6, r0
 800f55c:	4628      	mov	r0, r5
 800f55e:	460f      	mov	r7, r1
 800f560:	f7f0 ffe8 	bl	8000534 <__aeabi_i2d>
 800f564:	a36a      	add	r3, pc, #424	; (adr r3, 800f710 <_dtoa_r+0x2f0>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f7f1 f84d 	bl	8000608 <__aeabi_dmul>
 800f56e:	4602      	mov	r2, r0
 800f570:	460b      	mov	r3, r1
 800f572:	4630      	mov	r0, r6
 800f574:	4639      	mov	r1, r7
 800f576:	f7f0 fe91 	bl	800029c <__adddf3>
 800f57a:	4606      	mov	r6, r0
 800f57c:	460f      	mov	r7, r1
 800f57e:	f7f1 faf3 	bl	8000b68 <__aeabi_d2iz>
 800f582:	2200      	movs	r2, #0
 800f584:	4682      	mov	sl, r0
 800f586:	2300      	movs	r3, #0
 800f588:	4630      	mov	r0, r6
 800f58a:	4639      	mov	r1, r7
 800f58c:	f7f1 faae 	bl	8000aec <__aeabi_dcmplt>
 800f590:	b148      	cbz	r0, 800f5a6 <_dtoa_r+0x186>
 800f592:	4650      	mov	r0, sl
 800f594:	f7f0 ffce 	bl	8000534 <__aeabi_i2d>
 800f598:	4632      	mov	r2, r6
 800f59a:	463b      	mov	r3, r7
 800f59c:	f7f1 fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5a0:	b908      	cbnz	r0, 800f5a6 <_dtoa_r+0x186>
 800f5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5a6:	f1ba 0f16 	cmp.w	sl, #22
 800f5aa:	d854      	bhi.n	800f656 <_dtoa_r+0x236>
 800f5ac:	4b61      	ldr	r3, [pc, #388]	; (800f734 <_dtoa_r+0x314>)
 800f5ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5ba:	f7f1 fa97 	bl	8000aec <__aeabi_dcmplt>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	d04b      	beq.n	800f65a <_dtoa_r+0x23a>
 800f5c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	930e      	str	r3, [sp, #56]	; 0x38
 800f5ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5cc:	1b5d      	subs	r5, r3, r5
 800f5ce:	1e6b      	subs	r3, r5, #1
 800f5d0:	9304      	str	r3, [sp, #16]
 800f5d2:	bf43      	ittte	mi
 800f5d4:	2300      	movmi	r3, #0
 800f5d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f5da:	9304      	strmi	r3, [sp, #16]
 800f5dc:	f04f 0800 	movpl.w	r8, #0
 800f5e0:	f1ba 0f00 	cmp.w	sl, #0
 800f5e4:	db3b      	blt.n	800f65e <_dtoa_r+0x23e>
 800f5e6:	9b04      	ldr	r3, [sp, #16]
 800f5e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f5ec:	4453      	add	r3, sl
 800f5ee:	9304      	str	r3, [sp, #16]
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	9306      	str	r3, [sp, #24]
 800f5f4:	9b05      	ldr	r3, [sp, #20]
 800f5f6:	2b09      	cmp	r3, #9
 800f5f8:	d869      	bhi.n	800f6ce <_dtoa_r+0x2ae>
 800f5fa:	2b05      	cmp	r3, #5
 800f5fc:	bfc4      	itt	gt
 800f5fe:	3b04      	subgt	r3, #4
 800f600:	9305      	strgt	r3, [sp, #20]
 800f602:	9b05      	ldr	r3, [sp, #20]
 800f604:	f1a3 0302 	sub.w	r3, r3, #2
 800f608:	bfcc      	ite	gt
 800f60a:	2500      	movgt	r5, #0
 800f60c:	2501      	movle	r5, #1
 800f60e:	2b03      	cmp	r3, #3
 800f610:	d869      	bhi.n	800f6e6 <_dtoa_r+0x2c6>
 800f612:	e8df f003 	tbb	[pc, r3]
 800f616:	4e2c      	.short	0x4e2c
 800f618:	5a4c      	.short	0x5a4c
 800f61a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f61e:	441d      	add	r5, r3
 800f620:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f624:	2b20      	cmp	r3, #32
 800f626:	bfc1      	itttt	gt
 800f628:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f62c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f630:	fa09 f303 	lslgt.w	r3, r9, r3
 800f634:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f638:	bfda      	itte	le
 800f63a:	f1c3 0320 	rsble	r3, r3, #32
 800f63e:	fa06 f003 	lslle.w	r0, r6, r3
 800f642:	4318      	orrgt	r0, r3
 800f644:	f7f0 ff66 	bl	8000514 <__aeabi_ui2d>
 800f648:	2301      	movs	r3, #1
 800f64a:	4606      	mov	r6, r0
 800f64c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f650:	3d01      	subs	r5, #1
 800f652:	9310      	str	r3, [sp, #64]	; 0x40
 800f654:	e771      	b.n	800f53a <_dtoa_r+0x11a>
 800f656:	2301      	movs	r3, #1
 800f658:	e7b6      	b.n	800f5c8 <_dtoa_r+0x1a8>
 800f65a:	900e      	str	r0, [sp, #56]	; 0x38
 800f65c:	e7b5      	b.n	800f5ca <_dtoa_r+0x1aa>
 800f65e:	f1ca 0300 	rsb	r3, sl, #0
 800f662:	9306      	str	r3, [sp, #24]
 800f664:	2300      	movs	r3, #0
 800f666:	eba8 080a 	sub.w	r8, r8, sl
 800f66a:	930d      	str	r3, [sp, #52]	; 0x34
 800f66c:	e7c2      	b.n	800f5f4 <_dtoa_r+0x1d4>
 800f66e:	2300      	movs	r3, #0
 800f670:	9308      	str	r3, [sp, #32]
 800f672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f674:	2b00      	cmp	r3, #0
 800f676:	dc39      	bgt.n	800f6ec <_dtoa_r+0x2cc>
 800f678:	f04f 0901 	mov.w	r9, #1
 800f67c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f680:	464b      	mov	r3, r9
 800f682:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f686:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f688:	2200      	movs	r2, #0
 800f68a:	6042      	str	r2, [r0, #4]
 800f68c:	2204      	movs	r2, #4
 800f68e:	f102 0614 	add.w	r6, r2, #20
 800f692:	429e      	cmp	r6, r3
 800f694:	6841      	ldr	r1, [r0, #4]
 800f696:	d92f      	bls.n	800f6f8 <_dtoa_r+0x2d8>
 800f698:	4620      	mov	r0, r4
 800f69a:	f000 fdfd 	bl	8010298 <_Balloc>
 800f69e:	9000      	str	r0, [sp, #0]
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d14b      	bne.n	800f73c <_dtoa_r+0x31c>
 800f6a4:	4b24      	ldr	r3, [pc, #144]	; (800f738 <_dtoa_r+0x318>)
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6ac:	e6d1      	b.n	800f452 <_dtoa_r+0x32>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e7de      	b.n	800f670 <_dtoa_r+0x250>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9308      	str	r3, [sp, #32]
 800f6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b8:	eb0a 0903 	add.w	r9, sl, r3
 800f6bc:	f109 0301 	add.w	r3, r9, #1
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	9301      	str	r3, [sp, #4]
 800f6c4:	bfb8      	it	lt
 800f6c6:	2301      	movlt	r3, #1
 800f6c8:	e7dd      	b.n	800f686 <_dtoa_r+0x266>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e7f2      	b.n	800f6b4 <_dtoa_r+0x294>
 800f6ce:	2501      	movs	r5, #1
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9305      	str	r3, [sp, #20]
 800f6d4:	9508      	str	r5, [sp, #32]
 800f6d6:	f04f 39ff 	mov.w	r9, #4294967295
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6e0:	2312      	movs	r3, #18
 800f6e2:	9209      	str	r2, [sp, #36]	; 0x24
 800f6e4:	e7cf      	b.n	800f686 <_dtoa_r+0x266>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	9308      	str	r3, [sp, #32]
 800f6ea:	e7f4      	b.n	800f6d6 <_dtoa_r+0x2b6>
 800f6ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f6f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6f4:	464b      	mov	r3, r9
 800f6f6:	e7c6      	b.n	800f686 <_dtoa_r+0x266>
 800f6f8:	3101      	adds	r1, #1
 800f6fa:	6041      	str	r1, [r0, #4]
 800f6fc:	0052      	lsls	r2, r2, #1
 800f6fe:	e7c6      	b.n	800f68e <_dtoa_r+0x26e>
 800f700:	636f4361 	.word	0x636f4361
 800f704:	3fd287a7 	.word	0x3fd287a7
 800f708:	8b60c8b3 	.word	0x8b60c8b3
 800f70c:	3fc68a28 	.word	0x3fc68a28
 800f710:	509f79fb 	.word	0x509f79fb
 800f714:	3fd34413 	.word	0x3fd34413
 800f718:	08011b6d 	.word	0x08011b6d
 800f71c:	08011b84 	.word	0x08011b84
 800f720:	7ff00000 	.word	0x7ff00000
 800f724:	08011b69 	.word	0x08011b69
 800f728:	08011b60 	.word	0x08011b60
 800f72c:	08011b3d 	.word	0x08011b3d
 800f730:	3ff80000 	.word	0x3ff80000
 800f734:	08011c80 	.word	0x08011c80
 800f738:	08011be3 	.word	0x08011be3
 800f73c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f73e:	9a00      	ldr	r2, [sp, #0]
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	9b01      	ldr	r3, [sp, #4]
 800f744:	2b0e      	cmp	r3, #14
 800f746:	f200 80ad 	bhi.w	800f8a4 <_dtoa_r+0x484>
 800f74a:	2d00      	cmp	r5, #0
 800f74c:	f000 80aa 	beq.w	800f8a4 <_dtoa_r+0x484>
 800f750:	f1ba 0f00 	cmp.w	sl, #0
 800f754:	dd36      	ble.n	800f7c4 <_dtoa_r+0x3a4>
 800f756:	4ac3      	ldr	r2, [pc, #780]	; (800fa64 <_dtoa_r+0x644>)
 800f758:	f00a 030f 	and.w	r3, sl, #15
 800f75c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f760:	ed93 7b00 	vldr	d7, [r3]
 800f764:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f768:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f76c:	eeb0 8a47 	vmov.f32	s16, s14
 800f770:	eef0 8a67 	vmov.f32	s17, s15
 800f774:	d016      	beq.n	800f7a4 <_dtoa_r+0x384>
 800f776:	4bbc      	ldr	r3, [pc, #752]	; (800fa68 <_dtoa_r+0x648>)
 800f778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f77c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f780:	f7f1 f86c 	bl	800085c <__aeabi_ddiv>
 800f784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f788:	f007 070f 	and.w	r7, r7, #15
 800f78c:	2503      	movs	r5, #3
 800f78e:	4eb6      	ldr	r6, [pc, #728]	; (800fa68 <_dtoa_r+0x648>)
 800f790:	b957      	cbnz	r7, 800f7a8 <_dtoa_r+0x388>
 800f792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f796:	ec53 2b18 	vmov	r2, r3, d8
 800f79a:	f7f1 f85f 	bl	800085c <__aeabi_ddiv>
 800f79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7a2:	e029      	b.n	800f7f8 <_dtoa_r+0x3d8>
 800f7a4:	2502      	movs	r5, #2
 800f7a6:	e7f2      	b.n	800f78e <_dtoa_r+0x36e>
 800f7a8:	07f9      	lsls	r1, r7, #31
 800f7aa:	d508      	bpl.n	800f7be <_dtoa_r+0x39e>
 800f7ac:	ec51 0b18 	vmov	r0, r1, d8
 800f7b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7b4:	f7f0 ff28 	bl	8000608 <__aeabi_dmul>
 800f7b8:	ec41 0b18 	vmov	d8, r0, r1
 800f7bc:	3501      	adds	r5, #1
 800f7be:	107f      	asrs	r7, r7, #1
 800f7c0:	3608      	adds	r6, #8
 800f7c2:	e7e5      	b.n	800f790 <_dtoa_r+0x370>
 800f7c4:	f000 80a6 	beq.w	800f914 <_dtoa_r+0x4f4>
 800f7c8:	f1ca 0600 	rsb	r6, sl, #0
 800f7cc:	4ba5      	ldr	r3, [pc, #660]	; (800fa64 <_dtoa_r+0x644>)
 800f7ce:	4fa6      	ldr	r7, [pc, #664]	; (800fa68 <_dtoa_r+0x648>)
 800f7d0:	f006 020f 	and.w	r2, r6, #15
 800f7d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f7e0:	f7f0 ff12 	bl	8000608 <__aeabi_dmul>
 800f7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7e8:	1136      	asrs	r6, r6, #4
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	2502      	movs	r5, #2
 800f7ee:	2e00      	cmp	r6, #0
 800f7f0:	f040 8085 	bne.w	800f8fe <_dtoa_r+0x4de>
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d1d2      	bne.n	800f79e <_dtoa_r+0x37e>
 800f7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 808c 	beq.w	800f918 <_dtoa_r+0x4f8>
 800f800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f804:	4b99      	ldr	r3, [pc, #612]	; (800fa6c <_dtoa_r+0x64c>)
 800f806:	2200      	movs	r2, #0
 800f808:	4630      	mov	r0, r6
 800f80a:	4639      	mov	r1, r7
 800f80c:	f7f1 f96e 	bl	8000aec <__aeabi_dcmplt>
 800f810:	2800      	cmp	r0, #0
 800f812:	f000 8081 	beq.w	800f918 <_dtoa_r+0x4f8>
 800f816:	9b01      	ldr	r3, [sp, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d07d      	beq.n	800f918 <_dtoa_r+0x4f8>
 800f81c:	f1b9 0f00 	cmp.w	r9, #0
 800f820:	dd3c      	ble.n	800f89c <_dtoa_r+0x47c>
 800f822:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f826:	9307      	str	r3, [sp, #28]
 800f828:	2200      	movs	r2, #0
 800f82a:	4b91      	ldr	r3, [pc, #580]	; (800fa70 <_dtoa_r+0x650>)
 800f82c:	4630      	mov	r0, r6
 800f82e:	4639      	mov	r1, r7
 800f830:	f7f0 feea 	bl	8000608 <__aeabi_dmul>
 800f834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f838:	3501      	adds	r5, #1
 800f83a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f83e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f842:	4628      	mov	r0, r5
 800f844:	f7f0 fe76 	bl	8000534 <__aeabi_i2d>
 800f848:	4632      	mov	r2, r6
 800f84a:	463b      	mov	r3, r7
 800f84c:	f7f0 fedc 	bl	8000608 <__aeabi_dmul>
 800f850:	4b88      	ldr	r3, [pc, #544]	; (800fa74 <_dtoa_r+0x654>)
 800f852:	2200      	movs	r2, #0
 800f854:	f7f0 fd22 	bl	800029c <__adddf3>
 800f858:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f860:	9303      	str	r3, [sp, #12]
 800f862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f864:	2b00      	cmp	r3, #0
 800f866:	d15c      	bne.n	800f922 <_dtoa_r+0x502>
 800f868:	4b83      	ldr	r3, [pc, #524]	; (800fa78 <_dtoa_r+0x658>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	4630      	mov	r0, r6
 800f86e:	4639      	mov	r1, r7
 800f870:	f7f0 fd12 	bl	8000298 <__aeabi_dsub>
 800f874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f878:	4606      	mov	r6, r0
 800f87a:	460f      	mov	r7, r1
 800f87c:	f7f1 f954 	bl	8000b28 <__aeabi_dcmpgt>
 800f880:	2800      	cmp	r0, #0
 800f882:	f040 8296 	bne.w	800fdb2 <_dtoa_r+0x992>
 800f886:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f88a:	4630      	mov	r0, r6
 800f88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f890:	4639      	mov	r1, r7
 800f892:	f7f1 f92b 	bl	8000aec <__aeabi_dcmplt>
 800f896:	2800      	cmp	r0, #0
 800f898:	f040 8288 	bne.w	800fdac <_dtoa_r+0x98c>
 800f89c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f8a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f2c0 8158 	blt.w	800fb5c <_dtoa_r+0x73c>
 800f8ac:	f1ba 0f0e 	cmp.w	sl, #14
 800f8b0:	f300 8154 	bgt.w	800fb5c <_dtoa_r+0x73c>
 800f8b4:	4b6b      	ldr	r3, [pc, #428]	; (800fa64 <_dtoa_r+0x644>)
 800f8b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f280 80e3 	bge.w	800fa8c <_dtoa_r+0x66c>
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f300 80df 	bgt.w	800fa8c <_dtoa_r+0x66c>
 800f8ce:	f040 826d 	bne.w	800fdac <_dtoa_r+0x98c>
 800f8d2:	4b69      	ldr	r3, [pc, #420]	; (800fa78 <_dtoa_r+0x658>)
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	4649      	mov	r1, r9
 800f8da:	f7f0 fe95 	bl	8000608 <__aeabi_dmul>
 800f8de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8e2:	f7f1 f917 	bl	8000b14 <__aeabi_dcmpge>
 800f8e6:	9e01      	ldr	r6, [sp, #4]
 800f8e8:	4637      	mov	r7, r6
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	f040 8243 	bne.w	800fd76 <_dtoa_r+0x956>
 800f8f0:	9d00      	ldr	r5, [sp, #0]
 800f8f2:	2331      	movs	r3, #49	; 0x31
 800f8f4:	f805 3b01 	strb.w	r3, [r5], #1
 800f8f8:	f10a 0a01 	add.w	sl, sl, #1
 800f8fc:	e23f      	b.n	800fd7e <_dtoa_r+0x95e>
 800f8fe:	07f2      	lsls	r2, r6, #31
 800f900:	d505      	bpl.n	800f90e <_dtoa_r+0x4ee>
 800f902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f906:	f7f0 fe7f 	bl	8000608 <__aeabi_dmul>
 800f90a:	3501      	adds	r5, #1
 800f90c:	2301      	movs	r3, #1
 800f90e:	1076      	asrs	r6, r6, #1
 800f910:	3708      	adds	r7, #8
 800f912:	e76c      	b.n	800f7ee <_dtoa_r+0x3ce>
 800f914:	2502      	movs	r5, #2
 800f916:	e76f      	b.n	800f7f8 <_dtoa_r+0x3d8>
 800f918:	9b01      	ldr	r3, [sp, #4]
 800f91a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f91e:	930c      	str	r3, [sp, #48]	; 0x30
 800f920:	e78d      	b.n	800f83e <_dtoa_r+0x41e>
 800f922:	9900      	ldr	r1, [sp, #0]
 800f924:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f928:	4b4e      	ldr	r3, [pc, #312]	; (800fa64 <_dtoa_r+0x644>)
 800f92a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f92e:	4401      	add	r1, r0
 800f930:	9102      	str	r1, [sp, #8]
 800f932:	9908      	ldr	r1, [sp, #32]
 800f934:	eeb0 8a47 	vmov.f32	s16, s14
 800f938:	eef0 8a67 	vmov.f32	s17, s15
 800f93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f940:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f944:	2900      	cmp	r1, #0
 800f946:	d045      	beq.n	800f9d4 <_dtoa_r+0x5b4>
 800f948:	494c      	ldr	r1, [pc, #304]	; (800fa7c <_dtoa_r+0x65c>)
 800f94a:	2000      	movs	r0, #0
 800f94c:	f7f0 ff86 	bl	800085c <__aeabi_ddiv>
 800f950:	ec53 2b18 	vmov	r2, r3, d8
 800f954:	f7f0 fca0 	bl	8000298 <__aeabi_dsub>
 800f958:	9d00      	ldr	r5, [sp, #0]
 800f95a:	ec41 0b18 	vmov	d8, r0, r1
 800f95e:	4639      	mov	r1, r7
 800f960:	4630      	mov	r0, r6
 800f962:	f7f1 f901 	bl	8000b68 <__aeabi_d2iz>
 800f966:	900c      	str	r0, [sp, #48]	; 0x30
 800f968:	f7f0 fde4 	bl	8000534 <__aeabi_i2d>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fc90 	bl	8000298 <__aeabi_dsub>
 800f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f97a:	3330      	adds	r3, #48	; 0x30
 800f97c:	f805 3b01 	strb.w	r3, [r5], #1
 800f980:	ec53 2b18 	vmov	r2, r3, d8
 800f984:	4606      	mov	r6, r0
 800f986:	460f      	mov	r7, r1
 800f988:	f7f1 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d165      	bne.n	800fa5c <_dtoa_r+0x63c>
 800f990:	4632      	mov	r2, r6
 800f992:	463b      	mov	r3, r7
 800f994:	4935      	ldr	r1, [pc, #212]	; (800fa6c <_dtoa_r+0x64c>)
 800f996:	2000      	movs	r0, #0
 800f998:	f7f0 fc7e 	bl	8000298 <__aeabi_dsub>
 800f99c:	ec53 2b18 	vmov	r2, r3, d8
 800f9a0:	f7f1 f8a4 	bl	8000aec <__aeabi_dcmplt>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	f040 80b9 	bne.w	800fb1c <_dtoa_r+0x6fc>
 800f9aa:	9b02      	ldr	r3, [sp, #8]
 800f9ac:	429d      	cmp	r5, r3
 800f9ae:	f43f af75 	beq.w	800f89c <_dtoa_r+0x47c>
 800f9b2:	4b2f      	ldr	r3, [pc, #188]	; (800fa70 <_dtoa_r+0x650>)
 800f9b4:	ec51 0b18 	vmov	r0, r1, d8
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f7f0 fe25 	bl	8000608 <__aeabi_dmul>
 800f9be:	4b2c      	ldr	r3, [pc, #176]	; (800fa70 <_dtoa_r+0x650>)
 800f9c0:	ec41 0b18 	vmov	d8, r0, r1
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	f7f0 fe1d 	bl	8000608 <__aeabi_dmul>
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	460f      	mov	r7, r1
 800f9d2:	e7c4      	b.n	800f95e <_dtoa_r+0x53e>
 800f9d4:	ec51 0b17 	vmov	r0, r1, d7
 800f9d8:	f7f0 fe16 	bl	8000608 <__aeabi_dmul>
 800f9dc:	9b02      	ldr	r3, [sp, #8]
 800f9de:	9d00      	ldr	r5, [sp, #0]
 800f9e0:	930c      	str	r3, [sp, #48]	; 0x30
 800f9e2:	ec41 0b18 	vmov	d8, r0, r1
 800f9e6:	4639      	mov	r1, r7
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7f1 f8bd 	bl	8000b68 <__aeabi_d2iz>
 800f9ee:	9011      	str	r0, [sp, #68]	; 0x44
 800f9f0:	f7f0 fda0 	bl	8000534 <__aeabi_i2d>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	f7f0 fc4c 	bl	8000298 <__aeabi_dsub>
 800fa00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa02:	3330      	adds	r3, #48	; 0x30
 800fa04:	f805 3b01 	strb.w	r3, [r5], #1
 800fa08:	9b02      	ldr	r3, [sp, #8]
 800fa0a:	429d      	cmp	r5, r3
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	460f      	mov	r7, r1
 800fa10:	f04f 0200 	mov.w	r2, #0
 800fa14:	d134      	bne.n	800fa80 <_dtoa_r+0x660>
 800fa16:	4b19      	ldr	r3, [pc, #100]	; (800fa7c <_dtoa_r+0x65c>)
 800fa18:	ec51 0b18 	vmov	r0, r1, d8
 800fa1c:	f7f0 fc3e 	bl	800029c <__adddf3>
 800fa20:	4602      	mov	r2, r0
 800fa22:	460b      	mov	r3, r1
 800fa24:	4630      	mov	r0, r6
 800fa26:	4639      	mov	r1, r7
 800fa28:	f7f1 f87e 	bl	8000b28 <__aeabi_dcmpgt>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d175      	bne.n	800fb1c <_dtoa_r+0x6fc>
 800fa30:	ec53 2b18 	vmov	r2, r3, d8
 800fa34:	4911      	ldr	r1, [pc, #68]	; (800fa7c <_dtoa_r+0x65c>)
 800fa36:	2000      	movs	r0, #0
 800fa38:	f7f0 fc2e 	bl	8000298 <__aeabi_dsub>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	4630      	mov	r0, r6
 800fa42:	4639      	mov	r1, r7
 800fa44:	f7f1 f852 	bl	8000aec <__aeabi_dcmplt>
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	f43f af27 	beq.w	800f89c <_dtoa_r+0x47c>
 800fa4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa50:	1e6b      	subs	r3, r5, #1
 800fa52:	930c      	str	r3, [sp, #48]	; 0x30
 800fa54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa58:	2b30      	cmp	r3, #48	; 0x30
 800fa5a:	d0f8      	beq.n	800fa4e <_dtoa_r+0x62e>
 800fa5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa60:	e04a      	b.n	800faf8 <_dtoa_r+0x6d8>
 800fa62:	bf00      	nop
 800fa64:	08011c80 	.word	0x08011c80
 800fa68:	08011c58 	.word	0x08011c58
 800fa6c:	3ff00000 	.word	0x3ff00000
 800fa70:	40240000 	.word	0x40240000
 800fa74:	401c0000 	.word	0x401c0000
 800fa78:	40140000 	.word	0x40140000
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	4baf      	ldr	r3, [pc, #700]	; (800fd40 <_dtoa_r+0x920>)
 800fa82:	f7f0 fdc1 	bl	8000608 <__aeabi_dmul>
 800fa86:	4606      	mov	r6, r0
 800fa88:	460f      	mov	r7, r1
 800fa8a:	e7ac      	b.n	800f9e6 <_dtoa_r+0x5c6>
 800fa8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fa90:	9d00      	ldr	r5, [sp, #0]
 800fa92:	4642      	mov	r2, r8
 800fa94:	464b      	mov	r3, r9
 800fa96:	4630      	mov	r0, r6
 800fa98:	4639      	mov	r1, r7
 800fa9a:	f7f0 fedf 	bl	800085c <__aeabi_ddiv>
 800fa9e:	f7f1 f863 	bl	8000b68 <__aeabi_d2iz>
 800faa2:	9002      	str	r0, [sp, #8]
 800faa4:	f7f0 fd46 	bl	8000534 <__aeabi_i2d>
 800faa8:	4642      	mov	r2, r8
 800faaa:	464b      	mov	r3, r9
 800faac:	f7f0 fdac 	bl	8000608 <__aeabi_dmul>
 800fab0:	4602      	mov	r2, r0
 800fab2:	460b      	mov	r3, r1
 800fab4:	4630      	mov	r0, r6
 800fab6:	4639      	mov	r1, r7
 800fab8:	f7f0 fbee 	bl	8000298 <__aeabi_dsub>
 800fabc:	9e02      	ldr	r6, [sp, #8]
 800fabe:	9f01      	ldr	r7, [sp, #4]
 800fac0:	3630      	adds	r6, #48	; 0x30
 800fac2:	f805 6b01 	strb.w	r6, [r5], #1
 800fac6:	9e00      	ldr	r6, [sp, #0]
 800fac8:	1bae      	subs	r6, r5, r6
 800faca:	42b7      	cmp	r7, r6
 800facc:	4602      	mov	r2, r0
 800face:	460b      	mov	r3, r1
 800fad0:	d137      	bne.n	800fb42 <_dtoa_r+0x722>
 800fad2:	f7f0 fbe3 	bl	800029c <__adddf3>
 800fad6:	4642      	mov	r2, r8
 800fad8:	464b      	mov	r3, r9
 800fada:	4606      	mov	r6, r0
 800fadc:	460f      	mov	r7, r1
 800fade:	f7f1 f823 	bl	8000b28 <__aeabi_dcmpgt>
 800fae2:	b9c8      	cbnz	r0, 800fb18 <_dtoa_r+0x6f8>
 800fae4:	4642      	mov	r2, r8
 800fae6:	464b      	mov	r3, r9
 800fae8:	4630      	mov	r0, r6
 800faea:	4639      	mov	r1, r7
 800faec:	f7f0 fff4 	bl	8000ad8 <__aeabi_dcmpeq>
 800faf0:	b110      	cbz	r0, 800faf8 <_dtoa_r+0x6d8>
 800faf2:	9b02      	ldr	r3, [sp, #8]
 800faf4:	07d9      	lsls	r1, r3, #31
 800faf6:	d40f      	bmi.n	800fb18 <_dtoa_r+0x6f8>
 800faf8:	4620      	mov	r0, r4
 800fafa:	4659      	mov	r1, fp
 800fafc:	f000 fc0c 	bl	8010318 <_Bfree>
 800fb00:	2300      	movs	r3, #0
 800fb02:	702b      	strb	r3, [r5, #0]
 800fb04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb06:	f10a 0001 	add.w	r0, sl, #1
 800fb0a:	6018      	str	r0, [r3, #0]
 800fb0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f43f acd8 	beq.w	800f4c4 <_dtoa_r+0xa4>
 800fb14:	601d      	str	r5, [r3, #0]
 800fb16:	e4d5      	b.n	800f4c4 <_dtoa_r+0xa4>
 800fb18:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb1c:	462b      	mov	r3, r5
 800fb1e:	461d      	mov	r5, r3
 800fb20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb24:	2a39      	cmp	r2, #57	; 0x39
 800fb26:	d108      	bne.n	800fb3a <_dtoa_r+0x71a>
 800fb28:	9a00      	ldr	r2, [sp, #0]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d1f7      	bne.n	800fb1e <_dtoa_r+0x6fe>
 800fb2e:	9a07      	ldr	r2, [sp, #28]
 800fb30:	9900      	ldr	r1, [sp, #0]
 800fb32:	3201      	adds	r2, #1
 800fb34:	9207      	str	r2, [sp, #28]
 800fb36:	2230      	movs	r2, #48	; 0x30
 800fb38:	700a      	strb	r2, [r1, #0]
 800fb3a:	781a      	ldrb	r2, [r3, #0]
 800fb3c:	3201      	adds	r2, #1
 800fb3e:	701a      	strb	r2, [r3, #0]
 800fb40:	e78c      	b.n	800fa5c <_dtoa_r+0x63c>
 800fb42:	4b7f      	ldr	r3, [pc, #508]	; (800fd40 <_dtoa_r+0x920>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	f7f0 fd5f 	bl	8000608 <__aeabi_dmul>
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460f      	mov	r7, r1
 800fb52:	f7f0 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d09b      	beq.n	800fa92 <_dtoa_r+0x672>
 800fb5a:	e7cd      	b.n	800faf8 <_dtoa_r+0x6d8>
 800fb5c:	9a08      	ldr	r2, [sp, #32]
 800fb5e:	2a00      	cmp	r2, #0
 800fb60:	f000 80c4 	beq.w	800fcec <_dtoa_r+0x8cc>
 800fb64:	9a05      	ldr	r2, [sp, #20]
 800fb66:	2a01      	cmp	r2, #1
 800fb68:	f300 80a8 	bgt.w	800fcbc <_dtoa_r+0x89c>
 800fb6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	f000 80a0 	beq.w	800fcb4 <_dtoa_r+0x894>
 800fb74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb78:	9e06      	ldr	r6, [sp, #24]
 800fb7a:	4645      	mov	r5, r8
 800fb7c:	9a04      	ldr	r2, [sp, #16]
 800fb7e:	2101      	movs	r1, #1
 800fb80:	441a      	add	r2, r3
 800fb82:	4620      	mov	r0, r4
 800fb84:	4498      	add	r8, r3
 800fb86:	9204      	str	r2, [sp, #16]
 800fb88:	f000 fc82 	bl	8010490 <__i2b>
 800fb8c:	4607      	mov	r7, r0
 800fb8e:	2d00      	cmp	r5, #0
 800fb90:	dd0b      	ble.n	800fbaa <_dtoa_r+0x78a>
 800fb92:	9b04      	ldr	r3, [sp, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	dd08      	ble.n	800fbaa <_dtoa_r+0x78a>
 800fb98:	42ab      	cmp	r3, r5
 800fb9a:	9a04      	ldr	r2, [sp, #16]
 800fb9c:	bfa8      	it	ge
 800fb9e:	462b      	movge	r3, r5
 800fba0:	eba8 0803 	sub.w	r8, r8, r3
 800fba4:	1aed      	subs	r5, r5, r3
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	9304      	str	r3, [sp, #16]
 800fbaa:	9b06      	ldr	r3, [sp, #24]
 800fbac:	b1fb      	cbz	r3, 800fbee <_dtoa_r+0x7ce>
 800fbae:	9b08      	ldr	r3, [sp, #32]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 809f 	beq.w	800fcf4 <_dtoa_r+0x8d4>
 800fbb6:	2e00      	cmp	r6, #0
 800fbb8:	dd11      	ble.n	800fbde <_dtoa_r+0x7be>
 800fbba:	4639      	mov	r1, r7
 800fbbc:	4632      	mov	r2, r6
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 fd22 	bl	8010608 <__pow5mult>
 800fbc4:	465a      	mov	r2, fp
 800fbc6:	4601      	mov	r1, r0
 800fbc8:	4607      	mov	r7, r0
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 fc76 	bl	80104bc <__multiply>
 800fbd0:	4659      	mov	r1, fp
 800fbd2:	9007      	str	r0, [sp, #28]
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 fb9f 	bl	8010318 <_Bfree>
 800fbda:	9b07      	ldr	r3, [sp, #28]
 800fbdc:	469b      	mov	fp, r3
 800fbde:	9b06      	ldr	r3, [sp, #24]
 800fbe0:	1b9a      	subs	r2, r3, r6
 800fbe2:	d004      	beq.n	800fbee <_dtoa_r+0x7ce>
 800fbe4:	4659      	mov	r1, fp
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f000 fd0e 	bl	8010608 <__pow5mult>
 800fbec:	4683      	mov	fp, r0
 800fbee:	2101      	movs	r1, #1
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 fc4d 	bl	8010490 <__i2b>
 800fbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	dd7c      	ble.n	800fcf8 <_dtoa_r+0x8d8>
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4601      	mov	r1, r0
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fd00 	bl	8010608 <__pow5mult>
 800fc08:	9b05      	ldr	r3, [sp, #20]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	dd76      	ble.n	800fcfe <_dtoa_r+0x8de>
 800fc10:	2300      	movs	r3, #0
 800fc12:	9306      	str	r3, [sp, #24]
 800fc14:	6933      	ldr	r3, [r6, #16]
 800fc16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc1a:	6918      	ldr	r0, [r3, #16]
 800fc1c:	f000 fbe8 	bl	80103f0 <__hi0bits>
 800fc20:	f1c0 0020 	rsb	r0, r0, #32
 800fc24:	9b04      	ldr	r3, [sp, #16]
 800fc26:	4418      	add	r0, r3
 800fc28:	f010 001f 	ands.w	r0, r0, #31
 800fc2c:	f000 8086 	beq.w	800fd3c <_dtoa_r+0x91c>
 800fc30:	f1c0 0320 	rsb	r3, r0, #32
 800fc34:	2b04      	cmp	r3, #4
 800fc36:	dd7f      	ble.n	800fd38 <_dtoa_r+0x918>
 800fc38:	f1c0 001c 	rsb	r0, r0, #28
 800fc3c:	9b04      	ldr	r3, [sp, #16]
 800fc3e:	4403      	add	r3, r0
 800fc40:	4480      	add	r8, r0
 800fc42:	4405      	add	r5, r0
 800fc44:	9304      	str	r3, [sp, #16]
 800fc46:	f1b8 0f00 	cmp.w	r8, #0
 800fc4a:	dd05      	ble.n	800fc58 <_dtoa_r+0x838>
 800fc4c:	4659      	mov	r1, fp
 800fc4e:	4642      	mov	r2, r8
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 fd33 	bl	80106bc <__lshift>
 800fc56:	4683      	mov	fp, r0
 800fc58:	9b04      	ldr	r3, [sp, #16]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	dd05      	ble.n	800fc6a <_dtoa_r+0x84a>
 800fc5e:	4631      	mov	r1, r6
 800fc60:	461a      	mov	r2, r3
 800fc62:	4620      	mov	r0, r4
 800fc64:	f000 fd2a 	bl	80106bc <__lshift>
 800fc68:	4606      	mov	r6, r0
 800fc6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d069      	beq.n	800fd44 <_dtoa_r+0x924>
 800fc70:	4631      	mov	r1, r6
 800fc72:	4658      	mov	r0, fp
 800fc74:	f000 fd8e 	bl	8010794 <__mcmp>
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	da63      	bge.n	800fd44 <_dtoa_r+0x924>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4659      	mov	r1, fp
 800fc80:	220a      	movs	r2, #10
 800fc82:	4620      	mov	r0, r4
 800fc84:	f000 fb6a 	bl	801035c <__multadd>
 800fc88:	9b08      	ldr	r3, [sp, #32]
 800fc8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc8e:	4683      	mov	fp, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f000 818f 	beq.w	800ffb4 <_dtoa_r+0xb94>
 800fc96:	4639      	mov	r1, r7
 800fc98:	2300      	movs	r3, #0
 800fc9a:	220a      	movs	r2, #10
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 fb5d 	bl	801035c <__multadd>
 800fca2:	f1b9 0f00 	cmp.w	r9, #0
 800fca6:	4607      	mov	r7, r0
 800fca8:	f300 808e 	bgt.w	800fdc8 <_dtoa_r+0x9a8>
 800fcac:	9b05      	ldr	r3, [sp, #20]
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	dc50      	bgt.n	800fd54 <_dtoa_r+0x934>
 800fcb2:	e089      	b.n	800fdc8 <_dtoa_r+0x9a8>
 800fcb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fcba:	e75d      	b.n	800fb78 <_dtoa_r+0x758>
 800fcbc:	9b01      	ldr	r3, [sp, #4]
 800fcbe:	1e5e      	subs	r6, r3, #1
 800fcc0:	9b06      	ldr	r3, [sp, #24]
 800fcc2:	42b3      	cmp	r3, r6
 800fcc4:	bfbf      	itttt	lt
 800fcc6:	9b06      	ldrlt	r3, [sp, #24]
 800fcc8:	9606      	strlt	r6, [sp, #24]
 800fcca:	1af2      	sublt	r2, r6, r3
 800fccc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fcce:	bfb6      	itet	lt
 800fcd0:	189b      	addlt	r3, r3, r2
 800fcd2:	1b9e      	subge	r6, r3, r6
 800fcd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fcd6:	9b01      	ldr	r3, [sp, #4]
 800fcd8:	bfb8      	it	lt
 800fcda:	2600      	movlt	r6, #0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	bfb5      	itete	lt
 800fce0:	eba8 0503 	sublt.w	r5, r8, r3
 800fce4:	9b01      	ldrge	r3, [sp, #4]
 800fce6:	2300      	movlt	r3, #0
 800fce8:	4645      	movge	r5, r8
 800fcea:	e747      	b.n	800fb7c <_dtoa_r+0x75c>
 800fcec:	9e06      	ldr	r6, [sp, #24]
 800fcee:	9f08      	ldr	r7, [sp, #32]
 800fcf0:	4645      	mov	r5, r8
 800fcf2:	e74c      	b.n	800fb8e <_dtoa_r+0x76e>
 800fcf4:	9a06      	ldr	r2, [sp, #24]
 800fcf6:	e775      	b.n	800fbe4 <_dtoa_r+0x7c4>
 800fcf8:	9b05      	ldr	r3, [sp, #20]
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	dc18      	bgt.n	800fd30 <_dtoa_r+0x910>
 800fcfe:	9b02      	ldr	r3, [sp, #8]
 800fd00:	b9b3      	cbnz	r3, 800fd30 <_dtoa_r+0x910>
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd08:	b9a3      	cbnz	r3, 800fd34 <_dtoa_r+0x914>
 800fd0a:	9b03      	ldr	r3, [sp, #12]
 800fd0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd10:	0d1b      	lsrs	r3, r3, #20
 800fd12:	051b      	lsls	r3, r3, #20
 800fd14:	b12b      	cbz	r3, 800fd22 <_dtoa_r+0x902>
 800fd16:	9b04      	ldr	r3, [sp, #16]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	9304      	str	r3, [sp, #16]
 800fd1c:	f108 0801 	add.w	r8, r8, #1
 800fd20:	2301      	movs	r3, #1
 800fd22:	9306      	str	r3, [sp, #24]
 800fd24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f47f af74 	bne.w	800fc14 <_dtoa_r+0x7f4>
 800fd2c:	2001      	movs	r0, #1
 800fd2e:	e779      	b.n	800fc24 <_dtoa_r+0x804>
 800fd30:	2300      	movs	r3, #0
 800fd32:	e7f6      	b.n	800fd22 <_dtoa_r+0x902>
 800fd34:	9b02      	ldr	r3, [sp, #8]
 800fd36:	e7f4      	b.n	800fd22 <_dtoa_r+0x902>
 800fd38:	d085      	beq.n	800fc46 <_dtoa_r+0x826>
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	301c      	adds	r0, #28
 800fd3e:	e77d      	b.n	800fc3c <_dtoa_r+0x81c>
 800fd40:	40240000 	.word	0x40240000
 800fd44:	9b01      	ldr	r3, [sp, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	dc38      	bgt.n	800fdbc <_dtoa_r+0x99c>
 800fd4a:	9b05      	ldr	r3, [sp, #20]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	dd35      	ble.n	800fdbc <_dtoa_r+0x99c>
 800fd50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd54:	f1b9 0f00 	cmp.w	r9, #0
 800fd58:	d10d      	bne.n	800fd76 <_dtoa_r+0x956>
 800fd5a:	4631      	mov	r1, r6
 800fd5c:	464b      	mov	r3, r9
 800fd5e:	2205      	movs	r2, #5
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 fafb 	bl	801035c <__multadd>
 800fd66:	4601      	mov	r1, r0
 800fd68:	4606      	mov	r6, r0
 800fd6a:	4658      	mov	r0, fp
 800fd6c:	f000 fd12 	bl	8010794 <__mcmp>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	f73f adbd 	bgt.w	800f8f0 <_dtoa_r+0x4d0>
 800fd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd78:	9d00      	ldr	r5, [sp, #0]
 800fd7a:	ea6f 0a03 	mvn.w	sl, r3
 800fd7e:	f04f 0800 	mov.w	r8, #0
 800fd82:	4631      	mov	r1, r6
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 fac7 	bl	8010318 <_Bfree>
 800fd8a:	2f00      	cmp	r7, #0
 800fd8c:	f43f aeb4 	beq.w	800faf8 <_dtoa_r+0x6d8>
 800fd90:	f1b8 0f00 	cmp.w	r8, #0
 800fd94:	d005      	beq.n	800fda2 <_dtoa_r+0x982>
 800fd96:	45b8      	cmp	r8, r7
 800fd98:	d003      	beq.n	800fda2 <_dtoa_r+0x982>
 800fd9a:	4641      	mov	r1, r8
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f000 fabb 	bl	8010318 <_Bfree>
 800fda2:	4639      	mov	r1, r7
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 fab7 	bl	8010318 <_Bfree>
 800fdaa:	e6a5      	b.n	800faf8 <_dtoa_r+0x6d8>
 800fdac:	2600      	movs	r6, #0
 800fdae:	4637      	mov	r7, r6
 800fdb0:	e7e1      	b.n	800fd76 <_dtoa_r+0x956>
 800fdb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fdb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fdb8:	4637      	mov	r7, r6
 800fdba:	e599      	b.n	800f8f0 <_dtoa_r+0x4d0>
 800fdbc:	9b08      	ldr	r3, [sp, #32]
 800fdbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f000 80fd 	beq.w	800ffc2 <_dtoa_r+0xba2>
 800fdc8:	2d00      	cmp	r5, #0
 800fdca:	dd05      	ble.n	800fdd8 <_dtoa_r+0x9b8>
 800fdcc:	4639      	mov	r1, r7
 800fdce:	462a      	mov	r2, r5
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 fc73 	bl	80106bc <__lshift>
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	9b06      	ldr	r3, [sp, #24]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d05c      	beq.n	800fe98 <_dtoa_r+0xa78>
 800fdde:	6879      	ldr	r1, [r7, #4]
 800fde0:	4620      	mov	r0, r4
 800fde2:	f000 fa59 	bl	8010298 <_Balloc>
 800fde6:	4605      	mov	r5, r0
 800fde8:	b928      	cbnz	r0, 800fdf6 <_dtoa_r+0x9d6>
 800fdea:	4b80      	ldr	r3, [pc, #512]	; (800ffec <_dtoa_r+0xbcc>)
 800fdec:	4602      	mov	r2, r0
 800fdee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fdf2:	f7ff bb2e 	b.w	800f452 <_dtoa_r+0x32>
 800fdf6:	693a      	ldr	r2, [r7, #16]
 800fdf8:	3202      	adds	r2, #2
 800fdfa:	0092      	lsls	r2, r2, #2
 800fdfc:	f107 010c 	add.w	r1, r7, #12
 800fe00:	300c      	adds	r0, #12
 800fe02:	f7fe fb4e 	bl	800e4a2 <memcpy>
 800fe06:	2201      	movs	r2, #1
 800fe08:	4629      	mov	r1, r5
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 fc56 	bl	80106bc <__lshift>
 800fe10:	9b00      	ldr	r3, [sp, #0]
 800fe12:	3301      	adds	r3, #1
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	9b00      	ldr	r3, [sp, #0]
 800fe18:	444b      	add	r3, r9
 800fe1a:	9307      	str	r3, [sp, #28]
 800fe1c:	9b02      	ldr	r3, [sp, #8]
 800fe1e:	f003 0301 	and.w	r3, r3, #1
 800fe22:	46b8      	mov	r8, r7
 800fe24:	9306      	str	r3, [sp, #24]
 800fe26:	4607      	mov	r7, r0
 800fe28:	9b01      	ldr	r3, [sp, #4]
 800fe2a:	4631      	mov	r1, r6
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	4658      	mov	r0, fp
 800fe30:	9302      	str	r3, [sp, #8]
 800fe32:	f7ff fa67 	bl	800f304 <quorem>
 800fe36:	4603      	mov	r3, r0
 800fe38:	3330      	adds	r3, #48	; 0x30
 800fe3a:	9004      	str	r0, [sp, #16]
 800fe3c:	4641      	mov	r1, r8
 800fe3e:	4658      	mov	r0, fp
 800fe40:	9308      	str	r3, [sp, #32]
 800fe42:	f000 fca7 	bl	8010794 <__mcmp>
 800fe46:	463a      	mov	r2, r7
 800fe48:	4681      	mov	r9, r0
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 fcbd 	bl	80107cc <__mdiff>
 800fe52:	68c2      	ldr	r2, [r0, #12]
 800fe54:	9b08      	ldr	r3, [sp, #32]
 800fe56:	4605      	mov	r5, r0
 800fe58:	bb02      	cbnz	r2, 800fe9c <_dtoa_r+0xa7c>
 800fe5a:	4601      	mov	r1, r0
 800fe5c:	4658      	mov	r0, fp
 800fe5e:	f000 fc99 	bl	8010794 <__mcmp>
 800fe62:	9b08      	ldr	r3, [sp, #32]
 800fe64:	4602      	mov	r2, r0
 800fe66:	4629      	mov	r1, r5
 800fe68:	4620      	mov	r0, r4
 800fe6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fe6e:	f000 fa53 	bl	8010318 <_Bfree>
 800fe72:	9b05      	ldr	r3, [sp, #20]
 800fe74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe76:	9d01      	ldr	r5, [sp, #4]
 800fe78:	ea43 0102 	orr.w	r1, r3, r2
 800fe7c:	9b06      	ldr	r3, [sp, #24]
 800fe7e:	430b      	orrs	r3, r1
 800fe80:	9b08      	ldr	r3, [sp, #32]
 800fe82:	d10d      	bne.n	800fea0 <_dtoa_r+0xa80>
 800fe84:	2b39      	cmp	r3, #57	; 0x39
 800fe86:	d029      	beq.n	800fedc <_dtoa_r+0xabc>
 800fe88:	f1b9 0f00 	cmp.w	r9, #0
 800fe8c:	dd01      	ble.n	800fe92 <_dtoa_r+0xa72>
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	3331      	adds	r3, #49	; 0x31
 800fe92:	9a02      	ldr	r2, [sp, #8]
 800fe94:	7013      	strb	r3, [r2, #0]
 800fe96:	e774      	b.n	800fd82 <_dtoa_r+0x962>
 800fe98:	4638      	mov	r0, r7
 800fe9a:	e7b9      	b.n	800fe10 <_dtoa_r+0x9f0>
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	e7e2      	b.n	800fe66 <_dtoa_r+0xa46>
 800fea0:	f1b9 0f00 	cmp.w	r9, #0
 800fea4:	db06      	blt.n	800feb4 <_dtoa_r+0xa94>
 800fea6:	9905      	ldr	r1, [sp, #20]
 800fea8:	ea41 0909 	orr.w	r9, r1, r9
 800feac:	9906      	ldr	r1, [sp, #24]
 800feae:	ea59 0101 	orrs.w	r1, r9, r1
 800feb2:	d120      	bne.n	800fef6 <_dtoa_r+0xad6>
 800feb4:	2a00      	cmp	r2, #0
 800feb6:	ddec      	ble.n	800fe92 <_dtoa_r+0xa72>
 800feb8:	4659      	mov	r1, fp
 800feba:	2201      	movs	r2, #1
 800febc:	4620      	mov	r0, r4
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	f000 fbfc 	bl	80106bc <__lshift>
 800fec4:	4631      	mov	r1, r6
 800fec6:	4683      	mov	fp, r0
 800fec8:	f000 fc64 	bl	8010794 <__mcmp>
 800fecc:	2800      	cmp	r0, #0
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	dc02      	bgt.n	800fed8 <_dtoa_r+0xab8>
 800fed2:	d1de      	bne.n	800fe92 <_dtoa_r+0xa72>
 800fed4:	07da      	lsls	r2, r3, #31
 800fed6:	d5dc      	bpl.n	800fe92 <_dtoa_r+0xa72>
 800fed8:	2b39      	cmp	r3, #57	; 0x39
 800feda:	d1d8      	bne.n	800fe8e <_dtoa_r+0xa6e>
 800fedc:	9a02      	ldr	r2, [sp, #8]
 800fede:	2339      	movs	r3, #57	; 0x39
 800fee0:	7013      	strb	r3, [r2, #0]
 800fee2:	462b      	mov	r3, r5
 800fee4:	461d      	mov	r5, r3
 800fee6:	3b01      	subs	r3, #1
 800fee8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800feec:	2a39      	cmp	r2, #57	; 0x39
 800feee:	d050      	beq.n	800ff92 <_dtoa_r+0xb72>
 800fef0:	3201      	adds	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e745      	b.n	800fd82 <_dtoa_r+0x962>
 800fef6:	2a00      	cmp	r2, #0
 800fef8:	dd03      	ble.n	800ff02 <_dtoa_r+0xae2>
 800fefa:	2b39      	cmp	r3, #57	; 0x39
 800fefc:	d0ee      	beq.n	800fedc <_dtoa_r+0xabc>
 800fefe:	3301      	adds	r3, #1
 800ff00:	e7c7      	b.n	800fe92 <_dtoa_r+0xa72>
 800ff02:	9a01      	ldr	r2, [sp, #4]
 800ff04:	9907      	ldr	r1, [sp, #28]
 800ff06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff0a:	428a      	cmp	r2, r1
 800ff0c:	d02a      	beq.n	800ff64 <_dtoa_r+0xb44>
 800ff0e:	4659      	mov	r1, fp
 800ff10:	2300      	movs	r3, #0
 800ff12:	220a      	movs	r2, #10
 800ff14:	4620      	mov	r0, r4
 800ff16:	f000 fa21 	bl	801035c <__multadd>
 800ff1a:	45b8      	cmp	r8, r7
 800ff1c:	4683      	mov	fp, r0
 800ff1e:	f04f 0300 	mov.w	r3, #0
 800ff22:	f04f 020a 	mov.w	r2, #10
 800ff26:	4641      	mov	r1, r8
 800ff28:	4620      	mov	r0, r4
 800ff2a:	d107      	bne.n	800ff3c <_dtoa_r+0xb1c>
 800ff2c:	f000 fa16 	bl	801035c <__multadd>
 800ff30:	4680      	mov	r8, r0
 800ff32:	4607      	mov	r7, r0
 800ff34:	9b01      	ldr	r3, [sp, #4]
 800ff36:	3301      	adds	r3, #1
 800ff38:	9301      	str	r3, [sp, #4]
 800ff3a:	e775      	b.n	800fe28 <_dtoa_r+0xa08>
 800ff3c:	f000 fa0e 	bl	801035c <__multadd>
 800ff40:	4639      	mov	r1, r7
 800ff42:	4680      	mov	r8, r0
 800ff44:	2300      	movs	r3, #0
 800ff46:	220a      	movs	r2, #10
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f000 fa07 	bl	801035c <__multadd>
 800ff4e:	4607      	mov	r7, r0
 800ff50:	e7f0      	b.n	800ff34 <_dtoa_r+0xb14>
 800ff52:	f1b9 0f00 	cmp.w	r9, #0
 800ff56:	9a00      	ldr	r2, [sp, #0]
 800ff58:	bfcc      	ite	gt
 800ff5a:	464d      	movgt	r5, r9
 800ff5c:	2501      	movle	r5, #1
 800ff5e:	4415      	add	r5, r2
 800ff60:	f04f 0800 	mov.w	r8, #0
 800ff64:	4659      	mov	r1, fp
 800ff66:	2201      	movs	r2, #1
 800ff68:	4620      	mov	r0, r4
 800ff6a:	9301      	str	r3, [sp, #4]
 800ff6c:	f000 fba6 	bl	80106bc <__lshift>
 800ff70:	4631      	mov	r1, r6
 800ff72:	4683      	mov	fp, r0
 800ff74:	f000 fc0e 	bl	8010794 <__mcmp>
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	dcb2      	bgt.n	800fee2 <_dtoa_r+0xac2>
 800ff7c:	d102      	bne.n	800ff84 <_dtoa_r+0xb64>
 800ff7e:	9b01      	ldr	r3, [sp, #4]
 800ff80:	07db      	lsls	r3, r3, #31
 800ff82:	d4ae      	bmi.n	800fee2 <_dtoa_r+0xac2>
 800ff84:	462b      	mov	r3, r5
 800ff86:	461d      	mov	r5, r3
 800ff88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff8c:	2a30      	cmp	r2, #48	; 0x30
 800ff8e:	d0fa      	beq.n	800ff86 <_dtoa_r+0xb66>
 800ff90:	e6f7      	b.n	800fd82 <_dtoa_r+0x962>
 800ff92:	9a00      	ldr	r2, [sp, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d1a5      	bne.n	800fee4 <_dtoa_r+0xac4>
 800ff98:	f10a 0a01 	add.w	sl, sl, #1
 800ff9c:	2331      	movs	r3, #49	; 0x31
 800ff9e:	e779      	b.n	800fe94 <_dtoa_r+0xa74>
 800ffa0:	4b13      	ldr	r3, [pc, #76]	; (800fff0 <_dtoa_r+0xbd0>)
 800ffa2:	f7ff baaf 	b.w	800f504 <_dtoa_r+0xe4>
 800ffa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f47f aa86 	bne.w	800f4ba <_dtoa_r+0x9a>
 800ffae:	4b11      	ldr	r3, [pc, #68]	; (800fff4 <_dtoa_r+0xbd4>)
 800ffb0:	f7ff baa8 	b.w	800f504 <_dtoa_r+0xe4>
 800ffb4:	f1b9 0f00 	cmp.w	r9, #0
 800ffb8:	dc03      	bgt.n	800ffc2 <_dtoa_r+0xba2>
 800ffba:	9b05      	ldr	r3, [sp, #20]
 800ffbc:	2b02      	cmp	r3, #2
 800ffbe:	f73f aec9 	bgt.w	800fd54 <_dtoa_r+0x934>
 800ffc2:	9d00      	ldr	r5, [sp, #0]
 800ffc4:	4631      	mov	r1, r6
 800ffc6:	4658      	mov	r0, fp
 800ffc8:	f7ff f99c 	bl	800f304 <quorem>
 800ffcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ffd0:	f805 3b01 	strb.w	r3, [r5], #1
 800ffd4:	9a00      	ldr	r2, [sp, #0]
 800ffd6:	1aaa      	subs	r2, r5, r2
 800ffd8:	4591      	cmp	r9, r2
 800ffda:	ddba      	ble.n	800ff52 <_dtoa_r+0xb32>
 800ffdc:	4659      	mov	r1, fp
 800ffde:	2300      	movs	r3, #0
 800ffe0:	220a      	movs	r2, #10
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f000 f9ba 	bl	801035c <__multadd>
 800ffe8:	4683      	mov	fp, r0
 800ffea:	e7eb      	b.n	800ffc4 <_dtoa_r+0xba4>
 800ffec:	08011be3 	.word	0x08011be3
 800fff0:	08011b3c 	.word	0x08011b3c
 800fff4:	08011b60 	.word	0x08011b60

0800fff8 <__sflush_r>:
 800fff8:	898a      	ldrh	r2, [r1, #12]
 800fffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fffe:	4605      	mov	r5, r0
 8010000:	0710      	lsls	r0, r2, #28
 8010002:	460c      	mov	r4, r1
 8010004:	d458      	bmi.n	80100b8 <__sflush_r+0xc0>
 8010006:	684b      	ldr	r3, [r1, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	dc05      	bgt.n	8010018 <__sflush_r+0x20>
 801000c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801000e:	2b00      	cmp	r3, #0
 8010010:	dc02      	bgt.n	8010018 <__sflush_r+0x20>
 8010012:	2000      	movs	r0, #0
 8010014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801001a:	2e00      	cmp	r6, #0
 801001c:	d0f9      	beq.n	8010012 <__sflush_r+0x1a>
 801001e:	2300      	movs	r3, #0
 8010020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010024:	682f      	ldr	r7, [r5, #0]
 8010026:	602b      	str	r3, [r5, #0]
 8010028:	d032      	beq.n	8010090 <__sflush_r+0x98>
 801002a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801002c:	89a3      	ldrh	r3, [r4, #12]
 801002e:	075a      	lsls	r2, r3, #29
 8010030:	d505      	bpl.n	801003e <__sflush_r+0x46>
 8010032:	6863      	ldr	r3, [r4, #4]
 8010034:	1ac0      	subs	r0, r0, r3
 8010036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010038:	b10b      	cbz	r3, 801003e <__sflush_r+0x46>
 801003a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801003c:	1ac0      	subs	r0, r0, r3
 801003e:	2300      	movs	r3, #0
 8010040:	4602      	mov	r2, r0
 8010042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010044:	6a21      	ldr	r1, [r4, #32]
 8010046:	4628      	mov	r0, r5
 8010048:	47b0      	blx	r6
 801004a:	1c43      	adds	r3, r0, #1
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	d106      	bne.n	801005e <__sflush_r+0x66>
 8010050:	6829      	ldr	r1, [r5, #0]
 8010052:	291d      	cmp	r1, #29
 8010054:	d82c      	bhi.n	80100b0 <__sflush_r+0xb8>
 8010056:	4a2a      	ldr	r2, [pc, #168]	; (8010100 <__sflush_r+0x108>)
 8010058:	40ca      	lsrs	r2, r1
 801005a:	07d6      	lsls	r6, r2, #31
 801005c:	d528      	bpl.n	80100b0 <__sflush_r+0xb8>
 801005e:	2200      	movs	r2, #0
 8010060:	6062      	str	r2, [r4, #4]
 8010062:	04d9      	lsls	r1, r3, #19
 8010064:	6922      	ldr	r2, [r4, #16]
 8010066:	6022      	str	r2, [r4, #0]
 8010068:	d504      	bpl.n	8010074 <__sflush_r+0x7c>
 801006a:	1c42      	adds	r2, r0, #1
 801006c:	d101      	bne.n	8010072 <__sflush_r+0x7a>
 801006e:	682b      	ldr	r3, [r5, #0]
 8010070:	b903      	cbnz	r3, 8010074 <__sflush_r+0x7c>
 8010072:	6560      	str	r0, [r4, #84]	; 0x54
 8010074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010076:	602f      	str	r7, [r5, #0]
 8010078:	2900      	cmp	r1, #0
 801007a:	d0ca      	beq.n	8010012 <__sflush_r+0x1a>
 801007c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010080:	4299      	cmp	r1, r3
 8010082:	d002      	beq.n	801008a <__sflush_r+0x92>
 8010084:	4628      	mov	r0, r5
 8010086:	f000 fc95 	bl	80109b4 <_free_r>
 801008a:	2000      	movs	r0, #0
 801008c:	6360      	str	r0, [r4, #52]	; 0x34
 801008e:	e7c1      	b.n	8010014 <__sflush_r+0x1c>
 8010090:	6a21      	ldr	r1, [r4, #32]
 8010092:	2301      	movs	r3, #1
 8010094:	4628      	mov	r0, r5
 8010096:	47b0      	blx	r6
 8010098:	1c41      	adds	r1, r0, #1
 801009a:	d1c7      	bne.n	801002c <__sflush_r+0x34>
 801009c:	682b      	ldr	r3, [r5, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d0c4      	beq.n	801002c <__sflush_r+0x34>
 80100a2:	2b1d      	cmp	r3, #29
 80100a4:	d001      	beq.n	80100aa <__sflush_r+0xb2>
 80100a6:	2b16      	cmp	r3, #22
 80100a8:	d101      	bne.n	80100ae <__sflush_r+0xb6>
 80100aa:	602f      	str	r7, [r5, #0]
 80100ac:	e7b1      	b.n	8010012 <__sflush_r+0x1a>
 80100ae:	89a3      	ldrh	r3, [r4, #12]
 80100b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100b4:	81a3      	strh	r3, [r4, #12]
 80100b6:	e7ad      	b.n	8010014 <__sflush_r+0x1c>
 80100b8:	690f      	ldr	r7, [r1, #16]
 80100ba:	2f00      	cmp	r7, #0
 80100bc:	d0a9      	beq.n	8010012 <__sflush_r+0x1a>
 80100be:	0793      	lsls	r3, r2, #30
 80100c0:	680e      	ldr	r6, [r1, #0]
 80100c2:	bf08      	it	eq
 80100c4:	694b      	ldreq	r3, [r1, #20]
 80100c6:	600f      	str	r7, [r1, #0]
 80100c8:	bf18      	it	ne
 80100ca:	2300      	movne	r3, #0
 80100cc:	eba6 0807 	sub.w	r8, r6, r7
 80100d0:	608b      	str	r3, [r1, #8]
 80100d2:	f1b8 0f00 	cmp.w	r8, #0
 80100d6:	dd9c      	ble.n	8010012 <__sflush_r+0x1a>
 80100d8:	6a21      	ldr	r1, [r4, #32]
 80100da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100dc:	4643      	mov	r3, r8
 80100de:	463a      	mov	r2, r7
 80100e0:	4628      	mov	r0, r5
 80100e2:	47b0      	blx	r6
 80100e4:	2800      	cmp	r0, #0
 80100e6:	dc06      	bgt.n	80100f6 <__sflush_r+0xfe>
 80100e8:	89a3      	ldrh	r3, [r4, #12]
 80100ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100ee:	81a3      	strh	r3, [r4, #12]
 80100f0:	f04f 30ff 	mov.w	r0, #4294967295
 80100f4:	e78e      	b.n	8010014 <__sflush_r+0x1c>
 80100f6:	4407      	add	r7, r0
 80100f8:	eba8 0800 	sub.w	r8, r8, r0
 80100fc:	e7e9      	b.n	80100d2 <__sflush_r+0xda>
 80100fe:	bf00      	nop
 8010100:	20400001 	.word	0x20400001

08010104 <_fflush_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	690b      	ldr	r3, [r1, #16]
 8010108:	4605      	mov	r5, r0
 801010a:	460c      	mov	r4, r1
 801010c:	b913      	cbnz	r3, 8010114 <_fflush_r+0x10>
 801010e:	2500      	movs	r5, #0
 8010110:	4628      	mov	r0, r5
 8010112:	bd38      	pop	{r3, r4, r5, pc}
 8010114:	b118      	cbz	r0, 801011e <_fflush_r+0x1a>
 8010116:	6983      	ldr	r3, [r0, #24]
 8010118:	b90b      	cbnz	r3, 801011e <_fflush_r+0x1a>
 801011a:	f7fe f8fd 	bl	800e318 <__sinit>
 801011e:	4b14      	ldr	r3, [pc, #80]	; (8010170 <_fflush_r+0x6c>)
 8010120:	429c      	cmp	r4, r3
 8010122:	d11b      	bne.n	801015c <_fflush_r+0x58>
 8010124:	686c      	ldr	r4, [r5, #4]
 8010126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d0ef      	beq.n	801010e <_fflush_r+0xa>
 801012e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010130:	07d0      	lsls	r0, r2, #31
 8010132:	d404      	bmi.n	801013e <_fflush_r+0x3a>
 8010134:	0599      	lsls	r1, r3, #22
 8010136:	d402      	bmi.n	801013e <_fflush_r+0x3a>
 8010138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801013a:	f7fe f9b0 	bl	800e49e <__retarget_lock_acquire_recursive>
 801013e:	4628      	mov	r0, r5
 8010140:	4621      	mov	r1, r4
 8010142:	f7ff ff59 	bl	800fff8 <__sflush_r>
 8010146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010148:	07da      	lsls	r2, r3, #31
 801014a:	4605      	mov	r5, r0
 801014c:	d4e0      	bmi.n	8010110 <_fflush_r+0xc>
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	059b      	lsls	r3, r3, #22
 8010152:	d4dd      	bmi.n	8010110 <_fflush_r+0xc>
 8010154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010156:	f7fe f9a3 	bl	800e4a0 <__retarget_lock_release_recursive>
 801015a:	e7d9      	b.n	8010110 <_fflush_r+0xc>
 801015c:	4b05      	ldr	r3, [pc, #20]	; (8010174 <_fflush_r+0x70>)
 801015e:	429c      	cmp	r4, r3
 8010160:	d101      	bne.n	8010166 <_fflush_r+0x62>
 8010162:	68ac      	ldr	r4, [r5, #8]
 8010164:	e7df      	b.n	8010126 <_fflush_r+0x22>
 8010166:	4b04      	ldr	r3, [pc, #16]	; (8010178 <_fflush_r+0x74>)
 8010168:	429c      	cmp	r4, r3
 801016a:	bf08      	it	eq
 801016c:	68ec      	ldreq	r4, [r5, #12]
 801016e:	e7da      	b.n	8010126 <_fflush_r+0x22>
 8010170:	08011ae8 	.word	0x08011ae8
 8010174:	08011b08 	.word	0x08011b08
 8010178:	08011ac8 	.word	0x08011ac8

0801017c <_localeconv_r>:
 801017c:	4800      	ldr	r0, [pc, #0]	; (8010180 <_localeconv_r+0x4>)
 801017e:	4770      	bx	lr
 8010180:	20000420 	.word	0x20000420

08010184 <_lseek_r>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4d07      	ldr	r5, [pc, #28]	; (80101a4 <_lseek_r+0x20>)
 8010188:	4604      	mov	r4, r0
 801018a:	4608      	mov	r0, r1
 801018c:	4611      	mov	r1, r2
 801018e:	2200      	movs	r2, #0
 8010190:	602a      	str	r2, [r5, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	f7f2 fd04 	bl	8002ba0 <_lseek>
 8010198:	1c43      	adds	r3, r0, #1
 801019a:	d102      	bne.n	80101a2 <_lseek_r+0x1e>
 801019c:	682b      	ldr	r3, [r5, #0]
 801019e:	b103      	cbz	r3, 80101a2 <_lseek_r+0x1e>
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	bd38      	pop	{r3, r4, r5, pc}
 80101a4:	20004d08 	.word	0x20004d08

080101a8 <__swhatbuf_r>:
 80101a8:	b570      	push	{r4, r5, r6, lr}
 80101aa:	460e      	mov	r6, r1
 80101ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101b0:	2900      	cmp	r1, #0
 80101b2:	b096      	sub	sp, #88	; 0x58
 80101b4:	4614      	mov	r4, r2
 80101b6:	461d      	mov	r5, r3
 80101b8:	da07      	bge.n	80101ca <__swhatbuf_r+0x22>
 80101ba:	2300      	movs	r3, #0
 80101bc:	602b      	str	r3, [r5, #0]
 80101be:	89b3      	ldrh	r3, [r6, #12]
 80101c0:	061a      	lsls	r2, r3, #24
 80101c2:	d410      	bmi.n	80101e6 <__swhatbuf_r+0x3e>
 80101c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c8:	e00e      	b.n	80101e8 <__swhatbuf_r+0x40>
 80101ca:	466a      	mov	r2, sp
 80101cc:	f000 ff3a 	bl	8011044 <_fstat_r>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	dbf2      	blt.n	80101ba <__swhatbuf_r+0x12>
 80101d4:	9a01      	ldr	r2, [sp, #4]
 80101d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80101da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80101de:	425a      	negs	r2, r3
 80101e0:	415a      	adcs	r2, r3
 80101e2:	602a      	str	r2, [r5, #0]
 80101e4:	e7ee      	b.n	80101c4 <__swhatbuf_r+0x1c>
 80101e6:	2340      	movs	r3, #64	; 0x40
 80101e8:	2000      	movs	r0, #0
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	b016      	add	sp, #88	; 0x58
 80101ee:	bd70      	pop	{r4, r5, r6, pc}

080101f0 <__smakebuf_r>:
 80101f0:	898b      	ldrh	r3, [r1, #12]
 80101f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101f4:	079d      	lsls	r5, r3, #30
 80101f6:	4606      	mov	r6, r0
 80101f8:	460c      	mov	r4, r1
 80101fa:	d507      	bpl.n	801020c <__smakebuf_r+0x1c>
 80101fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	2301      	movs	r3, #1
 8010206:	6163      	str	r3, [r4, #20]
 8010208:	b002      	add	sp, #8
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	ab01      	add	r3, sp, #4
 801020e:	466a      	mov	r2, sp
 8010210:	f7ff ffca 	bl	80101a8 <__swhatbuf_r>
 8010214:	9900      	ldr	r1, [sp, #0]
 8010216:	4605      	mov	r5, r0
 8010218:	4630      	mov	r0, r6
 801021a:	f7fe f959 	bl	800e4d0 <_malloc_r>
 801021e:	b948      	cbnz	r0, 8010234 <__smakebuf_r+0x44>
 8010220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010224:	059a      	lsls	r2, r3, #22
 8010226:	d4ef      	bmi.n	8010208 <__smakebuf_r+0x18>
 8010228:	f023 0303 	bic.w	r3, r3, #3
 801022c:	f043 0302 	orr.w	r3, r3, #2
 8010230:	81a3      	strh	r3, [r4, #12]
 8010232:	e7e3      	b.n	80101fc <__smakebuf_r+0xc>
 8010234:	4b0d      	ldr	r3, [pc, #52]	; (801026c <__smakebuf_r+0x7c>)
 8010236:	62b3      	str	r3, [r6, #40]	; 0x28
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010240:	81a3      	strh	r3, [r4, #12]
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	6163      	str	r3, [r4, #20]
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	6120      	str	r0, [r4, #16]
 801024a:	b15b      	cbz	r3, 8010264 <__smakebuf_r+0x74>
 801024c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010250:	4630      	mov	r0, r6
 8010252:	f000 ff09 	bl	8011068 <_isatty_r>
 8010256:	b128      	cbz	r0, 8010264 <__smakebuf_r+0x74>
 8010258:	89a3      	ldrh	r3, [r4, #12]
 801025a:	f023 0303 	bic.w	r3, r3, #3
 801025e:	f043 0301 	orr.w	r3, r3, #1
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	89a0      	ldrh	r0, [r4, #12]
 8010266:	4305      	orrs	r5, r0
 8010268:	81a5      	strh	r5, [r4, #12]
 801026a:	e7cd      	b.n	8010208 <__smakebuf_r+0x18>
 801026c:	0800e2b1 	.word	0x0800e2b1

08010270 <malloc>:
 8010270:	4b02      	ldr	r3, [pc, #8]	; (801027c <malloc+0xc>)
 8010272:	4601      	mov	r1, r0
 8010274:	6818      	ldr	r0, [r3, #0]
 8010276:	f7fe b92b 	b.w	800e4d0 <_malloc_r>
 801027a:	bf00      	nop
 801027c:	200002cc 	.word	0x200002cc

08010280 <__malloc_lock>:
 8010280:	4801      	ldr	r0, [pc, #4]	; (8010288 <__malloc_lock+0x8>)
 8010282:	f7fe b90c 	b.w	800e49e <__retarget_lock_acquire_recursive>
 8010286:	bf00      	nop
 8010288:	20004d00 	.word	0x20004d00

0801028c <__malloc_unlock>:
 801028c:	4801      	ldr	r0, [pc, #4]	; (8010294 <__malloc_unlock+0x8>)
 801028e:	f7fe b907 	b.w	800e4a0 <__retarget_lock_release_recursive>
 8010292:	bf00      	nop
 8010294:	20004d00 	.word	0x20004d00

08010298 <_Balloc>:
 8010298:	b570      	push	{r4, r5, r6, lr}
 801029a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801029c:	4604      	mov	r4, r0
 801029e:	460d      	mov	r5, r1
 80102a0:	b976      	cbnz	r6, 80102c0 <_Balloc+0x28>
 80102a2:	2010      	movs	r0, #16
 80102a4:	f7ff ffe4 	bl	8010270 <malloc>
 80102a8:	4602      	mov	r2, r0
 80102aa:	6260      	str	r0, [r4, #36]	; 0x24
 80102ac:	b920      	cbnz	r0, 80102b8 <_Balloc+0x20>
 80102ae:	4b18      	ldr	r3, [pc, #96]	; (8010310 <_Balloc+0x78>)
 80102b0:	4818      	ldr	r0, [pc, #96]	; (8010314 <_Balloc+0x7c>)
 80102b2:	2166      	movs	r1, #102	; 0x66
 80102b4:	f000 fe96 	bl	8010fe4 <__assert_func>
 80102b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102bc:	6006      	str	r6, [r0, #0]
 80102be:	60c6      	str	r6, [r0, #12]
 80102c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80102c2:	68f3      	ldr	r3, [r6, #12]
 80102c4:	b183      	cbz	r3, 80102e8 <_Balloc+0x50>
 80102c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102ce:	b9b8      	cbnz	r0, 8010300 <_Balloc+0x68>
 80102d0:	2101      	movs	r1, #1
 80102d2:	fa01 f605 	lsl.w	r6, r1, r5
 80102d6:	1d72      	adds	r2, r6, #5
 80102d8:	0092      	lsls	r2, r2, #2
 80102da:	4620      	mov	r0, r4
 80102dc:	f000 fb5a 	bl	8010994 <_calloc_r>
 80102e0:	b160      	cbz	r0, 80102fc <_Balloc+0x64>
 80102e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102e6:	e00e      	b.n	8010306 <_Balloc+0x6e>
 80102e8:	2221      	movs	r2, #33	; 0x21
 80102ea:	2104      	movs	r1, #4
 80102ec:	4620      	mov	r0, r4
 80102ee:	f000 fb51 	bl	8010994 <_calloc_r>
 80102f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102f4:	60f0      	str	r0, [r6, #12]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1e4      	bne.n	80102c6 <_Balloc+0x2e>
 80102fc:	2000      	movs	r0, #0
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	6802      	ldr	r2, [r0, #0]
 8010302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010306:	2300      	movs	r3, #0
 8010308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801030c:	e7f7      	b.n	80102fe <_Balloc+0x66>
 801030e:	bf00      	nop
 8010310:	08011b6d 	.word	0x08011b6d
 8010314:	08011bf4 	.word	0x08011bf4

08010318 <_Bfree>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801031c:	4605      	mov	r5, r0
 801031e:	460c      	mov	r4, r1
 8010320:	b976      	cbnz	r6, 8010340 <_Bfree+0x28>
 8010322:	2010      	movs	r0, #16
 8010324:	f7ff ffa4 	bl	8010270 <malloc>
 8010328:	4602      	mov	r2, r0
 801032a:	6268      	str	r0, [r5, #36]	; 0x24
 801032c:	b920      	cbnz	r0, 8010338 <_Bfree+0x20>
 801032e:	4b09      	ldr	r3, [pc, #36]	; (8010354 <_Bfree+0x3c>)
 8010330:	4809      	ldr	r0, [pc, #36]	; (8010358 <_Bfree+0x40>)
 8010332:	218a      	movs	r1, #138	; 0x8a
 8010334:	f000 fe56 	bl	8010fe4 <__assert_func>
 8010338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801033c:	6006      	str	r6, [r0, #0]
 801033e:	60c6      	str	r6, [r0, #12]
 8010340:	b13c      	cbz	r4, 8010352 <_Bfree+0x3a>
 8010342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010344:	6862      	ldr	r2, [r4, #4]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801034c:	6021      	str	r1, [r4, #0]
 801034e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010352:	bd70      	pop	{r4, r5, r6, pc}
 8010354:	08011b6d 	.word	0x08011b6d
 8010358:	08011bf4 	.word	0x08011bf4

0801035c <__multadd>:
 801035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010360:	690e      	ldr	r6, [r1, #16]
 8010362:	4607      	mov	r7, r0
 8010364:	4698      	mov	r8, r3
 8010366:	460c      	mov	r4, r1
 8010368:	f101 0014 	add.w	r0, r1, #20
 801036c:	2300      	movs	r3, #0
 801036e:	6805      	ldr	r5, [r0, #0]
 8010370:	b2a9      	uxth	r1, r5
 8010372:	fb02 8101 	mla	r1, r2, r1, r8
 8010376:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801037a:	0c2d      	lsrs	r5, r5, #16
 801037c:	fb02 c505 	mla	r5, r2, r5, ip
 8010380:	b289      	uxth	r1, r1
 8010382:	3301      	adds	r3, #1
 8010384:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010388:	429e      	cmp	r6, r3
 801038a:	f840 1b04 	str.w	r1, [r0], #4
 801038e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010392:	dcec      	bgt.n	801036e <__multadd+0x12>
 8010394:	f1b8 0f00 	cmp.w	r8, #0
 8010398:	d022      	beq.n	80103e0 <__multadd+0x84>
 801039a:	68a3      	ldr	r3, [r4, #8]
 801039c:	42b3      	cmp	r3, r6
 801039e:	dc19      	bgt.n	80103d4 <__multadd+0x78>
 80103a0:	6861      	ldr	r1, [r4, #4]
 80103a2:	4638      	mov	r0, r7
 80103a4:	3101      	adds	r1, #1
 80103a6:	f7ff ff77 	bl	8010298 <_Balloc>
 80103aa:	4605      	mov	r5, r0
 80103ac:	b928      	cbnz	r0, 80103ba <__multadd+0x5e>
 80103ae:	4602      	mov	r2, r0
 80103b0:	4b0d      	ldr	r3, [pc, #52]	; (80103e8 <__multadd+0x8c>)
 80103b2:	480e      	ldr	r0, [pc, #56]	; (80103ec <__multadd+0x90>)
 80103b4:	21b5      	movs	r1, #181	; 0xb5
 80103b6:	f000 fe15 	bl	8010fe4 <__assert_func>
 80103ba:	6922      	ldr	r2, [r4, #16]
 80103bc:	3202      	adds	r2, #2
 80103be:	f104 010c 	add.w	r1, r4, #12
 80103c2:	0092      	lsls	r2, r2, #2
 80103c4:	300c      	adds	r0, #12
 80103c6:	f7fe f86c 	bl	800e4a2 <memcpy>
 80103ca:	4621      	mov	r1, r4
 80103cc:	4638      	mov	r0, r7
 80103ce:	f7ff ffa3 	bl	8010318 <_Bfree>
 80103d2:	462c      	mov	r4, r5
 80103d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80103d8:	3601      	adds	r6, #1
 80103da:	f8c3 8014 	str.w	r8, [r3, #20]
 80103de:	6126      	str	r6, [r4, #16]
 80103e0:	4620      	mov	r0, r4
 80103e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e6:	bf00      	nop
 80103e8:	08011be3 	.word	0x08011be3
 80103ec:	08011bf4 	.word	0x08011bf4

080103f0 <__hi0bits>:
 80103f0:	0c03      	lsrs	r3, r0, #16
 80103f2:	041b      	lsls	r3, r3, #16
 80103f4:	b9d3      	cbnz	r3, 801042c <__hi0bits+0x3c>
 80103f6:	0400      	lsls	r0, r0, #16
 80103f8:	2310      	movs	r3, #16
 80103fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80103fe:	bf04      	itt	eq
 8010400:	0200      	lsleq	r0, r0, #8
 8010402:	3308      	addeq	r3, #8
 8010404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010408:	bf04      	itt	eq
 801040a:	0100      	lsleq	r0, r0, #4
 801040c:	3304      	addeq	r3, #4
 801040e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010412:	bf04      	itt	eq
 8010414:	0080      	lsleq	r0, r0, #2
 8010416:	3302      	addeq	r3, #2
 8010418:	2800      	cmp	r0, #0
 801041a:	db05      	blt.n	8010428 <__hi0bits+0x38>
 801041c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010420:	f103 0301 	add.w	r3, r3, #1
 8010424:	bf08      	it	eq
 8010426:	2320      	moveq	r3, #32
 8010428:	4618      	mov	r0, r3
 801042a:	4770      	bx	lr
 801042c:	2300      	movs	r3, #0
 801042e:	e7e4      	b.n	80103fa <__hi0bits+0xa>

08010430 <__lo0bits>:
 8010430:	6803      	ldr	r3, [r0, #0]
 8010432:	f013 0207 	ands.w	r2, r3, #7
 8010436:	4601      	mov	r1, r0
 8010438:	d00b      	beq.n	8010452 <__lo0bits+0x22>
 801043a:	07da      	lsls	r2, r3, #31
 801043c:	d424      	bmi.n	8010488 <__lo0bits+0x58>
 801043e:	0798      	lsls	r0, r3, #30
 8010440:	bf49      	itett	mi
 8010442:	085b      	lsrmi	r3, r3, #1
 8010444:	089b      	lsrpl	r3, r3, #2
 8010446:	2001      	movmi	r0, #1
 8010448:	600b      	strmi	r3, [r1, #0]
 801044a:	bf5c      	itt	pl
 801044c:	600b      	strpl	r3, [r1, #0]
 801044e:	2002      	movpl	r0, #2
 8010450:	4770      	bx	lr
 8010452:	b298      	uxth	r0, r3
 8010454:	b9b0      	cbnz	r0, 8010484 <__lo0bits+0x54>
 8010456:	0c1b      	lsrs	r3, r3, #16
 8010458:	2010      	movs	r0, #16
 801045a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801045e:	bf04      	itt	eq
 8010460:	0a1b      	lsreq	r3, r3, #8
 8010462:	3008      	addeq	r0, #8
 8010464:	071a      	lsls	r2, r3, #28
 8010466:	bf04      	itt	eq
 8010468:	091b      	lsreq	r3, r3, #4
 801046a:	3004      	addeq	r0, #4
 801046c:	079a      	lsls	r2, r3, #30
 801046e:	bf04      	itt	eq
 8010470:	089b      	lsreq	r3, r3, #2
 8010472:	3002      	addeq	r0, #2
 8010474:	07da      	lsls	r2, r3, #31
 8010476:	d403      	bmi.n	8010480 <__lo0bits+0x50>
 8010478:	085b      	lsrs	r3, r3, #1
 801047a:	f100 0001 	add.w	r0, r0, #1
 801047e:	d005      	beq.n	801048c <__lo0bits+0x5c>
 8010480:	600b      	str	r3, [r1, #0]
 8010482:	4770      	bx	lr
 8010484:	4610      	mov	r0, r2
 8010486:	e7e8      	b.n	801045a <__lo0bits+0x2a>
 8010488:	2000      	movs	r0, #0
 801048a:	4770      	bx	lr
 801048c:	2020      	movs	r0, #32
 801048e:	4770      	bx	lr

08010490 <__i2b>:
 8010490:	b510      	push	{r4, lr}
 8010492:	460c      	mov	r4, r1
 8010494:	2101      	movs	r1, #1
 8010496:	f7ff feff 	bl	8010298 <_Balloc>
 801049a:	4602      	mov	r2, r0
 801049c:	b928      	cbnz	r0, 80104aa <__i2b+0x1a>
 801049e:	4b05      	ldr	r3, [pc, #20]	; (80104b4 <__i2b+0x24>)
 80104a0:	4805      	ldr	r0, [pc, #20]	; (80104b8 <__i2b+0x28>)
 80104a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80104a6:	f000 fd9d 	bl	8010fe4 <__assert_func>
 80104aa:	2301      	movs	r3, #1
 80104ac:	6144      	str	r4, [r0, #20]
 80104ae:	6103      	str	r3, [r0, #16]
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	bf00      	nop
 80104b4:	08011be3 	.word	0x08011be3
 80104b8:	08011bf4 	.word	0x08011bf4

080104bc <__multiply>:
 80104bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c0:	4614      	mov	r4, r2
 80104c2:	690a      	ldr	r2, [r1, #16]
 80104c4:	6923      	ldr	r3, [r4, #16]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	bfb8      	it	lt
 80104ca:	460b      	movlt	r3, r1
 80104cc:	460d      	mov	r5, r1
 80104ce:	bfbc      	itt	lt
 80104d0:	4625      	movlt	r5, r4
 80104d2:	461c      	movlt	r4, r3
 80104d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80104d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80104dc:	68ab      	ldr	r3, [r5, #8]
 80104de:	6869      	ldr	r1, [r5, #4]
 80104e0:	eb0a 0709 	add.w	r7, sl, r9
 80104e4:	42bb      	cmp	r3, r7
 80104e6:	b085      	sub	sp, #20
 80104e8:	bfb8      	it	lt
 80104ea:	3101      	addlt	r1, #1
 80104ec:	f7ff fed4 	bl	8010298 <_Balloc>
 80104f0:	b930      	cbnz	r0, 8010500 <__multiply+0x44>
 80104f2:	4602      	mov	r2, r0
 80104f4:	4b42      	ldr	r3, [pc, #264]	; (8010600 <__multiply+0x144>)
 80104f6:	4843      	ldr	r0, [pc, #268]	; (8010604 <__multiply+0x148>)
 80104f8:	f240 115d 	movw	r1, #349	; 0x15d
 80104fc:	f000 fd72 	bl	8010fe4 <__assert_func>
 8010500:	f100 0614 	add.w	r6, r0, #20
 8010504:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010508:	4633      	mov	r3, r6
 801050a:	2200      	movs	r2, #0
 801050c:	4543      	cmp	r3, r8
 801050e:	d31e      	bcc.n	801054e <__multiply+0x92>
 8010510:	f105 0c14 	add.w	ip, r5, #20
 8010514:	f104 0314 	add.w	r3, r4, #20
 8010518:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801051c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010520:	9202      	str	r2, [sp, #8]
 8010522:	ebac 0205 	sub.w	r2, ip, r5
 8010526:	3a15      	subs	r2, #21
 8010528:	f022 0203 	bic.w	r2, r2, #3
 801052c:	3204      	adds	r2, #4
 801052e:	f105 0115 	add.w	r1, r5, #21
 8010532:	458c      	cmp	ip, r1
 8010534:	bf38      	it	cc
 8010536:	2204      	movcc	r2, #4
 8010538:	9201      	str	r2, [sp, #4]
 801053a:	9a02      	ldr	r2, [sp, #8]
 801053c:	9303      	str	r3, [sp, #12]
 801053e:	429a      	cmp	r2, r3
 8010540:	d808      	bhi.n	8010554 <__multiply+0x98>
 8010542:	2f00      	cmp	r7, #0
 8010544:	dc55      	bgt.n	80105f2 <__multiply+0x136>
 8010546:	6107      	str	r7, [r0, #16]
 8010548:	b005      	add	sp, #20
 801054a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054e:	f843 2b04 	str.w	r2, [r3], #4
 8010552:	e7db      	b.n	801050c <__multiply+0x50>
 8010554:	f8b3 a000 	ldrh.w	sl, [r3]
 8010558:	f1ba 0f00 	cmp.w	sl, #0
 801055c:	d020      	beq.n	80105a0 <__multiply+0xe4>
 801055e:	f105 0e14 	add.w	lr, r5, #20
 8010562:	46b1      	mov	r9, r6
 8010564:	2200      	movs	r2, #0
 8010566:	f85e 4b04 	ldr.w	r4, [lr], #4
 801056a:	f8d9 b000 	ldr.w	fp, [r9]
 801056e:	b2a1      	uxth	r1, r4
 8010570:	fa1f fb8b 	uxth.w	fp, fp
 8010574:	fb0a b101 	mla	r1, sl, r1, fp
 8010578:	4411      	add	r1, r2
 801057a:	f8d9 2000 	ldr.w	r2, [r9]
 801057e:	0c24      	lsrs	r4, r4, #16
 8010580:	0c12      	lsrs	r2, r2, #16
 8010582:	fb0a 2404 	mla	r4, sl, r4, r2
 8010586:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801058a:	b289      	uxth	r1, r1
 801058c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010590:	45f4      	cmp	ip, lr
 8010592:	f849 1b04 	str.w	r1, [r9], #4
 8010596:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801059a:	d8e4      	bhi.n	8010566 <__multiply+0xaa>
 801059c:	9901      	ldr	r1, [sp, #4]
 801059e:	5072      	str	r2, [r6, r1]
 80105a0:	9a03      	ldr	r2, [sp, #12]
 80105a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105a6:	3304      	adds	r3, #4
 80105a8:	f1b9 0f00 	cmp.w	r9, #0
 80105ac:	d01f      	beq.n	80105ee <__multiply+0x132>
 80105ae:	6834      	ldr	r4, [r6, #0]
 80105b0:	f105 0114 	add.w	r1, r5, #20
 80105b4:	46b6      	mov	lr, r6
 80105b6:	f04f 0a00 	mov.w	sl, #0
 80105ba:	880a      	ldrh	r2, [r1, #0]
 80105bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80105c0:	fb09 b202 	mla	r2, r9, r2, fp
 80105c4:	4492      	add	sl, r2
 80105c6:	b2a4      	uxth	r4, r4
 80105c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80105cc:	f84e 4b04 	str.w	r4, [lr], #4
 80105d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80105d4:	f8be 2000 	ldrh.w	r2, [lr]
 80105d8:	0c24      	lsrs	r4, r4, #16
 80105da:	fb09 2404 	mla	r4, r9, r4, r2
 80105de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80105e2:	458c      	cmp	ip, r1
 80105e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80105e8:	d8e7      	bhi.n	80105ba <__multiply+0xfe>
 80105ea:	9a01      	ldr	r2, [sp, #4]
 80105ec:	50b4      	str	r4, [r6, r2]
 80105ee:	3604      	adds	r6, #4
 80105f0:	e7a3      	b.n	801053a <__multiply+0x7e>
 80105f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1a5      	bne.n	8010546 <__multiply+0x8a>
 80105fa:	3f01      	subs	r7, #1
 80105fc:	e7a1      	b.n	8010542 <__multiply+0x86>
 80105fe:	bf00      	nop
 8010600:	08011be3 	.word	0x08011be3
 8010604:	08011bf4 	.word	0x08011bf4

08010608 <__pow5mult>:
 8010608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801060c:	4615      	mov	r5, r2
 801060e:	f012 0203 	ands.w	r2, r2, #3
 8010612:	4606      	mov	r6, r0
 8010614:	460f      	mov	r7, r1
 8010616:	d007      	beq.n	8010628 <__pow5mult+0x20>
 8010618:	4c25      	ldr	r4, [pc, #148]	; (80106b0 <__pow5mult+0xa8>)
 801061a:	3a01      	subs	r2, #1
 801061c:	2300      	movs	r3, #0
 801061e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010622:	f7ff fe9b 	bl	801035c <__multadd>
 8010626:	4607      	mov	r7, r0
 8010628:	10ad      	asrs	r5, r5, #2
 801062a:	d03d      	beq.n	80106a8 <__pow5mult+0xa0>
 801062c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801062e:	b97c      	cbnz	r4, 8010650 <__pow5mult+0x48>
 8010630:	2010      	movs	r0, #16
 8010632:	f7ff fe1d 	bl	8010270 <malloc>
 8010636:	4602      	mov	r2, r0
 8010638:	6270      	str	r0, [r6, #36]	; 0x24
 801063a:	b928      	cbnz	r0, 8010648 <__pow5mult+0x40>
 801063c:	4b1d      	ldr	r3, [pc, #116]	; (80106b4 <__pow5mult+0xac>)
 801063e:	481e      	ldr	r0, [pc, #120]	; (80106b8 <__pow5mult+0xb0>)
 8010640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010644:	f000 fcce 	bl	8010fe4 <__assert_func>
 8010648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801064c:	6004      	str	r4, [r0, #0]
 801064e:	60c4      	str	r4, [r0, #12]
 8010650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010658:	b94c      	cbnz	r4, 801066e <__pow5mult+0x66>
 801065a:	f240 2171 	movw	r1, #625	; 0x271
 801065e:	4630      	mov	r0, r6
 8010660:	f7ff ff16 	bl	8010490 <__i2b>
 8010664:	2300      	movs	r3, #0
 8010666:	f8c8 0008 	str.w	r0, [r8, #8]
 801066a:	4604      	mov	r4, r0
 801066c:	6003      	str	r3, [r0, #0]
 801066e:	f04f 0900 	mov.w	r9, #0
 8010672:	07eb      	lsls	r3, r5, #31
 8010674:	d50a      	bpl.n	801068c <__pow5mult+0x84>
 8010676:	4639      	mov	r1, r7
 8010678:	4622      	mov	r2, r4
 801067a:	4630      	mov	r0, r6
 801067c:	f7ff ff1e 	bl	80104bc <__multiply>
 8010680:	4639      	mov	r1, r7
 8010682:	4680      	mov	r8, r0
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff fe47 	bl	8010318 <_Bfree>
 801068a:	4647      	mov	r7, r8
 801068c:	106d      	asrs	r5, r5, #1
 801068e:	d00b      	beq.n	80106a8 <__pow5mult+0xa0>
 8010690:	6820      	ldr	r0, [r4, #0]
 8010692:	b938      	cbnz	r0, 80106a4 <__pow5mult+0x9c>
 8010694:	4622      	mov	r2, r4
 8010696:	4621      	mov	r1, r4
 8010698:	4630      	mov	r0, r6
 801069a:	f7ff ff0f 	bl	80104bc <__multiply>
 801069e:	6020      	str	r0, [r4, #0]
 80106a0:	f8c0 9000 	str.w	r9, [r0]
 80106a4:	4604      	mov	r4, r0
 80106a6:	e7e4      	b.n	8010672 <__pow5mult+0x6a>
 80106a8:	4638      	mov	r0, r7
 80106aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ae:	bf00      	nop
 80106b0:	08011d48 	.word	0x08011d48
 80106b4:	08011b6d 	.word	0x08011b6d
 80106b8:	08011bf4 	.word	0x08011bf4

080106bc <__lshift>:
 80106bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c0:	460c      	mov	r4, r1
 80106c2:	6849      	ldr	r1, [r1, #4]
 80106c4:	6923      	ldr	r3, [r4, #16]
 80106c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106ca:	68a3      	ldr	r3, [r4, #8]
 80106cc:	4607      	mov	r7, r0
 80106ce:	4691      	mov	r9, r2
 80106d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106d4:	f108 0601 	add.w	r6, r8, #1
 80106d8:	42b3      	cmp	r3, r6
 80106da:	db0b      	blt.n	80106f4 <__lshift+0x38>
 80106dc:	4638      	mov	r0, r7
 80106de:	f7ff fddb 	bl	8010298 <_Balloc>
 80106e2:	4605      	mov	r5, r0
 80106e4:	b948      	cbnz	r0, 80106fa <__lshift+0x3e>
 80106e6:	4602      	mov	r2, r0
 80106e8:	4b28      	ldr	r3, [pc, #160]	; (801078c <__lshift+0xd0>)
 80106ea:	4829      	ldr	r0, [pc, #164]	; (8010790 <__lshift+0xd4>)
 80106ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80106f0:	f000 fc78 	bl	8010fe4 <__assert_func>
 80106f4:	3101      	adds	r1, #1
 80106f6:	005b      	lsls	r3, r3, #1
 80106f8:	e7ee      	b.n	80106d8 <__lshift+0x1c>
 80106fa:	2300      	movs	r3, #0
 80106fc:	f100 0114 	add.w	r1, r0, #20
 8010700:	f100 0210 	add.w	r2, r0, #16
 8010704:	4618      	mov	r0, r3
 8010706:	4553      	cmp	r3, sl
 8010708:	db33      	blt.n	8010772 <__lshift+0xb6>
 801070a:	6920      	ldr	r0, [r4, #16]
 801070c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010710:	f104 0314 	add.w	r3, r4, #20
 8010714:	f019 091f 	ands.w	r9, r9, #31
 8010718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801071c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010720:	d02b      	beq.n	801077a <__lshift+0xbe>
 8010722:	f1c9 0e20 	rsb	lr, r9, #32
 8010726:	468a      	mov	sl, r1
 8010728:	2200      	movs	r2, #0
 801072a:	6818      	ldr	r0, [r3, #0]
 801072c:	fa00 f009 	lsl.w	r0, r0, r9
 8010730:	4302      	orrs	r2, r0
 8010732:	f84a 2b04 	str.w	r2, [sl], #4
 8010736:	f853 2b04 	ldr.w	r2, [r3], #4
 801073a:	459c      	cmp	ip, r3
 801073c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010740:	d8f3      	bhi.n	801072a <__lshift+0x6e>
 8010742:	ebac 0304 	sub.w	r3, ip, r4
 8010746:	3b15      	subs	r3, #21
 8010748:	f023 0303 	bic.w	r3, r3, #3
 801074c:	3304      	adds	r3, #4
 801074e:	f104 0015 	add.w	r0, r4, #21
 8010752:	4584      	cmp	ip, r0
 8010754:	bf38      	it	cc
 8010756:	2304      	movcc	r3, #4
 8010758:	50ca      	str	r2, [r1, r3]
 801075a:	b10a      	cbz	r2, 8010760 <__lshift+0xa4>
 801075c:	f108 0602 	add.w	r6, r8, #2
 8010760:	3e01      	subs	r6, #1
 8010762:	4638      	mov	r0, r7
 8010764:	612e      	str	r6, [r5, #16]
 8010766:	4621      	mov	r1, r4
 8010768:	f7ff fdd6 	bl	8010318 <_Bfree>
 801076c:	4628      	mov	r0, r5
 801076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010772:	f842 0f04 	str.w	r0, [r2, #4]!
 8010776:	3301      	adds	r3, #1
 8010778:	e7c5      	b.n	8010706 <__lshift+0x4a>
 801077a:	3904      	subs	r1, #4
 801077c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010780:	f841 2f04 	str.w	r2, [r1, #4]!
 8010784:	459c      	cmp	ip, r3
 8010786:	d8f9      	bhi.n	801077c <__lshift+0xc0>
 8010788:	e7ea      	b.n	8010760 <__lshift+0xa4>
 801078a:	bf00      	nop
 801078c:	08011be3 	.word	0x08011be3
 8010790:	08011bf4 	.word	0x08011bf4

08010794 <__mcmp>:
 8010794:	b530      	push	{r4, r5, lr}
 8010796:	6902      	ldr	r2, [r0, #16]
 8010798:	690c      	ldr	r4, [r1, #16]
 801079a:	1b12      	subs	r2, r2, r4
 801079c:	d10e      	bne.n	80107bc <__mcmp+0x28>
 801079e:	f100 0314 	add.w	r3, r0, #20
 80107a2:	3114      	adds	r1, #20
 80107a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107b4:	42a5      	cmp	r5, r4
 80107b6:	d003      	beq.n	80107c0 <__mcmp+0x2c>
 80107b8:	d305      	bcc.n	80107c6 <__mcmp+0x32>
 80107ba:	2201      	movs	r2, #1
 80107bc:	4610      	mov	r0, r2
 80107be:	bd30      	pop	{r4, r5, pc}
 80107c0:	4283      	cmp	r3, r0
 80107c2:	d3f3      	bcc.n	80107ac <__mcmp+0x18>
 80107c4:	e7fa      	b.n	80107bc <__mcmp+0x28>
 80107c6:	f04f 32ff 	mov.w	r2, #4294967295
 80107ca:	e7f7      	b.n	80107bc <__mcmp+0x28>

080107cc <__mdiff>:
 80107cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	460c      	mov	r4, r1
 80107d2:	4606      	mov	r6, r0
 80107d4:	4611      	mov	r1, r2
 80107d6:	4620      	mov	r0, r4
 80107d8:	4617      	mov	r7, r2
 80107da:	f7ff ffdb 	bl	8010794 <__mcmp>
 80107de:	1e05      	subs	r5, r0, #0
 80107e0:	d110      	bne.n	8010804 <__mdiff+0x38>
 80107e2:	4629      	mov	r1, r5
 80107e4:	4630      	mov	r0, r6
 80107e6:	f7ff fd57 	bl	8010298 <_Balloc>
 80107ea:	b930      	cbnz	r0, 80107fa <__mdiff+0x2e>
 80107ec:	4b39      	ldr	r3, [pc, #228]	; (80108d4 <__mdiff+0x108>)
 80107ee:	4602      	mov	r2, r0
 80107f0:	f240 2132 	movw	r1, #562	; 0x232
 80107f4:	4838      	ldr	r0, [pc, #224]	; (80108d8 <__mdiff+0x10c>)
 80107f6:	f000 fbf5 	bl	8010fe4 <__assert_func>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010804:	bfa4      	itt	ge
 8010806:	463b      	movge	r3, r7
 8010808:	4627      	movge	r7, r4
 801080a:	4630      	mov	r0, r6
 801080c:	6879      	ldr	r1, [r7, #4]
 801080e:	bfa6      	itte	ge
 8010810:	461c      	movge	r4, r3
 8010812:	2500      	movge	r5, #0
 8010814:	2501      	movlt	r5, #1
 8010816:	f7ff fd3f 	bl	8010298 <_Balloc>
 801081a:	b920      	cbnz	r0, 8010826 <__mdiff+0x5a>
 801081c:	4b2d      	ldr	r3, [pc, #180]	; (80108d4 <__mdiff+0x108>)
 801081e:	4602      	mov	r2, r0
 8010820:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010824:	e7e6      	b.n	80107f4 <__mdiff+0x28>
 8010826:	693e      	ldr	r6, [r7, #16]
 8010828:	60c5      	str	r5, [r0, #12]
 801082a:	6925      	ldr	r5, [r4, #16]
 801082c:	f107 0114 	add.w	r1, r7, #20
 8010830:	f104 0914 	add.w	r9, r4, #20
 8010834:	f100 0e14 	add.w	lr, r0, #20
 8010838:	f107 0210 	add.w	r2, r7, #16
 801083c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010840:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010844:	46f2      	mov	sl, lr
 8010846:	2700      	movs	r7, #0
 8010848:	f859 3b04 	ldr.w	r3, [r9], #4
 801084c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010850:	fa1f f883 	uxth.w	r8, r3
 8010854:	fa17 f78b 	uxtah	r7, r7, fp
 8010858:	0c1b      	lsrs	r3, r3, #16
 801085a:	eba7 0808 	sub.w	r8, r7, r8
 801085e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010862:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010866:	fa1f f888 	uxth.w	r8, r8
 801086a:	141f      	asrs	r7, r3, #16
 801086c:	454d      	cmp	r5, r9
 801086e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010872:	f84a 3b04 	str.w	r3, [sl], #4
 8010876:	d8e7      	bhi.n	8010848 <__mdiff+0x7c>
 8010878:	1b2b      	subs	r3, r5, r4
 801087a:	3b15      	subs	r3, #21
 801087c:	f023 0303 	bic.w	r3, r3, #3
 8010880:	3304      	adds	r3, #4
 8010882:	3415      	adds	r4, #21
 8010884:	42a5      	cmp	r5, r4
 8010886:	bf38      	it	cc
 8010888:	2304      	movcc	r3, #4
 801088a:	4419      	add	r1, r3
 801088c:	4473      	add	r3, lr
 801088e:	469e      	mov	lr, r3
 8010890:	460d      	mov	r5, r1
 8010892:	4565      	cmp	r5, ip
 8010894:	d30e      	bcc.n	80108b4 <__mdiff+0xe8>
 8010896:	f10c 0203 	add.w	r2, ip, #3
 801089a:	1a52      	subs	r2, r2, r1
 801089c:	f022 0203 	bic.w	r2, r2, #3
 80108a0:	3903      	subs	r1, #3
 80108a2:	458c      	cmp	ip, r1
 80108a4:	bf38      	it	cc
 80108a6:	2200      	movcc	r2, #0
 80108a8:	441a      	add	r2, r3
 80108aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80108ae:	b17b      	cbz	r3, 80108d0 <__mdiff+0x104>
 80108b0:	6106      	str	r6, [r0, #16]
 80108b2:	e7a5      	b.n	8010800 <__mdiff+0x34>
 80108b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80108b8:	fa17 f488 	uxtah	r4, r7, r8
 80108bc:	1422      	asrs	r2, r4, #16
 80108be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80108c2:	b2a4      	uxth	r4, r4
 80108c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80108c8:	f84e 4b04 	str.w	r4, [lr], #4
 80108cc:	1417      	asrs	r7, r2, #16
 80108ce:	e7e0      	b.n	8010892 <__mdiff+0xc6>
 80108d0:	3e01      	subs	r6, #1
 80108d2:	e7ea      	b.n	80108aa <__mdiff+0xde>
 80108d4:	08011be3 	.word	0x08011be3
 80108d8:	08011bf4 	.word	0x08011bf4

080108dc <__d2b>:
 80108dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108e0:	4689      	mov	r9, r1
 80108e2:	2101      	movs	r1, #1
 80108e4:	ec57 6b10 	vmov	r6, r7, d0
 80108e8:	4690      	mov	r8, r2
 80108ea:	f7ff fcd5 	bl	8010298 <_Balloc>
 80108ee:	4604      	mov	r4, r0
 80108f0:	b930      	cbnz	r0, 8010900 <__d2b+0x24>
 80108f2:	4602      	mov	r2, r0
 80108f4:	4b25      	ldr	r3, [pc, #148]	; (801098c <__d2b+0xb0>)
 80108f6:	4826      	ldr	r0, [pc, #152]	; (8010990 <__d2b+0xb4>)
 80108f8:	f240 310a 	movw	r1, #778	; 0x30a
 80108fc:	f000 fb72 	bl	8010fe4 <__assert_func>
 8010900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010908:	bb35      	cbnz	r5, 8010958 <__d2b+0x7c>
 801090a:	2e00      	cmp	r6, #0
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	d028      	beq.n	8010962 <__d2b+0x86>
 8010910:	4668      	mov	r0, sp
 8010912:	9600      	str	r6, [sp, #0]
 8010914:	f7ff fd8c 	bl	8010430 <__lo0bits>
 8010918:	9900      	ldr	r1, [sp, #0]
 801091a:	b300      	cbz	r0, 801095e <__d2b+0x82>
 801091c:	9a01      	ldr	r2, [sp, #4]
 801091e:	f1c0 0320 	rsb	r3, r0, #32
 8010922:	fa02 f303 	lsl.w	r3, r2, r3
 8010926:	430b      	orrs	r3, r1
 8010928:	40c2      	lsrs	r2, r0
 801092a:	6163      	str	r3, [r4, #20]
 801092c:	9201      	str	r2, [sp, #4]
 801092e:	9b01      	ldr	r3, [sp, #4]
 8010930:	61a3      	str	r3, [r4, #24]
 8010932:	2b00      	cmp	r3, #0
 8010934:	bf14      	ite	ne
 8010936:	2202      	movne	r2, #2
 8010938:	2201      	moveq	r2, #1
 801093a:	6122      	str	r2, [r4, #16]
 801093c:	b1d5      	cbz	r5, 8010974 <__d2b+0x98>
 801093e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010942:	4405      	add	r5, r0
 8010944:	f8c9 5000 	str.w	r5, [r9]
 8010948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801094c:	f8c8 0000 	str.w	r0, [r8]
 8010950:	4620      	mov	r0, r4
 8010952:	b003      	add	sp, #12
 8010954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801095c:	e7d5      	b.n	801090a <__d2b+0x2e>
 801095e:	6161      	str	r1, [r4, #20]
 8010960:	e7e5      	b.n	801092e <__d2b+0x52>
 8010962:	a801      	add	r0, sp, #4
 8010964:	f7ff fd64 	bl	8010430 <__lo0bits>
 8010968:	9b01      	ldr	r3, [sp, #4]
 801096a:	6163      	str	r3, [r4, #20]
 801096c:	2201      	movs	r2, #1
 801096e:	6122      	str	r2, [r4, #16]
 8010970:	3020      	adds	r0, #32
 8010972:	e7e3      	b.n	801093c <__d2b+0x60>
 8010974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801097c:	f8c9 0000 	str.w	r0, [r9]
 8010980:	6918      	ldr	r0, [r3, #16]
 8010982:	f7ff fd35 	bl	80103f0 <__hi0bits>
 8010986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801098a:	e7df      	b.n	801094c <__d2b+0x70>
 801098c:	08011be3 	.word	0x08011be3
 8010990:	08011bf4 	.word	0x08011bf4

08010994 <_calloc_r>:
 8010994:	b513      	push	{r0, r1, r4, lr}
 8010996:	434a      	muls	r2, r1
 8010998:	4611      	mov	r1, r2
 801099a:	9201      	str	r2, [sp, #4]
 801099c:	f7fd fd98 	bl	800e4d0 <_malloc_r>
 80109a0:	4604      	mov	r4, r0
 80109a2:	b118      	cbz	r0, 80109ac <_calloc_r+0x18>
 80109a4:	9a01      	ldr	r2, [sp, #4]
 80109a6:	2100      	movs	r1, #0
 80109a8:	f7fd fd89 	bl	800e4be <memset>
 80109ac:	4620      	mov	r0, r4
 80109ae:	b002      	add	sp, #8
 80109b0:	bd10      	pop	{r4, pc}
	...

080109b4 <_free_r>:
 80109b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109b6:	2900      	cmp	r1, #0
 80109b8:	d048      	beq.n	8010a4c <_free_r+0x98>
 80109ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109be:	9001      	str	r0, [sp, #4]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f1a1 0404 	sub.w	r4, r1, #4
 80109c6:	bfb8      	it	lt
 80109c8:	18e4      	addlt	r4, r4, r3
 80109ca:	f7ff fc59 	bl	8010280 <__malloc_lock>
 80109ce:	4a20      	ldr	r2, [pc, #128]	; (8010a50 <_free_r+0x9c>)
 80109d0:	9801      	ldr	r0, [sp, #4]
 80109d2:	6813      	ldr	r3, [r2, #0]
 80109d4:	4615      	mov	r5, r2
 80109d6:	b933      	cbnz	r3, 80109e6 <_free_r+0x32>
 80109d8:	6063      	str	r3, [r4, #4]
 80109da:	6014      	str	r4, [r2, #0]
 80109dc:	b003      	add	sp, #12
 80109de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109e2:	f7ff bc53 	b.w	801028c <__malloc_unlock>
 80109e6:	42a3      	cmp	r3, r4
 80109e8:	d90b      	bls.n	8010a02 <_free_r+0x4e>
 80109ea:	6821      	ldr	r1, [r4, #0]
 80109ec:	1862      	adds	r2, r4, r1
 80109ee:	4293      	cmp	r3, r2
 80109f0:	bf04      	itt	eq
 80109f2:	681a      	ldreq	r2, [r3, #0]
 80109f4:	685b      	ldreq	r3, [r3, #4]
 80109f6:	6063      	str	r3, [r4, #4]
 80109f8:	bf04      	itt	eq
 80109fa:	1852      	addeq	r2, r2, r1
 80109fc:	6022      	streq	r2, [r4, #0]
 80109fe:	602c      	str	r4, [r5, #0]
 8010a00:	e7ec      	b.n	80109dc <_free_r+0x28>
 8010a02:	461a      	mov	r2, r3
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	b10b      	cbz	r3, 8010a0c <_free_r+0x58>
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	d9fa      	bls.n	8010a02 <_free_r+0x4e>
 8010a0c:	6811      	ldr	r1, [r2, #0]
 8010a0e:	1855      	adds	r5, r2, r1
 8010a10:	42a5      	cmp	r5, r4
 8010a12:	d10b      	bne.n	8010a2c <_free_r+0x78>
 8010a14:	6824      	ldr	r4, [r4, #0]
 8010a16:	4421      	add	r1, r4
 8010a18:	1854      	adds	r4, r2, r1
 8010a1a:	42a3      	cmp	r3, r4
 8010a1c:	6011      	str	r1, [r2, #0]
 8010a1e:	d1dd      	bne.n	80109dc <_free_r+0x28>
 8010a20:	681c      	ldr	r4, [r3, #0]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	6053      	str	r3, [r2, #4]
 8010a26:	4421      	add	r1, r4
 8010a28:	6011      	str	r1, [r2, #0]
 8010a2a:	e7d7      	b.n	80109dc <_free_r+0x28>
 8010a2c:	d902      	bls.n	8010a34 <_free_r+0x80>
 8010a2e:	230c      	movs	r3, #12
 8010a30:	6003      	str	r3, [r0, #0]
 8010a32:	e7d3      	b.n	80109dc <_free_r+0x28>
 8010a34:	6825      	ldr	r5, [r4, #0]
 8010a36:	1961      	adds	r1, r4, r5
 8010a38:	428b      	cmp	r3, r1
 8010a3a:	bf04      	itt	eq
 8010a3c:	6819      	ldreq	r1, [r3, #0]
 8010a3e:	685b      	ldreq	r3, [r3, #4]
 8010a40:	6063      	str	r3, [r4, #4]
 8010a42:	bf04      	itt	eq
 8010a44:	1949      	addeq	r1, r1, r5
 8010a46:	6021      	streq	r1, [r4, #0]
 8010a48:	6054      	str	r4, [r2, #4]
 8010a4a:	e7c7      	b.n	80109dc <_free_r+0x28>
 8010a4c:	b003      	add	sp, #12
 8010a4e:	bd30      	pop	{r4, r5, pc}
 8010a50:	200044dc 	.word	0x200044dc

08010a54 <__ssputs_r>:
 8010a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a58:	688e      	ldr	r6, [r1, #8]
 8010a5a:	429e      	cmp	r6, r3
 8010a5c:	4682      	mov	sl, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	4690      	mov	r8, r2
 8010a62:	461f      	mov	r7, r3
 8010a64:	d838      	bhi.n	8010ad8 <__ssputs_r+0x84>
 8010a66:	898a      	ldrh	r2, [r1, #12]
 8010a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a6c:	d032      	beq.n	8010ad4 <__ssputs_r+0x80>
 8010a6e:	6825      	ldr	r5, [r4, #0]
 8010a70:	6909      	ldr	r1, [r1, #16]
 8010a72:	eba5 0901 	sub.w	r9, r5, r1
 8010a76:	6965      	ldr	r5, [r4, #20]
 8010a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a80:	3301      	adds	r3, #1
 8010a82:	444b      	add	r3, r9
 8010a84:	106d      	asrs	r5, r5, #1
 8010a86:	429d      	cmp	r5, r3
 8010a88:	bf38      	it	cc
 8010a8a:	461d      	movcc	r5, r3
 8010a8c:	0553      	lsls	r3, r2, #21
 8010a8e:	d531      	bpl.n	8010af4 <__ssputs_r+0xa0>
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7fd fd1d 	bl	800e4d0 <_malloc_r>
 8010a96:	4606      	mov	r6, r0
 8010a98:	b950      	cbnz	r0, 8010ab0 <__ssputs_r+0x5c>
 8010a9a:	230c      	movs	r3, #12
 8010a9c:	f8ca 3000 	str.w	r3, [sl]
 8010aa0:	89a3      	ldrh	r3, [r4, #12]
 8010aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aa6:	81a3      	strh	r3, [r4, #12]
 8010aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab0:	6921      	ldr	r1, [r4, #16]
 8010ab2:	464a      	mov	r2, r9
 8010ab4:	f7fd fcf5 	bl	800e4a2 <memcpy>
 8010ab8:	89a3      	ldrh	r3, [r4, #12]
 8010aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac2:	81a3      	strh	r3, [r4, #12]
 8010ac4:	6126      	str	r6, [r4, #16]
 8010ac6:	6165      	str	r5, [r4, #20]
 8010ac8:	444e      	add	r6, r9
 8010aca:	eba5 0509 	sub.w	r5, r5, r9
 8010ace:	6026      	str	r6, [r4, #0]
 8010ad0:	60a5      	str	r5, [r4, #8]
 8010ad2:	463e      	mov	r6, r7
 8010ad4:	42be      	cmp	r6, r7
 8010ad6:	d900      	bls.n	8010ada <__ssputs_r+0x86>
 8010ad8:	463e      	mov	r6, r7
 8010ada:	4632      	mov	r2, r6
 8010adc:	6820      	ldr	r0, [r4, #0]
 8010ade:	4641      	mov	r1, r8
 8010ae0:	f000 fae4 	bl	80110ac <memmove>
 8010ae4:	68a3      	ldr	r3, [r4, #8]
 8010ae6:	6822      	ldr	r2, [r4, #0]
 8010ae8:	1b9b      	subs	r3, r3, r6
 8010aea:	4432      	add	r2, r6
 8010aec:	60a3      	str	r3, [r4, #8]
 8010aee:	6022      	str	r2, [r4, #0]
 8010af0:	2000      	movs	r0, #0
 8010af2:	e7db      	b.n	8010aac <__ssputs_r+0x58>
 8010af4:	462a      	mov	r2, r5
 8010af6:	f000 faf3 	bl	80110e0 <_realloc_r>
 8010afa:	4606      	mov	r6, r0
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d1e1      	bne.n	8010ac4 <__ssputs_r+0x70>
 8010b00:	6921      	ldr	r1, [r4, #16]
 8010b02:	4650      	mov	r0, sl
 8010b04:	f7ff ff56 	bl	80109b4 <_free_r>
 8010b08:	e7c7      	b.n	8010a9a <__ssputs_r+0x46>
	...

08010b0c <_svfiprintf_r>:
 8010b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b10:	4698      	mov	r8, r3
 8010b12:	898b      	ldrh	r3, [r1, #12]
 8010b14:	061b      	lsls	r3, r3, #24
 8010b16:	b09d      	sub	sp, #116	; 0x74
 8010b18:	4607      	mov	r7, r0
 8010b1a:	460d      	mov	r5, r1
 8010b1c:	4614      	mov	r4, r2
 8010b1e:	d50e      	bpl.n	8010b3e <_svfiprintf_r+0x32>
 8010b20:	690b      	ldr	r3, [r1, #16]
 8010b22:	b963      	cbnz	r3, 8010b3e <_svfiprintf_r+0x32>
 8010b24:	2140      	movs	r1, #64	; 0x40
 8010b26:	f7fd fcd3 	bl	800e4d0 <_malloc_r>
 8010b2a:	6028      	str	r0, [r5, #0]
 8010b2c:	6128      	str	r0, [r5, #16]
 8010b2e:	b920      	cbnz	r0, 8010b3a <_svfiprintf_r+0x2e>
 8010b30:	230c      	movs	r3, #12
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	f04f 30ff 	mov.w	r0, #4294967295
 8010b38:	e0d1      	b.n	8010cde <_svfiprintf_r+0x1d2>
 8010b3a:	2340      	movs	r3, #64	; 0x40
 8010b3c:	616b      	str	r3, [r5, #20]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	9309      	str	r3, [sp, #36]	; 0x24
 8010b42:	2320      	movs	r3, #32
 8010b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b4c:	2330      	movs	r3, #48	; 0x30
 8010b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cf8 <_svfiprintf_r+0x1ec>
 8010b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b56:	f04f 0901 	mov.w	r9, #1
 8010b5a:	4623      	mov	r3, r4
 8010b5c:	469a      	mov	sl, r3
 8010b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b62:	b10a      	cbz	r2, 8010b68 <_svfiprintf_r+0x5c>
 8010b64:	2a25      	cmp	r2, #37	; 0x25
 8010b66:	d1f9      	bne.n	8010b5c <_svfiprintf_r+0x50>
 8010b68:	ebba 0b04 	subs.w	fp, sl, r4
 8010b6c:	d00b      	beq.n	8010b86 <_svfiprintf_r+0x7a>
 8010b6e:	465b      	mov	r3, fp
 8010b70:	4622      	mov	r2, r4
 8010b72:	4629      	mov	r1, r5
 8010b74:	4638      	mov	r0, r7
 8010b76:	f7ff ff6d 	bl	8010a54 <__ssputs_r>
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	f000 80aa 	beq.w	8010cd4 <_svfiprintf_r+0x1c8>
 8010b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b82:	445a      	add	r2, fp
 8010b84:	9209      	str	r2, [sp, #36]	; 0x24
 8010b86:	f89a 3000 	ldrb.w	r3, [sl]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 80a2 	beq.w	8010cd4 <_svfiprintf_r+0x1c8>
 8010b90:	2300      	movs	r3, #0
 8010b92:	f04f 32ff 	mov.w	r2, #4294967295
 8010b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b9a:	f10a 0a01 	add.w	sl, sl, #1
 8010b9e:	9304      	str	r3, [sp, #16]
 8010ba0:	9307      	str	r3, [sp, #28]
 8010ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8010ba8:	4654      	mov	r4, sl
 8010baa:	2205      	movs	r2, #5
 8010bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb0:	4851      	ldr	r0, [pc, #324]	; (8010cf8 <_svfiprintf_r+0x1ec>)
 8010bb2:	f7ef fb1d 	bl	80001f0 <memchr>
 8010bb6:	9a04      	ldr	r2, [sp, #16]
 8010bb8:	b9d8      	cbnz	r0, 8010bf2 <_svfiprintf_r+0xe6>
 8010bba:	06d0      	lsls	r0, r2, #27
 8010bbc:	bf44      	itt	mi
 8010bbe:	2320      	movmi	r3, #32
 8010bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bc4:	0711      	lsls	r1, r2, #28
 8010bc6:	bf44      	itt	mi
 8010bc8:	232b      	movmi	r3, #43	; 0x2b
 8010bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bce:	f89a 3000 	ldrb.w	r3, [sl]
 8010bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8010bd4:	d015      	beq.n	8010c02 <_svfiprintf_r+0xf6>
 8010bd6:	9a07      	ldr	r2, [sp, #28]
 8010bd8:	4654      	mov	r4, sl
 8010bda:	2000      	movs	r0, #0
 8010bdc:	f04f 0c0a 	mov.w	ip, #10
 8010be0:	4621      	mov	r1, r4
 8010be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010be6:	3b30      	subs	r3, #48	; 0x30
 8010be8:	2b09      	cmp	r3, #9
 8010bea:	d94e      	bls.n	8010c8a <_svfiprintf_r+0x17e>
 8010bec:	b1b0      	cbz	r0, 8010c1c <_svfiprintf_r+0x110>
 8010bee:	9207      	str	r2, [sp, #28]
 8010bf0:	e014      	b.n	8010c1c <_svfiprintf_r+0x110>
 8010bf2:	eba0 0308 	sub.w	r3, r0, r8
 8010bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	9304      	str	r3, [sp, #16]
 8010bfe:	46a2      	mov	sl, r4
 8010c00:	e7d2      	b.n	8010ba8 <_svfiprintf_r+0x9c>
 8010c02:	9b03      	ldr	r3, [sp, #12]
 8010c04:	1d19      	adds	r1, r3, #4
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	9103      	str	r1, [sp, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	bfbb      	ittet	lt
 8010c0e:	425b      	neglt	r3, r3
 8010c10:	f042 0202 	orrlt.w	r2, r2, #2
 8010c14:	9307      	strge	r3, [sp, #28]
 8010c16:	9307      	strlt	r3, [sp, #28]
 8010c18:	bfb8      	it	lt
 8010c1a:	9204      	strlt	r2, [sp, #16]
 8010c1c:	7823      	ldrb	r3, [r4, #0]
 8010c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8010c20:	d10c      	bne.n	8010c3c <_svfiprintf_r+0x130>
 8010c22:	7863      	ldrb	r3, [r4, #1]
 8010c24:	2b2a      	cmp	r3, #42	; 0x2a
 8010c26:	d135      	bne.n	8010c94 <_svfiprintf_r+0x188>
 8010c28:	9b03      	ldr	r3, [sp, #12]
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	9203      	str	r2, [sp, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	bfb8      	it	lt
 8010c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c38:	3402      	adds	r4, #2
 8010c3a:	9305      	str	r3, [sp, #20]
 8010c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d08 <_svfiprintf_r+0x1fc>
 8010c40:	7821      	ldrb	r1, [r4, #0]
 8010c42:	2203      	movs	r2, #3
 8010c44:	4650      	mov	r0, sl
 8010c46:	f7ef fad3 	bl	80001f0 <memchr>
 8010c4a:	b140      	cbz	r0, 8010c5e <_svfiprintf_r+0x152>
 8010c4c:	2340      	movs	r3, #64	; 0x40
 8010c4e:	eba0 000a 	sub.w	r0, r0, sl
 8010c52:	fa03 f000 	lsl.w	r0, r3, r0
 8010c56:	9b04      	ldr	r3, [sp, #16]
 8010c58:	4303      	orrs	r3, r0
 8010c5a:	3401      	adds	r4, #1
 8010c5c:	9304      	str	r3, [sp, #16]
 8010c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c62:	4826      	ldr	r0, [pc, #152]	; (8010cfc <_svfiprintf_r+0x1f0>)
 8010c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c68:	2206      	movs	r2, #6
 8010c6a:	f7ef fac1 	bl	80001f0 <memchr>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d038      	beq.n	8010ce4 <_svfiprintf_r+0x1d8>
 8010c72:	4b23      	ldr	r3, [pc, #140]	; (8010d00 <_svfiprintf_r+0x1f4>)
 8010c74:	bb1b      	cbnz	r3, 8010cbe <_svfiprintf_r+0x1b2>
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	3307      	adds	r3, #7
 8010c7a:	f023 0307 	bic.w	r3, r3, #7
 8010c7e:	3308      	adds	r3, #8
 8010c80:	9303      	str	r3, [sp, #12]
 8010c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c84:	4433      	add	r3, r6
 8010c86:	9309      	str	r3, [sp, #36]	; 0x24
 8010c88:	e767      	b.n	8010b5a <_svfiprintf_r+0x4e>
 8010c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c8e:	460c      	mov	r4, r1
 8010c90:	2001      	movs	r0, #1
 8010c92:	e7a5      	b.n	8010be0 <_svfiprintf_r+0xd4>
 8010c94:	2300      	movs	r3, #0
 8010c96:	3401      	adds	r4, #1
 8010c98:	9305      	str	r3, [sp, #20]
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	f04f 0c0a 	mov.w	ip, #10
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ca6:	3a30      	subs	r2, #48	; 0x30
 8010ca8:	2a09      	cmp	r2, #9
 8010caa:	d903      	bls.n	8010cb4 <_svfiprintf_r+0x1a8>
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d0c5      	beq.n	8010c3c <_svfiprintf_r+0x130>
 8010cb0:	9105      	str	r1, [sp, #20]
 8010cb2:	e7c3      	b.n	8010c3c <_svfiprintf_r+0x130>
 8010cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cb8:	4604      	mov	r4, r0
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e7f0      	b.n	8010ca0 <_svfiprintf_r+0x194>
 8010cbe:	ab03      	add	r3, sp, #12
 8010cc0:	9300      	str	r3, [sp, #0]
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4b0f      	ldr	r3, [pc, #60]	; (8010d04 <_svfiprintf_r+0x1f8>)
 8010cc6:	a904      	add	r1, sp, #16
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f7fd fcfb 	bl	800e6c4 <_printf_float>
 8010cce:	1c42      	adds	r2, r0, #1
 8010cd0:	4606      	mov	r6, r0
 8010cd2:	d1d6      	bne.n	8010c82 <_svfiprintf_r+0x176>
 8010cd4:	89ab      	ldrh	r3, [r5, #12]
 8010cd6:	065b      	lsls	r3, r3, #25
 8010cd8:	f53f af2c 	bmi.w	8010b34 <_svfiprintf_r+0x28>
 8010cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cde:	b01d      	add	sp, #116	; 0x74
 8010ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce4:	ab03      	add	r3, sp, #12
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	462a      	mov	r2, r5
 8010cea:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <_svfiprintf_r+0x1f8>)
 8010cec:	a904      	add	r1, sp, #16
 8010cee:	4638      	mov	r0, r7
 8010cf0:	f7fd ff8c 	bl	800ec0c <_printf_i>
 8010cf4:	e7eb      	b.n	8010cce <_svfiprintf_r+0x1c2>
 8010cf6:	bf00      	nop
 8010cf8:	08011d54 	.word	0x08011d54
 8010cfc:	08011d5e 	.word	0x08011d5e
 8010d00:	0800e6c5 	.word	0x0800e6c5
 8010d04:	08010a55 	.word	0x08010a55
 8010d08:	08011d5a 	.word	0x08011d5a

08010d0c <__sfputc_r>:
 8010d0c:	6893      	ldr	r3, [r2, #8]
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	b410      	push	{r4}
 8010d14:	6093      	str	r3, [r2, #8]
 8010d16:	da08      	bge.n	8010d2a <__sfputc_r+0x1e>
 8010d18:	6994      	ldr	r4, [r2, #24]
 8010d1a:	42a3      	cmp	r3, r4
 8010d1c:	db01      	blt.n	8010d22 <__sfputc_r+0x16>
 8010d1e:	290a      	cmp	r1, #10
 8010d20:	d103      	bne.n	8010d2a <__sfputc_r+0x1e>
 8010d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d26:	f7fe ba0b 	b.w	800f140 <__swbuf_r>
 8010d2a:	6813      	ldr	r3, [r2, #0]
 8010d2c:	1c58      	adds	r0, r3, #1
 8010d2e:	6010      	str	r0, [r2, #0]
 8010d30:	7019      	strb	r1, [r3, #0]
 8010d32:	4608      	mov	r0, r1
 8010d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <__sfputs_r>:
 8010d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d3c:	4606      	mov	r6, r0
 8010d3e:	460f      	mov	r7, r1
 8010d40:	4614      	mov	r4, r2
 8010d42:	18d5      	adds	r5, r2, r3
 8010d44:	42ac      	cmp	r4, r5
 8010d46:	d101      	bne.n	8010d4c <__sfputs_r+0x12>
 8010d48:	2000      	movs	r0, #0
 8010d4a:	e007      	b.n	8010d5c <__sfputs_r+0x22>
 8010d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d50:	463a      	mov	r2, r7
 8010d52:	4630      	mov	r0, r6
 8010d54:	f7ff ffda 	bl	8010d0c <__sfputc_r>
 8010d58:	1c43      	adds	r3, r0, #1
 8010d5a:	d1f3      	bne.n	8010d44 <__sfputs_r+0xa>
 8010d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d60 <_vfiprintf_r>:
 8010d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d64:	460d      	mov	r5, r1
 8010d66:	b09d      	sub	sp, #116	; 0x74
 8010d68:	4614      	mov	r4, r2
 8010d6a:	4698      	mov	r8, r3
 8010d6c:	4606      	mov	r6, r0
 8010d6e:	b118      	cbz	r0, 8010d78 <_vfiprintf_r+0x18>
 8010d70:	6983      	ldr	r3, [r0, #24]
 8010d72:	b90b      	cbnz	r3, 8010d78 <_vfiprintf_r+0x18>
 8010d74:	f7fd fad0 	bl	800e318 <__sinit>
 8010d78:	4b89      	ldr	r3, [pc, #548]	; (8010fa0 <_vfiprintf_r+0x240>)
 8010d7a:	429d      	cmp	r5, r3
 8010d7c:	d11b      	bne.n	8010db6 <_vfiprintf_r+0x56>
 8010d7e:	6875      	ldr	r5, [r6, #4]
 8010d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d82:	07d9      	lsls	r1, r3, #31
 8010d84:	d405      	bmi.n	8010d92 <_vfiprintf_r+0x32>
 8010d86:	89ab      	ldrh	r3, [r5, #12]
 8010d88:	059a      	lsls	r2, r3, #22
 8010d8a:	d402      	bmi.n	8010d92 <_vfiprintf_r+0x32>
 8010d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d8e:	f7fd fb86 	bl	800e49e <__retarget_lock_acquire_recursive>
 8010d92:	89ab      	ldrh	r3, [r5, #12]
 8010d94:	071b      	lsls	r3, r3, #28
 8010d96:	d501      	bpl.n	8010d9c <_vfiprintf_r+0x3c>
 8010d98:	692b      	ldr	r3, [r5, #16]
 8010d9a:	b9eb      	cbnz	r3, 8010dd8 <_vfiprintf_r+0x78>
 8010d9c:	4629      	mov	r1, r5
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f7fe fa32 	bl	800f208 <__swsetup_r>
 8010da4:	b1c0      	cbz	r0, 8010dd8 <_vfiprintf_r+0x78>
 8010da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010da8:	07dc      	lsls	r4, r3, #31
 8010daa:	d50e      	bpl.n	8010dca <_vfiprintf_r+0x6a>
 8010dac:	f04f 30ff 	mov.w	r0, #4294967295
 8010db0:	b01d      	add	sp, #116	; 0x74
 8010db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db6:	4b7b      	ldr	r3, [pc, #492]	; (8010fa4 <_vfiprintf_r+0x244>)
 8010db8:	429d      	cmp	r5, r3
 8010dba:	d101      	bne.n	8010dc0 <_vfiprintf_r+0x60>
 8010dbc:	68b5      	ldr	r5, [r6, #8]
 8010dbe:	e7df      	b.n	8010d80 <_vfiprintf_r+0x20>
 8010dc0:	4b79      	ldr	r3, [pc, #484]	; (8010fa8 <_vfiprintf_r+0x248>)
 8010dc2:	429d      	cmp	r5, r3
 8010dc4:	bf08      	it	eq
 8010dc6:	68f5      	ldreq	r5, [r6, #12]
 8010dc8:	e7da      	b.n	8010d80 <_vfiprintf_r+0x20>
 8010dca:	89ab      	ldrh	r3, [r5, #12]
 8010dcc:	0598      	lsls	r0, r3, #22
 8010dce:	d4ed      	bmi.n	8010dac <_vfiprintf_r+0x4c>
 8010dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010dd2:	f7fd fb65 	bl	800e4a0 <__retarget_lock_release_recursive>
 8010dd6:	e7e9      	b.n	8010dac <_vfiprintf_r+0x4c>
 8010dd8:	2300      	movs	r3, #0
 8010dda:	9309      	str	r3, [sp, #36]	; 0x24
 8010ddc:	2320      	movs	r3, #32
 8010dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010de6:	2330      	movs	r3, #48	; 0x30
 8010de8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010fac <_vfiprintf_r+0x24c>
 8010dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010df0:	f04f 0901 	mov.w	r9, #1
 8010df4:	4623      	mov	r3, r4
 8010df6:	469a      	mov	sl, r3
 8010df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dfc:	b10a      	cbz	r2, 8010e02 <_vfiprintf_r+0xa2>
 8010dfe:	2a25      	cmp	r2, #37	; 0x25
 8010e00:	d1f9      	bne.n	8010df6 <_vfiprintf_r+0x96>
 8010e02:	ebba 0b04 	subs.w	fp, sl, r4
 8010e06:	d00b      	beq.n	8010e20 <_vfiprintf_r+0xc0>
 8010e08:	465b      	mov	r3, fp
 8010e0a:	4622      	mov	r2, r4
 8010e0c:	4629      	mov	r1, r5
 8010e0e:	4630      	mov	r0, r6
 8010e10:	f7ff ff93 	bl	8010d3a <__sfputs_r>
 8010e14:	3001      	adds	r0, #1
 8010e16:	f000 80aa 	beq.w	8010f6e <_vfiprintf_r+0x20e>
 8010e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e1c:	445a      	add	r2, fp
 8010e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8010e20:	f89a 3000 	ldrb.w	r3, [sl]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f000 80a2 	beq.w	8010f6e <_vfiprintf_r+0x20e>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e34:	f10a 0a01 	add.w	sl, sl, #1
 8010e38:	9304      	str	r3, [sp, #16]
 8010e3a:	9307      	str	r3, [sp, #28]
 8010e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e40:	931a      	str	r3, [sp, #104]	; 0x68
 8010e42:	4654      	mov	r4, sl
 8010e44:	2205      	movs	r2, #5
 8010e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e4a:	4858      	ldr	r0, [pc, #352]	; (8010fac <_vfiprintf_r+0x24c>)
 8010e4c:	f7ef f9d0 	bl	80001f0 <memchr>
 8010e50:	9a04      	ldr	r2, [sp, #16]
 8010e52:	b9d8      	cbnz	r0, 8010e8c <_vfiprintf_r+0x12c>
 8010e54:	06d1      	lsls	r1, r2, #27
 8010e56:	bf44      	itt	mi
 8010e58:	2320      	movmi	r3, #32
 8010e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e5e:	0713      	lsls	r3, r2, #28
 8010e60:	bf44      	itt	mi
 8010e62:	232b      	movmi	r3, #43	; 0x2b
 8010e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e68:	f89a 3000 	ldrb.w	r3, [sl]
 8010e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e6e:	d015      	beq.n	8010e9c <_vfiprintf_r+0x13c>
 8010e70:	9a07      	ldr	r2, [sp, #28]
 8010e72:	4654      	mov	r4, sl
 8010e74:	2000      	movs	r0, #0
 8010e76:	f04f 0c0a 	mov.w	ip, #10
 8010e7a:	4621      	mov	r1, r4
 8010e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e80:	3b30      	subs	r3, #48	; 0x30
 8010e82:	2b09      	cmp	r3, #9
 8010e84:	d94e      	bls.n	8010f24 <_vfiprintf_r+0x1c4>
 8010e86:	b1b0      	cbz	r0, 8010eb6 <_vfiprintf_r+0x156>
 8010e88:	9207      	str	r2, [sp, #28]
 8010e8a:	e014      	b.n	8010eb6 <_vfiprintf_r+0x156>
 8010e8c:	eba0 0308 	sub.w	r3, r0, r8
 8010e90:	fa09 f303 	lsl.w	r3, r9, r3
 8010e94:	4313      	orrs	r3, r2
 8010e96:	9304      	str	r3, [sp, #16]
 8010e98:	46a2      	mov	sl, r4
 8010e9a:	e7d2      	b.n	8010e42 <_vfiprintf_r+0xe2>
 8010e9c:	9b03      	ldr	r3, [sp, #12]
 8010e9e:	1d19      	adds	r1, r3, #4
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	9103      	str	r1, [sp, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	bfbb      	ittet	lt
 8010ea8:	425b      	neglt	r3, r3
 8010eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8010eae:	9307      	strge	r3, [sp, #28]
 8010eb0:	9307      	strlt	r3, [sp, #28]
 8010eb2:	bfb8      	it	lt
 8010eb4:	9204      	strlt	r2, [sp, #16]
 8010eb6:	7823      	ldrb	r3, [r4, #0]
 8010eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8010eba:	d10c      	bne.n	8010ed6 <_vfiprintf_r+0x176>
 8010ebc:	7863      	ldrb	r3, [r4, #1]
 8010ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8010ec0:	d135      	bne.n	8010f2e <_vfiprintf_r+0x1ce>
 8010ec2:	9b03      	ldr	r3, [sp, #12]
 8010ec4:	1d1a      	adds	r2, r3, #4
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	9203      	str	r2, [sp, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	bfb8      	it	lt
 8010ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ed2:	3402      	adds	r4, #2
 8010ed4:	9305      	str	r3, [sp, #20]
 8010ed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010fbc <_vfiprintf_r+0x25c>
 8010eda:	7821      	ldrb	r1, [r4, #0]
 8010edc:	2203      	movs	r2, #3
 8010ede:	4650      	mov	r0, sl
 8010ee0:	f7ef f986 	bl	80001f0 <memchr>
 8010ee4:	b140      	cbz	r0, 8010ef8 <_vfiprintf_r+0x198>
 8010ee6:	2340      	movs	r3, #64	; 0x40
 8010ee8:	eba0 000a 	sub.w	r0, r0, sl
 8010eec:	fa03 f000 	lsl.w	r0, r3, r0
 8010ef0:	9b04      	ldr	r3, [sp, #16]
 8010ef2:	4303      	orrs	r3, r0
 8010ef4:	3401      	adds	r4, #1
 8010ef6:	9304      	str	r3, [sp, #16]
 8010ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010efc:	482c      	ldr	r0, [pc, #176]	; (8010fb0 <_vfiprintf_r+0x250>)
 8010efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f02:	2206      	movs	r2, #6
 8010f04:	f7ef f974 	bl	80001f0 <memchr>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d03f      	beq.n	8010f8c <_vfiprintf_r+0x22c>
 8010f0c:	4b29      	ldr	r3, [pc, #164]	; (8010fb4 <_vfiprintf_r+0x254>)
 8010f0e:	bb1b      	cbnz	r3, 8010f58 <_vfiprintf_r+0x1f8>
 8010f10:	9b03      	ldr	r3, [sp, #12]
 8010f12:	3307      	adds	r3, #7
 8010f14:	f023 0307 	bic.w	r3, r3, #7
 8010f18:	3308      	adds	r3, #8
 8010f1a:	9303      	str	r3, [sp, #12]
 8010f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f1e:	443b      	add	r3, r7
 8010f20:	9309      	str	r3, [sp, #36]	; 0x24
 8010f22:	e767      	b.n	8010df4 <_vfiprintf_r+0x94>
 8010f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f28:	460c      	mov	r4, r1
 8010f2a:	2001      	movs	r0, #1
 8010f2c:	e7a5      	b.n	8010e7a <_vfiprintf_r+0x11a>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	3401      	adds	r4, #1
 8010f32:	9305      	str	r3, [sp, #20]
 8010f34:	4619      	mov	r1, r3
 8010f36:	f04f 0c0a 	mov.w	ip, #10
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f40:	3a30      	subs	r2, #48	; 0x30
 8010f42:	2a09      	cmp	r2, #9
 8010f44:	d903      	bls.n	8010f4e <_vfiprintf_r+0x1ee>
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0c5      	beq.n	8010ed6 <_vfiprintf_r+0x176>
 8010f4a:	9105      	str	r1, [sp, #20]
 8010f4c:	e7c3      	b.n	8010ed6 <_vfiprintf_r+0x176>
 8010f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f52:	4604      	mov	r4, r0
 8010f54:	2301      	movs	r3, #1
 8010f56:	e7f0      	b.n	8010f3a <_vfiprintf_r+0x1da>
 8010f58:	ab03      	add	r3, sp, #12
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	462a      	mov	r2, r5
 8010f5e:	4b16      	ldr	r3, [pc, #88]	; (8010fb8 <_vfiprintf_r+0x258>)
 8010f60:	a904      	add	r1, sp, #16
 8010f62:	4630      	mov	r0, r6
 8010f64:	f7fd fbae 	bl	800e6c4 <_printf_float>
 8010f68:	4607      	mov	r7, r0
 8010f6a:	1c78      	adds	r0, r7, #1
 8010f6c:	d1d6      	bne.n	8010f1c <_vfiprintf_r+0x1bc>
 8010f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f70:	07d9      	lsls	r1, r3, #31
 8010f72:	d405      	bmi.n	8010f80 <_vfiprintf_r+0x220>
 8010f74:	89ab      	ldrh	r3, [r5, #12]
 8010f76:	059a      	lsls	r2, r3, #22
 8010f78:	d402      	bmi.n	8010f80 <_vfiprintf_r+0x220>
 8010f7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f7c:	f7fd fa90 	bl	800e4a0 <__retarget_lock_release_recursive>
 8010f80:	89ab      	ldrh	r3, [r5, #12]
 8010f82:	065b      	lsls	r3, r3, #25
 8010f84:	f53f af12 	bmi.w	8010dac <_vfiprintf_r+0x4c>
 8010f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f8a:	e711      	b.n	8010db0 <_vfiprintf_r+0x50>
 8010f8c:	ab03      	add	r3, sp, #12
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	462a      	mov	r2, r5
 8010f92:	4b09      	ldr	r3, [pc, #36]	; (8010fb8 <_vfiprintf_r+0x258>)
 8010f94:	a904      	add	r1, sp, #16
 8010f96:	4630      	mov	r0, r6
 8010f98:	f7fd fe38 	bl	800ec0c <_printf_i>
 8010f9c:	e7e4      	b.n	8010f68 <_vfiprintf_r+0x208>
 8010f9e:	bf00      	nop
 8010fa0:	08011ae8 	.word	0x08011ae8
 8010fa4:	08011b08 	.word	0x08011b08
 8010fa8:	08011ac8 	.word	0x08011ac8
 8010fac:	08011d54 	.word	0x08011d54
 8010fb0:	08011d5e 	.word	0x08011d5e
 8010fb4:	0800e6c5 	.word	0x0800e6c5
 8010fb8:	08010d3b 	.word	0x08010d3b
 8010fbc:	08011d5a 	.word	0x08011d5a

08010fc0 <_read_r>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4d07      	ldr	r5, [pc, #28]	; (8010fe0 <_read_r+0x20>)
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	4608      	mov	r0, r1
 8010fc8:	4611      	mov	r1, r2
 8010fca:	2200      	movs	r2, #0
 8010fcc:	602a      	str	r2, [r5, #0]
 8010fce:	461a      	mov	r2, r3
 8010fd0:	f7f1 fd86 	bl	8002ae0 <_read>
 8010fd4:	1c43      	adds	r3, r0, #1
 8010fd6:	d102      	bne.n	8010fde <_read_r+0x1e>
 8010fd8:	682b      	ldr	r3, [r5, #0]
 8010fda:	b103      	cbz	r3, 8010fde <_read_r+0x1e>
 8010fdc:	6023      	str	r3, [r4, #0]
 8010fde:	bd38      	pop	{r3, r4, r5, pc}
 8010fe0:	20004d08 	.word	0x20004d08

08010fe4 <__assert_func>:
 8010fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fe6:	4614      	mov	r4, r2
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4b09      	ldr	r3, [pc, #36]	; (8011010 <__assert_func+0x2c>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4605      	mov	r5, r0
 8010ff0:	68d8      	ldr	r0, [r3, #12]
 8010ff2:	b14c      	cbz	r4, 8011008 <__assert_func+0x24>
 8010ff4:	4b07      	ldr	r3, [pc, #28]	; (8011014 <__assert_func+0x30>)
 8010ff6:	9100      	str	r1, [sp, #0]
 8010ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ffc:	4906      	ldr	r1, [pc, #24]	; (8011018 <__assert_func+0x34>)
 8010ffe:	462b      	mov	r3, r5
 8011000:	f000 f80e 	bl	8011020 <fiprintf>
 8011004:	f000 f89f 	bl	8011146 <abort>
 8011008:	4b04      	ldr	r3, [pc, #16]	; (801101c <__assert_func+0x38>)
 801100a:	461c      	mov	r4, r3
 801100c:	e7f3      	b.n	8010ff6 <__assert_func+0x12>
 801100e:	bf00      	nop
 8011010:	200002cc 	.word	0x200002cc
 8011014:	08011d65 	.word	0x08011d65
 8011018:	08011d72 	.word	0x08011d72
 801101c:	08011da0 	.word	0x08011da0

08011020 <fiprintf>:
 8011020:	b40e      	push	{r1, r2, r3}
 8011022:	b503      	push	{r0, r1, lr}
 8011024:	4601      	mov	r1, r0
 8011026:	ab03      	add	r3, sp, #12
 8011028:	4805      	ldr	r0, [pc, #20]	; (8011040 <fiprintf+0x20>)
 801102a:	f853 2b04 	ldr.w	r2, [r3], #4
 801102e:	6800      	ldr	r0, [r0, #0]
 8011030:	9301      	str	r3, [sp, #4]
 8011032:	f7ff fe95 	bl	8010d60 <_vfiprintf_r>
 8011036:	b002      	add	sp, #8
 8011038:	f85d eb04 	ldr.w	lr, [sp], #4
 801103c:	b003      	add	sp, #12
 801103e:	4770      	bx	lr
 8011040:	200002cc 	.word	0x200002cc

08011044 <_fstat_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4d07      	ldr	r5, [pc, #28]	; (8011064 <_fstat_r+0x20>)
 8011048:	2300      	movs	r3, #0
 801104a:	4604      	mov	r4, r0
 801104c:	4608      	mov	r0, r1
 801104e:	4611      	mov	r1, r2
 8011050:	602b      	str	r3, [r5, #0]
 8011052:	f7f1 fd8a 	bl	8002b6a <_fstat>
 8011056:	1c43      	adds	r3, r0, #1
 8011058:	d102      	bne.n	8011060 <_fstat_r+0x1c>
 801105a:	682b      	ldr	r3, [r5, #0]
 801105c:	b103      	cbz	r3, 8011060 <_fstat_r+0x1c>
 801105e:	6023      	str	r3, [r4, #0]
 8011060:	bd38      	pop	{r3, r4, r5, pc}
 8011062:	bf00      	nop
 8011064:	20004d08 	.word	0x20004d08

08011068 <_isatty_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d06      	ldr	r5, [pc, #24]	; (8011084 <_isatty_r+0x1c>)
 801106c:	2300      	movs	r3, #0
 801106e:	4604      	mov	r4, r0
 8011070:	4608      	mov	r0, r1
 8011072:	602b      	str	r3, [r5, #0]
 8011074:	f7f1 fd89 	bl	8002b8a <_isatty>
 8011078:	1c43      	adds	r3, r0, #1
 801107a:	d102      	bne.n	8011082 <_isatty_r+0x1a>
 801107c:	682b      	ldr	r3, [r5, #0]
 801107e:	b103      	cbz	r3, 8011082 <_isatty_r+0x1a>
 8011080:	6023      	str	r3, [r4, #0]
 8011082:	bd38      	pop	{r3, r4, r5, pc}
 8011084:	20004d08 	.word	0x20004d08

08011088 <__ascii_mbtowc>:
 8011088:	b082      	sub	sp, #8
 801108a:	b901      	cbnz	r1, 801108e <__ascii_mbtowc+0x6>
 801108c:	a901      	add	r1, sp, #4
 801108e:	b142      	cbz	r2, 80110a2 <__ascii_mbtowc+0x1a>
 8011090:	b14b      	cbz	r3, 80110a6 <__ascii_mbtowc+0x1e>
 8011092:	7813      	ldrb	r3, [r2, #0]
 8011094:	600b      	str	r3, [r1, #0]
 8011096:	7812      	ldrb	r2, [r2, #0]
 8011098:	1e10      	subs	r0, r2, #0
 801109a:	bf18      	it	ne
 801109c:	2001      	movne	r0, #1
 801109e:	b002      	add	sp, #8
 80110a0:	4770      	bx	lr
 80110a2:	4610      	mov	r0, r2
 80110a4:	e7fb      	b.n	801109e <__ascii_mbtowc+0x16>
 80110a6:	f06f 0001 	mvn.w	r0, #1
 80110aa:	e7f8      	b.n	801109e <__ascii_mbtowc+0x16>

080110ac <memmove>:
 80110ac:	4288      	cmp	r0, r1
 80110ae:	b510      	push	{r4, lr}
 80110b0:	eb01 0402 	add.w	r4, r1, r2
 80110b4:	d902      	bls.n	80110bc <memmove+0x10>
 80110b6:	4284      	cmp	r4, r0
 80110b8:	4623      	mov	r3, r4
 80110ba:	d807      	bhi.n	80110cc <memmove+0x20>
 80110bc:	1e43      	subs	r3, r0, #1
 80110be:	42a1      	cmp	r1, r4
 80110c0:	d008      	beq.n	80110d4 <memmove+0x28>
 80110c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110ca:	e7f8      	b.n	80110be <memmove+0x12>
 80110cc:	4402      	add	r2, r0
 80110ce:	4601      	mov	r1, r0
 80110d0:	428a      	cmp	r2, r1
 80110d2:	d100      	bne.n	80110d6 <memmove+0x2a>
 80110d4:	bd10      	pop	{r4, pc}
 80110d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110de:	e7f7      	b.n	80110d0 <memmove+0x24>

080110e0 <_realloc_r>:
 80110e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e2:	4607      	mov	r7, r0
 80110e4:	4614      	mov	r4, r2
 80110e6:	460e      	mov	r6, r1
 80110e8:	b921      	cbnz	r1, 80110f4 <_realloc_r+0x14>
 80110ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80110ee:	4611      	mov	r1, r2
 80110f0:	f7fd b9ee 	b.w	800e4d0 <_malloc_r>
 80110f4:	b922      	cbnz	r2, 8011100 <_realloc_r+0x20>
 80110f6:	f7ff fc5d 	bl	80109b4 <_free_r>
 80110fa:	4625      	mov	r5, r4
 80110fc:	4628      	mov	r0, r5
 80110fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011100:	f000 f828 	bl	8011154 <_malloc_usable_size_r>
 8011104:	42a0      	cmp	r0, r4
 8011106:	d20f      	bcs.n	8011128 <_realloc_r+0x48>
 8011108:	4621      	mov	r1, r4
 801110a:	4638      	mov	r0, r7
 801110c:	f7fd f9e0 	bl	800e4d0 <_malloc_r>
 8011110:	4605      	mov	r5, r0
 8011112:	2800      	cmp	r0, #0
 8011114:	d0f2      	beq.n	80110fc <_realloc_r+0x1c>
 8011116:	4631      	mov	r1, r6
 8011118:	4622      	mov	r2, r4
 801111a:	f7fd f9c2 	bl	800e4a2 <memcpy>
 801111e:	4631      	mov	r1, r6
 8011120:	4638      	mov	r0, r7
 8011122:	f7ff fc47 	bl	80109b4 <_free_r>
 8011126:	e7e9      	b.n	80110fc <_realloc_r+0x1c>
 8011128:	4635      	mov	r5, r6
 801112a:	e7e7      	b.n	80110fc <_realloc_r+0x1c>

0801112c <__ascii_wctomb>:
 801112c:	b149      	cbz	r1, 8011142 <__ascii_wctomb+0x16>
 801112e:	2aff      	cmp	r2, #255	; 0xff
 8011130:	bf85      	ittet	hi
 8011132:	238a      	movhi	r3, #138	; 0x8a
 8011134:	6003      	strhi	r3, [r0, #0]
 8011136:	700a      	strbls	r2, [r1, #0]
 8011138:	f04f 30ff 	movhi.w	r0, #4294967295
 801113c:	bf98      	it	ls
 801113e:	2001      	movls	r0, #1
 8011140:	4770      	bx	lr
 8011142:	4608      	mov	r0, r1
 8011144:	4770      	bx	lr

08011146 <abort>:
 8011146:	b508      	push	{r3, lr}
 8011148:	2006      	movs	r0, #6
 801114a:	f000 f833 	bl	80111b4 <raise>
 801114e:	2001      	movs	r0, #1
 8011150:	f7f1 fcbc 	bl	8002acc <_exit>

08011154 <_malloc_usable_size_r>:
 8011154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011158:	1f18      	subs	r0, r3, #4
 801115a:	2b00      	cmp	r3, #0
 801115c:	bfbc      	itt	lt
 801115e:	580b      	ldrlt	r3, [r1, r0]
 8011160:	18c0      	addlt	r0, r0, r3
 8011162:	4770      	bx	lr

08011164 <_raise_r>:
 8011164:	291f      	cmp	r1, #31
 8011166:	b538      	push	{r3, r4, r5, lr}
 8011168:	4604      	mov	r4, r0
 801116a:	460d      	mov	r5, r1
 801116c:	d904      	bls.n	8011178 <_raise_r+0x14>
 801116e:	2316      	movs	r3, #22
 8011170:	6003      	str	r3, [r0, #0]
 8011172:	f04f 30ff 	mov.w	r0, #4294967295
 8011176:	bd38      	pop	{r3, r4, r5, pc}
 8011178:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801117a:	b112      	cbz	r2, 8011182 <_raise_r+0x1e>
 801117c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011180:	b94b      	cbnz	r3, 8011196 <_raise_r+0x32>
 8011182:	4620      	mov	r0, r4
 8011184:	f000 f830 	bl	80111e8 <_getpid_r>
 8011188:	462a      	mov	r2, r5
 801118a:	4601      	mov	r1, r0
 801118c:	4620      	mov	r0, r4
 801118e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011192:	f000 b817 	b.w	80111c4 <_kill_r>
 8011196:	2b01      	cmp	r3, #1
 8011198:	d00a      	beq.n	80111b0 <_raise_r+0x4c>
 801119a:	1c59      	adds	r1, r3, #1
 801119c:	d103      	bne.n	80111a6 <_raise_r+0x42>
 801119e:	2316      	movs	r3, #22
 80111a0:	6003      	str	r3, [r0, #0]
 80111a2:	2001      	movs	r0, #1
 80111a4:	e7e7      	b.n	8011176 <_raise_r+0x12>
 80111a6:	2400      	movs	r4, #0
 80111a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80111ac:	4628      	mov	r0, r5
 80111ae:	4798      	blx	r3
 80111b0:	2000      	movs	r0, #0
 80111b2:	e7e0      	b.n	8011176 <_raise_r+0x12>

080111b4 <raise>:
 80111b4:	4b02      	ldr	r3, [pc, #8]	; (80111c0 <raise+0xc>)
 80111b6:	4601      	mov	r1, r0
 80111b8:	6818      	ldr	r0, [r3, #0]
 80111ba:	f7ff bfd3 	b.w	8011164 <_raise_r>
 80111be:	bf00      	nop
 80111c0:	200002cc 	.word	0x200002cc

080111c4 <_kill_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	4d07      	ldr	r5, [pc, #28]	; (80111e4 <_kill_r+0x20>)
 80111c8:	2300      	movs	r3, #0
 80111ca:	4604      	mov	r4, r0
 80111cc:	4608      	mov	r0, r1
 80111ce:	4611      	mov	r1, r2
 80111d0:	602b      	str	r3, [r5, #0]
 80111d2:	f7f1 fc6b 	bl	8002aac <_kill>
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	d102      	bne.n	80111e0 <_kill_r+0x1c>
 80111da:	682b      	ldr	r3, [r5, #0]
 80111dc:	b103      	cbz	r3, 80111e0 <_kill_r+0x1c>
 80111de:	6023      	str	r3, [r4, #0]
 80111e0:	bd38      	pop	{r3, r4, r5, pc}
 80111e2:	bf00      	nop
 80111e4:	20004d08 	.word	0x20004d08

080111e8 <_getpid_r>:
 80111e8:	f7f1 bc58 	b.w	8002a9c <_getpid>
 80111ec:	0000      	movs	r0, r0
	...

080111f0 <exp>:
 80111f0:	b538      	push	{r3, r4, r5, lr}
 80111f2:	ed2d 8b02 	vpush	{d8}
 80111f6:	ec55 4b10 	vmov	r4, r5, d0
 80111fa:	f000 f849 	bl	8011290 <__ieee754_exp>
 80111fe:	4b22      	ldr	r3, [pc, #136]	; (8011288 <exp+0x98>)
 8011200:	eeb0 8a40 	vmov.f32	s16, s0
 8011204:	eef0 8a60 	vmov.f32	s17, s1
 8011208:	f993 3000 	ldrsb.w	r3, [r3]
 801120c:	3301      	adds	r3, #1
 801120e:	d012      	beq.n	8011236 <exp+0x46>
 8011210:	ec45 4b10 	vmov	d0, r4, r5
 8011214:	f000 f9b6 	bl	8011584 <finite>
 8011218:	b168      	cbz	r0, 8011236 <exp+0x46>
 801121a:	a313      	add	r3, pc, #76	; (adr r3, 8011268 <exp+0x78>)
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	4620      	mov	r0, r4
 8011222:	4629      	mov	r1, r5
 8011224:	f7ef fc80 	bl	8000b28 <__aeabi_dcmpgt>
 8011228:	b160      	cbz	r0, 8011244 <exp+0x54>
 801122a:	f7fd f817 	bl	800e25c <__errno>
 801122e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011270 <exp+0x80>
 8011232:	2322      	movs	r3, #34	; 0x22
 8011234:	6003      	str	r3, [r0, #0]
 8011236:	eeb0 0a48 	vmov.f32	s0, s16
 801123a:	eef0 0a68 	vmov.f32	s1, s17
 801123e:	ecbd 8b02 	vpop	{d8}
 8011242:	bd38      	pop	{r3, r4, r5, pc}
 8011244:	a30c      	add	r3, pc, #48	; (adr r3, 8011278 <exp+0x88>)
 8011246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124a:	4620      	mov	r0, r4
 801124c:	4629      	mov	r1, r5
 801124e:	f7ef fc4d 	bl	8000aec <__aeabi_dcmplt>
 8011252:	2800      	cmp	r0, #0
 8011254:	d0ef      	beq.n	8011236 <exp+0x46>
 8011256:	f7fd f801 	bl	800e25c <__errno>
 801125a:	2322      	movs	r3, #34	; 0x22
 801125c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011280 <exp+0x90>
 8011260:	6003      	str	r3, [r0, #0]
 8011262:	e7e8      	b.n	8011236 <exp+0x46>
 8011264:	f3af 8000 	nop.w
 8011268:	fefa39ef 	.word	0xfefa39ef
 801126c:	40862e42 	.word	0x40862e42
 8011270:	00000000 	.word	0x00000000
 8011274:	7ff00000 	.word	0x7ff00000
 8011278:	d52d3051 	.word	0xd52d3051
 801127c:	c0874910 	.word	0xc0874910
	...
 8011288:	2000049c 	.word	0x2000049c
 801128c:	00000000 	.word	0x00000000

08011290 <__ieee754_exp>:
 8011290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011294:	ec55 4b10 	vmov	r4, r5, d0
 8011298:	49b1      	ldr	r1, [pc, #708]	; (8011560 <__ieee754_exp+0x2d0>)
 801129a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801129e:	428b      	cmp	r3, r1
 80112a0:	ed2d 8b04 	vpush	{d8-d9}
 80112a4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80112a8:	d937      	bls.n	801131a <__ieee754_exp+0x8a>
 80112aa:	49ae      	ldr	r1, [pc, #696]	; (8011564 <__ieee754_exp+0x2d4>)
 80112ac:	428b      	cmp	r3, r1
 80112ae:	d916      	bls.n	80112de <__ieee754_exp+0x4e>
 80112b0:	ee10 3a10 	vmov	r3, s0
 80112b4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80112b8:	4313      	orrs	r3, r2
 80112ba:	d009      	beq.n	80112d0 <__ieee754_exp+0x40>
 80112bc:	ee10 2a10 	vmov	r2, s0
 80112c0:	462b      	mov	r3, r5
 80112c2:	4620      	mov	r0, r4
 80112c4:	4629      	mov	r1, r5
 80112c6:	f7ee ffe9 	bl	800029c <__adddf3>
 80112ca:	4604      	mov	r4, r0
 80112cc:	460d      	mov	r5, r1
 80112ce:	e000      	b.n	80112d2 <__ieee754_exp+0x42>
 80112d0:	bb06      	cbnz	r6, 8011314 <__ieee754_exp+0x84>
 80112d2:	ecbd 8b04 	vpop	{d8-d9}
 80112d6:	ec45 4b10 	vmov	d0, r4, r5
 80112da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112de:	a38a      	add	r3, pc, #552	; (adr r3, 8011508 <__ieee754_exp+0x278>)
 80112e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e4:	ee10 0a10 	vmov	r0, s0
 80112e8:	4629      	mov	r1, r5
 80112ea:	f7ef fc1d 	bl	8000b28 <__aeabi_dcmpgt>
 80112ee:	b138      	cbz	r0, 8011300 <__ieee754_exp+0x70>
 80112f0:	a387      	add	r3, pc, #540	; (adr r3, 8011510 <__ieee754_exp+0x280>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	4610      	mov	r0, r2
 80112f8:	4619      	mov	r1, r3
 80112fa:	f7ef f985 	bl	8000608 <__aeabi_dmul>
 80112fe:	e7e4      	b.n	80112ca <__ieee754_exp+0x3a>
 8011300:	a385      	add	r3, pc, #532	; (adr r3, 8011518 <__ieee754_exp+0x288>)
 8011302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011306:	4620      	mov	r0, r4
 8011308:	4629      	mov	r1, r5
 801130a:	f7ef fbef 	bl	8000aec <__aeabi_dcmplt>
 801130e:	2800      	cmp	r0, #0
 8011310:	f000 8087 	beq.w	8011422 <__ieee754_exp+0x192>
 8011314:	2400      	movs	r4, #0
 8011316:	2500      	movs	r5, #0
 8011318:	e7db      	b.n	80112d2 <__ieee754_exp+0x42>
 801131a:	4a93      	ldr	r2, [pc, #588]	; (8011568 <__ieee754_exp+0x2d8>)
 801131c:	4293      	cmp	r3, r2
 801131e:	f240 80ac 	bls.w	801147a <__ieee754_exp+0x1ea>
 8011322:	4a92      	ldr	r2, [pc, #584]	; (801156c <__ieee754_exp+0x2dc>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d87c      	bhi.n	8011422 <__ieee754_exp+0x192>
 8011328:	4b91      	ldr	r3, [pc, #580]	; (8011570 <__ieee754_exp+0x2e0>)
 801132a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011332:	ee10 0a10 	vmov	r0, s0
 8011336:	4629      	mov	r1, r5
 8011338:	f7ee ffae 	bl	8000298 <__aeabi_dsub>
 801133c:	4b8d      	ldr	r3, [pc, #564]	; (8011574 <__ieee754_exp+0x2e4>)
 801133e:	00f7      	lsls	r7, r6, #3
 8011340:	443b      	add	r3, r7
 8011342:	ed93 7b00 	vldr	d7, [r3]
 8011346:	f1c6 0a01 	rsb	sl, r6, #1
 801134a:	4680      	mov	r8, r0
 801134c:	4689      	mov	r9, r1
 801134e:	ebaa 0a06 	sub.w	sl, sl, r6
 8011352:	eeb0 8a47 	vmov.f32	s16, s14
 8011356:	eef0 8a67 	vmov.f32	s17, s15
 801135a:	ec53 2b18 	vmov	r2, r3, d8
 801135e:	4640      	mov	r0, r8
 8011360:	4649      	mov	r1, r9
 8011362:	f7ee ff99 	bl	8000298 <__aeabi_dsub>
 8011366:	4604      	mov	r4, r0
 8011368:	460d      	mov	r5, r1
 801136a:	4622      	mov	r2, r4
 801136c:	462b      	mov	r3, r5
 801136e:	4620      	mov	r0, r4
 8011370:	4629      	mov	r1, r5
 8011372:	f7ef f949 	bl	8000608 <__aeabi_dmul>
 8011376:	a36a      	add	r3, pc, #424	; (adr r3, 8011520 <__ieee754_exp+0x290>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	4606      	mov	r6, r0
 801137e:	460f      	mov	r7, r1
 8011380:	f7ef f942 	bl	8000608 <__aeabi_dmul>
 8011384:	a368      	add	r3, pc, #416	; (adr r3, 8011528 <__ieee754_exp+0x298>)
 8011386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138a:	f7ee ff85 	bl	8000298 <__aeabi_dsub>
 801138e:	4632      	mov	r2, r6
 8011390:	463b      	mov	r3, r7
 8011392:	f7ef f939 	bl	8000608 <__aeabi_dmul>
 8011396:	a366      	add	r3, pc, #408	; (adr r3, 8011530 <__ieee754_exp+0x2a0>)
 8011398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139c:	f7ee ff7e 	bl	800029c <__adddf3>
 80113a0:	4632      	mov	r2, r6
 80113a2:	463b      	mov	r3, r7
 80113a4:	f7ef f930 	bl	8000608 <__aeabi_dmul>
 80113a8:	a363      	add	r3, pc, #396	; (adr r3, 8011538 <__ieee754_exp+0x2a8>)
 80113aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ae:	f7ee ff73 	bl	8000298 <__aeabi_dsub>
 80113b2:	4632      	mov	r2, r6
 80113b4:	463b      	mov	r3, r7
 80113b6:	f7ef f927 	bl	8000608 <__aeabi_dmul>
 80113ba:	a361      	add	r3, pc, #388	; (adr r3, 8011540 <__ieee754_exp+0x2b0>)
 80113bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c0:	f7ee ff6c 	bl	800029c <__adddf3>
 80113c4:	4632      	mov	r2, r6
 80113c6:	463b      	mov	r3, r7
 80113c8:	f7ef f91e 	bl	8000608 <__aeabi_dmul>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	4620      	mov	r0, r4
 80113d2:	4629      	mov	r1, r5
 80113d4:	f7ee ff60 	bl	8000298 <__aeabi_dsub>
 80113d8:	4602      	mov	r2, r0
 80113da:	460b      	mov	r3, r1
 80113dc:	4606      	mov	r6, r0
 80113de:	460f      	mov	r7, r1
 80113e0:	4620      	mov	r0, r4
 80113e2:	4629      	mov	r1, r5
 80113e4:	f7ef f910 	bl	8000608 <__aeabi_dmul>
 80113e8:	ec41 0b19 	vmov	d9, r0, r1
 80113ec:	f1ba 0f00 	cmp.w	sl, #0
 80113f0:	d15d      	bne.n	80114ae <__ieee754_exp+0x21e>
 80113f2:	2200      	movs	r2, #0
 80113f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113f8:	4630      	mov	r0, r6
 80113fa:	4639      	mov	r1, r7
 80113fc:	f7ee ff4c 	bl	8000298 <__aeabi_dsub>
 8011400:	4602      	mov	r2, r0
 8011402:	460b      	mov	r3, r1
 8011404:	ec51 0b19 	vmov	r0, r1, d9
 8011408:	f7ef fa28 	bl	800085c <__aeabi_ddiv>
 801140c:	4622      	mov	r2, r4
 801140e:	462b      	mov	r3, r5
 8011410:	f7ee ff42 	bl	8000298 <__aeabi_dsub>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	2000      	movs	r0, #0
 801141a:	4957      	ldr	r1, [pc, #348]	; (8011578 <__ieee754_exp+0x2e8>)
 801141c:	f7ee ff3c 	bl	8000298 <__aeabi_dsub>
 8011420:	e753      	b.n	80112ca <__ieee754_exp+0x3a>
 8011422:	4856      	ldr	r0, [pc, #344]	; (801157c <__ieee754_exp+0x2ec>)
 8011424:	a348      	add	r3, pc, #288	; (adr r3, 8011548 <__ieee754_exp+0x2b8>)
 8011426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801142e:	4629      	mov	r1, r5
 8011430:	4620      	mov	r0, r4
 8011432:	f7ef f8e9 	bl	8000608 <__aeabi_dmul>
 8011436:	e9d6 2300 	ldrd	r2, r3, [r6]
 801143a:	f7ee ff2f 	bl	800029c <__adddf3>
 801143e:	f7ef fb93 	bl	8000b68 <__aeabi_d2iz>
 8011442:	4682      	mov	sl, r0
 8011444:	f7ef f876 	bl	8000534 <__aeabi_i2d>
 8011448:	a341      	add	r3, pc, #260	; (adr r3, 8011550 <__ieee754_exp+0x2c0>)
 801144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144e:	4606      	mov	r6, r0
 8011450:	460f      	mov	r7, r1
 8011452:	f7ef f8d9 	bl	8000608 <__aeabi_dmul>
 8011456:	4602      	mov	r2, r0
 8011458:	460b      	mov	r3, r1
 801145a:	4620      	mov	r0, r4
 801145c:	4629      	mov	r1, r5
 801145e:	f7ee ff1b 	bl	8000298 <__aeabi_dsub>
 8011462:	a33d      	add	r3, pc, #244	; (adr r3, 8011558 <__ieee754_exp+0x2c8>)
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	4680      	mov	r8, r0
 801146a:	4689      	mov	r9, r1
 801146c:	4630      	mov	r0, r6
 801146e:	4639      	mov	r1, r7
 8011470:	f7ef f8ca 	bl	8000608 <__aeabi_dmul>
 8011474:	ec41 0b18 	vmov	d8, r0, r1
 8011478:	e76f      	b.n	801135a <__ieee754_exp+0xca>
 801147a:	4a41      	ldr	r2, [pc, #260]	; (8011580 <__ieee754_exp+0x2f0>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d811      	bhi.n	80114a4 <__ieee754_exp+0x214>
 8011480:	a323      	add	r3, pc, #140	; (adr r3, 8011510 <__ieee754_exp+0x280>)
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	ee10 0a10 	vmov	r0, s0
 801148a:	4629      	mov	r1, r5
 801148c:	f7ee ff06 	bl	800029c <__adddf3>
 8011490:	4b39      	ldr	r3, [pc, #228]	; (8011578 <__ieee754_exp+0x2e8>)
 8011492:	2200      	movs	r2, #0
 8011494:	f7ef fb48 	bl	8000b28 <__aeabi_dcmpgt>
 8011498:	b138      	cbz	r0, 80114aa <__ieee754_exp+0x21a>
 801149a:	4b37      	ldr	r3, [pc, #220]	; (8011578 <__ieee754_exp+0x2e8>)
 801149c:	2200      	movs	r2, #0
 801149e:	4620      	mov	r0, r4
 80114a0:	4629      	mov	r1, r5
 80114a2:	e710      	b.n	80112c6 <__ieee754_exp+0x36>
 80114a4:	f04f 0a00 	mov.w	sl, #0
 80114a8:	e75f      	b.n	801136a <__ieee754_exp+0xda>
 80114aa:	4682      	mov	sl, r0
 80114ac:	e75d      	b.n	801136a <__ieee754_exp+0xda>
 80114ae:	4632      	mov	r2, r6
 80114b0:	463b      	mov	r3, r7
 80114b2:	2000      	movs	r0, #0
 80114b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80114b8:	f7ee feee 	bl	8000298 <__aeabi_dsub>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	ec51 0b19 	vmov	r0, r1, d9
 80114c4:	f7ef f9ca 	bl	800085c <__aeabi_ddiv>
 80114c8:	4602      	mov	r2, r0
 80114ca:	460b      	mov	r3, r1
 80114cc:	ec51 0b18 	vmov	r0, r1, d8
 80114d0:	f7ee fee2 	bl	8000298 <__aeabi_dsub>
 80114d4:	4642      	mov	r2, r8
 80114d6:	464b      	mov	r3, r9
 80114d8:	f7ee fede 	bl	8000298 <__aeabi_dsub>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	2000      	movs	r0, #0
 80114e2:	4925      	ldr	r1, [pc, #148]	; (8011578 <__ieee754_exp+0x2e8>)
 80114e4:	f7ee fed8 	bl	8000298 <__aeabi_dsub>
 80114e8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80114ec:	4592      	cmp	sl, r2
 80114ee:	db02      	blt.n	80114f6 <__ieee754_exp+0x266>
 80114f0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80114f4:	e6e9      	b.n	80112ca <__ieee754_exp+0x3a>
 80114f6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80114fa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80114fe:	2200      	movs	r2, #0
 8011500:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8011504:	e6f9      	b.n	80112fa <__ieee754_exp+0x6a>
 8011506:	bf00      	nop
 8011508:	fefa39ef 	.word	0xfefa39ef
 801150c:	40862e42 	.word	0x40862e42
 8011510:	8800759c 	.word	0x8800759c
 8011514:	7e37e43c 	.word	0x7e37e43c
 8011518:	d52d3051 	.word	0xd52d3051
 801151c:	c0874910 	.word	0xc0874910
 8011520:	72bea4d0 	.word	0x72bea4d0
 8011524:	3e663769 	.word	0x3e663769
 8011528:	c5d26bf1 	.word	0xc5d26bf1
 801152c:	3ebbbd41 	.word	0x3ebbbd41
 8011530:	af25de2c 	.word	0xaf25de2c
 8011534:	3f11566a 	.word	0x3f11566a
 8011538:	16bebd93 	.word	0x16bebd93
 801153c:	3f66c16c 	.word	0x3f66c16c
 8011540:	5555553e 	.word	0x5555553e
 8011544:	3fc55555 	.word	0x3fc55555
 8011548:	652b82fe 	.word	0x652b82fe
 801154c:	3ff71547 	.word	0x3ff71547
 8011550:	fee00000 	.word	0xfee00000
 8011554:	3fe62e42 	.word	0x3fe62e42
 8011558:	35793c76 	.word	0x35793c76
 801155c:	3dea39ef 	.word	0x3dea39ef
 8011560:	40862e41 	.word	0x40862e41
 8011564:	7fefffff 	.word	0x7fefffff
 8011568:	3fd62e42 	.word	0x3fd62e42
 801156c:	3ff0a2b1 	.word	0x3ff0a2b1
 8011570:	08011ec0 	.word	0x08011ec0
 8011574:	08011ed0 	.word	0x08011ed0
 8011578:	3ff00000 	.word	0x3ff00000
 801157c:	08011eb0 	.word	0x08011eb0
 8011580:	3e2fffff 	.word	0x3e2fffff

08011584 <finite>:
 8011584:	b082      	sub	sp, #8
 8011586:	ed8d 0b00 	vstr	d0, [sp]
 801158a:	9801      	ldr	r0, [sp, #4]
 801158c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011590:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011594:	0fc0      	lsrs	r0, r0, #31
 8011596:	b002      	add	sp, #8
 8011598:	4770      	bx	lr
	...

0801159c <_init>:
 801159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159e:	bf00      	nop
 80115a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115a2:	bc08      	pop	{r3}
 80115a4:	469e      	mov	lr, r3
 80115a6:	4770      	bx	lr

080115a8 <_fini>:
 80115a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115aa:	bf00      	nop
 80115ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ae:	bc08      	pop	{r3}
 80115b0:	469e      	mov	lr, r3
 80115b2:	4770      	bx	lr
