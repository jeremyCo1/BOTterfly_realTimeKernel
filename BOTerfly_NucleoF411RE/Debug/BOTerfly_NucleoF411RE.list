
BOTerfly_NucleoF411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  080128a8  080128a8  000228a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133f0  080133f0  000304a0  2**0
                  CONTENTS
  4 .ARM          00000008  080133f0  080133f0  000233f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133f8  080133f8  000304a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133f8  080133f8  000233f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133fc  080133fc  000233fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  08013400  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004890  200004a0  080138a0  000304a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d30  080138a0  00034d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b36  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005725  00000000  00000000  00061006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e30  00000000  00000000  00066730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c30  00000000  00000000  00068560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8e2  00000000  00000000  0006a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025698  00000000  00000000  00088a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeaf1  00000000  00000000  000ae10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015cbfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009370  00000000  00000000  0015cc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801288c 	.word	0x0801288c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	0801288c 	.word	0x0801288c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Ph_Init>:
////	HAL_ADC_Stop(&hadc1);
//	return uiAnalogData;
//}

uint8_t Ph_Init()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af02      	add	r7, sp, #8
	//Ph_GetAverageN(Ph_Data, N_NOISE);
	Ph_GetMeasure(Ph_Data);
 8000ef6:	4817      	ldr	r0, [pc, #92]	; (8000f54 <Ph_Init+0x64>)
 8000ef8:	f000 f836 	bl	8000f68 <Ph_GetMeasure>
	Ph_GetMeasure(Ph_Data);
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <Ph_Init+0x64>)
 8000efe:	f000 f833 	bl	8000f68 <Ph_GetMeasure>
	Ph_Angle = 0;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <Ph_Init+0x68>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
	Ph_Norma = 0;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <Ph_Init+0x6c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	e00a      	b.n	8000f2a <Ph_Init+0x3a>
	{
		Ph_DataNoise[i] = Ph_Data[i];
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <Ph_Init+0x64>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f1c:	4910      	ldr	r1, [pc, #64]	; (8000f60 <Ph_Init+0x70>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < 4 ; i++)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	ddf1      	ble.n	8000f14 <Ph_Init+0x24>
	}
	printf("INITFIN PH_DataNoise : %04lu, %04lu, %04lu, %04lu\r\n", Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <Ph_Init+0x70>)
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <Ph_Init+0x70>)
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <Ph_Init+0x70>)
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <Ph_Init+0x70>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	4603      	mov	r3, r0
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <Ph_Init+0x74>)
 8000f46:	f00e f877 	bl	800f038 <iprintf>
	return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200044f0 	.word	0x200044f0
 8000f58:	200045bc 	.word	0x200045bc
 8000f5c:	200045b8 	.word	0x200045b8
 8000f60:	20004598 	.word	0x20004598
 8000f64:	080128a8 	.word	0x080128a8

08000f68 <Ph_GetMeasure>:
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
}

uint8_t Ph_GetMeasure(uint32_t value[])
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	Ph_GetAverageN(value, N_MEASURE);
 8000f70:	2101      	movs	r1, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f83a 	bl	8000fec <Ph_GetAverageN>
	Ph_Treatment(value);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f895 	bl	80010a8 <Ph_Treatment>
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <Ph_GetValues>:

uint8_t Ph_GetValues(uint32_t value[])
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, Ph_DataDMA, 4);// A APPELLER POUR CHAQUE MESURE
 8000f90:	2204      	movs	r2, #4
 8000f92:	4914      	ldr	r1, [pc, #80]	; (8000fe4 <Ph_GetValues+0x5c>)
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <Ph_GetValues+0x60>)
 8000f96:	f002 f99f 	bl	80032d8 <HAL_ADC_Start_DMA>
	for (int i = 0 ; i < 4 ; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e00b      	b.n	8000fb8 <Ph_GetValues+0x30>
	{
		value[i] = Ph_DataDMA[i];
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <Ph_GetValues+0x5c>)
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fb0:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	ddf0      	ble.n	8000fa0 <Ph_GetValues+0x18>
	}
	// Inversion valeurs 0 et 3 :
	uint32_t Ph_Datatempo = value[0];
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60bb      	str	r3, [r7, #8]
	value[0] = value[3];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
	value[3] = Ph_Datatempo;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	330c      	adds	r3, #12
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1);
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <Ph_GetValues+0x60>)
 8000fd6:	f002 fa6f 	bl	80034b8 <HAL_ADC_Stop_DMA>
	//return uiAnalogData;
	return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200045a8 	.word	0x200045a8
 8000fe8:	200045c4 	.word	0x200045c4

08000fec <Ph_GetAverageN>:

uint8_t Ph_GetAverageN(uint32_t value[], int n)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	uint32_t Ph_DataTemp[4];
	for (int i = 0 ; i < 4 ; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	e00a      	b.n	8001012 <Ph_GetAverageN+0x26>
	{
		Ph_DataTemp[i] = 0;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001004:	4413      	add	r3, r2
 8001006:	2200      	movs	r2, #0
 8001008:	f843 2c20 	str.w	r2, [r3, #-32]
	for (int i = 0 ; i < 4 ; i++)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	3301      	adds	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	2b03      	cmp	r3, #3
 8001016:	ddf1      	ble.n	8000ffc <Ph_GetAverageN+0x10>
	}

	for (int i = 0 ; i < n ; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	e022      	b.n	8001064 <Ph_GetAverageN+0x78>
	{
		Ph_GetValues(value);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb2 	bl	8000f88 <Ph_GetValues>
		for (int j = 0 ; j < 4 ; j++)
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	e016      	b.n	8001058 <Ph_GetAverageN+0x6c>
		{
			Ph_DataTemp[j] += value[j];
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001032:	4413      	add	r3, r2
 8001034:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	440b      	add	r3, r1
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	441a      	add	r2, r3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800104c:	440b      	add	r3, r1
 800104e:	f843 2c20 	str.w	r2, [r3, #-32]
		for (int j = 0 ; j < 4 ; j++)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b03      	cmp	r3, #3
 800105c:	dde5      	ble.n	800102a <Ph_GetAverageN+0x3e>
	for (int i = 0 ; i < n ; i++)
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	3301      	adds	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
 8001064:	6a3a      	ldr	r2, [r7, #32]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbd8      	blt.n	800101e <Ph_GetAverageN+0x32>
		}
	}

	for (int i = 0 ; i < 4 ; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	e011      	b.n	8001096 <Ph_GetAverageN+0xaa>
	{
		value[i] = Ph_DataTemp[i] / n;
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800107a:	4413      	add	r3, r2
 800107c:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4403      	add	r3, r0
 800108a:	fbb1 f2f2 	udiv	r2, r1, r2
 800108e:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3301      	adds	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b03      	cmp	r3, #3
 800109a:	ddea      	ble.n	8001072 <Ph_GetAverageN+0x86>
	}
	//printf("GetAverageN : PH_Data : %lu, %lu, %lu, %lu - /%d\r\n", value[0], value[1], value[2], value[3], n);
	//return uiAnalogData;
	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <Ph_Treatment>:

uint8_t Ph_Treatment(uint32_t value[])
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b095      	sub	sp, #84	; 0x54
 80010ac:	af0a      	add	r7, sp, #40	; 0x28
 80010ae:	6178      	str	r0, [r7, #20]
	//char * PrPrintf[50];
	uint32_t Ph_PourPrintf[4] = {value[0], value[1], value[2], value[3]};
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
			{
				value[i] = 0;
			}
		}
	}
	sprintf(Ph_toprint, "S : %04lu %04lu %04lu %04lu V : %04lu %04lu %04lu %04lu E : %04lu %04lu %04lu %04lu ", value[0], value[1], value[2], value[3], Ph_PourPrintf[0], Ph_PourPrintf[1], Ph_PourPrintf[2], Ph_PourPrintf[3], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3304      	adds	r3, #4
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	60f9      	str	r1, [r7, #12]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3308      	adds	r3, #8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	320c      	adds	r2, #12
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	69b9      	ldr	r1, [r7, #24]
 80010e4:	69f8      	ldr	r0, [r7, #28]
 80010e6:	60b8      	str	r0, [r7, #8]
 80010e8:	6a3c      	ldr	r4, [r7, #32]
 80010ea:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80010ec:	4e10      	ldr	r6, [pc, #64]	; (8001130 <Ph_Treatment+0x88>)
 80010ee:	6836      	ldr	r6, [r6, #0]
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <Ph_Treatment+0x88>)
 80010f2:	6840      	ldr	r0, [r0, #4]
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <Ph_Treatment+0x88>)
 80010f8:	6880      	ldr	r0, [r0, #8]
 80010fa:	6038      	str	r0, [r7, #0]
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <Ph_Treatment+0x88>)
 80010fe:	68c0      	ldr	r0, [r0, #12]
 8001100:	9009      	str	r0, [sp, #36]	; 0x24
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	9008      	str	r0, [sp, #32]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	9007      	str	r0, [sp, #28]
 800110a:	9606      	str	r6, [sp, #24]
 800110c:	9505      	str	r5, [sp, #20]
 800110e:	9404      	str	r4, [sp, #16]
 8001110:	68b8      	ldr	r0, [r7, #8]
 8001112:	9003      	str	r0, [sp, #12]
 8001114:	9102      	str	r1, [sp, #8]
 8001116:	9201      	str	r2, [sp, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <Ph_Treatment+0x8c>)
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <Ph_Treatment+0x90>)
 8001122:	f00e f891 	bl	800f248 <siprintf>
	//return uiAnalogData;
	return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	372c      	adds	r7, #44	; 0x2c
 800112c:	46bd      	mov	sp, r7
 800112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001130:	20004598 	.word	0x20004598
 8001134:	080128dc 	.word	0x080128dc
 8001138:	20004500 	.word	0x20004500

0800113c <Ph_GetBestAngle>:
	indice++;
	return indice;
}

int Ph_GetBestAngle(uint32_t value[])
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]

	// Ranger par max :
	//uint32_t DataPerMAX[3];
	int iMax = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e010      	b.n	8001174 <Ph_GetBestAngle+0x38>
	{
		if (value[i] > value[iMax])
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	440b      	add	r3, r1
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d901      	bls.n	800116e <Ph_GetBestAngle+0x32>
		{
			iMax = i;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b02      	cmp	r3, #2
 8001178:	ddeb      	ble.n	8001152 <Ph_GetBestAngle+0x16>
		}
	}

	if (iMax == 1) // Si le max est en face :
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d125      	bne.n	80011cc <Ph_GetBestAngle+0x90>
	{
		int dif1 = value[1] - value[0];
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3304      	adds	r3, #4
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	613b      	str	r3, [r7, #16]
		int dif2 = value[1] - value[2];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3304      	adds	r3, #4
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3308      	adds	r3, #8
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	60fb      	str	r3, [r7, #12]
		int dif = dif1 - dif2;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	60bb      	str	r3, [r7, #8]
		angle = (int)(100 * (float)((float)dif / 4095));
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	eddf 6a12 	vldr	s13, [pc, #72]	; 80011fc <Ph_GetBestAngle+0xc0>
 80011b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001200 <Ph_GetBestAngle+0xc4>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c4:	ee17 3a90 	vmov	r3, s15
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e003      	b.n	80011d4 <Ph_GetBestAngle+0x98>
	}
	else
	{
		angle = Ph_GetBestAngleAncien(value);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f81d 	bl	800120c <Ph_GetBestAngleAncien>
 80011d2:	61f8      	str	r0, [r7, #28]
	}

	angle = 40 * angle / 100;
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <Ph_GetBestAngle+0xc8>)
 80011e0:	fb82 1203 	smull	r1, r2, r2, r3
 80011e4:	1152      	asrs	r2, r2, #5
 80011e6:	17db      	asrs	r3, r3, #31
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	61fb      	str	r3, [r7, #28]

	Ph_Angle = angle;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <Ph_GetBestAngle+0xcc>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	6013      	str	r3, [r2, #0]
	return angle;
 80011f2:	69fb      	ldr	r3, [r7, #28]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	457ff000 	.word	0x457ff000
 8001200:	42c80000 	.word	0x42c80000
 8001204:	51eb851f 	.word	0x51eb851f
 8001208:	200045bc 	.word	0x200045bc

0800120c <Ph_GetBestAngleAncien>:

int Ph_GetBestAngleAncien(uint32_t value[])
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]

	//GetValues(value);

	// RECHERCHE DES 2 PREMIERS MAXIMUMS :

	int imax1 = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	int imax2 = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
	int maxtemp = 0;//////////////////////////////////////////////////////////////////////////PB
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e012      	b.n	8001250 <Ph_GetBestAngleAncien+0x44>
	{
		if (value[i] > maxtemp)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	429a      	cmp	r2, r3
 8001238:	d907      	bls.n	800124a <Ph_GetBestAngleAncien+0x3e>
		{
			maxtemp = value[i];
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
			imax1 = i;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	61bb      	str	r3, [r7, #24]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b02      	cmp	r3, #2
 8001254:	dde9      	ble.n	800122a <Ph_GetBestAngleAncien+0x1e>
		}
	}
	maxtemp = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	e016      	b.n	800128e <Ph_GetBestAngleAncien+0x82>
	{
		if (i != imax1)
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	429a      	cmp	r2, r3
 8001266:	d00f      	beq.n	8001288 <Ph_GetBestAngleAncien+0x7c>
		{
			if (value[i] > maxtemp)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d907      	bls.n	8001288 <Ph_GetBestAngleAncien+0x7c>
			{
				maxtemp = value[i];
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
				imax2 = i;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	617b      	str	r3, [r7, #20]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3301      	adds	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b02      	cmp	r3, #2
 8001292:	dde5      	ble.n	8001260 <Ph_GetBestAngleAncien+0x54>
		}
	}

	// ASSIGNATION DE L'ANGLE :

	if (imax1 + imax2 == 2) // 0 et 2 --> Deux sources lumineuses : gauche et droite
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	4413      	add	r3, r2
 800129a:	2b02      	cmp	r3, #2
 800129c:	d10a      	bne.n	80012b4 <Ph_GetBestAngleAncien+0xa8>
	{
		if (imax1 > imax2)
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dd02      	ble.n	80012ac <Ph_GetBestAngleAncien+0xa0>
		{
			angle = 100;
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e059      	b.n	8001360 <Ph_GetBestAngleAncien+0x154>
		}
		else
		{
			angle = -100;
 80012ac:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e055      	b.n	8001360 <Ph_GetBestAngleAncien+0x154>
		}
	}
	else // Milieu avec côté (On considère qu'on a le max1 à gauche et le max2 au milieu)
	{
		if (value[imax1] <= value[imax2] + DELTA_A) // Très proches (à 100 points près)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	440b      	add	r3, r1
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3364      	adds	r3, #100	; 0x64
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d803      	bhi.n	80012d6 <Ph_GetBestAngleAncien+0xca>
		{//A
			angle = -50;
 80012ce:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	e02b      	b.n	800132e <Ph_GetBestAngleAncien+0x122>
		}
		else
		{
			if (((4095 - DELTA_B) <= value[imax1]) && (value[imax1] <= 4095))
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f640 7236 	movw	r2, #3894	; 0xf36
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d90b      	bls.n	8001300 <Ph_GetBestAngleAncien+0xf4>
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f6:	d203      	bcs.n	8001300 <Ph_GetBestAngleAncien+0xf4>
			{//B
				angle = -100;
 80012f8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e016      	b.n	800132e <Ph_GetBestAngleAncien+0x122>
			}
			else
			{//C
				angle = -(int)(100 * (value[imax1] - value[imax2]) / value[imax1]);
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	440b      	add	r3, r1
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2264      	movs	r2, #100	; 0x64
 8001318:	fb02 f203 	mul.w	r2, r2, r3
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	440b      	add	r3, r1
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	425b      	negs	r3, r3
 800132c:	61fb      	str	r3, [r7, #28]
			}
		}

		// TRANSPOSITION DE L'ANGLE EN FONCTION DES POSITION DES MAX :
		if ((imax1 == 0) || (imax2 == 0)) // Sur la gauche
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <Ph_GetBestAngleAncien+0x12e>
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <Ph_GetBestAngleAncien+0x140>
		{
			if (imax1 == 1) // Max au milieu
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10f      	bne.n	8001360 <Ph_GetBestAngleAncien+0x154>
			{
				angle = -100 - angle;
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	61fb      	str	r3, [r7, #28]
			if (imax1 == 1) // Max au milieu
 800134a:	e009      	b.n	8001360 <Ph_GetBestAngleAncien+0x154>
				// On est bon
			}
		}
		else // Sur la droite
		{
			if (imax1 == 1) // Max au  milieu
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d103      	bne.n	800135a <Ph_GetBestAngleAncien+0x14e>
			{
				angle = 100 + angle;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3364      	adds	r3, #100	; 0x64
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e002      	b.n	8001360 <Ph_GetBestAngleAncien+0x154>
			}
			else // Max à droite
			{
				angle = -angle;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	425b      	negs	r3, r3
 800135e:	61fb      	str	r3, [r7, #28]
	//	strcat(toprint, "\r\n");
	//	char tprnt[50];
	//	sprintf(tprnt, " Angle : %d", angle);
	//	strcat(toprint, tprnt);

	return angle;
 8001360:	69fb      	ldr	r3, [r7, #28]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <Ph_GetNorma>:

int Ph_GetNorma(uint32_t value[])
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	//Ph_Norma = 100 - (0.9*value[0] + 1.2*value[1] + 0.9*value[2])/(3*40.95);
	uint32_t Ph_DataTemp[3];
	for (int i = 0 ; i < 3 ; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e013      	b.n	80013a6 <Ph_GetNorma+0x36>
	{
		Ph_DataTemp[i] = value[i] - Ph_DataNoise[i];
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4937      	ldr	r1, [pc, #220]	; (8001468 <Ph_GetNorma+0xf8>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001390:	1ad2      	subs	r2, r2, r3
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f107 0120 	add.w	r1, r7, #32
 800139a:	440b      	add	r3, r1
 800139c:	f843 2c18 	str.w	r2, [r3, #-24]
	for (int i = 0 ; i < 3 ; i++)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	dde8      	ble.n	800137e <Ph_GetNorma+0xe>
	}
	int max = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++)
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e014      	b.n	80013e0 <Ph_GetNorma+0x70>
	{
		if (Ph_DataTemp[i] > Ph_DataTemp[max])
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	f107 0220 	add.w	r2, r7, #32
 80013be:	4413      	add	r3, r2
 80013c0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	f107 0120 	add.w	r1, r7, #32
 80013cc:	440b      	add	r3, r1
 80013ce:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d901      	bls.n	80013da <Ph_GetNorma+0x6a>
		{
			max = i;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	dde7      	ble.n	80013b6 <Ph_GetNorma+0x46>
		}
	}
	Ph_Max_Tr = Ph_DataTemp[max];
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	f107 0220 	add.w	r2, r7, #32
 80013ee:	4413      	add	r3, r2
 80013f0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <Ph_GetNorma+0xfc>)
 80013f6:	6013      	str	r3, [r2, #0]
	Ph_Norma = (uint32_t)(4791.6*exp(-0.001*value[max]));
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f886 	bl	8000514 <__aeabi_ui2d>
 8001408:	a313      	add	r3, pc, #76	; (adr r3, 8001458 <Ph_GetNorma+0xe8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	ec43 2b17 	vmov	d7, r2, r3
 800141a:	eeb0 0a47 	vmov.f32	s0, s14
 800141e:	eef0 0a67 	vmov.f32	s1, s15
 8001422:	f010 f879 	bl	8011518 <exp>
 8001426:	ec51 0b10 	vmov	r0, r1, d0
 800142a:	a30d      	add	r3, pc, #52	; (adr r3, 8001460 <Ph_GetNorma+0xf0>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f8ea 	bl	8000608 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fbbc 	bl	8000bb8 <__aeabi_d2uiz>
 8001440:	4603      	mov	r3, r0
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <Ph_GetNorma+0x100>)
 8001444:	6013      	str	r3, [r2, #0]
	return Ph_Norma;
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <Ph_GetNorma+0x100>)
 8001448:	681b      	ldr	r3, [r3, #0]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	d2f1a9fc 	.word	0xd2f1a9fc
 800145c:	bf50624d 	.word	0xbf50624d
 8001460:	9999999a 	.word	0x9999999a
 8001464:	40b2b799 	.word	0x40b2b799
 8001468:	20004598 	.word	0x20004598
 800146c:	200045c0 	.word	0x200045c0
 8001470:	200045b8 	.word	0x200045b8

08001474 <RGB_Init_SetTimer>:
 */

#include "BOTterfly-H/rgb_sensor.h"


uint8_t RGB_Init_SetTimer(RGB_struct* rgbSensor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	rgbSensor->Timer_Handle = htim;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	601a      	str	r2, [r3, #0]
	rgbSensor->Timer_Channel = Channel;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	605a      	str	r2, [r3, #4]

	//HAL_TIM_IC_Start_IT(rgbSensor->Timer_Handle, rgbSensor->Timer_Channel);
	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <RGB_Init_SetParamGPIOs>:

uint8_t RGB_Init_SetParamGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutputEnable_GPIOx, uint16_t OutputEnable_GPIO_Pin,
		GPIO_TypeDef* LED_GPIOx, uint16_t LED_GPIO_Pin){
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutputEnable_GPIOx = OutputEnable_GPIOx;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	609a      	str	r2, [r3, #8]
	rgbSensor->OutputEnable_GPIO_Pin = OutputEnable_GPIO_Pin;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	88fa      	ldrh	r2, [r7, #6]
 80014b4:	819a      	strh	r2, [r3, #12]
	rgbSensor->LED_GPIOx = LED_GPIOx;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	611a      	str	r2, [r3, #16]
	rgbSensor->LED_GPIO_Pin = LED_GPIO_Pin;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8b3a      	ldrh	r2, [r7, #24]
 80014c0:	829a      	strh	r2, [r3, #20]

	return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <RGB_Init_SetOutFreqGPIOs>:

uint8_t RGB_Init_SetOutFreqGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutFreq1_GPIOx, uint16_t OutFreq1_GPIO_Pin,
		GPIO_TypeDef* OutFreq2_GPIOx, uint16_t OutFreq2_GPIO_Pin){
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutFreq1_GPIOx = OutFreq1_GPIOx;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	619a      	str	r2, [r3, #24]
	rgbSensor->OutFreq1_GPIO_Pin = OutFreq1_GPIO_Pin;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	88fa      	ldrh	r2, [r7, #6]
 80014ea:	839a      	strh	r2, [r3, #28]
	rgbSensor->OutFreq2_GPIOx = OutFreq2_GPIOx;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	621a      	str	r2, [r3, #32]
	rgbSensor->OutFreq2_GPIO_Pin = OutFreq2_GPIO_Pin;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8b3a      	ldrh	r2, [r7, #24]
 80014f6:	849a      	strh	r2, [r3, #36]	; 0x24

	return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <RGB_Init_SetColorFilterGPIOs>:

uint8_t RGB_Init_SetColorFilterGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* ColorFilter1_GPIOx, uint16_t ColorFilter1_GPIO_Pin,
		GPIO_TypeDef* ColorFilter2_GPIOx, uint16_t ColorFilter2_GPIO_Pin){
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	80fb      	strh	r3, [r7, #6]
	rgbSensor->ColorFilter1_GPIOx = ColorFilter1_GPIOx;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
	rgbSensor->ColorFilter1_GPIO_Pin = ColorFilter1_GPIO_Pin;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	88fa      	ldrh	r2, [r7, #6]
 8001520:	859a      	strh	r2, [r3, #44]	; 0x2c
	rgbSensor->ColorFilter2_GPIOx = ColorFilter2_GPIOx;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
	rgbSensor->ColorFilter2_GPIO_Pin = ColorFilter2_GPIO_Pin;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8b3a      	ldrh	r2, [r7, #24]
 800152c:	869a      	strh	r2, [r3, #52]	; 0x34

	return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <RGB_Init>:

uint8_t RGB_Init(RGB_struct* rgbSensor){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

	rgbSensor->it.flag = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rgbSensor->it.isFirstCaptured = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rgbSensor->it.icVal1 = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rgbSensor->it.icVal2 = 0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rgbSensor->it.difference = 0;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rgbSensor->it.frequency = 0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	64da      	str	r2, [r3, #76]	; 0x4c

	// OE : Output Enable -> DISABLE
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6898      	ldr	r0, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	899b      	ldrh	r3, [r3, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f003 f93a 	bl	80047f8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001584:	20c8      	movs	r0, #200	; 0xc8
 8001586:	f001 fe3f 	bl	8003208 <HAL_Delay>

	RGB_SetOFscaling(rgbSensor, RGB_OF_02_RANGE);
 800158a:	2102      	movs	r1, #2
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f889 	bl	80016a4 <RGB_SetOFscaling>
	RGB_SetFilter(rgbSensor, RGB_RED);
 8001592:	2100      	movs	r1, #0
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f819 	bl	80015cc <RGB_SetFilter>

	// Turn on the LEDs to lights the floor
	HAL_GPIO_WritePin(rgbSensor->LED_GPIOx, rgbSensor->LED_GPIO_Pin, GPIO_PIN_SET);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6918      	ldr	r0, [r3, #16]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	8a9b      	ldrh	r3, [r3, #20]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	f003 f927 	bl	80047f8 <HAL_GPIO_WritePin>

	// OE : Output Enable -> ENABLE
	HAL_Delay(200);
 80015aa:	20c8      	movs	r0, #200	; 0xc8
 80015ac:	f001 fe2c 	bl	8003208 <HAL_Delay>
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6898      	ldr	r0, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	899b      	ldrh	r3, [r3, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	f003 f91c 	bl	80047f8 <HAL_GPIO_WritePin>

	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <RGB_SetFilter>:

uint8_t RGB_SetFilter(RGB_struct* rgbSensor, uint8_t color){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

	switch(color)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d84e      	bhi.n	8001680 <RGB_SetFilter+0xb4>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <RGB_SetFilter+0x1c>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	0800161b 	.word	0x0800161b
 80015f0:	0800163d 	.word	0x0800163d
 80015f4:	0800165f 	.word	0x0800165f
	{
	case RGB_RED:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	f003 f8f8 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	f003 f8f0 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 8001618:	e039      	b.n	800168e <RGB_SetFilter+0xc2>
	case RGB_BLUE:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	f003 f8e7 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001632:	2201      	movs	r2, #1
 8001634:	4619      	mov	r1, r3
 8001636:	f003 f8df 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 800163a:	e028      	b.n	800168e <RGB_SetFilter+0xc2>
	case RGB_GREEN:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001644:	2201      	movs	r2, #1
 8001646:	4619      	mov	r1, r3
 8001648:	f003 f8d6 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001654:	2201      	movs	r2, #1
 8001656:	4619      	mov	r1, r3
 8001658:	f003 f8ce 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 800165c:	e017      	b.n	800168e <RGB_SetFilter+0xc2>
	case RGB_CLEAR:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001666:	2201      	movs	r2, #1
 8001668:	4619      	mov	r1, r3
 800166a:	f003 f8c5 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	f003 f8bd 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 800167e:	e006      	b.n	800168e <RGB_SetFilter+0xc2>
	default:
		status = RGB_ERROR_FILTER;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setFilter : %d\r\n", status);
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <RGB_SetFilter+0xd4>)
 800168a:	f00d fcd5 	bl	800f038 <iprintf>
	}
	rgbSensor->it.colorFilter = color;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08012974 	.word	0x08012974

080016a4 <RGB_SetOFscaling>:

uint8_t RGB_SetOFscaling(RGB_struct* rgbSensor, uint8_t scale){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

	switch(scale)
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d03d      	beq.n	8001736 <RGB_SetOFscaling+0x92>
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	dc4c      	bgt.n	8001758 <RGB_SetOFscaling+0xb4>
 80016be:	2b14      	cmp	r3, #20
 80016c0:	d028      	beq.n	8001714 <RGB_SetOFscaling+0x70>
 80016c2:	2b14      	cmp	r3, #20
 80016c4:	dc48      	bgt.n	8001758 <RGB_SetOFscaling+0xb4>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <RGB_SetOFscaling+0x2c>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d011      	beq.n	80016f2 <RGB_SetOFscaling+0x4e>
 80016ce:	e043      	b.n	8001758 <RGB_SetOFscaling+0xb4>
	{
	case 0:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6998      	ldr	r0, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8b9b      	ldrh	r3, [r3, #28]
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	f003 f88c 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a18      	ldr	r0, [r3, #32]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	f003 f884 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 80016f0:	e039      	b.n	8001766 <RGB_SetOFscaling+0xc2>
	case 2:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6998      	ldr	r0, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	8b9b      	ldrh	r3, [r3, #28]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f003 f87b 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a18      	ldr	r0, [r3, #32]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	f003 f873 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 8001712:	e028      	b.n	8001766 <RGB_SetOFscaling+0xc2>
	case 20:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6998      	ldr	r0, [r3, #24]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8b9b      	ldrh	r3, [r3, #28]
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	f003 f86a 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a18      	ldr	r0, [r3, #32]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f003 f862 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 8001734:	e017      	b.n	8001766 <RGB_SetOFscaling+0xc2>
	case 100:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6998      	ldr	r0, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	8b9b      	ldrh	r3, [r3, #28]
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	f003 f859 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a18      	ldr	r0, [r3, #32]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	f003 f851 	bl	80047f8 <HAL_GPIO_WritePin>
		break;
 8001756:	e006      	b.n	8001766 <RGB_SetOFscaling+0xc2>
	default:
		status = RGB_ERROR_OF_SCALING;
 8001758:	2302      	movs	r3, #2
 800175a:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setOFscaling : %d\r\n", status);
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	4619      	mov	r1, r3
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <RGB_SetOFscaling+0xcc>)
 8001762:	f00d fc69 	bl	800f038 <iprintf>
	}

	return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	08012994 	.word	0x08012994

08001774 <RGB_IsTheFloorRed>:


uint8_t RGB_IsTheFloorRed(RGB_struct* rgbSensor){
 8001774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	uint8_t status = RGB_ERROR_NONE;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]

	rgbSensor->it.difference = rgbSensor->it.icVal2 - rgbSensor->it.icVal1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	float refClock = RGB_APBCLOCK/(RGB_PRESCALER);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <RGB_IsTheFloorRed+0x18c>)
 800179a:	60bb      	str	r3, [r7, #8]
	rgbSensor->it.frequency = refClock/rgbSensor->it.difference;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80017ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	switch(rgbSensor->it.colorFilter)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d01c      	beq.n	80017fc <RGB_IsTheFloorRed+0x88>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	dc46      	bgt.n	8001854 <RGB_IsTheFloorRed+0xe0>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <RGB_IsTheFloorRed+0x5c>
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d02c      	beq.n	8001828 <RGB_IsTheFloorRed+0xb4>
 80017ce:	e041      	b.n	8001854 <RGB_IsTheFloorRed+0xe0>
	{
	case RGB_RED:
		rgbSensor->red = (uint16_t)rgbSensor->it.frequency;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017da:	ee17 3a90 	vmov	r3, s15
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	86da      	strh	r2, [r3, #54]	; 0x36
		rgbSensor->it.colorFilter = RGB_GREEN;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fee9 	bl	80015cc <RGB_SetFilter>
		break;
 80017fa:	e02e      	b.n	800185a <RGB_IsTheFloorRed+0xe6>
	case RGB_GREEN:
		rgbSensor->green = (uint16_t)rgbSensor->it.frequency;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001806:	ee17 3a90 	vmov	r3, s15
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	871a      	strh	r2, [r3, #56]	; 0x38
		rgbSensor->it.colorFilter = RGB_BLUE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fed3 	bl	80015cc <RGB_SetFilter>
		break;
 8001826:	e018      	b.n	800185a <RGB_IsTheFloorRed+0xe6>
	case RGB_BLUE:
		rgbSensor->blue = (uint16_t)rgbSensor->it.frequency;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	875a      	strh	r2, [r3, #58]	; 0x3a
		rgbSensor->it.colorFilter = RGB_RED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff febd 	bl	80015cc <RGB_SetFilter>
		break;
 8001852:	e002      	b.n	800185a <RGB_IsTheFloorRed+0xe6>
	default:
		printf("RGB - Error setFilter\r\n");
 8001854:	482b      	ldr	r0, [pc, #172]	; (8001904 <RGB_IsTheFloorRed+0x190>)
 8001856:	f00d fc75 	bl	800f144 <puts>
	}
	if((rgbSensor->red >= (1.5*rgbSensor->green)) & (rgbSensor->red >= (1.5*rgbSensor->blue))){
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe68 	bl	8000534 <__aeabi_i2d>
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe61 	bl	8000534 <__aeabi_i2d>
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <RGB_IsTheFloorRed+0x194>)
 8001878:	f7fe fec6 	bl	8000608 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	2101      	movs	r1, #1
 8001882:	460e      	mov	r6, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7ff f944 	bl	8000b14 <__aeabi_dcmpge>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <RGB_IsTheFloorRed+0x122>
 8001892:	2300      	movs	r3, #0
 8001894:	461e      	mov	r6, r3
 8001896:	b2f6      	uxtb	r6, r6
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe49 	bl	8000534 <__aeabi_i2d>
 80018a2:	4604      	mov	r4, r0
 80018a4:	460d      	mov	r5, r1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe42 	bl	8000534 <__aeabi_i2d>
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <RGB_IsTheFloorRed+0x194>)
 80018b6:	f7fe fea7 	bl	8000608 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	2101      	movs	r1, #1
 80018c0:	4688      	mov	r8, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7ff f925 	bl	8000b14 <__aeabi_dcmpge>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <RGB_IsTheFloorRed+0x160>
 80018d0:	2300      	movs	r3, #0
 80018d2:	4698      	mov	r8, r3
 80018d4:	fa5f f388 	uxtb.w	r3, r8
 80018d8:	4033      	ands	r3, r6
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <RGB_IsTheFloorRed+0x176>
		rgbSensor->isFloorRed = 1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80018e8:	e003      	b.n	80018f2 <RGB_IsTheFloorRed+0x17e>
	}else{
		rgbSensor->isFloorRed = 0;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	return status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018fe:	bf00      	nop
 8001900:	49742400 	.word	0x49742400
 8001904:	080129b4 	.word	0x080129b4
 8001908:	3ff80000 	.word	0x3ff80000

0800190c <TOF_Init_SetI2C>:
 *      Author: jerem
 */

#include "BOTterfly-H/tof_sensor.h"

uint8_t TOF_Init_SetI2C(VL53L0X_Dev_t* device, I2C_HandleTypeDef *hi2c, uint8_t I2cAddr){
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	4613      	mov	r3, r2
 8001918:	71fb      	strb	r3, [r7, #7]
	device->I2cHandle = hi2c;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	device->I2cAddr = I2cAddr;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173

	return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <TOF_Init_SetGPIOs>:

uint8_t TOF_Init_SetGPIOs(VL53L0X_Dev_t* device, GPIO_TypeDef* XSHUT_GPIOx, uint16_t XSHUT_GPIO_Pin,
		GPIO_TypeDef* EXTI_GPIOx, uint16_t EXTI_GPIO_Pin){
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	80fb      	strh	r3, [r7, #6]
	device->XSHUT_GPIOx = XSHUT_GPIOx;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	device->XSHUT_GPIO_Pin = XSHUT_GPIO_Pin;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	88fa      	ldrh	r2, [r7, #6]
 8001954:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	device->EXTI_GPIOx = EXTI_GPIOx;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	device->EXTI_GPIO_Pin = EXTI_GPIO_Pin;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8b3a      	ldrh	r2, [r7, #24]
 8001964:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170

	return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <TOF_Init_SetEXTI>:

uint8_t TOF_Init_SetEXTI(VL53L0X_Dev_t* device, IRQn_Type EXTIx_IRQn){
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
	device->EXTI_IRQn = EXTIx_IRQn;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172

	return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <TOF_Init>:

uint8_t TOF_Init(VL53L0X_Dev_t* device){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e021      	b.n	80019ea <TOF_Init+0x52>
		device[i].I2cDevAddr = 0x52;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	2252      	movs	r2, #82	; 0x52
 80019b6:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
		device[i].comms_speed_khz = 400;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019cc:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
		device[i].comms_type = 1;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	ddda      	ble.n	80019a6 <TOF_Init+0xe>
	}

	// Disable the interruptions
	// Useful for the INITIALIZATION FLOW before changing the address of each device
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e024      	b.n	8001a40 <TOF_Init+0xa8>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_RESET);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f002 feeb 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(device[i].EXTI_IRQn);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f993 3172 	ldrsb.w	r3, [r3, #370]	; 0x172
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 f96d 	bl	8003d14 <HAL_NVIC_DisableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	ddd7      	ble.n	80019f6 <TOF_Init+0x5e>
	}
	HAL_Delay(100);
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f001 fbde 	bl	8003208 <HAL_Delay>

	// INITIALIZATION FLOW
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e046      	b.n	8001ae0 <TOF_Init+0x148>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_SET);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8001a76:	2201      	movs	r2, #1
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f002 febd 	bl	80047f8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a7e:	2064      	movs	r0, #100	; 0x64
 8001a80:	f001 fbc2 	bl	8003208 <HAL_Delay>
		TOF_InitializationFlow(&device[i], (uint8_t)device[i].EXTI_GPIOx->ODR);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	18d0      	adds	r0, r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f000 f824 	bl	8001af6 <TOF_InitializationFlow>
		TOF_SetDeviceAddr(&device[i], device[i].I2cAddr);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	18d0      	adds	r0, r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f000 f8d8 	bl	8001c84 <TOF_SetDeviceAddr>
		HAL_Delay(100);
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	f001 fb97 	bl	8003208 <HAL_Delay>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	ddb5      	ble.n	8001a52 <TOF_Init+0xba>

	// Enable the Interruptions
//	for(int i=0; i<TOF_nbOfSensor; i++){
//		HAL_NVIC_EnableIRQ(device[i].EXTI_IRQn);
//	}
	HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
 8001ae8:	f001 fb8e 	bl	8003208 <HAL_Delay>

	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <TOF_InitializationFlow>:

uint8_t TOF_InitializationFlow(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	70fb      	strb	r3, [r7, #3]
	// Device initialization (~ 40ms)
	TOF_Initialization(device);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f81a 	bl	8001b3c <TOF_Initialization>
	HAL_Delay(50);
 8001b08:	2032      	movs	r0, #50	; 0x32
 8001b0a:	f001 fb7d 	bl	8003208 <HAL_Delay>

	// Calibration data loading (~ 1ms)
	TOF_Calibration(device);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f842 	bl	8001b98 <TOF_Calibration>
	HAL_Delay(5);
 8001b14:	2005      	movs	r0, #5
 8001b16:	f001 fb77 	bl	8003208 <HAL_Delay>

	// System settings (~ 1ms)
	TOF_Settings(device, interruptPin);
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f87a 	bl	8001c18 <TOF_Settings>
	HAL_Delay(5);
 8001b24:	2005      	movs	r0, #5
 8001b26:	f001 fb6f 	bl	8003208 <HAL_Delay>

	VL53L0X_StartMeasurement(device);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f006 fe3a 	bl	80087a4 <VL53L0X_StartMeasurement>

	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <TOF_Initialization>:

uint8_t TOF_Initialization(VL53L0X_Dev_t* device){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if((status = VL53L0X_DataInit(device)) != VL53L0X_ERROR_NONE){
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f005 fdcf 	bl	80076ec <VL53L0X_DataInit>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <TOF_Initialization+0x2a>
		printf("ToF - Error DataInit : %d\r\n", status);
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <TOF_Initialization+0x54>)
 8001b5e:	f00d fa6b 	bl	800f038 <iprintf>
		return 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <TOF_Initialization+0x4a>
	}

	// StaticInit
	if((status = VL53L0X_StaticInit(device)) != VL53L0X_ERROR_NONE){
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f005 ff24 	bl	80079b4 <VL53L0X_StaticInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <TOF_Initialization+0x48>
		printf("ToF - Error StaticInit : %d\r\n", status);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <TOF_Initialization+0x58>)
 8001b7c:	f00d fa5c 	bl	800f038 <iprintf>
		return 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <TOF_Initialization+0x4a>
	}

	return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	080129cc 	.word	0x080129cc
 8001b94:	080129e8 	.word	0x080129e8

08001b98 <TOF_Calibration>:
// SPADs calibration
static uint32_t *refSpadCount; static uint8_t *isApertureSpads;
// Temperature calibration
static uint8_t *pVhvSettings; static uint8_t *pPhaseCal;

uint8_t TOF_Calibration(VL53L0X_Dev_t* device){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

	// SPADs calibration (~ 10ms)
	if((status = VL53L0X_PerformRefSpadManagement(device, refSpadCount, isApertureSpads)) != VL53L0X_ERROR_NONE){
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <TOF_Calibration+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <TOF_Calibration+0x6c>)
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f007 fa0a 	bl	8008fc8 <VL53L0X_PerformRefSpadManagement>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <TOF_Calibration+0x34>
		printf("ToF - Error SPADs calibration : %d\r\n", status);
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4811      	ldr	r0, [pc, #68]	; (8001c08 <TOF_Calibration+0x70>)
 8001bc4:	f00d fa38 	bl	800f038 <iprintf>
		return 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e014      	b.n	8001bf6 <TOF_Calibration+0x5e>
	}

	// Temperature calibration (~ 40ms)
	if((status = VL53L0X_PerformRefCalibration(device, pVhvSettings, pPhaseCal)) != VL53L0X_ERROR_NONE){
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <TOF_Calibration+0x74>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <TOF_Calibration+0x78>)
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f006 fd68 	bl	80086ac <VL53L0X_PerformRefCalibration>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <TOF_Calibration+0x5c>
		printf("ToF - Error Temperature calibration : %d\r\n", status);
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	4619      	mov	r1, r3
 8001bea:	480a      	ldr	r0, [pc, #40]	; (8001c14 <TOF_Calibration+0x7c>)
 8001bec:	f00d fa24 	bl	800f038 <iprintf>
		return 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <TOF_Calibration+0x5e>
	}

	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200004bc 	.word	0x200004bc
 8001c04:	200004c0 	.word	0x200004c0
 8001c08:	08012a08 	.word	0x08012a08
 8001c0c:	200004c4 	.word	0x200004c4
 8001c10:	200004c8 	.word	0x200004c8
 8001c14:	08012a30 	.word	0x08012a30

08001c18 <TOF_Settings>:

uint8_t TOF_Settings(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

	// Device mode
	if((status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING)) != VL53L0X_ERROR_NONE){
 8001c28:	2101      	movs	r1, #1
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f006 f8d4 	bl	8007dd8 <VL53L0X_SetDeviceMode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <TOF_Settings+0x30>
		printf("ToF - Error SetDeviceMode : %d\r\n", status);
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480f      	ldr	r0, [pc, #60]	; (8001c7c <TOF_Settings+0x64>)
 8001c40:	f00d f9fa 	bl	800f038 <iprintf>
		return 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e015      	b.n	8001c74 <TOF_Settings+0x5c>
	}

	// Set GPIO : Pour interruptions
	status = VL53L0X_SetGpioConfig(device, interruptPin, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 8001c48:	78f9      	ldrb	r1, [r7, #3]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2304      	movs	r3, #4
 8001c50:	2201      	movs	r2, #1
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 fffc 	bl	8008c50 <VL53L0X_SetGpioConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
	if(status != VL53L0X_ERROR_NONE){
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <TOF_Settings+0x5a>
		printf("ToF - Error SetGPIO : %d %d\r\n",status,interruptPin);
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <TOF_Settings+0x68>)
 8001c6a:	f00d f9e5 	bl	800f038 <iprintf>
		return 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <TOF_Settings+0x5c>
	}

	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev, InterMeasurementPeriodMilliSeconds)

	return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	08012a5c 	.word	0x08012a5c
 8001c80:	08012a80 	.word	0x08012a80

08001c84 <TOF_SetDeviceAddr>:

uint8_t TOF_SetDeviceAddr(VL53L0X_Dev_t* device, uint8_t new_addr){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]

	if((status = VL53L0X_SetDeviceAddress(device, new_addr)) != VL53L0X_ERROR_NONE){
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 fd0e 	bl	80076ba <VL53L0X_SetDeviceAddress>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <TOF_SetDeviceAddr+0x32>
		printf("ToF - Error SetDeviceAddress : %d\r\n", status);
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <TOF_SetDeviceAddr+0x44>)
 8001cae:	f00d f9c3 	bl	800f038 <iprintf>
		return 1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e004      	b.n	8001cc0 <TOF_SetDeviceAddr+0x3c>
	}
	device->I2cDevAddr = new_addr;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08012aa0 	.word	0x08012aa0

08001ccc <TOF_SetDistance_mm>:
	printf("ProductRevisionMinor : %d\r\n", deviceInfo->ProductRevisionMinor);

	return 0;
}

uint8_t TOF_SetDistance_mm(VL53L0X_Dev_t* device){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
	//uint32_t InterruptMask = 0;

	VL53L0X_GetRangingMeasurementData(device, &VL53L0X_RangingMeasurementData); // ~ 460us
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f006 fe64 	bl	80089a8 <VL53L0X_GetRangingMeasurementData>
	device->rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter; // ~ 0.25us
 8001ce0:	8aba      	ldrh	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	VL53L0X_ClearInterruptMask(device, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY); // ~ 295us
 8001ce8:	2104      	movs	r1, #4
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f007 f90a 	bl	8008f04 <VL53L0X_ClearInterruptMask>
	//VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR
	//VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY
	//VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_OUT_OF_WINDOW

	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d10:	4a36      	ldr	r2, [pc, #216]	; (8001dec <MX_ADC1_Init+0xf0>)
 8001d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d3e:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <MX_ADC1_Init+0xf4>)
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d5c:	4822      	ldr	r0, [pc, #136]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d5e:	f001 fa77 	bl	8003250 <HAL_ADC_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d68:	f000 feac 	bl	8002ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d7e:	f001 fc13 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d88:	f000 fe9c 	bl	8002ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d90:	2302      	movs	r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4813      	ldr	r0, [pc, #76]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001d9a:	f001 fc05 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001da4:	f000 fe8e 	bl	8002ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001da8:	2304      	movs	r3, #4
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001dac:	2303      	movs	r3, #3
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001db6:	f001 fbf7 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001dc0:	f000 fe80 	bl	8002ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_ADC1_Init+0xec>)
 8001dd2:	f001 fbe9 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001ddc:	f000 fe72 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200045c4 	.word	0x200045c4
 8001dec:	40012000 	.word	0x40012000
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <HAL_ADC_MspInit+0xdc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d157      	bne.n	8001ec6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8001e4e:	2353      	movs	r3, #83	; 0x53
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <HAL_ADC_MspInit+0xe4>)
 8001e62:	f002 fb45 	bl	80044f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_ADC_MspInit+0xec>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001eac:	f001 ff40 	bl	8003d30 <HAL_DMA_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001eb6:	f000 fe05 	bl	8002ac4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40012000 	.word	0x40012000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	2000460c 	.word	0x2000460c
 8001ee0:	40026410 	.word	0x40026410

08001ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_DMA_Init+0x3c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2105      	movs	r1, #5
 8001f0a:	2038      	movs	r0, #56	; 0x38
 8001f0c:	f001 fed8 	bl	8003cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f10:	2038      	movs	r0, #56	; 0x38
 8001f12:	f001 fef1 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <vApplicationGetIdleTaskMemory+0x30>)
 8001f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	200004cc 	.word	0x200004cc
 8001f54:	20000580 	.word	0x20000580

08001f58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <MX_FREERTOS_Init+0x30>)
 8001f60:	1d3c      	adds	r4, r7, #4
 8001f62:	461d      	mov	r5, r3
 8001f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00a f901 	bl	800c17c <osThreadCreate>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <MX_FREERTOS_Init+0x34>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}
 8001f88:	08012b80 	.word	0x08012b80
 8001f8c:	2000466c 	.word	0x2000466c

08001f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f00a f93b 	bl	800c214 <osDelay>
 8001f9e:	e7fb      	b.n	8001f98 <StartDefaultTask+0x8>

08001fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <MX_GPIO_Init+0x190>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <MX_GPIO_Init+0x190>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <MX_GPIO_Init+0x190>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <MX_GPIO_Init+0x190>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a55      	ldr	r2, [pc, #340]	; (8002130 <MX_GPIO_Init+0x190>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b53      	ldr	r3, [pc, #332]	; (8002130 <MX_GPIO_Init+0x190>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <MX_GPIO_Init+0x190>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <MX_GPIO_Init+0x190>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <MX_GPIO_Init+0x190>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b48      	ldr	r3, [pc, #288]	; (8002130 <MX_GPIO_Init+0x190>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a47      	ldr	r2, [pc, #284]	; (8002130 <MX_GPIO_Init+0x190>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b45      	ldr	r3, [pc, #276]	; (8002130 <MX_GPIO_Init+0x190>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOF_XSHUT1_Pin|TOF_XSHUT0_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7148 	mov.w	r1, #800	; 0x320
 800202c:	4841      	ldr	r0, [pc, #260]	; (8002134 <MX_GPIO_Init+0x194>)
 800202e:	f002 fbe3 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_LED_Pin|RGB_OE_Pin|RGB_S3_Pin|RGB_S2_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002038:	483f      	ldr	r0, [pc, #252]	; (8002138 <MX_GPIO_Init+0x198>)
 800203a:	f002 fbdd 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB_S1_Pin|RGB_S0_Pin|TOF_XSHUT2_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8002044:	483d      	ldr	r0, [pc, #244]	; (800213c <MX_GPIO_Init+0x19c>)
 8002046:	f002 fbd7 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800204a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002050:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4836      	ldr	r0, [pc, #216]	; (800213c <MX_GPIO_Init+0x19c>)
 8002062:	f002 fa45 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TOF_XSHUT1_Pin|TOF_XSHUT0_Pin;
 8002066:	f44f 7348 	mov.w	r3, #800	; 0x320
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	482d      	ldr	r0, [pc, #180]	; (8002134 <MX_GPIO_Init+0x194>)
 8002080:	f002 fa36 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_GPIOI1_Pin|TOF_GPIOI2_Pin;
 8002084:	2303      	movs	r3, #3
 8002086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4827      	ldr	r0, [pc, #156]	; (8002138 <MX_GPIO_Init+0x198>)
 800209a:	f002 fa29 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RGB_LED_Pin|RGB_OE_Pin|RGB_S3_Pin|RGB_S2_Pin;
 800209e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4820      	ldr	r0, [pc, #128]	; (8002138 <MX_GPIO_Init+0x198>)
 80020b8:	f002 fa1a 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RGB_S1_Pin|RGB_S0_Pin|TOF_XSHUT2_Pin;
 80020bc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80020c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <MX_GPIO_Init+0x19c>)
 80020d6:	f002 fa0b 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIOI0_Pin;
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIOI0_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4810      	ldr	r0, [pc, #64]	; (8002134 <MX_GPIO_Init+0x194>)
 80020f2:	f002 f9fd 	bl	80044f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	2006      	movs	r0, #6
 80020fc:	f001 fde0 	bl	8003cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002100:	2006      	movs	r0, #6
 8002102:	f001 fdf9 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2105      	movs	r1, #5
 800210a:	2007      	movs	r0, #7
 800210c:	f001 fdd8 	bl	8003cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002110:	2007      	movs	r0, #7
 8002112:	f001 fdf1 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	2028      	movs	r0, #40	; 0x28
 800211c:	f001 fdd0 	bl	8003cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002120:	2028      	movs	r0, #40	; 0x28
 8002122:	f001 fde9 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800

08002140 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MX_I2C1_Init+0x50>)
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <MX_I2C1_Init+0x54>)
 8002148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_I2C1_Init+0x50>)
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_I2C1_Init+0x58>)
 800214e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_I2C1_Init+0x50>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_I2C1_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_I2C1_Init+0x50>)
 800215e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002162:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <MX_I2C1_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_I2C1_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <MX_I2C1_Init+0x50>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_I2C1_Init+0x50>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <MX_I2C1_Init+0x50>)
 800217e:	f002 fb6d 	bl	800485c <HAL_I2C_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002188:	f000 fc9c 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20004670 	.word	0x20004670
 8002194:	40005400 	.word	0x40005400
 8002198:	00061a80 	.word	0x00061a80

0800219c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_I2C_MspInit+0x84>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d12c      	bne.n	8002218 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_I2C_MspInit+0x88>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_I2C_MspInit+0x88>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_I2C_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e0:	2312      	movs	r3, #18
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ec:	2304      	movs	r3, #4
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	480c      	ldr	r0, [pc, #48]	; (8002228 <HAL_I2C_MspInit+0x8c>)
 80021f8:	f002 f97a 	bl	80044f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x88>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_I2C_MspInit+0x88>)
 8002206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220a:	6413      	str	r3, [r2, #64]	; 0x40
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_I2C_MspInit+0x88>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400

0800222c <vTaskSync>:
 */
int count_TOF0 = 0;
int count_task_TOF = 0;

void vTaskSync(void* p)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b087      	sub	sp, #28
 8002230:	af02      	add	r7, sp, #8
 8002232:	6078      	str	r0, [r7, #4]
	int i =0;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

	printf("Wait BTN \r\n");
 8002238:	4840      	ldr	r0, [pc, #256]	; (800233c <vTaskSync+0x110>)
 800223a:	f00c ff83 	bl	800f144 <puts>
	while(BTN == 0){
 800223e:	bf00      	nop
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <vTaskSync+0x114>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0fb      	beq.n	8002240 <vTaskSync+0x14>
		// Ne rien faire
	}
	printf("Start ! \r\n");
 8002248:	483e      	ldr	r0, [pc, #248]	; (8002344 <vTaskSync+0x118>)
 800224a:	f00c ff7b 	bl	800f144 <puts>

	while(1){
		//printf("TOF : %04d %04d %04d PH : %04ld %04ld %04ld NOISE : %04ld %04ld %04ld NORME : %04lu ANGLE : %03ld RED : %d X : %05d Y : %05d MOY : %04ld\r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter, Ph_Data[0], Ph_Data[1], Ph_Data[2], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_Norma, Ph_Angle, Red, X, Y, Ph_Max_Tr);
		printf("TOF : %04d %04d %04d  ||  count_TOF_0 %04d count_Task %04d \r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter,count_TOF0, count_task_TOF);
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <vTaskSync+0x11c>)
 8002250:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8002254:	4619      	mov	r1, r3
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <vTaskSync+0x11c>)
 8002258:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800225c:	4618      	mov	r0, r3
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <vTaskSync+0x11c>)
 8002260:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002264:	461c      	mov	r4, r3
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <vTaskSync+0x120>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a39      	ldr	r2, [pc, #228]	; (8002350 <vTaskSync+0x124>)
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	9201      	str	r2, [sp, #4]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4623      	mov	r3, r4
 8002274:	4602      	mov	r2, r0
 8002276:	4837      	ldr	r0, [pc, #220]	; (8002354 <vTaskSync+0x128>)
 8002278:	f00c fede 	bl	800f038 <iprintf>

		if(i%20 == 0){
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	4b36      	ldr	r3, [pc, #216]	; (8002358 <vTaskSync+0x12c>)
 8002280:	fb83 2301 	smull	r2, r3, r3, r1
 8002284:	10da      	asrs	r2, r3, #3
 8002286:	17cb      	asrs	r3, r1, #31
 8002288:	1ad2      	subs	r2, r2, r3
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	1aca      	subs	r2, r1, r3
 8002294:	2a00      	cmp	r2, #0
 8002296:	d107      	bne.n	80022a8 <vTaskSync+0x7c>
			xSemaphoreGive(semBinary_CMD);
 8002298:	4b30      	ldr	r3, [pc, #192]	; (800235c <vTaskSync+0x130>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	2300      	movs	r3, #0
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	f00a f973 	bl	800c58c <xQueueGenericSend>
 80022a6:	e041      	b.n	800232c <vTaskSync+0x100>
		}else if(i%21 == 0){//else if(i%20 == 12){
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <vTaskSync+0x134>)
 80022ac:	fb83 2301 	smull	r2, r3, r3, r1
 80022b0:	109a      	asrs	r2, r3, #2
 80022b2:	17cb      	asrs	r3, r1, #31
 80022b4:	1ad2      	subs	r2, r2, r3
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	00da      	lsls	r2, r3, #3
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	1a8a      	subs	r2, r1, r2
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d107      	bne.n	80022d6 <vTaskSync+0xaa>
			xSemaphoreGive(semBinary_TOF);
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <vTaskSync+0x138>)
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	2300      	movs	r3, #0
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	f00a f95c 	bl	800c58c <xQueueGenericSend>
 80022d4:	e02a      	b.n	800232c <vTaskSync+0x100>
		}else if(i%20 == 4){
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <vTaskSync+0x12c>)
 80022da:	fb83 2301 	smull	r2, r3, r3, r1
 80022de:	10da      	asrs	r2, r3, #3
 80022e0:	17cb      	asrs	r3, r1, #31
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	1aca      	subs	r2, r1, r3
 80022ee:	2a04      	cmp	r2, #4
 80022f0:	d107      	bne.n	8002302 <vTaskSync+0xd6>
			xSemaphoreGive(semBinary_Ph);
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <vTaskSync+0x13c>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	f00a f946 	bl	800c58c <xQueueGenericSend>
 8002300:	e014      	b.n	800232c <vTaskSync+0x100>
		}else if(i%20 == 8){
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <vTaskSync+0x12c>)
 8002306:	fb83 2301 	smull	r2, r3, r3, r1
 800230a:	10da      	asrs	r2, r3, #3
 800230c:	17cb      	asrs	r3, r1, #31
 800230e:	1ad2      	subs	r2, r2, r3
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	1aca      	subs	r2, r1, r3
 800231a:	2a08      	cmp	r2, #8
 800231c:	d106      	bne.n	800232c <vTaskSync+0x100>
			xSemaphoreGive(semBinary_RGB);
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <vTaskSync+0x140>)
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	f00a f930 	bl	800c58c <xQueueGenericSend>
		}

		i++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]

		vTaskDelay(1);
 8002332:	2001      	movs	r0, #1
 8002334:	f00a fde8 	bl	800cf08 <vTaskDelay>
		printf("TOF : %04d %04d %04d  ||  count_TOF_0 %04d count_Task %04d \r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter,count_TOF0, count_task_TOF);
 8002338:	e789      	b.n	800224e <vTaskSync+0x22>
 800233a:	bf00      	nop
 800233c:	08012b9c 	.word	0x08012b9c
 8002340:	20000780 	.word	0x20000780
 8002344:	08012ba8 	.word	0x08012ba8
 8002348:	20004728 	.word	0x20004728
 800234c:	20000784 	.word	0x20000784
 8002350:	20000788 	.word	0x20000788
 8002354:	08012bb4 	.word	0x08012bb4
 8002358:	66666667 	.word	0x66666667
 800235c:	200046c8 	.word	0x200046c8
 8002360:	30c30c31 	.word	0x30c30c31
 8002364:	20004bb4 	.word	0x20004bb4
 8002368:	20004bac 	.word	0x20004bac
 800236c:	200046cc 	.word	0x200046cc

08002370 <vTaskControl>:
	}
}


void vTaskControl(void * p)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(semBinary_CMD,portMAX_DELAY);
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <vTaskControl+0xf4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	4618      	mov	r0, r3
 8002382:	f00a fa01 	bl	800c788 <xQueueSemaphoreTake>
		//		printf("timeDiff : %lf ms \r\n",(double)timeDiff/1000000.0);
		//		printf("\r\n");
		//xSemaphoreGive(semBinary_Ph);

		// Calcul direction :
		Ph_X = (int)(Ph_Norma * cos(Ph_Angle));
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <vTaskControl+0xf8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8c2 	bl	8000514 <__aeabi_ui2d>
 8002390:	4604      	mov	r4, r0
 8002392:	460d      	mov	r5, r1
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <vTaskControl+0xfc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8cb 	bl	8000534 <__aeabi_i2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	ec43 2b10 	vmov	d0, r2, r3
 80023a6:	f00f f813 	bl	80113d0 <cos>
 80023aa:	ec53 2b10 	vmov	r2, r3, d0
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fe f929 	bl	8000608 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fbd3 	bl	8000b68 <__aeabi_d2iz>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a2a      	ldr	r2, [pc, #168]	; (8002470 <vTaskControl+0x100>)
 80023c6:	6013      	str	r3, [r2, #0]
		Ph_Y = (int)(Ph_Norma * sin(Ph_Angle));
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <vTaskControl+0xf8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8a1 	bl	8000514 <__aeabi_ui2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <vTaskControl+0xfc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f8aa 	bl	8000534 <__aeabi_i2d>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	ec43 2b10 	vmov	d0, r2, r3
 80023e8:	f00f f842 	bl	8011470 <sin>
 80023ec:	ec53 2b10 	vmov	r2, r3, d0
 80023f0:	4620      	mov	r0, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7fe f908 	bl	8000608 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fbb2 	bl	8000b68 <__aeabi_d2iz>
 8002404:	4603      	mov	r3, r0
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <vTaskControl+0x104>)
 8002408:	6013      	str	r3, [r2, #0]

		int X0 = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
		int X1 = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
		int X2 = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
		int Y0 = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
		int Y1 = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
		int Y2 = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
		if (TOF_Sensor[0].rangeMillimeter < D_TOF)
		{

		}

		X = Ph_X + X0 + X1 + X2;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <vTaskControl+0x100>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	441a      	add	r2, r3
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	441a      	add	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4413      	add	r3, r2
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <vTaskControl+0x108>)
 8002434:	6013      	str	r3, [r2, #0]
		Y = Ph_Y + Y0 + Y1 + Y2;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <vTaskControl+0x104>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	441a      	add	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	441a      	add	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4413      	add	r3, r2
 8002446:	4a0d      	ldr	r2, [pc, #52]	; (800247c <vTaskControl+0x10c>)
 8002448:	6013      	str	r3, [r2, #0]
		// Commande moteur :
		Red = 0;
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <vTaskControl+0x110>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
		if (RGB_Sensor.isFloorRed != 0)
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <vTaskControl+0x114>)
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d08e      	beq.n	8002378 <vTaskControl+0x8>
		{
			// RED !
			Red = 1;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <vTaskControl+0x110>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
	while(1){
 8002460:	e78a      	b.n	8002378 <vTaskControl+0x8>
 8002462:	bf00      	nop
 8002464:	200046c8 	.word	0x200046c8
 8002468:	200045b8 	.word	0x200045b8
 800246c:	200045bc 	.word	0x200045bc
 8002470:	200046c4 	.word	0x200046c4
 8002474:	20004bb8 	.word	0x20004bb8
 8002478:	20004bbc 	.word	0x20004bbc
 800247c:	200046d4 	.word	0x200046d4
 8002480:	20004ba8 	.word	0x20004ba8
 8002484:	200046d8 	.word	0x200046d8

08002488 <vTaskToF>:
 * TOF_Sensor[0].rangeMillimeter
 * TOF_Sensor[1].rangeMillimeter
 * TOF_Sensor[2].rangeMillimeter
 */
void vTaskToF(void * p)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_TOF_1 = uxTaskGetStackHighWaterMark(NULL);
 8002490:	2000      	movs	r0, #0
 8002492:	f00b f947 	bl	800d724 <uxTaskGetStackHighWaterMark>
 8002496:	4603      	mov	r3, r0
 8002498:	4a31      	ldr	r2, [pc, #196]	; (8002560 <vTaskToF+0xd8>)
 800249a:	6013      	str	r3, [r2, #0]

	for(int i=0; i<TOF_nbOfSensor; i++){
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e010      	b.n	80024c4 <vTaskToF+0x3c>
		HAL_NVIC_EnableIRQ(TOF_Sensor[i].EXTI_IRQn);
 80024a2:	4a30      	ldr	r2, [pc, #192]	; (8002564 <vTaskToF+0xdc>)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73b9 	add.w	r3, r3, #370	; 0x172
 80024b4:	f993 3000 	ldrsb.w	r3, [r3]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fc1d 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	ddeb      	ble.n	80024a2 <vTaskToF+0x1a>
	}
	//int j =0;
	while(1){
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <vTaskToF+0xe0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f04f 31ff 	mov.w	r1, #4294967295
 80024d2:	4618      	mov	r0, r3
 80024d4:	f00a f958 	bl	800c788 <xQueueSemaphoreTake>

count_task_TOF = count_TOF0;
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <vTaskToF+0xe4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <vTaskToF+0xe8>)
 80024de:	6013      	str	r3, [r2, #0]
		// Durée max observée : 2.319950ms
		// Durée min observée : 1.225000us
		for(int i=0; i<TOF_nbOfSensor; i++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e031      	b.n	800254a <vTaskToF+0xc2>
			if(TOF_Sensor[i].it.flag){
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <vTaskToF+0xdc>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d022      	beq.n	8002544 <vTaskToF+0xbc>
				xSemaphoreTake(semMutex,portMAX_DELAY);
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <vTaskToF+0xec>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 31ff 	mov.w	r1, #4294967295
 8002506:	4618      	mov	r0, r3
 8002508:	f00a f93e 	bl	800c788 <xQueueSemaphoreTake>
				TOF_SetDistance_mm(&TOF_Sensor[i]);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <vTaskToF+0xdc>)
 8002518:	4413      	add	r3, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fbd6 	bl	8001ccc <TOF_SetDistance_mm>
				TOF_Sensor[i].it.flag = 0;
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <vTaskToF+0xdc>)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(semMutex);
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <vTaskToF+0xec>)
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	f00a f824 	bl	800c58c <xQueueGenericSend>
		for(int i=0; i<TOF_nbOfSensor; i++){
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b02      	cmp	r3, #2
 800254e:	ddca      	ble.n	80024e6 <vTaskToF+0x5e>
			}
			//TOF_Sensor[i].rangeMillimeter = j;
			//j++;
		}
		uxHighWaterMark_TOF_2 = uxTaskGetStackHighWaterMark(NULL);
 8002550:	2000      	movs	r0, #0
 8002552:	f00b f8e7 	bl	800d724 <uxTaskGetStackHighWaterMark>
 8002556:	4603      	mov	r3, r0
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <vTaskToF+0xf0>)
 800255a:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 800255c:	e7b5      	b.n	80024ca <vTaskToF+0x42>
 800255e:	bf00      	nop
 8002560:	200046d0 	.word	0x200046d0
 8002564:	20004728 	.word	0x20004728
 8002568:	20004bb4 	.word	0x20004bb4
 800256c:	20000784 	.word	0x20000784
 8002570:	20000788 	.word	0x20000788
 8002574:	20004ba0 	.word	0x20004ba0
 8002578:	20004ba4 	.word	0x20004ba4

0800257c <vTaskPhotodiodes>:
	}
}


void vTaskPhotodiodes(void * p)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	// Orientation
	//vTaskDelay(5);
	//Ph_Init();

	while(1){
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <vTaskPhotodiodes+0x2c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f00a f8fb 	bl	800c788 <xQueueSemaphoreTake>

		Ph_GetMeasure(Ph_Data);
 8002592:	4806      	ldr	r0, [pc, #24]	; (80025ac <vTaskPhotodiodes+0x30>)
 8002594:	f7fe fce8 	bl	8000f68 <Ph_GetMeasure>
		//printf("--PH_DataNoise : %04lu, %04lu, %04lu\r\n", Ph_Data[0], Ph_Data[1], Ph_Data[2]);
		Ph_GetBestAngle(Ph_Data);
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <vTaskPhotodiodes+0x30>)
 800259a:	f7fe fdcf 	bl	800113c <Ph_GetBestAngle>
		Ph_GetNorma(Ph_Data);
 800259e:	4803      	ldr	r0, [pc, #12]	; (80025ac <vTaskPhotodiodes+0x30>)
 80025a0:	f7fe fee6 	bl	8001370 <Ph_GetNorma>
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 80025a4:	e7ee      	b.n	8002584 <vTaskPhotodiodes+0x8>
 80025a6:	bf00      	nop
 80025a8:	20004bac 	.word	0x20004bac
 80025ac:	200044f0 	.word	0x200044f0

080025b0 <vTaskCouleur>:
 * Réalise les mesures de couleur
 * Indique si le sol est rouge avec la variable globale :
 * RGB_Sensor.isFloorRed
 */
void vTaskCouleur(void * p)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_RGB_1 = uxTaskGetStackHighWaterMark(NULL);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f00b f8b3 	bl	800d724 <uxTaskGetStackHighWaterMark>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <vTaskCouleur+0x58>)
 80025c2:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(RGB_Sensor.Timer_Handle, RGB_Sensor.Timer_Channel);
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <vTaskCouleur+0x5c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <vTaskCouleur+0x5c>)
 80025ca:	6852      	ldr	r2, [r2, #4]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fe82 	bl	80062d8 <HAL_TIM_IC_Start_IT>

	//HAL_GPIO_WritePin(RGB_Sensor.LED_GPIOx, RGB_Sensor.LED_GPIO_Pin, RESET);

	while(1){
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <vTaskCouleur+0x60>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	4618      	mov	r0, r3
 80025de:	f00a f8d3 	bl	800c788 <xQueueSemaphoreTake>

		//printf("vTask_RGB \r\n");

		if(RGB_Sensor.it.flag){
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <vTaskCouleur+0x5c>)
 80025e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <vTaskCouleur+0x4a>
			// Bloc traitement IT : 10.15 us
			RGB_IsTheFloorRed(&RGB_Sensor);
 80025ec:	4807      	ldr	r0, [pc, #28]	; (800260c <vTaskCouleur+0x5c>)
 80025ee:	f7ff f8c1 	bl	8001774 <RGB_IsTheFloorRed>
			RGB_Sensor.it.flag = 0;
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <vTaskCouleur+0x5c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			//
		}
		uxHighWaterMark_RGB_2 = uxTaskGetStackHighWaterMark(NULL);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f00b f892 	bl	800d724 <uxTaskGetStackHighWaterMark>
 8002600:	4603      	mov	r3, r0
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <vTaskCouleur+0x64>)
 8002604:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 8002606:	e7e5      	b.n	80025d4 <vTaskCouleur+0x24>
 8002608:	20004b9c 	.word	0x20004b9c
 800260c:	200046d8 	.word	0x200046d8
 8002610:	200046cc 	.word	0x200046cc
 8002614:	20004bb0 	.word	0x20004bb0

08002618 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	TaskHandle_t xHandle = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002622:	f000 fdaf 	bl	8003184 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002626:	f000 f93f 	bl	80028a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800262a:	f7ff fcb9 	bl	8001fa0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800262e:	f000 fd0d 	bl	800304c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8002632:	f000 fbf7 	bl	8002e24 <MX_TIM3_Init>
	MX_DMA_Init();
 8002636:	f7ff fc55 	bl	8001ee4 <MX_DMA_Init>
	MX_ADC1_Init();
 800263a:	f7ff fb5f 	bl	8001cfc <MX_ADC1_Init>
	MX_I2C1_Init();
 800263e:	f7ff fd7f 	bl	8002140 <MX_I2C1_Init>
	MX_TIM5_Init();
 8002642:	f000 fc43 	bl	8002ecc <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\n --------------- BOTterfly --------------- \r\n");
 8002646:	4877      	ldr	r0, [pc, #476]	; (8002824 <main+0x20c>)
 8002648:	f00c fd7c 	bl	800f144 <puts>

	// INITIALISATION DES CAPTEURS ET DU MOTEUR :
	printf("Initialization \r\n");
 800264c:	4876      	ldr	r0, [pc, #472]	; (8002828 <main+0x210>)
 800264e:	f00c fd79 	bl	800f144 <puts>

	// Bloc TOF_Init : 1735.410150 ms
	TOF_Init_SetI2C(&TOF_Sensor[0], &hi2c1, 0x55);
 8002652:	2255      	movs	r2, #85	; 0x55
 8002654:	4975      	ldr	r1, [pc, #468]	; (800282c <main+0x214>)
 8002656:	4876      	ldr	r0, [pc, #472]	; (8002830 <main+0x218>)
 8002658:	f7ff f958 	bl	800190c <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[0], TOF_XSHUT0_GPIO_Port, TOF_XSHUT0_Pin, TOF_GPIOI0_GPIO_Port, TOF_GPIOI0_Pin);
 800265c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4b74      	ldr	r3, [pc, #464]	; (8002834 <main+0x21c>)
 8002664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002668:	4972      	ldr	r1, [pc, #456]	; (8002834 <main+0x21c>)
 800266a:	4871      	ldr	r0, [pc, #452]	; (8002830 <main+0x218>)
 800266c:	f7ff f964 	bl	8001938 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[0], TOF_GPIOI0_EXTI_IRQn);
 8002670:	2128      	movs	r1, #40	; 0x28
 8002672:	486f      	ldr	r0, [pc, #444]	; (8002830 <main+0x218>)
 8002674:	f7ff f97f 	bl	8001976 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[1], &hi2c1, 0x58);
 8002678:	2258      	movs	r2, #88	; 0x58
 800267a:	496c      	ldr	r1, [pc, #432]	; (800282c <main+0x214>)
 800267c:	486e      	ldr	r0, [pc, #440]	; (8002838 <main+0x220>)
 800267e:	f7ff f945 	bl	800190c <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[1], TOF_XSHUT1_GPIO_Port, TOF_XSHUT1_Pin, TOF_GPIOI1_GPIO_Port, TOF_GPIOI1_Pin);
 8002682:	2301      	movs	r3, #1
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	4b6d      	ldr	r3, [pc, #436]	; (800283c <main+0x224>)
 8002688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268c:	4969      	ldr	r1, [pc, #420]	; (8002834 <main+0x21c>)
 800268e:	486a      	ldr	r0, [pc, #424]	; (8002838 <main+0x220>)
 8002690:	f7ff f952 	bl	8001938 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[1], TOF_GPIOI1_EXTI_IRQn);
 8002694:	2106      	movs	r1, #6
 8002696:	4868      	ldr	r0, [pc, #416]	; (8002838 <main+0x220>)
 8002698:	f7ff f96d 	bl	8001976 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[2], &hi2c1, 0x5b);
 800269c:	225b      	movs	r2, #91	; 0x5b
 800269e:	4963      	ldr	r1, [pc, #396]	; (800282c <main+0x214>)
 80026a0:	4867      	ldr	r0, [pc, #412]	; (8002840 <main+0x228>)
 80026a2:	f7ff f933 	bl	800190c <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[2], TOF_XSHUT2_GPIO_Port, TOF_XSHUT2_Pin, TOF_GPIOI2_GPIO_Port, TOF_GPIOI2_Pin);
 80026a6:	2302      	movs	r3, #2
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	4b64      	ldr	r3, [pc, #400]	; (800283c <main+0x224>)
 80026ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b0:	4964      	ldr	r1, [pc, #400]	; (8002844 <main+0x22c>)
 80026b2:	4863      	ldr	r0, [pc, #396]	; (8002840 <main+0x228>)
 80026b4:	f7ff f940 	bl	8001938 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[2], TOF_GPIOI2_EXTI_IRQn);
 80026b8:	2107      	movs	r1, #7
 80026ba:	4861      	ldr	r0, [pc, #388]	; (8002840 <main+0x228>)
 80026bc:	f7ff f95b 	bl	8001976 <TOF_Init_SetEXTI>

	TOF_Init(TOF_Sensor);
 80026c0:	485b      	ldr	r0, [pc, #364]	; (8002830 <main+0x218>)
 80026c2:	f7ff f969 	bl	8001998 <TOF_Init>
	//

	// Bloc RGB_Init : 401.954350 ms
	RGB_Init_SetTimer(&RGB_Sensor, &htim3, TIM_CHANNEL_1);
 80026c6:	2200      	movs	r2, #0
 80026c8:	495f      	ldr	r1, [pc, #380]	; (8002848 <main+0x230>)
 80026ca:	4860      	ldr	r0, [pc, #384]	; (800284c <main+0x234>)
 80026cc:	f7fe fed2 	bl	8001474 <RGB_Init_SetTimer>

	RGB_Init_SetParamGPIOs(&RGB_Sensor, RGB_OE_GPIO_Port, RGB_OE_Pin, RGB_LED_GPIO_Port, RGB_LED_Pin);
 80026d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4b59      	ldr	r3, [pc, #356]	; (800283c <main+0x224>)
 80026d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026dc:	4957      	ldr	r1, [pc, #348]	; (800283c <main+0x224>)
 80026de:	485b      	ldr	r0, [pc, #364]	; (800284c <main+0x234>)
 80026e0:	f7fe fedb 	bl	800149a <RGB_Init_SetParamGPIOs>
	RGB_Init_SetOutFreqGPIOs(&RGB_Sensor, RGB_S0_GPIO_Port, RGB_S0_Pin, RGB_S1_GPIO_Port, RGB_S1_Pin);
 80026e4:	2340      	movs	r3, #64	; 0x40
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4b56      	ldr	r3, [pc, #344]	; (8002844 <main+0x22c>)
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	4955      	ldr	r1, [pc, #340]	; (8002844 <main+0x22c>)
 80026ee:	4857      	ldr	r0, [pc, #348]	; (800284c <main+0x234>)
 80026f0:	f7fe feee 	bl	80014d0 <RGB_Init_SetOutFreqGPIOs>
	RGB_Init_SetColorFilterGPIOs(&RGB_Sensor, RGB_S2_GPIO_Port, RGB_S2_Pin, RGB_S3_GPIO_Port, RGB_S3_Pin);
 80026f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4b50      	ldr	r3, [pc, #320]	; (800283c <main+0x224>)
 80026fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002700:	494e      	ldr	r1, [pc, #312]	; (800283c <main+0x224>)
 8002702:	4852      	ldr	r0, [pc, #328]	; (800284c <main+0x234>)
 8002704:	f7fe feff 	bl	8001506 <RGB_Init_SetColorFilterGPIOs>

	RGB_Init(&RGB_Sensor);
 8002708:	4850      	ldr	r0, [pc, #320]	; (800284c <main+0x234>)
 800270a:	f7fe ff17 	bl	800153c <RGB_Init>

	Ph_Init();
 800270e:	f7fe fbef 	bl	8000ef0 <Ph_Init>

	// Init Motor
	// Init Ph

	// CRÉATION DES SÉMAPHORES :
	printf("Creation Semaphore \r\n");
 8002712:	484f      	ldr	r0, [pc, #316]	; (8002850 <main+0x238>)
 8002714:	f00c fd16 	bl	800f144 <puts>

	semBinary_CMD = xSemaphoreCreateBinary();
 8002718:	2203      	movs	r2, #3
 800271a:	2100      	movs	r1, #0
 800271c:	2001      	movs	r0, #1
 800271e:	f009 fea9 	bl	800c474 <xQueueGenericCreate>
 8002722:	4603      	mov	r3, r0
 8002724:	4a4b      	ldr	r2, [pc, #300]	; (8002854 <main+0x23c>)
 8002726:	6013      	str	r3, [r2, #0]
	semBinary_TOF = xSemaphoreCreateBinary();
 8002728:	2203      	movs	r2, #3
 800272a:	2100      	movs	r1, #0
 800272c:	2001      	movs	r0, #1
 800272e:	f009 fea1 	bl	800c474 <xQueueGenericCreate>
 8002732:	4603      	mov	r3, r0
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <main+0x240>)
 8002736:	6013      	str	r3, [r2, #0]
	semBinary_Ph = xSemaphoreCreateBinary();
 8002738:	2203      	movs	r2, #3
 800273a:	2100      	movs	r1, #0
 800273c:	2001      	movs	r0, #1
 800273e:	f009 fe99 	bl	800c474 <xQueueGenericCreate>
 8002742:	4603      	mov	r3, r0
 8002744:	4a45      	ldr	r2, [pc, #276]	; (800285c <main+0x244>)
 8002746:	6013      	str	r3, [r2, #0]
	semBinary_RGB = xSemaphoreCreateBinary();
 8002748:	2203      	movs	r2, #3
 800274a:	2100      	movs	r1, #0
 800274c:	2001      	movs	r0, #1
 800274e:	f009 fe91 	bl	800c474 <xQueueGenericCreate>
 8002752:	4603      	mov	r3, r0
 8002754:	4a42      	ldr	r2, [pc, #264]	; (8002860 <main+0x248>)
 8002756:	6013      	str	r3, [r2, #0]

	semMutex = xSemaphoreCreateMutex();
 8002758:	2001      	movs	r0, #1
 800275a:	f009 fefe 	bl	800c55a <xQueueCreateMutex>
 800275e:	4603      	mov	r3, r0
 8002760:	4a40      	ldr	r2, [pc, #256]	; (8002864 <main+0x24c>)
 8002762:	6013      	str	r3, [r2, #0]

	// CRÉATION DES BOÎTES AUX LETTRES :


	// CRÉATION DES TÂCHES :
	printf("Creation Task \r\n");
 8002764:	4840      	ldr	r0, [pc, #256]	; (8002868 <main+0x250>)
 8002766:	f00c fced 	bl	800f144 <puts>

	if (xTaskCreate(vTaskSync, "Sync", SYNC_STACK_SIZE, (void *)NULL, 100, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2300      	movs	r3, #0
 8002774:	22fa      	movs	r2, #250	; 0xfa
 8002776:	493d      	ldr	r1, [pc, #244]	; (800286c <main+0x254>)
 8002778:	483d      	ldr	r0, [pc, #244]	; (8002870 <main+0x258>)
 800277a:	f00a fa70 	bl	800cc5e <xTaskCreate>
 800277e:	4603      	mov	r3, r0
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d102      	bne.n	800278c <main+0x174>
	{
		printf("Task Sync Creation error : Could not allocate required memory\r\n");
 8002786:	483b      	ldr	r0, [pc, #236]	; (8002874 <main+0x25c>)
 8002788:	f00c fcdc 	bl	800f144 <puts>
	}
	if (xTaskCreate(vTaskControl, "Control", CMD_STACK_SIZE, (void *)NULL, 80, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2350      	movs	r3, #80	; 0x50
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800279a:	4937      	ldr	r1, [pc, #220]	; (8002878 <main+0x260>)
 800279c:	4837      	ldr	r0, [pc, #220]	; (800287c <main+0x264>)
 800279e:	f00a fa5e 	bl	800cc5e <xTaskCreate>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d102      	bne.n	80027b0 <main+0x198>
	{
		printf("Task Control Creation error : Could not allocate required memory\r\n");
 80027aa:	4835      	ldr	r0, [pc, #212]	; (8002880 <main+0x268>)
 80027ac:	f00c fcca 	bl	800f144 <puts>
	}
	if (xTaskCreate(vTaskToF, "ToF", TOF_STACK_SIZE, (void *)NULL, 60, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	233c      	movs	r3, #60	; 0x3c
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027be:	4931      	ldr	r1, [pc, #196]	; (8002884 <main+0x26c>)
 80027c0:	4831      	ldr	r0, [pc, #196]	; (8002888 <main+0x270>)
 80027c2:	f00a fa4c 	bl	800cc5e <xTaskCreate>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d102      	bne.n	80027d4 <main+0x1bc>
	{
		printf("Task ToF Creation error : Could not allocate required memory\r\n");
 80027ce:	482f      	ldr	r0, [pc, #188]	; (800288c <main+0x274>)
 80027d0:	f00c fcb8 	bl	800f144 <puts>
	}
	if (xTaskCreate(vTaskPhotodiodes, "Photodiodes", Ph_STACK_SIZE, (void *)NULL, 40, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2328      	movs	r3, #40	; 0x28
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2300      	movs	r3, #0
 80027de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027e2:	492b      	ldr	r1, [pc, #172]	; (8002890 <main+0x278>)
 80027e4:	482b      	ldr	r0, [pc, #172]	; (8002894 <main+0x27c>)
 80027e6:	f00a fa3a 	bl	800cc5e <xTaskCreate>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d102      	bne.n	80027f8 <main+0x1e0>
	{
		printf("Task Photodiode Creation error : Could not allocate required memory\r\n");
 80027f2:	4829      	ldr	r0, [pc, #164]	; (8002898 <main+0x280>)
 80027f4:	f00c fca6 	bl	800f144 <puts>
	}
	if (xTaskCreate(vTaskCouleur, "Couleur", RGB_STACK_SIZE, (void *)NULL, 20, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2314      	movs	r3, #20
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2300      	movs	r3, #0
 8002802:	2250      	movs	r2, #80	; 0x50
 8002804:	4925      	ldr	r1, [pc, #148]	; (800289c <main+0x284>)
 8002806:	4826      	ldr	r0, [pc, #152]	; (80028a0 <main+0x288>)
 8002808:	f00a fa29 	bl	800cc5e <xTaskCreate>
 800280c:	4603      	mov	r3, r0
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d102      	bne.n	800281a <main+0x202>
	{
		printf("Task Couleur Creation error : Could not allocate required memory\r\n");
 8002814:	4823      	ldr	r0, [pc, #140]	; (80028a4 <main+0x28c>)
 8002816:	f00c fc95 	bl	800f144 <puts>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800281a:	f7ff fb9d 	bl	8001f58 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 800281e:	f009 fca6 	bl	800c16e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002822:	e7fe      	b.n	8002822 <main+0x20a>
 8002824:	08012bf4 	.word	0x08012bf4
 8002828:	08012c24 	.word	0x08012c24
 800282c:	20004670 	.word	0x20004670
 8002830:	20004728 	.word	0x20004728
 8002834:	40020000 	.word	0x40020000
 8002838:	200048a4 	.word	0x200048a4
 800283c:	40020400 	.word	0x40020400
 8002840:	20004a20 	.word	0x20004a20
 8002844:	40020800 	.word	0x40020800
 8002848:	20004c50 	.word	0x20004c50
 800284c:	200046d8 	.word	0x200046d8
 8002850:	08012c38 	.word	0x08012c38
 8002854:	200046c8 	.word	0x200046c8
 8002858:	20004bb4 	.word	0x20004bb4
 800285c:	20004bac 	.word	0x20004bac
 8002860:	200046cc 	.word	0x200046cc
 8002864:	20004ba0 	.word	0x20004ba0
 8002868:	08012c50 	.word	0x08012c50
 800286c:	08012c60 	.word	0x08012c60
 8002870:	0800222d 	.word	0x0800222d
 8002874:	08012c68 	.word	0x08012c68
 8002878:	08012ca8 	.word	0x08012ca8
 800287c:	08002371 	.word	0x08002371
 8002880:	08012cb0 	.word	0x08012cb0
 8002884:	08012cf4 	.word	0x08012cf4
 8002888:	08002489 	.word	0x08002489
 800288c:	08012cf8 	.word	0x08012cf8
 8002890:	08012d38 	.word	0x08012d38
 8002894:	0800257d 	.word	0x0800257d
 8002898:	08012d44 	.word	0x08012d44
 800289c:	08012d8c 	.word	0x08012d8c
 80028a0:	080025b1 	.word	0x080025b1
 80028a4:	08012d94 	.word	0x08012d94

080028a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b094      	sub	sp, #80	; 0x50
 80028ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ae:	f107 0320 	add.w	r3, r7, #32
 80028b2:	2230      	movs	r2, #48	; 0x30
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f00b fef1 	bl	800e69e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <SystemClock_Config+0xc8>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a26      	ldr	r2, [pc, #152]	; (8002970 <SystemClock_Config+0xc8>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <SystemClock_Config+0xc8>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <SystemClock_Config+0xcc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <SystemClock_Config+0xcc>)
 80028f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <SystemClock_Config+0xcc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002908:	2301      	movs	r3, #1
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800290c:	2310      	movs	r3, #16
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002910:	2302      	movs	r3, #2
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002914:	2300      	movs	r3, #0
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002918:	2308      	movs	r3, #8
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 800291c:	2350      	movs	r3, #80	; 0x50
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002920:	2302      	movs	r3, #2
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002924:	2304      	movs	r3, #4
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002928:	f107 0320 	add.w	r3, r7, #32
 800292c:	4618      	mov	r0, r3
 800292e:	f002 ff2b 	bl	8005788 <HAL_RCC_OscConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002938:	f000 f8c4 	bl	8002ac4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800293c:	230f      	movs	r3, #15
 800293e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002940:	2302      	movs	r3, #2
 8002942:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f003 f98d 	bl	8005c78 <HAL_RCC_ClockConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8002964:	f000 f8ae 	bl	8002ac4 <Error_Handler>
	}
}
 8002968:	bf00      	nop
 800296a:	3750      	adds	r7, #80	; 0x50
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000

08002978 <HAL_TIM_IC_CaptureCallback>:
uint16_t icVal01 = 0;

uint8_t countTime = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	// Durée de l'IT : 1.550000us ou 1.325000us
	if(htim->Instance == RGB_Sensor.Timer_Handle->Instance)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d12f      	bne.n	80029ee <HAL_TIM_IC_CaptureCallback+0x76>
	{
		if(RGB_Sensor.it.isFirstCaptured == 0){
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10e      	bne.n	80029b6 <HAL_TIM_IC_CaptureCallback+0x3e>
			icVal01 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f004 f820 	bl	80069e4 <HAL_TIM_ReadCapturedValue>
 80029a4:	4603      	mov	r3, r0
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x84>)
 80029aa:	801a      	strh	r2, [r3, #0]
			RGB_Sensor.it.isFirstCaptured = 1;
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);

			RGB_Sensor.it.flag = 1;
		}
	}
}
 80029b4:	e01b      	b.n	80029ee <HAL_TIM_IC_CaptureCallback+0x76>
			RGB_Sensor.it.icVal1 = icVal01;
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_TIM_IC_CaptureCallback+0x84>)
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80029bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			RGB_Sensor.it.icVal2 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f004 f80c 	bl	80069e4 <HAL_TIM_ReadCapturedValue>
 80029cc:	4603      	mov	r3, r0
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80029d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			RGB_Sensor.it.isFirstCaptured = 0;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
			RGB_Sensor.it.flag = 1;
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_TIM_IC_CaptureCallback+0x80>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200046d8 	.word	0x200046d8
 80029fc:	2000078c 	.word	0x2000078c

08002a00 <HAL_GPIO_EXTI_Callback>:


// VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
	// Durée de l'IT : 0.500000us
	if(GPIO_Pin == TOF_Sensor[0].EXTI_GPIO_Pin){
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002a0c:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d109      	bne.n	8002a2a <HAL_GPIO_EXTI_Callback+0x2a>
		count_TOF0++;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_GPIO_EXTI_Callback+0x74>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_GPIO_EXTI_Callback+0x74>)
 8002a1e:	6013      	str	r3, [r2, #0]
		// IT toutes les 33ms
		TOF_Sensor[0].it.flag = 1;
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	}

	else if(GPIO_Pin == BTN_Pin){
		BTN = 1;
	}
}
 8002a28:	e01c      	b.n	8002a64 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOF_Sensor[1].EXTI_GPIO_Pin){
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002a2c:	f8b3 32ec 	ldrh.w	r3, [r3, #748]	; 0x2ec
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d104      	bne.n	8002a40 <HAL_GPIO_EXTI_Callback+0x40>
		TOF_Sensor[1].it.flag = 1;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
}
 8002a3e:	e011      	b.n	8002a64 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == TOF_Sensor[2].EXTI_GPIO_Pin){
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002a42:	f8b3 3468 	ldrh.w	r3, [r3, #1128]	; 0x468
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d104      	bne.n	8002a56 <HAL_GPIO_EXTI_Callback+0x56>
		TOF_Sensor[2].it.flag = 1;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
}
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == BTN_Pin){
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5c:	d102      	bne.n	8002a64 <HAL_GPIO_EXTI_Callback+0x64>
		BTN = 1;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_GPIO_EXTI_Callback+0x78>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	20004728 	.word	0x20004728
 8002a74:	20000784 	.word	0x20000784
 8002a78:	20000780 	.word	0x20000780

08002a7c <__io_putchar>:

int __io_putchar(int ch)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002a84:	1d39      	adds	r1, r7, #4
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <__io_putchar+0x20>)
 8002a8e:	f004 fb38 	bl	8007102 <HAL_UART_Transmit>
	return ch;
 8002a92:	687b      	ldr	r3, [r7, #4]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20004c98 	.word	0x20004c98

08002aa0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002ab2:	f000 fb89 	bl	80031c8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40014800 	.word	0x40014800

08002ac4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002acc:	e7fe      	b.n	8002acc <Error_Handler+0x8>
	...

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_MspInit+0x54>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <HAL_MspInit+0x54>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_MspInit+0x54>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_MspInit+0x54>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_MspInit+0x54>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_MspInit+0x54>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	210f      	movs	r1, #15
 8002b12:	f06f 0001 	mvn.w	r0, #1
 8002b16:	f001 f8d3 	bl	8003cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800

08002b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	201a      	movs	r0, #26
 8002b3e:	f001 f8bf 	bl	8003cc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b42:	201a      	movs	r0, #26
 8002b44:	f001 f8d8 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_InitTick+0xa0>)
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_InitTick+0xa0>)
 8002b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b56:	6453      	str	r3, [r2, #68]	; 0x44
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_InitTick+0xa0>)
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b64:	f107 0210 	add.w	r2, r7, #16
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fa7e 	bl	8006070 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b74:	f003 fa68 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 8002b78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_InitTick+0xa4>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	3b01      	subs	r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_InitTick+0xac>)
 8002b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b94:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8002ba8:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002baa:	f003 fa93 	bl	80060d4 <HAL_TIM_Base_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002bb4:	4806      	ldr	r0, [pc, #24]	; (8002bd0 <HAL_InitTick+0xa8>)
 8002bb6:	f003 fadd 	bl	8006174 <HAL_TIM_Base_Start_IT>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	e000      	b.n	8002bc0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	431bde83 	.word	0x431bde83
 8002bd0:	20004bc0 	.word	0x20004bc0
 8002bd4:	40014800 	.word	0x40014800

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <NMI_Handler+0x4>

08002bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler+0x4>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <MemManage_Handler+0x4>

08002bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f001 fe0f 	bl	800482c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c16:	2002      	movs	r0, #2
 8002c18:	f001 fe08 	bl	800482c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002c26:	f003 fc71 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20004bc0 	.word	0x20004bc0

08002c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <TIM3_IRQHandler+0x10>)
 8002c3a:	f003 fc67 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20004c50 	.word	0x20004c50

08002c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c50:	f001 fdec 	bl	800482c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002c54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c58:	f001 fde8 	bl	800482c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA2_Stream0_IRQHandler+0x10>)
 8002c66:	f001 f9d9 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000460c 	.word	0x2000460c

08002c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
	return 1;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_kill>:

int _kill(int pid, int sig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c8e:	f00b fbd5 	bl	800e43c <__errno>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2216      	movs	r2, #22
 8002c96:	601a      	str	r2, [r3, #0]
	return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_exit>:

void _exit (int status)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ffe7 	bl	8002c84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cb6:	e7fe      	b.n	8002cb6 <_exit+0x12>

08002cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e00a      	b.n	8002ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cca:	f3af 8000 	nop.w
 8002cce:	4601      	mov	r1, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	60ba      	str	r2, [r7, #8]
 8002cd6:	b2ca      	uxtb	r2, r1
 8002cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dbf0      	blt.n	8002cca <_read+0x12>
	}

return len;
 8002ce8:	687b      	ldr	r3, [r7, #4]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e009      	b.n	8002d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff feb5 	bl	8002a7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf1      	blt.n	8002d04 <_write+0x12>
	}
	return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_close>:

int _close(int file)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	605a      	str	r2, [r3, #4]
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_isatty>:

int _isatty(int file)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f00b fb3a 	bl	800e43c <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20020000 	.word	0x20020000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	20000790 	.word	0x20000790
 8002dfc:	20004d30 	.word	0x20004d30

08002e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <SystemInit+0x20>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <SystemInit+0x20>)
 8002e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e42:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <MX_TIM3_Init+0xa4>)
 8002e44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e48:	224f      	movs	r2, #79	; 0x4f
 8002e4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e66:	4817      	ldr	r0, [pc, #92]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e68:	f003 f9e6 	bl	8006238 <HAL_TIM_IC_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e72:	f7ff fe27 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4619      	mov	r1, r3
 8002e84:	480f      	ldr	r0, [pc, #60]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e86:	f004 f86d 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e90:	f7ff fe18 	bl	8002ac4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002eac:	f003 fc36 	bl	800671c <HAL_TIM_IC_ConfigChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002eb6:	f7ff fe05 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20004c50 	.word	0x20004c50
 8002ec8:	40000400 	.word	0x40000400

08002ecc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002eea:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <MX_TIM5_Init+0x98>)
 8002eec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f0e:	4814      	ldr	r0, [pc, #80]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002f10:	f003 f8e0 	bl	80060d4 <HAL_TIM_Base_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002f1a:	f7ff fdd3 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f24:	f107 0308 	add.w	r3, r7, #8
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480d      	ldr	r0, [pc, #52]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002f2c:	f003 fc92 	bl	8006854 <HAL_TIM_ConfigClockSource>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002f36:	f7ff fdc5 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f42:	463b      	mov	r3, r7
 8002f44:	4619      	mov	r1, r3
 8002f46:	4806      	ldr	r0, [pc, #24]	; (8002f60 <MX_TIM5_Init+0x94>)
 8002f48:	f004 f80c 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002f52:	f7ff fdb7 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20004c08 	.word	0x20004c08
 8002f64:	40000c00 	.word	0x40000c00

08002f68 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_TIM_IC_MspInit+0x94>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d133      	bne.n	8002ff2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_TIM_IC_MspInit+0x98>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <HAL_TIM_IC_MspInit+0x98>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_TIM_IC_MspInit+0x98>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_TIM_IC_MspInit+0x98>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_TIM_IC_MspInit+0x98>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_TIM_IC_MspInit+0x98>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4809      	ldr	r0, [pc, #36]	; (8003004 <HAL_TIM_IC_MspInit+0x9c>)
 8002fde:	f001 fa87 	bl	80044f0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2105      	movs	r1, #5
 8002fe6:	201d      	movs	r0, #29
 8002fe8:	f000 fe6a 	bl	8003cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fec:	201d      	movs	r0, #29
 8002fee:	f000 fe83 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40000400 	.word	0x40000400
 8003000:	40023800 	.word	0x40023800
 8003004:	40020400 	.word	0x40020400

08003008 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_TIM_Base_MspInit+0x3c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_TIM_Base_MspInit+0x40>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_TIM_Base_MspInit+0x40>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_TIM_Base_MspInit+0x40>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40000c00 	.word	0x40000c00
 8003048:	40023800 	.word	0x40023800

0800304c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <MX_USART2_UART_Init+0x50>)
 8003054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003084:	f003 fff0 	bl	8007068 <HAL_UART_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800308e:	f7ff fd19 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20004c98 	.word	0x20004c98
 800309c:	40004400 	.word	0x40004400

080030a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_UART_MspInit+0x84>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12b      	bne.n	800311a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_UART_MspInit+0x88>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_UART_MspInit+0x88>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_UART_MspInit+0x88>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_UART_MspInit+0x88>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_UART_MspInit+0x88>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_UART_MspInit+0x88>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030fa:	230c      	movs	r3, #12
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800310a:	2307      	movs	r3, #7
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <HAL_UART_MspInit+0x8c>)
 8003116:	f001 f9eb 	bl	80044f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40004400 	.word	0x40004400
 8003128:	40023800 	.word	0x40023800
 800312c:	40020000 	.word	0x40020000

08003130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003136:	490e      	ldr	r1, [pc, #56]	; (8003170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800313c:	e002      	b.n	8003144 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003142:	3304      	adds	r3, #4

08003144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003148:	d3f9      	bcc.n	800313e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314a:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800314c:	4c0b      	ldr	r4, [pc, #44]	; (800317c <LoopFillZerobss+0x26>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003150:	e001      	b.n	8003156 <LoopFillZerobss>

08003152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003154:	3204      	adds	r2, #4

08003156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003158:	d3fb      	bcc.n	8003152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800315a:	f7ff fe51 	bl	8002e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800315e:	f00b fa69 	bl	800e634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003162:	f7ff fa59 	bl	8002618 <main>
  bx  lr    
 8003166:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8003174:	08013400 	.word	0x08013400
  ldr r2, =_sbss
 8003178:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 800317c:	20004d30 	.word	0x20004d30

08003180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC_IRQHandler>
	...

08003184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_Init+0x40>)
 800318e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_Init+0x40>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800319e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_Init+0x40>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 fd7c 	bl	8003caa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	200f      	movs	r0, #15
 80031b4:	f7ff fcb8 	bl	8002b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b8:	f7ff fc8a 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_IncTick+0x20>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_IncTick+0x24>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_IncTick+0x24>)
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000008 	.word	0x20000008
 80031ec:	20004cdc 	.word	0x20004cdc

080031f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_GetTick+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20004cdc 	.word	0x20004cdc

08003208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff ffee 	bl	80031f0 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d005      	beq.n	800322e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_Delay+0x44>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800322e:	bf00      	nop
 8003230:	f7ff ffde 	bl	80031f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d8f7      	bhi.n	8003230 <HAL_Delay+0x28>
  {
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000008 	.word	0x20000008

08003250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e033      	b.n	80032ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe fdc0 	bl	8001df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003296:	f023 0302 	bic.w	r3, r3, #2
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fab2 	bl	800380c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	f043 0201 	orr.w	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e001      	b.n	80032c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_Start_DMA+0x1e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0ce      	b.n	8003494 <HAL_ADC_Start_DMA+0x1bc>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d018      	beq.n	800333e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800331c:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_ADC_Start_DMA+0x1c4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a5f      	ldr	r2, [pc, #380]	; (80034a0 <HAL_ADC_Start_DMA+0x1c8>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0c9a      	lsrs	r2, r3, #18
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003330:	e002      	b.n	8003338 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	3b01      	subs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334c:	d107      	bne.n	800335e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 8086 	bne.w	800347a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003398:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ac:	d106      	bne.n	80033bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f023 0206 	bic.w	r2, r3, #6
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
 80033ba:	e002      	b.n	80033c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_ADC_Start_DMA+0x1cc>)
 80033cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_ADC_Start_DMA+0x1d0>)
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_ADC_Start_DMA+0x1d4>)
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_ADC_Start_DMA+0x1d8>)
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	334c      	adds	r3, #76	; 0x4c
 800341a:	4619      	mov	r1, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f000 fd34 	bl	8003e8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10f      	bne.n	8003450 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d129      	bne.n	8003492 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	e020      	b.n	8003492 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_ADC_Start_DMA+0x1dc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d11b      	bne.n	8003492 <HAL_ADC_Start_DMA+0x1ba>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d114      	bne.n	8003492 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e00b      	b.n	8003492 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f043 0210 	orr.w	r2, r3, #16
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000000 	.word	0x20000000
 80034a0:	431bde83 	.word	0x431bde83
 80034a4:	40012300 	.word	0x40012300
 80034a8:	08003a05 	.word	0x08003a05
 80034ac:	08003abf 	.word	0x08003abf
 80034b0:	08003adb 	.word	0x08003adb
 80034b4:	40012000 	.word	0x40012000

080034b8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_Stop_DMA+0x1a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e048      	b.n	8003564 <HAL_ADC_Stop_DMA+0xac>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d130      	bne.n	800355a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003506:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d10f      	bne.n	8003536 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fd0e 	bl	8003f3c <HAL_DMA_Abort>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003544:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1c>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e113      	b.n	80037ec <HAL_ADC_ConfigChannel+0x244>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d925      	bls.n	8003620 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68d9      	ldr	r1, [r3, #12]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	3b1e      	subs	r3, #30
 80035ea:	2207      	movs	r2, #7
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43da      	mvns	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	400a      	ands	r2, r1
 80035f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68d9      	ldr	r1, [r3, #12]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	4618      	mov	r0, r3
 800360c:	4603      	mov	r3, r0
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4403      	add	r3, r0
 8003612:	3b1e      	subs	r3, #30
 8003614:	409a      	lsls	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	e022      	b.n	8003666 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6919      	ldr	r1, [r3, #16]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	2207      	movs	r2, #7
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	400a      	ands	r2, r1
 8003642:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6919      	ldr	r1, [r3, #16]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	4618      	mov	r0, r3
 8003656:	4603      	mov	r3, r0
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4403      	add	r3, r0
 800365c:	409a      	lsls	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b06      	cmp	r3, #6
 800366c:	d824      	bhi.n	80036b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	3b05      	subs	r3, #5
 8003680:	221f      	movs	r2, #31
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43da      	mvns	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	400a      	ands	r2, r1
 800368e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	4618      	mov	r0, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	3b05      	subs	r3, #5
 80036aa:	fa00 f203 	lsl.w	r2, r0, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34
 80036b6:	e04c      	b.n	8003752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d824      	bhi.n	800370a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	3b23      	subs	r3, #35	; 0x23
 80036d2:	221f      	movs	r2, #31
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43da      	mvns	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	400a      	ands	r2, r1
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4618      	mov	r0, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	3b23      	subs	r3, #35	; 0x23
 80036fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
 8003708:	e023      	b.n	8003752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	3b41      	subs	r3, #65	; 0x41
 800371c:	221f      	movs	r2, #31
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	400a      	ands	r2, r1
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	4618      	mov	r0, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	3b41      	subs	r3, #65	; 0x41
 8003746:	fa00 f203 	lsl.w	r2, r0, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_ADC_ConfigChannel+0x250>)
 8003754:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a28      	ldr	r2, [pc, #160]	; (80037fc <HAL_ADC_ConfigChannel+0x254>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10f      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1d8>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b12      	cmp	r3, #18
 8003766:	d10b      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <HAL_ADC_ConfigChannel+0x254>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d12b      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x23a>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_ADC_ConfigChannel+0x258>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <HAL_ADC_ConfigChannel+0x1f4>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b11      	cmp	r3, #17
 800379a:	d122      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a11      	ldr	r2, [pc, #68]	; (8003800 <HAL_ADC_ConfigChannel+0x258>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d111      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_ADC_ConfigChannel+0x25c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_ADC_ConfigChannel+0x260>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	0c9a      	lsrs	r2, r3, #18
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037d4:	e002      	b.n	80037dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f9      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40012300 	.word	0x40012300
 80037fc:	40012000 	.word	0x40012000
 8003800:	10000012 	.word	0x10000012
 8003804:	20000000 	.word	0x20000000
 8003808:	431bde83 	.word	0x431bde83

0800380c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003814:	4b79      	ldr	r3, [pc, #484]	; (80039fc <ADC_Init+0x1f0>)
 8003816:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	021a      	lsls	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <ADC_Init+0x1f4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	e00f      	b.n	800390a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003908:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0202 	bic.w	r2, r2, #2
 8003918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6899      	ldr	r1, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7e1b      	ldrb	r3, [r3, #24]
 8003924:	005a      	lsls	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003956:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	3b01      	subs	r3, #1
 8003964:	035a      	lsls	r2, r3, #13
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	e007      	b.n	8003980 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	3b01      	subs	r3, #1
 800399c:	051a      	lsls	r2, r3, #20
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039c2:	025a      	lsls	r2, r3, #9
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	029a      	lsls	r2, r3, #10
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40012300 	.word	0x40012300
 8003a00:	0f000001 	.word	0x0f000001

08003a04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d13c      	bne.n	8003a98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d12b      	bne.n	8003a90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d127      	bne.n	8003a90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d119      	bne.n	8003a90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0220 	bic.w	r2, r2, #32
 8003a6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff fd6b 	bl	800356c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a96:	e00e      	b.n	8003ab6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fd75 	bl	8003594 <HAL_ADC_ErrorCallback>
}
 8003aaa:	e004      	b.n	8003ab6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff fd57 	bl	8003580 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff fd4a 	bl	8003594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b24:	4013      	ands	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	60d3      	str	r3, [r2, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <__NVIC_GetPriorityGrouping+0x18>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 0307 	and.w	r3, r3, #7
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	db0b      	blt.n	8003b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4907      	ldr	r1, [pc, #28]	; (8003ba4 <__NVIC_EnableIRQ+0x38>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000e100 	.word	0xe000e100

08003ba8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	db12      	blt.n	8003be0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	490a      	ldr	r1, [pc, #40]	; (8003bec <__NVIC_DisableIRQ+0x44>)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2001      	movs	r0, #1
 8003bca:	fa00 f202 	lsl.w	r2, r0, r2
 8003bce:	3320      	adds	r3, #32
 8003bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bd4:	f3bf 8f4f 	dsb	sy
}
 8003bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bda:	f3bf 8f6f 	isb	sy
}
 8003bde:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff28 	bl	8003b08 <__NVIC_SetPriorityGrouping>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd2:	f7ff ff3d 	bl	8003b50 <__NVIC_GetPriorityGrouping>
 8003cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f7ff ffb1 	bl	8003c44 <NVIC_EncodePriority>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff80 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003cf0:	bf00      	nop
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff30 	bl	8003b6c <__NVIC_EnableIRQ>
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff40 	bl	8003ba8 <__NVIC_DisableIRQ>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff fa58 	bl	80031f0 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e099      	b.n	8003e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6c:	e00f      	b.n	8003d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d6e:	f7ff fa3f 	bl	80031f0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d908      	bls.n	8003d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2203      	movs	r2, #3
 8003d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e078      	b.n	8003e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e8      	bne.n	8003d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <HAL_DMA_Init+0x158>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	4313      	orrs	r3, r2
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0307 	bic.w	r3, r3, #7
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d117      	bne.n	8003e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fadf 	bl	80043f8 <DMA_CheckFifoParam>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e016      	b.n	8003e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa96 	bl	800438c <DMA_CalcBaseAndBitshift>
 8003e60:	4603      	mov	r3, r0
 8003e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	223f      	movs	r2, #63	; 0x3f
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	f010803f 	.word	0xf010803f

08003e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_Start_IT+0x26>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e040      	b.n	8003f34 <HAL_DMA_Start_IT+0xa8>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d12f      	bne.n	8003f26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fa28 	bl	8004330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee4:	223f      	movs	r2, #63	; 0x3f
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0216 	orr.w	r2, r2, #22
 8003efa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0208 	orr.w	r2, r2, #8
 8003f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e005      	b.n	8003f32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f4a:	f7ff f951 	bl	80031f0 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d008      	beq.n	8003f6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e052      	b.n	8004014 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0216 	bic.w	r2, r2, #22
 8003f7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_DMA_Abort+0x62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0208 	bic.w	r2, r2, #8
 8003fac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fbe:	e013      	b.n	8003fe8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc0:	f7ff f916 	bl	80031f0 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e015      	b.n	8004014 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e4      	bne.n	8003fc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	223f      	movs	r2, #63	; 0x3f
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004028:	4b92      	ldr	r3, [pc, #584]	; (8004274 <HAL_DMA_IRQHandler+0x258>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a92      	ldr	r2, [pc, #584]	; (8004278 <HAL_DMA_IRQHandler+0x25c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2208      	movs	r2, #8
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2208      	movs	r2, #8
 8004076:	409a      	lsls	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2204      	movs	r2, #4
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	2204      	movs	r2, #4
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2210      	movs	r2, #16
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d043      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03c      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	2210      	movs	r2, #16
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e01f      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e016      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0208 	bic.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2220      	movs	r2, #32
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808e 	beq.w	80042ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8086 	beq.w	80042ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2220      	movs	r2, #32
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d136      	bne.n	8004234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0216 	bic.w	r2, r2, #22
 80041d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x1da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07d      	beq.n	8004326 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
        }
        return;
 8004232:	e078      	b.n	8004326 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01c      	beq.n	800427c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2b00      	cmp	r3, #0
 8004256:	d030      	beq.n	80042ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
 8004260:	e02b      	b.n	80042ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d027      	beq.n	80042ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
 8004272:	e022      	b.n	80042ba <HAL_DMA_IRQHandler+0x29e>
 8004274:	20000000 	.word	0x20000000
 8004278:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0210 	bic.w	r2, r2, #16
 8004298:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d032      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d022      	beq.n	8004314 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2205      	movs	r2, #5
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d307      	bcc.n	8004302 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f2      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x2ca>
 8004300:	e000      	b.n	8004304 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004302:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
 8004324:	e000      	b.n	8004328 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004326:	bf00      	nop
    }
  }
}
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop

08004330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d108      	bne.n	8004370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800436e:	e007      	b.n	8004380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	60da      	str	r2, [r3, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3b10      	subs	r3, #16
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <DMA_CalcBaseAndBitshift+0x64>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <DMA_CalcBaseAndBitshift+0x68>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d909      	bls.n	80043ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	; 0x58
 80043cc:	e007      	b.n	80043de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	aaaaaaab 	.word	0xaaaaaaab
 80043f4:	08012df8 	.word	0x08012df8

080043f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0x5a>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d856      	bhi.n	80044c6 <DMA_CheckFifoParam+0xce>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <DMA_CheckFifoParam+0x28>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004431 	.word	0x08004431
 8004424:	08004443 	.word	0x08004443
 8004428:	08004431 	.word	0x08004431
 800442c:	080044c7 	.word	0x080044c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d046      	beq.n	80044ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e043      	b.n	80044ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800444a:	d140      	bne.n	80044ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004450:	e03d      	b.n	80044ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d121      	bne.n	80044a0 <DMA_CheckFifoParam+0xa8>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d837      	bhi.n	80044d2 <DMA_CheckFifoParam+0xda>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <DMA_CheckFifoParam+0x70>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004479 	.word	0x08004479
 800446c:	0800447f 	.word	0x0800447f
 8004470:	08004479 	.word	0x08004479
 8004474:	08004491 	.word	0x08004491
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e030      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d025      	beq.n	80044d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e022      	b.n	80044d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004498:	d11f      	bne.n	80044da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800449e:	e01c      	b.n	80044da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d903      	bls.n	80044ae <DMA_CheckFifoParam+0xb6>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d003      	beq.n	80044b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044ac:	e018      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
      break;
 80044b2:	e015      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e00b      	b.n	80044de <DMA_CheckFifoParam+0xe6>
      break;
 80044c6:	bf00      	nop
 80044c8:	e00a      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ca:	bf00      	nop
 80044cc:	e008      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ce:	bf00      	nop
 80044d0:	e006      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044de:	bf00      	nop
    }
  } 
  
  return status; 
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop

080044f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e159      	b.n	80047c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	f040 8148 	bne.w	80047ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d005      	beq.n	8004542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453e:	2b02      	cmp	r3, #2
 8004540:	d130      	bne.n	80045a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	2203      	movs	r2, #3
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 0201 	and.w	r2, r3, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d017      	beq.n	80045e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d123      	bne.n	8004634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2203      	movs	r2, #3
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a2 	beq.w	80047ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <HAL_GPIO_Init+0x2e8>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <HAL_GPIO_Init+0x2e8>)
 8004680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b54      	ldr	r3, [pc, #336]	; (80047d8 <HAL_GPIO_Init+0x2e8>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004692:	4a52      	ldr	r2, [pc, #328]	; (80047dc <HAL_GPIO_Init+0x2ec>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	220f      	movs	r2, #15
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a49      	ldr	r2, [pc, #292]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d019      	beq.n	80046f2 <HAL_GPIO_Init+0x202>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <HAL_GPIO_Init+0x2f4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_GPIO_Init+0x1fe>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a47      	ldr	r2, [pc, #284]	; (80047e8 <HAL_GPIO_Init+0x2f8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00d      	beq.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a46      	ldr	r2, [pc, #280]	; (80047ec <HAL_GPIO_Init+0x2fc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_GPIO_Init+0x1f6>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a45      	ldr	r2, [pc, #276]	; (80047f0 <HAL_GPIO_Init+0x300>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_GPIO_Init+0x1f2>
 80046de:	2304      	movs	r3, #4
 80046e0:	e008      	b.n	80046f4 <HAL_GPIO_Init+0x204>
 80046e2:	2307      	movs	r3, #7
 80046e4:	e006      	b.n	80046f4 <HAL_GPIO_Init+0x204>
 80046e6:	2303      	movs	r3, #3
 80046e8:	e004      	b.n	80046f4 <HAL_GPIO_Init+0x204>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e002      	b.n	80046f4 <HAL_GPIO_Init+0x204>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_GPIO_Init+0x204>
 80046f2:	2300      	movs	r3, #0
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	f002 0203 	and.w	r2, r2, #3
 80046fa:	0092      	lsls	r2, r2, #2
 80046fc:	4093      	lsls	r3, r2
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004704:	4935      	ldr	r1, [pc, #212]	; (80047dc <HAL_GPIO_Init+0x2ec>)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	3302      	adds	r3, #2
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004712:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <HAL_GPIO_Init+0x304>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004736:	4a2f      	ldr	r2, [pc, #188]	; (80047f4 <HAL_GPIO_Init+0x304>)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <HAL_GPIO_Init+0x304>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004760:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <HAL_GPIO_Init+0x304>)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004766:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_GPIO_Init+0x304>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_GPIO_Init+0x304>)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004790:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <HAL_GPIO_Init+0x304>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b4:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <HAL_GPIO_Init+0x304>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3301      	adds	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	f67f aea2 	bls.w	800450c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	3724      	adds	r7, #36	; 0x24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40013800 	.word	0x40013800
 80047e0:	40020000 	.word	0x40020000
 80047e4:	40020400 	.word	0x40020400
 80047e8:	40020800 	.word	0x40020800
 80047ec:	40020c00 	.word	0x40020c00
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
 8004804:	4613      	mov	r3, r2
 8004806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004808:	787b      	ldrb	r3, [r7, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004814:	e003      	b.n	800481e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004842:	4a05      	ldr	r2, [pc, #20]	; (8004858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe f8d8 	bl	8002a00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40013c00 	.word	0x40013c00

0800485c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e12b      	b.n	8004ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fc8a 	bl	800219c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048c0:	f001 fbae 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 80048c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4a81      	ldr	r2, [pc, #516]	; (8004ad0 <HAL_I2C_Init+0x274>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d807      	bhi.n	80048e0 <HAL_I2C_Init+0x84>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a80      	ldr	r2, [pc, #512]	; (8004ad4 <HAL_I2C_Init+0x278>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf94      	ite	ls
 80048d8:	2301      	movls	r3, #1
 80048da:	2300      	movhi	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e006      	b.n	80048ee <HAL_I2C_Init+0x92>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a7d      	ldr	r2, [pc, #500]	; (8004ad8 <HAL_I2C_Init+0x27c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bf94      	ite	ls
 80048e8:	2301      	movls	r3, #1
 80048ea:	2300      	movhi	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0e7      	b.n	8004ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a78      	ldr	r2, [pc, #480]	; (8004adc <HAL_I2C_Init+0x280>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0c9b      	lsrs	r3, r3, #18
 8004900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a6a      	ldr	r2, [pc, #424]	; (8004ad0 <HAL_I2C_Init+0x274>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d802      	bhi.n	8004930 <HAL_I2C_Init+0xd4>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	e009      	b.n	8004944 <HAL_I2C_Init+0xe8>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	4a69      	ldr	r2, [pc, #420]	; (8004ae0 <HAL_I2C_Init+0x284>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	3301      	adds	r3, #1
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	495c      	ldr	r1, [pc, #368]	; (8004ad0 <HAL_I2C_Init+0x274>)
 8004960:	428b      	cmp	r3, r1
 8004962:	d819      	bhi.n	8004998 <HAL_I2C_Init+0x13c>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e59      	subs	r1, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004978:	400b      	ands	r3, r1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_I2C_Init+0x138>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1e59      	subs	r1, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fbb1 f3f3 	udiv	r3, r1, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	e051      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004994:	2304      	movs	r3, #4
 8004996:	e04f      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d111      	bne.n	80049c4 <HAL_I2C_Init+0x168>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1e58      	subs	r0, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e012      	b.n	80049ea <HAL_I2C_Init+0x18e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1e58      	subs	r0, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	0099      	lsls	r1, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049da:	3301      	adds	r3, #1
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Init+0x196>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e022      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10e      	bne.n	8004a18 <HAL_I2C_Init+0x1bc>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1e58      	subs	r0, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	440b      	add	r3, r1
 8004a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a16:	e00f      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e58      	subs	r0, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	0099      	lsls	r1, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	6809      	ldr	r1, [r1, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6911      	ldr	r1, [r2, #16]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68d2      	ldr	r2, [r2, #12]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	000186a0 	.word	0x000186a0
 8004ad4:	001e847f 	.word	0x001e847f
 8004ad8:	003d08ff 	.word	0x003d08ff
 8004adc:	431bde83 	.word	0x431bde83
 8004ae0:	10624dd3 	.word	0x10624dd3

08004ae4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	461a      	mov	r2, r3
 8004af0:	460b      	mov	r3, r1
 8004af2:	817b      	strh	r3, [r7, #10]
 8004af4:	4613      	mov	r3, r2
 8004af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7fe fb7a 	bl	80031f0 <HAL_GetTick>
 8004afc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	f040 80e0 	bne.w	8004ccc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2319      	movs	r3, #25
 8004b12:	2201      	movs	r2, #1
 8004b14:	4970      	ldr	r1, [pc, #448]	; (8004cd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fc58 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0d3      	b.n	8004cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_I2C_Master_Transmit+0x50>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e0cc      	b.n	8004cce <HAL_I2C_Master_Transmit+0x1ea>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d007      	beq.n	8004b5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2221      	movs	r2, #33	; 0x21
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2210      	movs	r2, #16
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	893a      	ldrh	r2, [r7, #8]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a50      	ldr	r2, [pc, #320]	; (8004cdc <HAL_I2C_Master_Transmit+0x1f8>)
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b9c:	8979      	ldrh	r1, [r7, #10]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fac2 	bl	800512c <I2C_MasterRequestWrite>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e08d      	b.n	8004cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bc8:	e066      	b.n	8004c98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	6a39      	ldr	r1, [r7, #32]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fcd2 	bl	8005578 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d107      	bne.n	8004bf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e06b      	b.n	8004cce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d11b      	bne.n	8004c6c <HAL_I2C_Master_Transmit+0x188>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d017      	beq.n	8004c6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	6a39      	ldr	r1, [r7, #32]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fcc2 	bl	80055fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d107      	bne.n	8004c94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e01a      	b.n	8004cce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d194      	bne.n	8004bca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	00100002 	.word	0x00100002
 8004cdc:	ffff0000 	.word	0xffff0000

08004ce0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08c      	sub	sp, #48	; 0x30
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7fe fa7c 	bl	80031f0 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	f040 820b 	bne.w	800511e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2319      	movs	r3, #25
 8004d0e:	2201      	movs	r2, #1
 8004d10:	497c      	ldr	r1, [pc, #496]	; (8004f04 <HAL_I2C_Master_Receive+0x224>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fb5a 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e1fe      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_I2C_Master_Receive+0x50>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e1f7      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d007      	beq.n	8004d56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2222      	movs	r2, #34	; 0x22
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2210      	movs	r2, #16
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	893a      	ldrh	r2, [r7, #8]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a5c      	ldr	r2, [pc, #368]	; (8004f08 <HAL_I2C_Master_Receive+0x228>)
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d98:	8979      	ldrh	r1, [r7, #10]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fa46 	bl	8005230 <I2C_MasterRequestRead>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e1b8      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d113      	bne.n	8004dde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db6:	2300      	movs	r3, #0
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e18c      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d11b      	bne.n	8004e1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e16c      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d11b      	bne.n	8004e5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	e14c      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e84:	e138      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	f200 80f1 	bhi.w	8005072 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d123      	bne.n	8004ee0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fbed 	bl	800567c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e139      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ede:	e10b      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d14e      	bne.n	8004f86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4906      	ldr	r1, [pc, #24]	; (8004f0c <HAL_I2C_Master_Receive+0x22c>)
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa6a 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e10e      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
 8004f02:	bf00      	nop
 8004f04:	00100002 	.word	0x00100002
 8004f08:	ffff0000 	.word	0xffff0000
 8004f0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f84:	e0b8      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4966      	ldr	r1, [pc, #408]	; (8005128 <HAL_I2C_Master_Receive+0x448>)
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa1b 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0bf      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	2200      	movs	r2, #0
 8004fea:	494f      	ldr	r1, [pc, #316]	; (8005128 <HAL_I2C_Master_Receive+0x448>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f9ed 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e091      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005070:	e042      	b.n	80050f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fb00 	bl	800567c <I2C_WaitOnRXNEFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e04c      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d118      	bne.n	80050f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f47f aec2 	bne.w	8004e86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	e000      	b.n	8005120 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800511e:	2302      	movs	r3, #2
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3728      	adds	r7, #40	; 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	00010004 	.word	0x00010004

0800512c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	460b      	mov	r3, r1
 800513a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d006      	beq.n	8005156 <I2C_MasterRequestWrite+0x2a>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d003      	beq.n	8005156 <I2C_MasterRequestWrite+0x2a>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005154:	d108      	bne.n	8005168 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e00b      	b.n	8005180 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	2b12      	cmp	r3, #18
 800516e:	d107      	bne.n	8005180 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f91d 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00d      	beq.n	80051b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a6:	d103      	bne.n	80051b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e035      	b.n	8005220 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051bc:	d108      	bne.n	80051d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051be:	897b      	ldrh	r3, [r7, #10]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051cc:	611a      	str	r2, [r3, #16]
 80051ce:	e01b      	b.n	8005208 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051d0:	897b      	ldrh	r3, [r7, #10]
 80051d2:	11db      	asrs	r3, r3, #7
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f063 030f 	orn	r3, r3, #15
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	490e      	ldr	r1, [pc, #56]	; (8005228 <I2C_MasterRequestWrite+0xfc>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f943 	bl	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e010      	b.n	8005220 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	4907      	ldr	r1, [pc, #28]	; (800522c <I2C_MasterRequestWrite+0x100>)
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f933 	bl	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	00010008 	.word	0x00010008
 800522c:	00010002 	.word	0x00010002

08005230 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	460b      	mov	r3, r1
 800523e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005254:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d006      	beq.n	800526a <I2C_MasterRequestRead+0x3a>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d003      	beq.n	800526a <I2C_MasterRequestRead+0x3a>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005268:	d108      	bne.n	800527c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e00b      	b.n	8005294 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	2b11      	cmp	r3, #17
 8005282:	d107      	bne.n	8005294 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f893 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ba:	d103      	bne.n	80052c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e079      	b.n	80053bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d0:	d108      	bne.n	80052e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	611a      	str	r2, [r3, #16]
 80052e2:	e05f      	b.n	80053a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052e4:	897b      	ldrh	r3, [r7, #10]
 80052e6:	11db      	asrs	r3, r3, #7
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f003 0306 	and.w	r3, r3, #6
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f063 030f 	orn	r3, r3, #15
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4930      	ldr	r1, [pc, #192]	; (80053c4 <I2C_MasterRequestRead+0x194>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f8b9 	bl	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e054      	b.n	80053bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	4929      	ldr	r1, [pc, #164]	; (80053c8 <I2C_MasterRequestRead+0x198>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f8a9 	bl	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e044      	b.n	80053bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005356:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f831 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d103      	bne.n	8005388 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e017      	b.n	80053bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800538c:	897b      	ldrh	r3, [r7, #10]
 800538e:	11db      	asrs	r3, r3, #7
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0306 	and.w	r3, r3, #6
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f063 030e 	orn	r3, r3, #14
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4907      	ldr	r1, [pc, #28]	; (80053c8 <I2C_MasterRequestRead+0x198>)
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f865 	bl	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	00010008 	.word	0x00010008
 80053c8:	00010002 	.word	0x00010002

080053cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053dc:	e025      	b.n	800542a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d021      	beq.n	800542a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fd ff03 	bl	80031f0 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d116      	bne.n	800542a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e023      	b.n	8005472 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10d      	bne.n	8005450 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	43da      	mvns	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	e00c      	b.n	800546a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	429a      	cmp	r2, r3
 800546e:	d0b6      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005488:	e051      	b.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005498:	d123      	bne.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e046      	b.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d021      	beq.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fd fe81 	bl	80031f0 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d116      	bne.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e020      	b.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d10c      	bne.n	8005552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e00b      	b.n	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	43da      	mvns	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d18d      	bne.n	800548a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005584:	e02d      	b.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f8ce 	bl	8005728 <I2C_IsAcknowledgeFailed>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e02d      	b.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d021      	beq.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fd fe27 	bl	80031f0 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e007      	b.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d1ca      	bne.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005606:	e02d      	b.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f88d 	bl	8005728 <I2C_IsAcknowledgeFailed>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e02d      	b.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d021      	beq.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fd fde6 	bl	80031f0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e007      	b.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d1ca      	bne.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005688:	e042      	b.n	8005710 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d119      	bne.n	80056cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e029      	b.n	8005720 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056cc:	f7fd fd90 	bl	80031f0 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e007      	b.n	8005720 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d1b5      	bne.n	800568a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573e:	d11b      	bne.n	8005778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f043 0204 	orr.w	r2, r3, #4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e264      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d075      	beq.n	8005892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a6:	4ba3      	ldr	r3, [pc, #652]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d00c      	beq.n	80057cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b2:	4ba0      	ldr	r3, [pc, #640]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d112      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057be:	4b9d      	ldr	r3, [pc, #628]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	4b99      	ldr	r3, [pc, #612]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d05b      	beq.n	8005890 <HAL_RCC_OscConfig+0x108>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d157      	bne.n	8005890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e23f      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d106      	bne.n	80057fc <HAL_RCC_OscConfig+0x74>
 80057ee:	4b91      	ldr	r3, [pc, #580]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a90      	ldr	r2, [pc, #576]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e01d      	b.n	8005838 <HAL_RCC_OscConfig+0xb0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0x98>
 8005806:	4b8b      	ldr	r3, [pc, #556]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a8a      	ldr	r2, [pc, #552]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 800580c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b88      	ldr	r3, [pc, #544]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a87      	ldr	r2, [pc, #540]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e00b      	b.n	8005838 <HAL_RCC_OscConfig+0xb0>
 8005820:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a83      	ldr	r2, [pc, #524]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a80      	ldr	r2, [pc, #512]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fd fcd6 	bl	80031f0 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005848:	f7fd fcd2 	bl	80031f0 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e204      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b76      	ldr	r3, [pc, #472]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0xc0>
 8005866:	e014      	b.n	8005892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fd fcc2 	bl	80031f0 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005870:	f7fd fcbe 	bl	80031f0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e1f0      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005882:	4b6c      	ldr	r3, [pc, #432]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0xe8>
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d063      	beq.n	8005966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800589e:	4b65      	ldr	r3, [pc, #404]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058aa:	4b62      	ldr	r3, [pc, #392]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d11c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b6:	4b5f      	ldr	r3, [pc, #380]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c2:	4b5c      	ldr	r3, [pc, #368]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCC_OscConfig+0x152>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d001      	beq.n	80058da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e1c4      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058da:	4b56      	ldr	r3, [pc, #344]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4952      	ldr	r1, [pc, #328]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ee:	e03a      	b.n	8005966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f8:	4b4f      	ldr	r3, [pc, #316]	; (8005a38 <HAL_RCC_OscConfig+0x2b0>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fe:	f7fd fc77 	bl	80031f0 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005906:	f7fd fc73 	bl	80031f0 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e1a5      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005918:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005924:	4b43      	ldr	r3, [pc, #268]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4940      	ldr	r1, [pc, #256]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]
 8005938:	e015      	b.n	8005966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800593a:	4b3f      	ldr	r3, [pc, #252]	; (8005a38 <HAL_RCC_OscConfig+0x2b0>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fd fc56 	bl	80031f0 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005948:	f7fd fc52 	bl	80031f0 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e184      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595a:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d030      	beq.n	80059d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800597a:	4b30      	ldr	r3, [pc, #192]	; (8005a3c <HAL_RCC_OscConfig+0x2b4>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fd fc36 	bl	80031f0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005988:	f7fd fc32 	bl	80031f0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e164      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 800599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x200>
 80059a6:	e015      	b.n	80059d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a8:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <HAL_RCC_OscConfig+0x2b4>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ae:	f7fd fc1f 	bl	80031f0 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b6:	f7fd fc1b 	bl	80031f0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e14d      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80059ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80a0 	beq.w	8005b22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	6413      	str	r3, [r2, #64]	; 0x40
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_OscConfig+0x2b8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d121      	bne.n	8005a62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <HAL_RCC_OscConfig+0x2b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <HAL_RCC_OscConfig+0x2b8>)
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2a:	f7fd fbe1 	bl	80031f0 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a30:	e011      	b.n	8005a56 <HAL_RCC_OscConfig+0x2ce>
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800
 8005a38:	42470000 	.word	0x42470000
 8005a3c:	42470e80 	.word	0x42470e80
 8005a40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a44:	f7fd fbd4 	bl	80031f0 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e106      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a56:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_RCC_OscConfig+0x4e4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d106      	bne.n	8005a78 <HAL_RCC_OscConfig+0x2f0>
 8005a6a:	4b81      	ldr	r3, [pc, #516]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a80      	ldr	r2, [pc, #512]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	e01c      	b.n	8005ab2 <HAL_RCC_OscConfig+0x32a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d10c      	bne.n	8005a9a <HAL_RCC_OscConfig+0x312>
 8005a80:	4b7b      	ldr	r3, [pc, #492]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	4a7a      	ldr	r2, [pc, #488]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a86:	f043 0304 	orr.w	r3, r3, #4
 8005a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8c:	4b78      	ldr	r3, [pc, #480]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	4a77      	ldr	r2, [pc, #476]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	; 0x70
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCC_OscConfig+0x32a>
 8005a9a:	4b75      	ldr	r3, [pc, #468]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	4a74      	ldr	r2, [pc, #464]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa6:	4b72      	ldr	r3, [pc, #456]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a71      	ldr	r2, [pc, #452]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fd fb99 	bl	80031f0 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fd fb95 	bl	80031f0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e0c5      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad8:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0ee      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x33a>
 8005ae4:	e014      	b.n	8005b10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae6:	f7fd fb83 	bl	80031f0 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fd fb7f 	bl	80031f0 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0af      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b04:	4b5a      	ldr	r3, [pc, #360]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ee      	bne.n	8005aee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b16:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	4a55      	ldr	r2, [pc, #340]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 809b 	beq.w	8005c62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b2c:	4b50      	ldr	r3, [pc, #320]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d05c      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d141      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b40:	4b4c      	ldr	r3, [pc, #304]	; (8005c74 <HAL_RCC_OscConfig+0x4ec>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b46:	f7fd fb53 	bl	80031f0 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b4e:	f7fd fb4f 	bl	80031f0 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e081      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b60:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	019b      	lsls	r3, r3, #6
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	3b01      	subs	r3, #1
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	4937      	ldr	r1, [pc, #220]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b96:	4b37      	ldr	r3, [pc, #220]	; (8005c74 <HAL_RCC_OscConfig+0x4ec>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fd fb28 	bl	80031f0 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba4:	f7fd fb24 	bl	80031f0 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e056      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	4b2e      	ldr	r3, [pc, #184]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x41c>
 8005bc2:	e04e      	b.n	8005c62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	; (8005c74 <HAL_RCC_OscConfig+0x4ec>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bca:	f7fd fb11 	bl	80031f0 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fd fb0d 	bl	80031f0 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e03f      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f0      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x44a>
 8005bf0:	e037      	b.n	8005c62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e032      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfe:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <HAL_RCC_OscConfig+0x4e8>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d028      	beq.n	8005c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d121      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d11a      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c2e:	4013      	ands	r3, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d111      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	3b01      	subs	r3, #1
 8005c48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d001      	beq.n	8005c62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40007000 	.word	0x40007000
 8005c70:	40023800 	.word	0x40023800
 8005c74:	42470060 	.word	0x42470060

08005c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0cc      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c8c:	4b68      	ldr	r3, [pc, #416]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d90c      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9a:	4b65      	ldr	r3, [pc, #404]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0b8      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d020      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ccc:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	4a58      	ldr	r2, [pc, #352]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce4:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a52      	ldr	r2, [pc, #328]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf0:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	494d      	ldr	r1, [pc, #308]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d044      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d107      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	4b47      	ldr	r3, [pc, #284]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d119      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e07f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d36:	4b3f      	ldr	r3, [pc, #252]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e06f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d46:	4b3b      	ldr	r3, [pc, #236]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e067      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d56:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4934      	ldr	r1, [pc, #208]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d68:	f7fd fa42 	bl	80031f0 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fd fa3e 	bl	80031f0 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e04f      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d20c      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_RCC_ClockConfig+0x1b8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e032      	b.n	8005e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4916      	ldr	r1, [pc, #88]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	490e      	ldr	r1, [pc, #56]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dfe:	f000 f821 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005e02:	4602      	mov	r2, r0
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	490a      	ldr	r1, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005e10:	5ccb      	ldrb	r3, [r1, r3]
 8005e12:	fa22 f303 	lsr.w	r3, r2, r3
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fc fe82 	bl	8002b28 <HAL_InitTick>

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40023c00 	.word	0x40023c00
 8005e34:	40023800 	.word	0x40023800
 8005e38:	08012de0 	.word	0x08012de0
 8005e3c:	20000000 	.word	0x20000000
 8005e40:	20000004 	.word	0x20000004

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	607b      	str	r3, [r7, #4]
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	2300      	movs	r3, #0
 8005e56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e5c:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d00d      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x40>
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	f200 80bd 	bhi.w	8005fe8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0x34>
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d003      	beq.n	8005e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e76:	e0b7      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e78:	4b61      	ldr	r3, [pc, #388]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e7a:	60bb      	str	r3, [r7, #8]
       break;
 8005e7c:	e0b7      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e7e:	4b61      	ldr	r3, [pc, #388]	; (8006004 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e80:	60bb      	str	r3, [r7, #8]
      break;
 8005e82:	e0b4      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e84:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e8e:	4b5b      	ldr	r3, [pc, #364]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04d      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9a:	4b58      	ldr	r3, [pc, #352]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	ea02 0800 	and.w	r8, r2, r0
 8005eb2:	ea03 0901 	and.w	r9, r3, r1
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	014b      	lsls	r3, r1, #5
 8005ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ec8:	0142      	lsls	r2, r0, #5
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	ebb0 0008 	subs.w	r0, r0, r8
 8005ed2:	eb61 0109 	sbc.w	r1, r1, r9
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	018b      	lsls	r3, r1, #6
 8005ee0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ee4:	0182      	lsls	r2, r0, #6
 8005ee6:	1a12      	subs	r2, r2, r0
 8005ee8:	eb63 0301 	sbc.w	r3, r3, r1
 8005eec:	f04f 0000 	mov.w	r0, #0
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	00d9      	lsls	r1, r3, #3
 8005ef6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005efa:	00d0      	lsls	r0, r2, #3
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	eb12 0208 	adds.w	r2, r2, r8
 8005f04:	eb43 0309 	adc.w	r3, r3, r9
 8005f08:	f04f 0000 	mov.w	r0, #0
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	0259      	lsls	r1, r3, #9
 8005f12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f16:	0250      	lsls	r0, r2, #9
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4619      	mov	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	f7fa fe66 	bl	8000bf8 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4613      	mov	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e04a      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f36:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	099b      	lsrs	r3, r3, #6
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	ea02 0400 	and.w	r4, r2, r0
 8005f4e:	ea03 0501 	and.w	r5, r3, r1
 8005f52:	4620      	mov	r0, r4
 8005f54:	4629      	mov	r1, r5
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	014b      	lsls	r3, r1, #5
 8005f60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f64:	0142      	lsls	r2, r0, #5
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	1b00      	subs	r0, r0, r4
 8005f6c:	eb61 0105 	sbc.w	r1, r1, r5
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	018b      	lsls	r3, r1, #6
 8005f7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f7e:	0182      	lsls	r2, r0, #6
 8005f80:	1a12      	subs	r2, r2, r0
 8005f82:	eb63 0301 	sbc.w	r3, r3, r1
 8005f86:	f04f 0000 	mov.w	r0, #0
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	00d9      	lsls	r1, r3, #3
 8005f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f94:	00d0      	lsls	r0, r2, #3
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	1912      	adds	r2, r2, r4
 8005f9c:	eb45 0303 	adc.w	r3, r5, r3
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	0299      	lsls	r1, r3, #10
 8005faa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fae:	0290      	lsls	r0, r2, #10
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	f7fa fe1a 	bl	8000bf8 <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4613      	mov	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	0c1b      	lsrs	r3, r3, #16
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
      break;
 8005fe6:	e002      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fea:	60bb      	str	r3, [r7, #8]
      break;
 8005fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fee:	68bb      	ldr	r3, [r7, #8]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800
 8006000:	00f42400 	.word	0x00f42400
 8006004:	007a1200 	.word	0x007a1200

08006008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_RCC_GetHCLKFreq+0x14>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000000 	.word	0x20000000

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006024:	f7ff fff0 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006028:	4602      	mov	r2, r0
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	0a9b      	lsrs	r3, r3, #10
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	4903      	ldr	r1, [pc, #12]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006036:	5ccb      	ldrb	r3, [r1, r3]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40023800 	.word	0x40023800
 8006044:	08012df0 	.word	0x08012df0

08006048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800604c:	f7ff ffdc 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0b5b      	lsrs	r3, r3, #13
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4903      	ldr	r1, [pc, #12]	; (800606c <HAL_RCC_GetPCLK2Freq+0x24>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	08012df0 	.word	0x08012df0

08006070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	220f      	movs	r2, #15
 800607e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0203 	and.w	r2, r3, #3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	08db      	lsrs	r3, r3, #3
 80060aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_RCC_GetClockConfig+0x60>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0207 	and.w	r2, r3, #7
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	601a      	str	r2, [r3, #0]
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40023c00 	.word	0x40023c00

080060d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e041      	b.n	800616a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fc ff84 	bl	8003008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fcc8 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	d001      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e044      	b.n	8006216 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <HAL_TIM_Base_Start_IT+0xb0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b6:	d013      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_TIM_Base_Start_IT+0xb4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a19      	ldr	r2, [pc, #100]	; (800622c <HAL_TIM_Base_Start_IT+0xb8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a17      	ldr	r2, [pc, #92]	; (8006230 <HAL_TIM_Base_Start_IT+0xbc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x6c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a16      	ldr	r2, [pc, #88]	; (8006234 <HAL_TIM_Base_Start_IT+0xc0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d111      	bne.n	8006204 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d010      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	e007      	b.n	8006214 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40014000 	.word	0x40014000

08006238 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e041      	b.n	80062ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fc fe82 	bl	8002f68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f000 fc16 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_IC_Start_IT+0x1e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	e013      	b.n	800631e <HAL_TIM_IC_Start_IT+0x46>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_IC_Start_IT+0x2e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006302:	b2db      	uxtb	r3, r3
 8006304:	e00b      	b.n	800631e <HAL_TIM_IC_Start_IT+0x46>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d104      	bne.n	8006316 <HAL_TIM_IC_Start_IT+0x3e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006312:	b2db      	uxtb	r3, r3
 8006314:	e003      	b.n	800631e <HAL_TIM_IC_Start_IT+0x46>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_TIM_IC_Start_IT+0x58>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e013      	b.n	8006358 <HAL_TIM_IC_Start_IT+0x80>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b04      	cmp	r3, #4
 8006334:	d104      	bne.n	8006340 <HAL_TIM_IC_Start_IT+0x68>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e00b      	b.n	8006358 <HAL_TIM_IC_Start_IT+0x80>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b08      	cmp	r3, #8
 8006344:	d104      	bne.n	8006350 <HAL_TIM_IC_Start_IT+0x78>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e003      	b.n	8006358 <HAL_TIM_IC_Start_IT+0x80>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006356:	b2db      	uxtb	r3, r3
 8006358:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d102      	bne.n	8006366 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006360:	7b7b      	ldrb	r3, [r7, #13]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d001      	beq.n	800636a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e0c2      	b.n	80064f0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_TIM_IC_Start_IT+0xa2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006378:	e013      	b.n	80063a2 <HAL_TIM_IC_Start_IT+0xca>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d104      	bne.n	800638a <HAL_TIM_IC_Start_IT+0xb2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006388:	e00b      	b.n	80063a2 <HAL_TIM_IC_Start_IT+0xca>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d104      	bne.n	800639a <HAL_TIM_IC_Start_IT+0xc2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006398:	e003      	b.n	80063a2 <HAL_TIM_IC_Start_IT+0xca>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_IC_Start_IT+0xda>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b0:	e013      	b.n	80063da <HAL_TIM_IC_Start_IT+0x102>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_IC_Start_IT+0xea>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063c0:	e00b      	b.n	80063da <HAL_TIM_IC_Start_IT+0x102>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_IC_Start_IT+0xfa>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d0:	e003      	b.n	80063da <HAL_TIM_IC_Start_IT+0x102>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	d841      	bhi.n	8006464 <HAL_TIM_IC_Start_IT+0x18c>
 80063e0:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <HAL_TIM_IC_Start_IT+0x110>)
 80063e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e6:	bf00      	nop
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	08006465 	.word	0x08006465
 80063f0:	08006465 	.word	0x08006465
 80063f4:	08006465 	.word	0x08006465
 80063f8:	0800642f 	.word	0x0800642f
 80063fc:	08006465 	.word	0x08006465
 8006400:	08006465 	.word	0x08006465
 8006404:	08006465 	.word	0x08006465
 8006408:	08006441 	.word	0x08006441
 800640c:	08006465 	.word	0x08006465
 8006410:	08006465 	.word	0x08006465
 8006414:	08006465 	.word	0x08006465
 8006418:	08006453 	.word	0x08006453
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0202 	orr.w	r2, r2, #2
 800642a:	60da      	str	r2, [r3, #12]
      break;
 800642c:	e01d      	b.n	800646a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0204 	orr.w	r2, r2, #4
 800643c:	60da      	str	r2, [r3, #12]
      break;
 800643e:	e014      	b.n	800646a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0208 	orr.w	r2, r2, #8
 800644e:	60da      	str	r2, [r3, #12]
      break;
 8006450:	e00b      	b.n	800646a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0210 	orr.w	r2, r2, #16
 8006460:	60da      	str	r2, [r3, #12]
      break;
 8006462:	e002      	b.n	800646a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
      break;
 8006468:	bf00      	nop
  }

  if (status == HAL_OK)
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d13e      	bne.n	80064ee <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2201      	movs	r2, #1
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fd4d 	bl	8006f18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <HAL_TIM_IC_Start_IT+0x220>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0x1e2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d013      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0x1e2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_TIM_IC_Start_IT+0x224>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0x1e2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a17      	ldr	r2, [pc, #92]	; (8006500 <HAL_TIM_IC_Start_IT+0x228>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0x1e2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a16      	ldr	r2, [pc, #88]	; (8006504 <HAL_TIM_IC_Start_IT+0x22c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0x1e2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a14      	ldr	r2, [pc, #80]	; (8006508 <HAL_TIM_IC_Start_IT+0x230>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d111      	bne.n	80064de <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b06      	cmp	r3, #6
 80064ca:	d010      	beq.n	80064ee <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	e007      	b.n	80064ee <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40014000 	.word	0x40014000

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0202 	mvn.w	r2, #2
 8006538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fc fa12 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa88 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa8f 	bl	8006a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fc f9e8 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa5e 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa65 	bl	8006a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0208 	mvn.w	r2, #8
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fc f9be 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa34 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa3b 	bl	8006a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fc f994 	bl	8002978 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa0a 	bl	8006a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa11 	bl	8006a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0201 	mvn.w	r2, #1
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fc fa08 	bl	8002aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d10e      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fccc 	bl	8007054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d10e      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d107      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9d6 	bl	8006a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d10e      	bne.n	8006714 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b20      	cmp	r3, #32
 8006702:	d107      	bne.n	8006714 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0220 	mvn.w	r2, #32
 800670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fc96 	bl	8007040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006736:	2302      	movs	r3, #2
 8006738:	e088      	b.n	800684c <HAL_TIM_IC_ConfigChannel+0x130>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d11b      	bne.n	8006780 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f000 fa26 	bl	8006ba8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 020c 	bic.w	r2, r2, #12
 800676a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6999      	ldr	r1, [r3, #24]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	619a      	str	r2, [r3, #24]
 800677e:	e060      	b.n	8006842 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b04      	cmp	r3, #4
 8006784:	d11c      	bne.n	80067c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f000 fa9e 	bl	8006cd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6999      	ldr	r1, [r3, #24]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	021a      	lsls	r2, r3, #8
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	619a      	str	r2, [r3, #24]
 80067be:	e040      	b.n	8006842 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d11b      	bne.n	80067fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6819      	ldr	r1, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f000 faeb 	bl	8006db0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 020c 	bic.w	r2, r2, #12
 80067e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	61da      	str	r2, [r3, #28]
 80067fc:	e021      	b.n	8006842 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b0c      	cmp	r3, #12
 8006802:	d11c      	bne.n	800683e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f000 fb08 	bl	8006e28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006826:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69d9      	ldr	r1, [r3, #28]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	61da      	str	r2, [r3, #28]
 800683c:	e001      	b.n	8006842 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIM_ConfigClockSource+0x1c>
 800686c:	2302      	movs	r3, #2
 800686e:	e0b4      	b.n	80069da <HAL_TIM_ConfigClockSource+0x186>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800688e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a8:	d03e      	beq.n	8006928 <HAL_TIM_ConfigClockSource+0xd4>
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	f200 8087 	bhi.w	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	f000 8086 	beq.w	80069c6 <HAL_TIM_ConfigClockSource+0x172>
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068be:	d87f      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b70      	cmp	r3, #112	; 0x70
 80068c2:	d01a      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0xa6>
 80068c4:	2b70      	cmp	r3, #112	; 0x70
 80068c6:	d87b      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b60      	cmp	r3, #96	; 0x60
 80068ca:	d050      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x11a>
 80068cc:	2b60      	cmp	r3, #96	; 0x60
 80068ce:	d877      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b50      	cmp	r3, #80	; 0x50
 80068d2:	d03c      	beq.n	800694e <HAL_TIM_ConfigClockSource+0xfa>
 80068d4:	2b50      	cmp	r3, #80	; 0x50
 80068d6:	d873      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d058      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x13a>
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d86f      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b30      	cmp	r3, #48	; 0x30
 80068e2:	d064      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d86b      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d060      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d867      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d05c      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d05a      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	e062      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6899      	ldr	r1, [r3, #8]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f000 fae5 	bl	8006ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800691c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
      break;
 8006926:	e04f      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6899      	ldr	r1, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f000 face 	bl	8006ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800694a:	609a      	str	r2, [r3, #8]
      break;
 800694c:	e03c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	461a      	mov	r2, r3
 800695c:	f000 f98c 	bl	8006c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2150      	movs	r1, #80	; 0x50
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fa9b 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 800696c:	e02c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6859      	ldr	r1, [r3, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	f000 f9e8 	bl	8006d50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2160      	movs	r1, #96	; 0x60
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fa8b 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 800698c:	e01c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	461a      	mov	r2, r3
 800699c:	f000 f96c 	bl	8006c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2140      	movs	r1, #64	; 0x40
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fa7b 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 80069ac:	e00c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f000 fa72 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 80069be:	e003      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
      break;
 80069c4:	e000      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d831      	bhi.n	8006a5c <HAL_TIM_ReadCapturedValue+0x78>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_TIM_ReadCapturedValue+0x1c>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006a5d 	.word	0x08006a5d
 8006a10:	08006a3f 	.word	0x08006a3f
 8006a14:	08006a5d 	.word	0x08006a5d
 8006a18:	08006a5d 	.word	0x08006a5d
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a5d 	.word	0x08006a5d
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a53 	.word	0x08006a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	60fb      	str	r3, [r7, #12]

      break;
 8006a3c:	e00f      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	60fb      	str	r3, [r7, #12]

      break;
 8006a46:	e00a      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	60fb      	str	r3, [r7, #12]

      break;
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	60fb      	str	r3, [r7, #12]

      break;
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a5c:	bf00      	nop
  }

  return tmpreg;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a34      	ldr	r2, [pc, #208]	; (8006b8c <TIM_Base_SetConfig+0xe4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00f      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac6:	d00b      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a31      	ldr	r2, [pc, #196]	; (8006b90 <TIM_Base_SetConfig+0xe8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <TIM_Base_SetConfig+0xec>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_Base_SetConfig+0x38>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <TIM_Base_SetConfig+0xf0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d108      	bne.n	8006af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <TIM_Base_SetConfig+0xe4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01b      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b00:	d017      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <TIM_Base_SetConfig+0xe8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <TIM_Base_SetConfig+0xec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <TIM_Base_SetConfig+0xf0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <TIM_Base_SetConfig+0xf4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <TIM_Base_SetConfig+0xf8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0x8a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <TIM_Base_SetConfig+0xfc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <TIM_Base_SetConfig+0xe4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d103      	bne.n	8006b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	615a      	str	r2, [r3, #20]
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800

08006ba8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a24      	ldr	r2, [pc, #144]	; (8006c64 <TIM_TI1_SetConfig+0xbc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <TIM_TI1_SetConfig+0x56>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d00f      	beq.n	8006bfe <TIM_TI1_SetConfig+0x56>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a21      	ldr	r2, [pc, #132]	; (8006c68 <TIM_TI1_SetConfig+0xc0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_TI1_SetConfig+0x56>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4a20      	ldr	r2, [pc, #128]	; (8006c6c <TIM_TI1_SetConfig+0xc4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_TI1_SetConfig+0x56>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <TIM_TI1_SetConfig+0xc8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_TI1_SetConfig+0x56>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <TIM_TI1_SetConfig+0xcc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d101      	bne.n	8006c02 <TIM_TI1_SetConfig+0x5a>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <TIM_TI1_SetConfig+0x5c>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e003      	b.n	8006c22 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f023 030a 	bic.w	r3, r3, #10
 8006c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f003 030a 	and.w	r3, r3, #10
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40014000 	.word	0x40014000

08006c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 030a 	bic.w	r3, r3, #10
 8006cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b087      	sub	sp, #28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0210 	bic.w	r2, r3, #16
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	031b      	lsls	r3, r3, #12
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	621a      	str	r2, [r3, #32]
}
 8006d44:	bf00      	nop
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f023 0210 	bic.w	r2, r3, #16
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	031b      	lsls	r3, r3, #12
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	621a      	str	r2, [r3, #32]
}
 8006e1c:	bf00      	nop
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	031b      	lsls	r3, r3, #12
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	031b      	lsls	r3, r3, #12
 8006e80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f043 0307 	orr.w	r3, r3, #7
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1a      	ldr	r2, [r3, #32]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e050      	b.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1c      	ldr	r2, [pc, #112]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d018      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc8:	d013      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a18      	ldr	r2, [pc, #96]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a16      	ldr	r2, [pc, #88]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a15      	ldr	r2, [pc, #84]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d004      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a13      	ldr	r2, [pc, #76]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10c      	bne.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4313      	orrs	r3, r2
 8007002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	40010000 	.word	0x40010000
 8007030:	40000400 	.word	0x40000400
 8007034:	40000800 	.word	0x40000800
 8007038:	40000c00 	.word	0x40000c00
 800703c:	40014000 	.word	0x40014000

08007040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e03f      	b.n	80070fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fc f806 	bl	80030a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	; 0x24
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f929 	bl	8007304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08a      	sub	sp, #40	; 0x28
 8007106:	af02      	add	r7, sp, #8
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b20      	cmp	r3, #32
 8007120:	d17c      	bne.n	800721c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_UART_Transmit+0x2c>
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e075      	b.n	800721e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_UART_Transmit+0x3e>
 800713c:	2302      	movs	r3, #2
 800713e:	e06e      	b.n	800721e <HAL_UART_Transmit+0x11c>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2221      	movs	r2, #33	; 0x21
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007156:	f7fc f84b 	bl	80031f0 <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	88fa      	ldrh	r2, [r7, #6]
 8007166:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007170:	d108      	bne.n	8007184 <HAL_UART_Transmit+0x82>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	e003      	b.n	800718c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007194:	e02a      	b.n	80071ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2200      	movs	r2, #0
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f840 	bl	8007226 <UART_WaitOnFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e036      	b.n	800721e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	3302      	adds	r3, #2
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	e007      	b.n	80071de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	3301      	adds	r3, #1
 80071dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1cf      	bne.n	8007196 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2140      	movs	r1, #64	; 0x40
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 f810 	bl	8007226 <UART_WaitOnFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b090      	sub	sp, #64	; 0x40
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007236:	e050      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d04c      	beq.n	80072da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0x30>
 8007246:	f7fb ffd3 	bl	80031f0 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007252:	429a      	cmp	r2, r3
 8007254:	d241      	bcs.n	80072da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007276:	637a      	str	r2, [r7, #52]	; 0x34
 8007278:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800727c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e5      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3314      	adds	r3, #20
 8007290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	613b      	str	r3, [r7, #16]
   return(result);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3314      	adds	r3, #20
 80072a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072aa:	623a      	str	r2, [r7, #32]
 80072ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	6a3a      	ldr	r2, [r7, #32]
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e00f      	b.n	80072fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4013      	ands	r3, r2
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	bf0c      	ite	eq
 80072ea:	2301      	moveq	r3, #1
 80072ec:	2300      	movne	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d09f      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3740      	adds	r7, #64	; 0x40
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	b09f      	sub	sp, #124	; 0x7c
 800730a:	af00      	add	r7, sp, #0
 800730c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	68d9      	ldr	r1, [r3, #12]
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	ea40 0301 	orr.w	r3, r0, r1
 8007324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	431a      	orrs	r2, r3
 8007330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	431a      	orrs	r2, r3
 8007336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	4313      	orrs	r3, r2
 800733c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007348:	f021 010c 	bic.w	r1, r1, #12
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007352:	430b      	orrs	r3, r1
 8007354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	6999      	ldr	r1, [r3, #24]
 8007364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	ea40 0301 	orr.w	r3, r0, r1
 800736c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800736e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4bc5      	ldr	r3, [pc, #788]	; (8007688 <UART_SetConfig+0x384>)
 8007374:	429a      	cmp	r2, r3
 8007376:	d004      	beq.n	8007382 <UART_SetConfig+0x7e>
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	4bc3      	ldr	r3, [pc, #780]	; (800768c <UART_SetConfig+0x388>)
 800737e:	429a      	cmp	r2, r3
 8007380:	d103      	bne.n	800738a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007382:	f7fe fe61 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 8007386:	6778      	str	r0, [r7, #116]	; 0x74
 8007388:	e002      	b.n	8007390 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800738a:	f7fe fe49 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 800738e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007398:	f040 80b6 	bne.w	8007508 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800739c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739e:	461c      	mov	r4, r3
 80073a0:	f04f 0500 	mov.w	r5, #0
 80073a4:	4622      	mov	r2, r4
 80073a6:	462b      	mov	r3, r5
 80073a8:	1891      	adds	r1, r2, r2
 80073aa:	6439      	str	r1, [r7, #64]	; 0x40
 80073ac:	415b      	adcs	r3, r3
 80073ae:	647b      	str	r3, [r7, #68]	; 0x44
 80073b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073b4:	1912      	adds	r2, r2, r4
 80073b6:	eb45 0303 	adc.w	r3, r5, r3
 80073ba:	f04f 0000 	mov.w	r0, #0
 80073be:	f04f 0100 	mov.w	r1, #0
 80073c2:	00d9      	lsls	r1, r3, #3
 80073c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073c8:	00d0      	lsls	r0, r2, #3
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	1911      	adds	r1, r2, r4
 80073d0:	6639      	str	r1, [r7, #96]	; 0x60
 80073d2:	416b      	adcs	r3, r5
 80073d4:	667b      	str	r3, [r7, #100]	; 0x64
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	461a      	mov	r2, r3
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	1891      	adds	r1, r2, r2
 80073e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073e4:	415b      	adcs	r3, r3
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073f0:	f7f9 fc02 	bl	8000bf8 <__aeabi_uldivmod>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4ba5      	ldr	r3, [pc, #660]	; (8007690 <UART_SetConfig+0x38c>)
 80073fa:	fba3 2302 	umull	r2, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	011e      	lsls	r6, r3, #4
 8007402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007404:	461c      	mov	r4, r3
 8007406:	f04f 0500 	mov.w	r5, #0
 800740a:	4622      	mov	r2, r4
 800740c:	462b      	mov	r3, r5
 800740e:	1891      	adds	r1, r2, r2
 8007410:	6339      	str	r1, [r7, #48]	; 0x30
 8007412:	415b      	adcs	r3, r3
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
 8007416:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800741a:	1912      	adds	r2, r2, r4
 800741c:	eb45 0303 	adc.w	r3, r5, r3
 8007420:	f04f 0000 	mov.w	r0, #0
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	00d9      	lsls	r1, r3, #3
 800742a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800742e:	00d0      	lsls	r0, r2, #3
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	1911      	adds	r1, r2, r4
 8007436:	65b9      	str	r1, [r7, #88]	; 0x58
 8007438:	416b      	adcs	r3, r5
 800743a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	461a      	mov	r2, r3
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	1891      	adds	r1, r2, r2
 8007448:	62b9      	str	r1, [r7, #40]	; 0x28
 800744a:	415b      	adcs	r3, r3
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007452:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007456:	f7f9 fbcf 	bl	8000bf8 <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4b8c      	ldr	r3, [pc, #560]	; (8007690 <UART_SetConfig+0x38c>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	; 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	3332      	adds	r3, #50	; 0x32
 8007472:	4a87      	ldr	r2, [pc, #540]	; (8007690 <UART_SetConfig+0x38c>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007480:	441e      	add	r6, r3
 8007482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007484:	4618      	mov	r0, r3
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	1894      	adds	r4, r2, r2
 8007490:	623c      	str	r4, [r7, #32]
 8007492:	415b      	adcs	r3, r3
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
 8007496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800749a:	1812      	adds	r2, r2, r0
 800749c:	eb41 0303 	adc.w	r3, r1, r3
 80074a0:	f04f 0400 	mov.w	r4, #0
 80074a4:	f04f 0500 	mov.w	r5, #0
 80074a8:	00dd      	lsls	r5, r3, #3
 80074aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074ae:	00d4      	lsls	r4, r2, #3
 80074b0:	4622      	mov	r2, r4
 80074b2:	462b      	mov	r3, r5
 80074b4:	1814      	adds	r4, r2, r0
 80074b6:	653c      	str	r4, [r7, #80]	; 0x50
 80074b8:	414b      	adcs	r3, r1
 80074ba:	657b      	str	r3, [r7, #84]	; 0x54
 80074bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	461a      	mov	r2, r3
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	1891      	adds	r1, r2, r2
 80074c8:	61b9      	str	r1, [r7, #24]
 80074ca:	415b      	adcs	r3, r3
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80074d6:	f7f9 fb8f 	bl	8000bf8 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4b6c      	ldr	r3, [pc, #432]	; (8007690 <UART_SetConfig+0x38c>)
 80074e0:	fba3 1302 	umull	r1, r3, r3, r2
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	2164      	movs	r1, #100	; 0x64
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	3332      	adds	r3, #50	; 0x32
 80074f2:	4a67      	ldr	r2, [pc, #412]	; (8007690 <UART_SetConfig+0x38c>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	f003 0207 	and.w	r2, r3, #7
 80074fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4432      	add	r2, r6
 8007504:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007506:	e0b9      	b.n	800767c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750a:	461c      	mov	r4, r3
 800750c:	f04f 0500 	mov.w	r5, #0
 8007510:	4622      	mov	r2, r4
 8007512:	462b      	mov	r3, r5
 8007514:	1891      	adds	r1, r2, r2
 8007516:	6139      	str	r1, [r7, #16]
 8007518:	415b      	adcs	r3, r3
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007520:	1912      	adds	r2, r2, r4
 8007522:	eb45 0303 	adc.w	r3, r5, r3
 8007526:	f04f 0000 	mov.w	r0, #0
 800752a:	f04f 0100 	mov.w	r1, #0
 800752e:	00d9      	lsls	r1, r3, #3
 8007530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007534:	00d0      	lsls	r0, r2, #3
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	eb12 0804 	adds.w	r8, r2, r4
 800753e:	eb43 0905 	adc.w	r9, r3, r5
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	4618      	mov	r0, r3
 8007548:	f04f 0100 	mov.w	r1, #0
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	008b      	lsls	r3, r1, #2
 8007556:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800755a:	0082      	lsls	r2, r0, #2
 800755c:	4640      	mov	r0, r8
 800755e:	4649      	mov	r1, r9
 8007560:	f7f9 fb4a 	bl	8000bf8 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4b49      	ldr	r3, [pc, #292]	; (8007690 <UART_SetConfig+0x38c>)
 800756a:	fba3 2302 	umull	r2, r3, r3, r2
 800756e:	095b      	lsrs	r3, r3, #5
 8007570:	011e      	lsls	r6, r3, #4
 8007572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007574:	4618      	mov	r0, r3
 8007576:	f04f 0100 	mov.w	r1, #0
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	1894      	adds	r4, r2, r2
 8007580:	60bc      	str	r4, [r7, #8]
 8007582:	415b      	adcs	r3, r3
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800758a:	1812      	adds	r2, r2, r0
 800758c:	eb41 0303 	adc.w	r3, r1, r3
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	f04f 0500 	mov.w	r5, #0
 8007598:	00dd      	lsls	r5, r3, #3
 800759a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800759e:	00d4      	lsls	r4, r2, #3
 80075a0:	4622      	mov	r2, r4
 80075a2:	462b      	mov	r3, r5
 80075a4:	1814      	adds	r4, r2, r0
 80075a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80075a8:	414b      	adcs	r3, r1
 80075aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f04f 0100 	mov.w	r1, #0
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	008b      	lsls	r3, r1, #2
 80075c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075c4:	0082      	lsls	r2, r0, #2
 80075c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80075ca:	f7f9 fb15 	bl	8000bf8 <__aeabi_uldivmod>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <UART_SetConfig+0x38c>)
 80075d4:	fba3 1302 	umull	r1, r3, r3, r2
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	2164      	movs	r1, #100	; 0x64
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	3332      	adds	r3, #50	; 0x32
 80075e6:	4a2a      	ldr	r2, [pc, #168]	; (8007690 <UART_SetConfig+0x38c>)
 80075e8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075f2:	441e      	add	r6, r3
 80075f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f6:	4618      	mov	r0, r3
 80075f8:	f04f 0100 	mov.w	r1, #0
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	1894      	adds	r4, r2, r2
 8007602:	603c      	str	r4, [r7, #0]
 8007604:	415b      	adcs	r3, r3
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760c:	1812      	adds	r2, r2, r0
 800760e:	eb41 0303 	adc.w	r3, r1, r3
 8007612:	f04f 0400 	mov.w	r4, #0
 8007616:	f04f 0500 	mov.w	r5, #0
 800761a:	00dd      	lsls	r5, r3, #3
 800761c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007620:	00d4      	lsls	r4, r2, #3
 8007622:	4622      	mov	r2, r4
 8007624:	462b      	mov	r3, r5
 8007626:	eb12 0a00 	adds.w	sl, r2, r0
 800762a:	eb43 0b01 	adc.w	fp, r3, r1
 800762e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	4618      	mov	r0, r3
 8007634:	f04f 0100 	mov.w	r1, #0
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	008b      	lsls	r3, r1, #2
 8007642:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007646:	0082      	lsls	r2, r0, #2
 8007648:	4650      	mov	r0, sl
 800764a:	4659      	mov	r1, fp
 800764c:	f7f9 fad4 	bl	8000bf8 <__aeabi_uldivmod>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <UART_SetConfig+0x38c>)
 8007656:	fba3 1302 	umull	r1, r3, r3, r2
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	2164      	movs	r1, #100	; 0x64
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	3332      	adds	r3, #50	; 0x32
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <UART_SetConfig+0x38c>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4432      	add	r2, r6
 800767a:	609a      	str	r2, [r3, #8]
}
 800767c:	bf00      	nop
 800767e:	377c      	adds	r7, #124	; 0x7c
 8007680:	46bd      	mov	sp, r7
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	bf00      	nop
 8007688:	40011000 	.word	0x40011000
 800768c:	40011400 	.word	0x40011400
 8007690:	51eb851f 	.word	0x51eb851f

08007694 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800769e:	2300      	movs	r3, #0
 80076a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fca4 	bl	8008ff2 <VL53L0X_get_offset_calibration_data_micro_meter>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80076ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	218a      	movs	r1, #138	; 0x8a
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f004 fc03 	bl	800bee0 <VL53L0X_WrByte>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 80076de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80076ec:	b5b0      	push	{r4, r5, r7, lr}
 80076ee:	b096      	sub	sp, #88	; 0x58
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80076fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d107      	bne.n	8007712 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007702:	2200      	movs	r2, #0
 8007704:	2188      	movs	r1, #136	; 0x88
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f004 fbea 	bl	800bee0 <VL53L0X_WrByte>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007720:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800772a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a9e      	ldr	r2, [pc, #632]	; (80079ac <VL53L0X_DataInit+0x2c0>)
 8007732:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a9d      	ldr	r2, [pc, #628]	; (80079b0 <VL53L0X_DataInit+0x2c4>)
 800773a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007744:	f107 0310 	add.w	r3, r7, #16
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fab4 	bl	8007cb8 <VL53L0X_GetDeviceParameters>
 8007750:	4603      	mov	r3, r0
 8007752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007756:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800775a:	2b00      	cmp	r3, #0
 800775c:	d112      	bne.n	8007784 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800775e:	2300      	movs	r3, #0
 8007760:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007762:	2300      	movs	r3, #0
 8007764:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f103 0410 	add.w	r4, r3, #16
 800776c:	f107 0510 	add.w	r5, r7, #16
 8007770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800777a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2264      	movs	r2, #100	; 0x64
 8007788:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007792:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800779c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80077a6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80077b2:	2201      	movs	r2, #1
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f004 fb92 	bl	800bee0 <VL53L0X_WrByte>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80077ca:	2201      	movs	r2, #1
 80077cc:	21ff      	movs	r1, #255	; 0xff
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f004 fb86 	bl	800bee0 <VL53L0X_WrByte>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077dc:	4313      	orrs	r3, r2
 80077de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f004 fb7a 	bl	800bee0 <VL53L0X_WrByte>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80077fa:	f107 030f 	add.w	r3, r7, #15
 80077fe:	461a      	mov	r2, r3
 8007800:	2191      	movs	r1, #145	; 0x91
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f004 fbee 	bl	800bfe4 <VL53L0X_RdByte>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007810:	4313      	orrs	r3, r2
 8007812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800781e:	2201      	movs	r2, #1
 8007820:	2100      	movs	r1, #0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f004 fb5c 	bl	800bee0 <VL53L0X_WrByte>
 8007828:	4603      	mov	r3, r0
 800782a:	461a      	mov	r2, r3
 800782c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007830:	4313      	orrs	r3, r2
 8007832:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007836:	2200      	movs	r2, #0
 8007838:	21ff      	movs	r1, #255	; 0xff
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f004 fb50 	bl	800bee0 <VL53L0X_WrByte>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007848:	4313      	orrs	r3, r2
 800784a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800784e:	2200      	movs	r2, #0
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f004 fb44 	bl	800bee0 <VL53L0X_WrByte>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007860:	4313      	orrs	r3, r2
 8007862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007866:	2300      	movs	r3, #0
 8007868:	653b      	str	r3, [r7, #80]	; 0x50
 800786a:	e014      	b.n	8007896 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800786c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007870:	2b00      	cmp	r3, #0
 8007872:	d114      	bne.n	800789e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007876:	b29b      	uxth	r3, r3
 8007878:	2201      	movs	r2, #1
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fd0f 	bl	80082a0 <VL53L0X_SetLimitCheckEnable>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788a:	4313      	orrs	r3, r2
 800788c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007892:	3301      	adds	r3, #1
 8007894:	653b      	str	r3, [r7, #80]	; 0x50
 8007896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007898:	2b05      	cmp	r3, #5
 800789a:	dde7      	ble.n	800786c <VL53L0X_DataInit+0x180>
 800789c:	e000      	b.n	80078a0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800789e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80078a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d107      	bne.n	80078b8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078a8:	2200      	movs	r2, #0
 80078aa:	2102      	movs	r1, #2
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fcf7 	bl	80082a0 <VL53L0X_SetLimitCheckEnable>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80078b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078c0:	2200      	movs	r2, #0
 80078c2:	2103      	movs	r1, #3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fceb 	bl	80082a0 <VL53L0X_SetLimitCheckEnable>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80078d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078d8:	2200      	movs	r2, #0
 80078da:	2104      	movs	r1, #4
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fcdf 	bl	80082a0 <VL53L0X_SetLimitCheckEnable>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80078e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d107      	bne.n	8007900 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078f0:	2200      	movs	r2, #0
 80078f2:	2105      	movs	r1, #5
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fcd3 	bl	80082a0 <VL53L0X_SetLimitCheckEnable>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007900:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007904:	2b00      	cmp	r3, #0
 8007906:	d108      	bne.n	800791a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007908:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800790c:	2100      	movs	r1, #0
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fd76 	bl	8008400 <VL53L0X_SetLimitCheckValue>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800791a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007926:	2101      	movs	r1, #1
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd69 	bl	8008400 <VL53L0X_SetLimitCheckValue>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007934:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007938:	2b00      	cmp	r3, #0
 800793a:	d108      	bne.n	800794e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800793c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007940:	2102      	movs	r1, #2
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fd5c 	bl	8008400 <VL53L0X_SetLimitCheckValue>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800794e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007956:	2200      	movs	r2, #0
 8007958:	2103      	movs	r1, #3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fd50 	bl	8008400 <VL53L0X_SetLimitCheckValue>
 8007960:	4603      	mov	r3, r0
 8007962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007966:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10f      	bne.n	800798e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	22ff      	movs	r2, #255	; 0xff
 8007972:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007976:	22ff      	movs	r2, #255	; 0xff
 8007978:	2101      	movs	r1, #1
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f004 fab0 	bl	800bee0 <VL53L0X_WrByte>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800798e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800799e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3758      	adds	r7, #88	; 0x58
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bdb0      	pop	{r4, r5, r7, pc}
 80079aa:	bf00      	nop
 80079ac:	00016b85 	.word	0x00016b85
 80079b0:	000970a4 	.word	0x000970a4

080079b4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80079b4:	b5b0      	push	{r4, r5, r7, lr}
 80079b6:	b09e      	sub	sp, #120	; 0x78
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80079c2:	f107 031c 	add.w	r3, r7, #28
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f006 fe67 	bl	800e69e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80079f0:	2101      	movs	r1, #1
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f002 fa40 	bl	8009e78 <VL53L0X_get_info_from_device>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007a04:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8007a10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d80d      	bhi.n	8007a34 <VL53L0X_StaticInit+0x80>
 8007a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d102      	bne.n	8007a26 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d806      	bhi.n	8007a34 <VL53L0X_StaticInit+0x80>
 8007a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10e      	bne.n	8007a4c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a30:	2b0c      	cmp	r3, #12
 8007a32:	d90b      	bls.n	8007a4c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007a34:	f107 0218 	add.w	r2, r7, #24
 8007a38:	f107 0314 	add.w	r3, r7, #20
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fcd2 	bl	80093e8 <VL53L0X_perform_ref_spad_management>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007a4a:	e009      	b.n	8007a60 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a50:	461a      	mov	r2, r3
 8007a52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fed3 	bl	8009800 <VL53L0X_set_reference_spads>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007a60:	4b94      	ldr	r3, [pc, #592]	; (8007cb4 <VL53L0X_StaticInit+0x300>)
 8007a62:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007a64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10f      	bne.n	8007a8c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8007a72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007a76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a86:	e001      	b.n	8007a8c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007a88:	4b8a      	ldr	r3, [pc, #552]	; (8007cb4 <VL53L0X_StaticInit+0x300>)
 8007a8a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007a8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007a94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f003 fb0c 	bl	800b0b4 <VL53L0X_load_tuning_settings>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007aa2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2304      	movs	r3, #4
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f8cb 	bl	8008c50 <VL53L0X_SetGpioConfig>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ac0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d121      	bne.n	8007b0c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ac8:	2201      	movs	r2, #1
 8007aca:	21ff      	movs	r1, #255	; 0xff
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f004 fa07 	bl	800bee0 <VL53L0X_WrByte>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007ad8:	f107 031a 	add.w	r3, r7, #26
 8007adc:	461a      	mov	r2, r3
 8007ade:	2184      	movs	r1, #132	; 0x84
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f004 faa9 	bl	800c038 <VL53L0X_RdWord>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007af4:	2200      	movs	r2, #0
 8007af6:	21ff      	movs	r1, #255	; 0xff
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f004 f9f1 	bl	800bee0 <VL53L0X_WrByte>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007b14:	8b7b      	ldrh	r3, [r7, #26]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	461a      	mov	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007b20:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d108      	bne.n	8007b3a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007b28:	f107 031c 	add.w	r3, r7, #28
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8c2 	bl	8007cb8 <VL53L0X_GetDeviceParameters>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007b3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d110      	bne.n	8007b64 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007b42:	f107 0319 	add.w	r3, r7, #25
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f984 	bl	8007e56 <VL53L0X_GetFractionEnable>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007b54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007b5c:	7e7a      	ldrb	r2, [r7, #25]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007b64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10e      	bne.n	8007b8a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f103 0410 	add.w	r4, r3, #16
 8007b72:	f107 051c 	add.w	r5, r7, #28
 8007b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007b8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d111      	bne.n	8007bb6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007b92:	f107 0319 	add.w	r3, r7, #25
 8007b96:	461a      	mov	r2, r3
 8007b98:	2101      	movs	r1, #1
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f004 fa22 	bl	800bfe4 <VL53L0X_RdByte>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007ba6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007bae:	7e7a      	ldrb	r2, [r7, #25]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007bb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d107      	bne.n	8007bce <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f9a4 	bl	8007f10 <VL53L0X_SetSequenceStepEnable>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007bce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d107      	bne.n	8007be6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2102      	movs	r1, #2
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f998 	bl	8007f10 <VL53L0X_SetSequenceStepEnable>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007be6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007bf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007bfe:	f107 0313 	add.w	r3, r7, #19
 8007c02:	461a      	mov	r2, r3
 8007c04:	2100      	movs	r1, #0
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f96a 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d103      	bne.n	8007c22 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c1a:	7cfa      	ldrb	r2, [r7, #19]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007c2a:	f107 0313 	add.w	r3, r7, #19
 8007c2e:	461a      	mov	r2, r3
 8007c30:	2101      	movs	r1, #1
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f954 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c46:	7cfa      	ldrb	r2, [r7, #19]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007c56:	f107 030c 	add.w	r3, r7, #12
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	2103      	movs	r1, #3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f002 fe8c 	bl	800a97c <get_sequence_step_timeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8007c82:	f107 030c 	add.w	r3, r7, #12
 8007c86:	461a      	mov	r2, r3
 8007c88:	2104      	movs	r1, #4
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f002 fe76 	bl	800a97c <get_sequence_step_timeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ca6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3770      	adds	r7, #112	; 0x70
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000000c 	.word	0x2000000c

08007cb8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f8b0 	bl	8007e30 <VL53L0X_GetDeviceMode>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d107      	bne.n	8007cec <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa60 	bl	80081a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d107      	bne.n	8007d12 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	3310      	adds	r3, #16
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fa96 	bl	800823a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8007d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	3314      	adds	r3, #20
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fcb7 	bl	8007694 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d134      	bne.n	8007d9c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	e02a      	b.n	8007d8e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d12a      	bne.n	8007d96 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	b299      	uxth	r1, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3308      	adds	r3, #8
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3304      	adds	r3, #4
 8007d50:	461a      	mov	r2, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fbb6 	bl	80084c4 <VL53L0X_GetLimitCheckValue>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d117      	bne.n	8007d9a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	b299      	uxth	r1, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	3318      	adds	r3, #24
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	4413      	add	r3, r2
 8007d76:	461a      	mov	r2, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fb1d 	bl	80083b8 <VL53L0X_GetLimitCheckEnable>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461a      	mov	r2, r3
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	ddd1      	ble.n	8007d38 <VL53L0X_GetDeviceParameters+0x80>
 8007d94:	e002      	b.n	8007d9c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007d96:	bf00      	nop
 8007d98:	e000      	b.n	8007d9c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007d9a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d107      	bne.n	8007db4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	333c      	adds	r3, #60	; 0x3c
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fc18 	bl	80085e0 <VL53L0X_GetWrapAroundCheckEnable>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d107      	bne.n	8007dcc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f879 	bl	8007eba <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	2b15      	cmp	r3, #21
 8007dec:	bf8c      	ite	hi
 8007dee:	2201      	movhi	r2, #1
 8007df0:	2200      	movls	r2, #0
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	d10e      	bne.n	8007e16 <VL53L0X_SetDeviceMode+0x3e>
 8007df8:	2201      	movs	r2, #1
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <VL53L0X_SetDeviceMode+0x54>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bf14      	ite	ne
 8007e04:	2301      	movne	r3, #1
 8007e06:	2300      	moveq	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	741a      	strb	r2, [r3, #16]
		break;
 8007e14:	e001      	b.n	8007e1a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007e16:	23f8      	movs	r3, #248	; 0xf8
 8007e18:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	0030000b 	.word	0x0030000b

08007e30 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7c1a      	ldrb	r2, [r3, #16]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	2109      	movs	r1, #9
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f004 f8bb 	bl	800bfe4 <VL53L0X_RdByte>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f002 ff73 	bl	800ad90 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f003 f840 	bl	800af50 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f002 ff12 	bl	800ad22 <VL53L0X_get_vcsel_pulse_period>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f2c:	f107 030f 	add.w	r3, r7, #15
 8007f30:	461a      	mov	r2, r3
 8007f32:	2101      	movs	r1, #1
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f004 f855 	bl	800bfe4 <VL53L0X_RdByte>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d15a      	bne.n	8008000 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007f4a:	78bb      	ldrb	r3, [r7, #2]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d12b      	bne.n	8007fa8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d825      	bhi.n	8007fa2 <VL53L0X_SetSequenceStepEnable+0x92>
 8007f56:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08007f71 	.word	0x08007f71
 8007f60:	08007f7b 	.word	0x08007f7b
 8007f64:	08007f85 	.word	0x08007f85
 8007f68:	08007f8f 	.word	0x08007f8f
 8007f6c:	08007f99 	.word	0x08007f99
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007f70:	7dbb      	ldrb	r3, [r7, #22]
 8007f72:	f043 0310 	orr.w	r3, r3, #16
 8007f76:	75bb      	strb	r3, [r7, #22]
				break;
 8007f78:	e043      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007f7a:	7dbb      	ldrb	r3, [r7, #22]
 8007f7c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007f80:	75bb      	strb	r3, [r7, #22]
				break;
 8007f82:	e03e      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007f84:	7dbb      	ldrb	r3, [r7, #22]
 8007f86:	f043 0304 	orr.w	r3, r3, #4
 8007f8a:	75bb      	strb	r3, [r7, #22]
				break;
 8007f8c:	e039      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007f8e:	7dbb      	ldrb	r3, [r7, #22]
 8007f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f94:	75bb      	strb	r3, [r7, #22]
				break;
 8007f96:	e034      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007f98:	7dbb      	ldrb	r3, [r7, #22]
 8007f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f9e:	75bb      	strb	r3, [r7, #22]
				break;
 8007fa0:	e02f      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fa2:	23fc      	movs	r3, #252	; 0xfc
 8007fa4:	75fb      	strb	r3, [r7, #23]
 8007fa6:	e02c      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d825      	bhi.n	8007ffa <VL53L0X_SetSequenceStepEnable+0xea>
 8007fae:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fd3 	.word	0x08007fd3
 8007fbc:	08007fdd 	.word	0x08007fdd
 8007fc0:	08007fe7 	.word	0x08007fe7
 8007fc4:	08007ff1 	.word	0x08007ff1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007fc8:	7dbb      	ldrb	r3, [r7, #22]
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	75bb      	strb	r3, [r7, #22]
				break;
 8007fd0:	e017      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007fd2:	7dbb      	ldrb	r3, [r7, #22]
 8007fd4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007fd8:	75bb      	strb	r3, [r7, #22]
				break;
 8007fda:	e012      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
 8007fde:	f023 0304 	bic.w	r3, r3, #4
 8007fe2:	75bb      	strb	r3, [r7, #22]
				break;
 8007fe4:	e00d      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007fe6:	7dbb      	ldrb	r3, [r7, #22]
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	75bb      	strb	r3, [r7, #22]
				break;
 8007fee:	e008      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007ff0:	7dbb      	ldrb	r3, [r7, #22]
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	75bb      	strb	r3, [r7, #22]
				break;
 8007ff8:	e003      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ffa:	23fc      	movs	r3, #252	; 0xfc
 8007ffc:	75fb      	strb	r3, [r7, #23]
 8007ffe:	e000      	b.n	8008002 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8008000:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	7dba      	ldrb	r2, [r7, #22]
 8008006:	429a      	cmp	r2, r3
 8008008:	d01e      	beq.n	8008048 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800800a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8008012:	7dbb      	ldrb	r3, [r7, #22]
 8008014:	461a      	mov	r2, r3
 8008016:	2101      	movs	r1, #1
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f003 ff61 	bl	800bee0 <VL53L0X_WrByte>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d103      	bne.n	8008032 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	7dba      	ldrb	r2, [r7, #22]
 800802e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008040:	6939      	ldr	r1, [r7, #16]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff ff26 	bl	8007e94 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	607b      	str	r3, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	72fb      	strb	r3, [r7, #11]
 8008062:	4613      	mov	r3, r2
 8008064:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008066:	2300      	movs	r3, #0
 8008068:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	2b04      	cmp	r3, #4
 8008074:	d836      	bhi.n	80080e4 <sequence_step_enabled+0x90>
 8008076:	a201      	add	r2, pc, #4	; (adr r2, 800807c <sequence_step_enabled+0x28>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	08008091 	.word	0x08008091
 8008080:	080080a3 	.word	0x080080a3
 8008084:	080080b5 	.word	0x080080b5
 8008088:	080080c7 	.word	0x080080c7
 800808c:	080080d9 	.word	0x080080d9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008090:	7abb      	ldrb	r3, [r7, #10]
 8008092:	111b      	asrs	r3, r3, #4
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	701a      	strb	r2, [r3, #0]
		break;
 80080a0:	e022      	b.n	80080e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80080a2:	7abb      	ldrb	r3, [r7, #10]
 80080a4:	10db      	asrs	r3, r3, #3
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	701a      	strb	r2, [r3, #0]
		break;
 80080b2:	e019      	b.n	80080e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80080b4:	7abb      	ldrb	r3, [r7, #10]
 80080b6:	109b      	asrs	r3, r3, #2
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	701a      	strb	r2, [r3, #0]
		break;
 80080c4:	e010      	b.n	80080e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80080c6:	7abb      	ldrb	r3, [r7, #10]
 80080c8:	119b      	asrs	r3, r3, #6
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	701a      	strb	r2, [r3, #0]
		break;
 80080d6:	e007      	b.n	80080e8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80080d8:	7abb      	ldrb	r3, [r7, #10]
 80080da:	09db      	lsrs	r3, r3, #7
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	701a      	strb	r2, [r3, #0]
		break;
 80080e2:	e001      	b.n	80080e8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080e4:	23fc      	movs	r3, #252	; 0xfc
 80080e6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	371c      	adds	r7, #28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800810a:	f107 030e 	add.w	r3, r7, #14
 800810e:	461a      	mov	r2, r3
 8008110:	2101      	movs	r1, #1
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f003 ff66 	bl	800bfe4 <VL53L0X_RdByte>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800811c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d107      	bne.n	8008134 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008124:	7bba      	ldrb	r2, [r7, #14]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2100      	movs	r1, #0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff ff92 	bl	8008054 <sequence_step_enabled>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d108      	bne.n	800814e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800813c:	7bba      	ldrb	r2, [r7, #14]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	3302      	adds	r3, #2
 8008142:	2101      	movs	r1, #1
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff ff85 	bl	8008054 <sequence_step_enabled>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800814e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008156:	7bba      	ldrb	r2, [r7, #14]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	2102      	movs	r1, #2
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff ff78 	bl	8008054 <sequence_step_enabled>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d108      	bne.n	8008182 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008170:	7bba      	ldrb	r2, [r7, #14]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	3303      	adds	r3, #3
 8008176:	2103      	movs	r1, #3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ff6b 	bl	8008054 <sequence_step_enabled>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d108      	bne.n	800819c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800818a:	7bba      	ldrb	r2, [r7, #14]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	3304      	adds	r3, #4
 8008190:	2104      	movs	r1, #4
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ff5e 	bl	8008054 <sequence_step_enabled>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800819c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80081b6:	f107 030c 	add.w	r3, r7, #12
 80081ba:	461a      	mov	r2, r3
 80081bc:	21f8      	movs	r1, #248	; 0xf8
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f003 ff3a 	bl	800c038 <VL53L0X_RdWord>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80081c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d108      	bne.n	80081e2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	461a      	mov	r2, r3
 80081d6:	2104      	movs	r1, #4
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f003 ff65 	bl	800c0a8 <VL53L0X_RdDWord>
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10c      	bne.n	8008204 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80081ea:	89bb      	ldrh	r3, [r7, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	89ba      	ldrh	r2, [r7, #12]
 80081f4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008204:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7f1b      	ldrb	r3, [r3, #28]
 8008222:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	7bba      	ldrb	r2, [r7, #14]
 8008228:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008248:	f107 030e 	add.w	r3, r7, #14
 800824c:	461a      	mov	r2, r3
 800824e:	2120      	movs	r1, #32
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f003 fef1 	bl	800c038 <VL53L0X_RdWord>
 8008256:	4603      	mov	r3, r0
 8008258:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800825a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d118      	bne.n	8008294 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008262:	89fb      	ldrh	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	771a      	strb	r2, [r3, #28]
 800827a:	e00b      	b.n	8008294 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	807b      	strh	r3, [r7, #2]
 80082ac:	4613      	mov	r3, r2
 80082ae:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80082c0:	887b      	ldrh	r3, [r7, #2]
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d902      	bls.n	80082cc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082c6:	23fc      	movs	r3, #252	; 0xfc
 80082c8:	75fb      	strb	r3, [r7, #23]
 80082ca:	e05b      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80082cc:	787b      	ldrb	r3, [r7, #1]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80082da:	2301      	movs	r3, #1
 80082dc:	73bb      	strb	r3, [r7, #14]
 80082de:	e00a      	b.n	80082f6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	330c      	adds	r3, #12
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80082f6:	887b      	ldrh	r3, [r7, #2]
 80082f8:	2b05      	cmp	r3, #5
 80082fa:	d841      	bhi.n	8008380 <VL53L0X_SetLimitCheckEnable+0xe0>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <VL53L0X_SetLimitCheckEnable+0x64>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	0800831d 	.word	0x0800831d
 8008308:	08008327 	.word	0x08008327
 800830c:	0800833d 	.word	0x0800833d
 8008310:	08008347 	.word	0x08008347
 8008314:	08008351 	.word	0x08008351
 8008318:	08008369 	.word	0x08008369

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7bfa      	ldrb	r2, [r7, #15]
 8008320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008324:	e02e      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800832a:	b29b      	uxth	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	2144      	movs	r1, #68	; 0x44
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f003 fdf9 	bl	800bf28 <VL53L0X_WrWord>
 8008336:	4603      	mov	r3, r0
 8008338:	75fb      	strb	r3, [r7, #23]

			break;
 800833a:	e023      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7bfa      	ldrb	r2, [r7, #15]
 8008340:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008344:	e01e      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	7bfa      	ldrb	r2, [r7, #15]
 800834a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800834e:	e019      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008356:	7b7b      	ldrb	r3, [r7, #13]
 8008358:	22fe      	movs	r2, #254	; 0xfe
 800835a:	2160      	movs	r1, #96	; 0x60
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f003 fe0d 	bl	800bf7c <VL53L0X_UpdateByte>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008366:	e00d      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800836e:	7b7b      	ldrb	r3, [r7, #13]
 8008370:	22ef      	movs	r2, #239	; 0xef
 8008372:	2160      	movs	r1, #96	; 0x60
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f003 fe01 	bl	800bf7c <VL53L0X_UpdateByte>
 800837a:	4603      	mov	r3, r0
 800837c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800837e:	e001      	b.n	8008384 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008380:	23fc      	movs	r3, #252	; 0xfc
 8008382:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10f      	bne.n	80083ac <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800838c:	787b      	ldrb	r3, [r7, #1]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4413      	add	r3, r2
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800839e:	e005      	b.n	80083ac <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80083a0:	887b      	ldrh	r3, [r7, #2]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	460b      	mov	r3, r1
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80083ca:	897b      	ldrh	r3, [r7, #10]
 80083cc:	2b05      	cmp	r3, #5
 80083ce:	d905      	bls.n	80083dc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083d0:	23fc      	movs	r3, #252	; 0xfc
 80083d2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	e008      	b.n	80083ee <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80083dc:	897b      	ldrh	r3, [r7, #10]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7dba      	ldrb	r2, [r7, #22]
 80083ec:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	460b      	mov	r3, r1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008412:	897b      	ldrh	r3, [r7, #10]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800841c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800841e:	7dbb      	ldrb	r3, [r7, #22]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d107      	bne.n	8008434 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008424:	897b      	ldrh	r3, [r7, #10]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	330c      	adds	r3, #12
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	e040      	b.n	80084b6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008434:	897b      	ldrh	r3, [r7, #10]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d830      	bhi.n	800849c <VL53L0X_SetLimitCheckValue+0x9c>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <VL53L0X_SetLimitCheckValue+0x40>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008459 	.word	0x08008459
 8008444:	08008461 	.word	0x08008461
 8008448:	08008477 	.word	0x08008477
 800844c:	0800847f 	.word	0x0800847f
 8008450:	08008487 	.word	0x08008487
 8008454:	08008487 	.word	0x08008487

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800845e:	e01f      	b.n	80084a0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008464:	b29b      	uxth	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	2144      	movs	r1, #68	; 0x44
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f003 fd5c 	bl	800bf28 <VL53L0X_WrWord>
 8008470:	4603      	mov	r3, r0
 8008472:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008474:	e014      	b.n	80084a0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800847c:	e010      	b.n	80084a0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008484:	e00c      	b.n	80084a0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800848a:	b29b      	uxth	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	2164      	movs	r1, #100	; 0x64
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f003 fd49 	bl	800bf28 <VL53L0X_WrWord>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800849a:	e001      	b.n	80084a0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800849c:	23fc      	movs	r3, #252	; 0xfc
 800849e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80084a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d106      	bne.n	80084b6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80084a8:	897b      	ldrh	r3, [r7, #10]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	330c      	adds	r3, #12
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop

080084c4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80084da:	897b      	ldrh	r3, [r7, #10]
 80084dc:	2b05      	cmp	r3, #5
 80084de:	d847      	bhi.n	8008570 <VL53L0X_GetLimitCheckValue+0xac>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <VL53L0X_GetLimitCheckValue+0x24>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008501 	.word	0x08008501
 80084ec:	0800850d 	.word	0x0800850d
 80084f0:	08008533 	.word	0x08008533
 80084f4:	0800853f 	.word	0x0800853f
 80084f8:	0800854b 	.word	0x0800854b
 80084fc:	0800854b 	.word	0x0800854b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	77bb      	strb	r3, [r7, #30]
		break;
 800850a:	e033      	b.n	8008574 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800850c:	f107 0316 	add.w	r3, r7, #22
 8008510:	461a      	mov	r2, r3
 8008512:	2144      	movs	r1, #68	; 0x44
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f003 fd8f 	bl	800c038 <VL53L0X_RdWord>
 800851a:	4603      	mov	r3, r0
 800851c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800851e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008526:	8afb      	ldrh	r3, [r7, #22]
 8008528:	025b      	lsls	r3, r3, #9
 800852a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800852c:	2301      	movs	r3, #1
 800852e:	77bb      	strb	r3, [r7, #30]
		break;
 8008530:	e020      	b.n	8008574 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008536:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	77bb      	strb	r3, [r7, #30]
		break;
 800853c:	e01a      	b.n	8008574 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	77bb      	strb	r3, [r7, #30]
		break;
 8008548:	e014      	b.n	8008574 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800854a:	f107 0316 	add.w	r3, r7, #22
 800854e:	461a      	mov	r2, r3
 8008550:	2164      	movs	r1, #100	; 0x64
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f003 fd70 	bl	800c038 <VL53L0X_RdWord>
 8008558:	4603      	mov	r3, r0
 800855a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800855c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008564:	8afb      	ldrh	r3, [r7, #22]
 8008566:	025b      	lsls	r3, r3, #9
 8008568:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	77bb      	strb	r3, [r7, #30]
		break;
 800856e:	e001      	b.n	8008574 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008570:	23fc      	movs	r3, #252	; 0xfc
 8008572:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008574:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d12a      	bne.n	80085d2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800857c:	7fbb      	ldrb	r3, [r7, #30]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d124      	bne.n	80085cc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d110      	bne.n	80085aa <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008588:	897b      	ldrh	r3, [r7, #10]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	330c      	adds	r3, #12
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800859c:	897b      	ldrh	r3, [r7, #10]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80085a8:	e013      	b.n	80085d2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80085b0:	897b      	ldrh	r3, [r7, #10]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	330c      	adds	r3, #12
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80085be:	897b      	ldrh	r3, [r7, #10]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80085ca:	e002      	b.n	80085d2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085d2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop

080085e0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80085ee:	f107 030e 	add.w	r3, r7, #14
 80085f2:	461a      	mov	r2, r3
 80085f4:	2101      	movs	r1, #1
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f003 fcf4 	bl	800bfe4 <VL53L0X_RdByte>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10e      	bne.n	8008626 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008608:	7bba      	ldrb	r2, [r7, #14]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	b25b      	sxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	da03      	bge.n	8008620 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e002      	b.n	8008626 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d104      	bne.n	8008638 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781a      	ldrb	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008650:	f107 030e 	add.w	r3, r7, #14
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff fbea 	bl	8007e30 <VL53L0X_GetDeviceMode>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d107      	bne.n	8008678 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d104      	bne.n	8008678 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f898 	bl	80087a4 <VL53L0X_StartMeasurement>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 fb3f 	bl	8009d04 <VL53L0X_measurement_poll_for_completion>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800868a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d106      	bne.n	80086a0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2203      	movs	r2, #3
 800869c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80086a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80086bc:	2301      	movs	r3, #1
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f001 fae1 	bl	8009c8a <VL53L0X_perform_ref_calibration>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80086cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80086ee:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80086f0:	7dbb      	ldrb	r3, [r7, #22]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d005      	beq.n	8008702 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80086f6:	7dbb      	ldrb	r3, [r7, #22]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d002      	beq.n	8008702 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80086fc:	7dbb      	ldrb	r3, [r7, #22]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d147      	bne.n	8008792 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	f107 0210 	add.w	r2, r7, #16
 800870a:	2101      	movs	r1, #1
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fbc3 	bl	8008e98 <VL53L0X_GetInterruptThresholds>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800871c:	d803      	bhi.n	8008726 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800871e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008720:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008724:	d935      	bls.n	8008792 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008726:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d131      	bne.n	8008792 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d006      	beq.n	8008742 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008734:	491a      	ldr	r1, [pc, #104]	; (80087a0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f002 fcbc 	bl	800b0b4 <VL53L0X_load_tuning_settings>
 800873c:	4603      	mov	r3, r0
 800873e:	75fb      	strb	r3, [r7, #23]
 8008740:	e027      	b.n	8008792 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008742:	2204      	movs	r2, #4
 8008744:	21ff      	movs	r1, #255	; 0xff
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f003 fbca 	bl	800bee0 <VL53L0X_WrByte>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	4313      	orrs	r3, r2
 8008754:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008756:	2200      	movs	r2, #0
 8008758:	2170      	movs	r1, #112	; 0x70
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f003 fbc0 	bl	800bee0 <VL53L0X_WrByte>
 8008760:	4603      	mov	r3, r0
 8008762:	461a      	mov	r2, r3
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	4313      	orrs	r3, r2
 8008768:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800876a:	2200      	movs	r2, #0
 800876c:	21ff      	movs	r1, #255	; 0xff
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f003 fbb6 	bl	800bee0 <VL53L0X_WrByte>
 8008774:	4603      	mov	r3, r0
 8008776:	461a      	mov	r2, r3
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	4313      	orrs	r3, r2
 800877c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800877e:	2200      	movs	r2, #0
 8008780:	2180      	movs	r1, #128	; 0x80
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f003 fbac 	bl	800bee0 <VL53L0X_WrByte>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	4313      	orrs	r3, r2
 8008790:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008792:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000100 	.word	0x20000100

080087a4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80087b0:	2301      	movs	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80087b4:	f107 030e 	add.w	r3, r7, #14
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fb38 	bl	8007e30 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80087c0:	2201      	movs	r2, #1
 80087c2:	2180      	movs	r1, #128	; 0x80
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f003 fb8b 	bl	800bee0 <VL53L0X_WrByte>
 80087ca:	4603      	mov	r3, r0
 80087cc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087ce:	2201      	movs	r2, #1
 80087d0:	21ff      	movs	r1, #255	; 0xff
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f003 fb84 	bl	800bee0 <VL53L0X_WrByte>
 80087d8:	4603      	mov	r3, r0
 80087da:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f003 fb7d 	bl	800bee0 <VL53L0X_WrByte>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80087f0:	461a      	mov	r2, r3
 80087f2:	2191      	movs	r1, #145	; 0x91
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f003 fb73 	bl	800bee0 <VL53L0X_WrByte>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80087fe:	2201      	movs	r2, #1
 8008800:	2100      	movs	r1, #0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f003 fb6c 	bl	800bee0 <VL53L0X_WrByte>
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800880c:	2200      	movs	r2, #0
 800880e:	21ff      	movs	r1, #255	; 0xff
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f003 fb65 	bl	800bee0 <VL53L0X_WrByte>
 8008816:	4603      	mov	r3, r0
 8008818:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800881a:	2200      	movs	r2, #0
 800881c:	2180      	movs	r1, #128	; 0x80
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f003 fb5e 	bl	800bee0 <VL53L0X_WrByte>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d054      	beq.n	80088d8 <VL53L0X_StartMeasurement+0x134>
 800882e:	2b03      	cmp	r3, #3
 8008830:	dc6c      	bgt.n	800890c <VL53L0X_StartMeasurement+0x168>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <VL53L0X_StartMeasurement+0x98>
 8008836:	2b01      	cmp	r3, #1
 8008838:	d034      	beq.n	80088a4 <VL53L0X_StartMeasurement+0x100>
 800883a:	e067      	b.n	800890c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800883c:	2201      	movs	r2, #1
 800883e:	2100      	movs	r1, #0
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f003 fb4d 	bl	800bee0 <VL53L0X_WrByte>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800884e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d15d      	bne.n	8008912 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008860:	f107 030d 	add.w	r3, r7, #13
 8008864:	461a      	mov	r2, r3
 8008866:	2100      	movs	r1, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f003 fbbb 	bl	800bfe4 <VL53L0X_RdByte>
 800886e:	4603      	mov	r3, r0
 8008870:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	3301      	adds	r3, #1
 8008876:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008878:	7b7a      	ldrb	r2, [r7, #13]
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	4013      	ands	r3, r2
 800887e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	429a      	cmp	r2, r3
 8008884:	d107      	bne.n	8008896 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8008886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008894:	d3e1      	bcc.n	800885a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800889c:	d339      	bcc.n	8008912 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800889e:	23f9      	movs	r3, #249	; 0xf9
 80088a0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80088a2:	e036      	b.n	8008912 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80088a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d105      	bne.n	80088b8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80088ac:	2101      	movs	r1, #1
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff ff12 	bl	80086d8 <VL53L0X_CheckAndLoadInterruptSettings>
 80088b4:	4603      	mov	r3, r0
 80088b6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80088b8:	2202      	movs	r2, #2
 80088ba:	2100      	movs	r1, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f003 fb0f 	bl	800bee0 <VL53L0X_WrByte>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80088c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d123      	bne.n	8008916 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2204      	movs	r2, #4
 80088d2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80088d6:	e01e      	b.n	8008916 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80088d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80088e0:	2101      	movs	r1, #1
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fef8 	bl	80086d8 <VL53L0X_CheckAndLoadInterruptSettings>
 80088e8:	4603      	mov	r3, r0
 80088ea:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80088ec:	2204      	movs	r2, #4
 80088ee:	2100      	movs	r1, #0
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f003 faf5 	bl	800bee0 <VL53L0X_WrByte>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80088fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2204      	movs	r2, #4
 8008906:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800890a:	e006      	b.n	800891a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800890c:	23f8      	movs	r3, #248	; 0xf8
 800890e:	75fb      	strb	r3, [r7, #23]
 8008910:	e004      	b.n	800891c <VL53L0X_StartMeasurement+0x178>
		break;
 8008912:	bf00      	nop
 8008914:	e002      	b.n	800891c <VL53L0X_StartMeasurement+0x178>
		break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <VL53L0X_StartMeasurement+0x178>
		break;
 800891a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800891c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800893c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d112      	bne.n	800896a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008944:	f107 0308 	add.w	r3, r7, #8
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fb1a 	bl	8008f84 <VL53L0X_GetInterruptMaskStatus>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b04      	cmp	r3, #4
 8008958:	d103      	bne.n	8008962 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2201      	movs	r2, #1
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	e01c      	b.n	800899c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
 8008968:	e018      	b.n	800899c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800896a:	f107 030d 	add.w	r3, r7, #13
 800896e:	461a      	mov	r2, r3
 8008970:	2114      	movs	r1, #20
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f003 fb36 	bl	800bfe4 <VL53L0X_RdByte>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800897c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10b      	bne.n	800899c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008984:	7b7b      	ldrb	r3, [r7, #13]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2201      	movs	r2, #1
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	e002      	b.n	800899c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800899c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80089a8:	b5b0      	push	{r4, r5, r7, lr}
 80089aa:	b096      	sub	sp, #88	; 0x58
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80089b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80089bc:	230c      	movs	r3, #12
 80089be:	2114      	movs	r1, #20
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f003 fa61 	bl	800be88 <VL53L0X_ReadMulti>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80089cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f040 80d1 	bne.w	8008b78 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80089e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4413      	add	r3, r2
 80089f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2200      	movs	r2, #0
 80089fc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80089fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	025b      	lsls	r3, r3, #9
 8008a14:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a1a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008a1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008a32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a36:	025b      	lsls	r3, r3, #9
 8008a38:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008a3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	021b      	lsls	r3, r3, #8
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	4413      	add	r3, r2
 8008a50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008a5a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8008a6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008a76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a7c:	d046      	beq.n	8008b0c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a80:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a8c:	4a57      	ldr	r2, [pc, #348]	; (8008bec <VL53L0X_GetRangingMeasurementData+0x244>)
 8008a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8008a92:	1192      	asrs	r2, r2, #6
 8008a94:	17db      	asrs	r3, r3, #31
 8008a96:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008a98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7f1b      	ldrb	r3, [r3, #28]
 8008aa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d02c      	beq.n	8008b0c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008ab2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ab4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008ab8:	fb02 f303 	mul.w	r3, r2, r3
 8008abc:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d10d      	bne.n	8008ae0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008ac4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008acc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008ad0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ad4:	e016      	b.n	8008b04 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8008ad6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008ada:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ade:	e011      	b.n	8008b04 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008ae0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ae6:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008aea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008aec:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008af4:	121b      	asrs	r3, r3, #8
 8008af6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afa:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008b00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008b04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008b0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00d      	beq.n	8008b30 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008b14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008b18:	089b      	lsrs	r3, r3, #2
 8008b1a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008b20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	019b      	lsls	r3, r3, #6
 8008b28:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	75da      	strb	r2, [r3, #23]
 8008b2e:	e006      	b.n	8008b3e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008b36:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008b3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008b42:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008b46:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f002 ff4b 	bl	800b9f0 <VL53L0X_get_pal_range_status>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008b68:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008b70:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b78:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d12f      	bne.n	8008be0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f107 040c 	add.w	r4, r7, #12
 8008b86:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008b9a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008ba8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008bae:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008bb4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008bba:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008bc0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008bc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008bd0:	f107 050c 	add.w	r5, r7, #12
 8008bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008bdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008be0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3750      	adds	r7, #80	; 0x50
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bdb0      	pop	{r4, r5, r7, pc}
 8008bec:	10624dd3 	.word	0x10624dd3

08008bf0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008bfe:	2100      	movs	r1, #0
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff f8e9 	bl	8007dd8 <VL53L0X_SetDeviceMode>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff fd16 	bl	8008644 <VL53L0X_PerformSingleMeasurement>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d105      	bne.n	8008c30 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff febe 	bl	80089a8 <VL53L0X_GetRangingMeasurementData>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d105      	bne.n	8008c44 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008c38:	2100      	movs	r1, #0
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f962 	bl	8008f04 <VL53L0X_ClearInterruptMask>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	4608      	mov	r0, r1
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	70fb      	strb	r3, [r7, #3]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70bb      	strb	r3, [r7, #2]
 8008c66:	4613      	mov	r3, r2
 8008c68:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008c74:	23f6      	movs	r3, #246	; 0xf6
 8008c76:	73fb      	strb	r3, [r7, #15]
 8008c78:	e107      	b.n	8008e8a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008c7a:	78bb      	ldrb	r3, [r7, #2]
 8008c7c:	2b14      	cmp	r3, #20
 8008c7e:	d110      	bne.n	8008ca2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008c80:	7e3b      	ldrb	r3, [r7, #24]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008c86:	2310      	movs	r3, #16
 8008c88:	73bb      	strb	r3, [r7, #14]
 8008c8a:	e001      	b.n	8008c90 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	461a      	mov	r2, r3
 8008c94:	2184      	movs	r1, #132	; 0x84
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f003 f922 	bl	800bee0 <VL53L0X_WrByte>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
 8008ca0:	e0f3      	b.n	8008e8a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008ca2:	78bb      	ldrb	r3, [r7, #2]
 8008ca4:	2b15      	cmp	r3, #21
 8008ca6:	f040 8097 	bne.w	8008dd8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008caa:	2201      	movs	r2, #1
 8008cac:	21ff      	movs	r1, #255	; 0xff
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f003 f916 	bl	800bee0 <VL53L0X_WrByte>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f003 f90c 	bl	800bee0 <VL53L0X_WrByte>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	21ff      	movs	r1, #255	; 0xff
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f003 f902 	bl	800bee0 <VL53L0X_WrByte>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	2180      	movs	r1, #128	; 0x80
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f003 f8f8 	bl	800bee0 <VL53L0X_WrByte>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	2185      	movs	r1, #133	; 0x85
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f003 f8ee 	bl	800bee0 <VL53L0X_WrByte>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008d0e:	2204      	movs	r2, #4
 8008d10:	21ff      	movs	r1, #255	; 0xff
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f003 f8e4 	bl	800bee0 <VL53L0X_WrByte>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008d22:	2200      	movs	r2, #0
 8008d24:	21cd      	movs	r1, #205	; 0xcd
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f003 f8da 	bl	800bee0 <VL53L0X_WrByte>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	461a      	mov	r2, r3
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008d36:	2211      	movs	r2, #17
 8008d38:	21cc      	movs	r1, #204	; 0xcc
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f003 f8d0 	bl	800bee0 <VL53L0X_WrByte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008d4a:	2207      	movs	r2, #7
 8008d4c:	21ff      	movs	r1, #255	; 0xff
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 f8c6 	bl	800bee0 <VL53L0X_WrByte>
 8008d54:	4603      	mov	r3, r0
 8008d56:	461a      	mov	r2, r3
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008d5e:	2200      	movs	r2, #0
 8008d60:	21be      	movs	r1, #190	; 0xbe
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f003 f8bc 	bl	800bee0 <VL53L0X_WrByte>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008d72:	2206      	movs	r2, #6
 8008d74:	21ff      	movs	r1, #255	; 0xff
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f003 f8b2 	bl	800bee0 <VL53L0X_WrByte>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	461a      	mov	r2, r3
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008d86:	2209      	movs	r2, #9
 8008d88:	21cc      	movs	r1, #204	; 0xcc
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f003 f8a8 	bl	800bee0 <VL53L0X_WrByte>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	21ff      	movs	r1, #255	; 0xff
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f003 f89e 	bl	800bee0 <VL53L0X_WrByte>
 8008da4:	4603      	mov	r3, r0
 8008da6:	461a      	mov	r2, r3
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008dae:	2201      	movs	r2, #1
 8008db0:	21ff      	movs	r1, #255	; 0xff
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f003 f894 	bl	800bee0 <VL53L0X_WrByte>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f003 f88a 	bl	800bee0 <VL53L0X_WrByte>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	73fb      	strb	r3, [r7, #15]
 8008dd6:	e058      	b.n	8008e8a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d121      	bne.n	8008e24 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008de0:	787b      	ldrb	r3, [r7, #1]
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d81b      	bhi.n	8008e1e <VL53L0X_SetGpioConfig+0x1ce>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <VL53L0X_SetGpioConfig+0x19c>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e07 	.word	0x08008e07
 8008df4:	08008e0d 	.word	0x08008e0d
 8008df8:	08008e13 	.word	0x08008e13
 8008dfc:	08008e19 	.word	0x08008e19
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73bb      	strb	r3, [r7, #14]
				break;
 8008e04:	e00f      	b.n	8008e26 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008e06:	2301      	movs	r3, #1
 8008e08:	73bb      	strb	r3, [r7, #14]
				break;
 8008e0a:	e00c      	b.n	8008e26 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	73bb      	strb	r3, [r7, #14]
				break;
 8008e10:	e009      	b.n	8008e26 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008e12:	2303      	movs	r3, #3
 8008e14:	73bb      	strb	r3, [r7, #14]
				break;
 8008e16:	e006      	b.n	8008e26 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008e18:	2304      	movs	r3, #4
 8008e1a:	73bb      	strb	r3, [r7, #14]
				break;
 8008e1c:	e003      	b.n	8008e26 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008e1e:	23f5      	movs	r3, #245	; 0xf5
 8008e20:	73fb      	strb	r3, [r7, #15]
 8008e22:	e000      	b.n	8008e26 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008e24:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d107      	bne.n	8008e3e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	461a      	mov	r2, r3
 8008e32:	210a      	movs	r1, #10
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f003 f853 	bl	800bee0 <VL53L0X_WrByte>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10f      	bne.n	8008e66 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008e46:	7e3b      	ldrb	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73bb      	strb	r3, [r7, #14]
 8008e50:	e001      	b.n	8008e56 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008e52:	2310      	movs	r3, #16
 8008e54:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	22ef      	movs	r2, #239	; 0xef
 8008e5a:	2184      	movs	r1, #132	; 0x84
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f003 f88d 	bl	800bf7c <VL53L0X_UpdateByte>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d103      	bne.n	8008e76 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	787a      	ldrb	r2, [r7, #1]
 8008e72:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d105      	bne.n	8008e8a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008e7e:	2100      	movs	r1, #0
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f83f 	bl	8008f04 <VL53L0X_ClearInterruptMask>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop

08008e98 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008eac:	f107 0314 	add.w	r3, r7, #20
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	210e      	movs	r1, #14
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f003 f8bf 	bl	800c038 <VL53L0X_RdWord>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008ebe:	8abb      	ldrh	r3, [r7, #20]
 8008ec0:	045b      	lsls	r3, r3, #17
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4b0e      	ldr	r3, [pc, #56]	; (8008f00 <VL53L0X_GetInterruptThresholds+0x68>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10f      	bne.n	8008ef4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	461a      	mov	r2, r3
 8008eda:	210c      	movs	r1, #12
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f003 f8ab 	bl	800c038 <VL53L0X_RdWord>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008ee6:	8abb      	ldrh	r3, [r7, #20]
 8008ee8:	045b      	lsls	r3, r3, #17
 8008eea:	461a      	mov	r2, r3
 8008eec:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <VL53L0X_GetInterruptThresholds+0x68>)
 8008eee:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	1ffe0000 	.word	0x1ffe0000

08008f04 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008f16:	2201      	movs	r2, #1
 8008f18:	210b      	movs	r1, #11
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f002 ffe0 	bl	800bee0 <VL53L0X_WrByte>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008f24:	2200      	movs	r2, #0
 8008f26:	210b      	movs	r1, #11
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 ffd9 	bl	800bee0 <VL53L0X_WrByte>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	461a      	mov	r2, r3
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008f38:	f107 030d 	add.w	r3, r7, #13
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	2113      	movs	r1, #19
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f003 f84f 	bl	800bfe4 <VL53L0X_RdByte>
 8008f46:	4603      	mov	r3, r0
 8008f48:	461a      	mov	r2, r3
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	3301      	adds	r3, #1
 8008f54:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008f56:	7b7b      	ldrb	r3, [r7, #13]
 8008f58:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d803      	bhi.n	8008f6e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0d3      	beq.n	8008f16 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d901      	bls.n	8008f78 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008f74:	23f4      	movs	r3, #244	; 0xf4
 8008f76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008f92:	f107 030e 	add.w	r3, r7, #14
 8008f96:	461a      	mov	r2, r3
 8008f98:	2113      	movs	r1, #19
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f003 f822 	bl	800bfe4 <VL53L0X_RdByte>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	f003 0207 	and.w	r2, r3, #7
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	f003 0318 	and.w	r3, r3, #24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008fb8:	23fa      	movs	r3, #250	; 0xfa
 8008fba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fa03 	bl	80093e8 <VL53L0X_perform_ref_spad_management>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8009000:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009004:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8009006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800900c:	f107 0308 	add.w	r3, r7, #8
 8009010:	461a      	mov	r2, r3
 8009012:	2128      	movs	r1, #40	; 0x28
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f003 f80f 	bl	800c038 <VL53L0X_RdWord>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800901e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d11e      	bne.n	8009064 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009026:	893b      	ldrh	r3, [r7, #8]
 8009028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800902c:	b29b      	uxth	r3, r3
 800902e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009030:	893b      	ldrh	r3, [r7, #8]
 8009032:	461a      	mov	r2, r3
 8009034:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009038:	429a      	cmp	r2, r3
 800903a:	dd0b      	ble.n	8009054 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800903c:	893a      	ldrh	r2, [r7, #8]
 800903e:	897b      	ldrh	r3, [r7, #10]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	b29b      	uxth	r3, r3
 8009044:	b21b      	sxth	r3, r3
 8009046:	461a      	mov	r2, r3
					* 250;
 8009048:	23fa      	movs	r3, #250	; 0xfa
 800904a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e007      	b.n	8009064 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009054:	893b      	ldrh	r3, [r7, #8]
 8009056:	b21b      	sxth	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	23fa      	movs	r3, #250	; 0xfa
 800905c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009070:	b480      	push	{r7}
 8009072:	b08b      	sub	sp, #44	; 0x2c
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800907e:	2308      	movs	r3, #8
 8009080:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	fbb2 f3f3 	udiv	r3, r2, r3
 8009096:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	fbb3 f2f2 	udiv	r2, r3, r2
 80090a0:	69b9      	ldr	r1, [r7, #24]
 80090a2:	fb01 f202 	mul.w	r2, r1, r2
 80090a6:	1a9b      	subs	r3, r3, r2
 80090a8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
 80090ae:	e030      	b.n	8009112 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	4413      	add	r3, r2
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80090be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d11e      	bne.n	8009104 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80090c6:	7ffa      	ldrb	r2, [r7, #31]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	fa42 f303 	asr.w	r3, r2, r3
 80090ce:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80090d4:	e016      	b.n	8009104 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80090d6:	7ffb      	ldrb	r3, [r7, #31]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <get_next_good_spad+0x88>
				success = 1;
 80090e0:	2301      	movs	r3, #1
 80090e2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	fb02 f203 	mul.w	r2, r2, r3
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	4413      	add	r3, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	601a      	str	r2, [r3, #0]
				break;
 80090f6:	e009      	b.n	800910c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80090f8:	7ffb      	ldrb	r3, [r7, #31]
 80090fa:	085b      	lsrs	r3, r3, #1
 80090fc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	3301      	adds	r3, #1
 8009102:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8009104:	6a3a      	ldr	r2, [r7, #32]
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	429a      	cmp	r2, r3
 800910a:	d3e4      	bcc.n	80090d6 <get_next_good_spad+0x66>
				coarseIndex++) {
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	3301      	adds	r3, #1
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	d202      	bcs.n	8009120 <get_next_good_spad+0xb0>
 800911a:	7fbb      	ldrb	r3, [r7, #30]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0c7      	beq.n	80090b0 <get_next_good_spad+0x40>
		}
	}
}
 8009120:	bf00      	nop
 8009122:	372c      	adds	r7, #44	; 0x2c
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009134:	2301      	movs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	099b      	lsrs	r3, r3, #6
 800913c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800913e:	4a07      	ldr	r2, [pc, #28]	; (800915c <is_aperture+0x30>)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <is_aperture+0x22>
		isAperture = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	200002b8 	.word	0x200002b8

08009160 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009160:	b480      	push	{r7}
 8009162:	b089      	sub	sp, #36	; 0x24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800916c:	2300      	movs	r3, #0
 800916e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009170:	2308      	movs	r3, #8
 8009172:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	fbb2 f3f3 	udiv	r3, r2, r3
 800917c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	fbb3 f2f2 	udiv	r2, r3, r2
 8009186:	69b9      	ldr	r1, [r7, #24]
 8009188:	fb01 f202 	mul.w	r2, r1, r2
 800918c:	1a9b      	subs	r3, r3, r2
 800918e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	429a      	cmp	r2, r3
 8009196:	d302      	bcc.n	800919e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009198:	23ce      	movs	r3, #206	; 0xce
 800919a:	77fb      	strb	r3, [r7, #31]
 800919c:	e010      	b.n	80091c0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4413      	add	r3, r2
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	b25a      	sxtb	r2, r3
 80091a8:	2101      	movs	r1, #1
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	fa01 f303 	lsl.w	r3, r1, r3
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	b259      	sxtb	r1, r3
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	4413      	add	r3, r2
 80091bc:	b2ca      	uxtb	r2, r1
 80091be:	701a      	strb	r2, [r3, #0]

	return status;
 80091c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3724      	adds	r7, #36	; 0x24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80091da:	2306      	movs	r3, #6
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	21b0      	movs	r1, #176	; 0xb0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f002 fe21 	bl	800be28 <VL53L0X_WriteMulti>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80091ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009200:	2306      	movs	r3, #6
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	21b0      	movs	r1, #176	; 0xb0
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f002 fe3e 	bl	800be88 <VL53L0X_ReadMulti>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009210:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08c      	sub	sp, #48	; 0x30
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	460b      	mov	r3, r1
 800922a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
 800922e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009234:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009238:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800923a:	2300      	movs	r3, #0
 800923c:	62bb      	str	r3, [r7, #40]	; 0x28
 800923e:	e02b      	b.n	8009298 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009240:	f107 031c 	add.w	r3, r7, #28
 8009244:	6a3a      	ldr	r2, [r7, #32]
 8009246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff ff11 	bl	8009070 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d103      	bne.n	800925e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009256:	23ce      	movs	r3, #206	; 0xce
 8009258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800925c:	e020      	b.n	80092a0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	461a      	mov	r2, r3
 8009262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009264:	4413      	add	r3, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff ff60 	bl	800912c <is_aperture>
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	7afb      	ldrb	r3, [r7, #11]
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009276:	23ce      	movs	r3, #206	; 0xce
 8009278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800927c:	e010      	b.n	80092a0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009282:	6a3a      	ldr	r2, [r7, #32]
 8009284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009286:	6838      	ldr	r0, [r7, #0]
 8009288:	f7ff ff6a 	bl	8009160 <enable_spad_bit>
		currentSpad++;
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	3301      	adds	r3, #1
 8009290:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	3301      	adds	r3, #1
 8009296:	62bb      	str	r3, [r7, #40]	; 0x28
 8009298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800929a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929c:	429a      	cmp	r2, r3
 800929e:	d3cf      	bcc.n	8009240 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80092a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a2:	6a3a      	ldr	r2, [r7, #32]
 80092a4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80092a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f7ff ff8d 	bl	80091d0 <set_ref_spad_map>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80092bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d121      	bne.n	8009308 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80092c4:	f107 0314 	add.w	r3, r7, #20
 80092c8:	4619      	mov	r1, r3
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff ff93 	bl	80091f6 <get_ref_spad_map>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80092da:	e011      	b.n	8009300 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	4413      	add	r3, r2
 80092e2:	781a      	ldrb	r2, [r3, #0]
 80092e4:	f107 0114 	add.w	r1, r7, #20
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	440b      	add	r3, r1
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d003      	beq.n	80092fa <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80092f2:	23ce      	movs	r3, #206	; 0xce
 80092f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80092f8:	e006      	b.n	8009308 <enable_ref_spads+0xec>
			}
			i++;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	3301      	adds	r3, #1
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	429a      	cmp	r2, r3
 8009306:	d3e9      	bcc.n	80092dc <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009308:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800930c:	4618      	mov	r0, r3
 800930e:	3730      	adds	r7, #48	; 0x30
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	; 0x28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800931e:	2300      	movs	r3, #0
 8009320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009338:	2b00      	cmp	r3, #0
 800933a:	d107      	bne.n	800934c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800933c:	22c0      	movs	r2, #192	; 0xc0
 800933e:	2101      	movs	r1, #1
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f002 fdcd 	bl	800bee0 <VL53L0X_WrByte>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800934c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009350:	2b00      	cmp	r3, #0
 8009352:	d108      	bne.n	8009366 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fc48 	bl	8008bf0 <VL53L0X_PerformSingleRangingMeasurement>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009366:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800936a:	2b00      	cmp	r3, #0
 800936c:	d107      	bne.n	800937e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800936e:	2201      	movs	r2, #1
 8009370:	21ff      	movs	r1, #255	; 0xff
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 fdb4 	bl	800bee0 <VL53L0X_WrByte>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800937e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	21b6      	movs	r1, #182	; 0xb6
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f002 fe54 	bl	800c038 <VL53L0X_RdWord>
 8009390:	4603      	mov	r3, r0
 8009392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800939a:	2b00      	cmp	r3, #0
 800939c:	d107      	bne.n	80093ae <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800939e:	2200      	movs	r2, #0
 80093a0:	21ff      	movs	r1, #255	; 0xff
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f002 fd9c 	bl	800bee0 <VL53L0X_WrByte>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80093ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d112      	bne.n	80093dc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80093b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093ba:	461a      	mov	r2, r3
 80093bc:	2101      	movs	r1, #1
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f002 fd8e 	bl	800bee0 <VL53L0X_WrByte>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80093ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d104      	bne.n	80093dc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80093dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3728      	adds	r7, #40	; 0x28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b09d      	sub	sp, #116	; 0x74
 80093ec:	af06      	add	r7, sp, #24
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80093fa:	23b4      	movs	r3, #180	; 0xb4
 80093fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009400:	2303      	movs	r3, #3
 8009402:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009404:	232c      	movs	r3, #44	; 0x2c
 8009406:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009414:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009418:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009422:	2306      	movs	r3, #6
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800944c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800944e:	2300      	movs	r3, #0
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
 8009452:	e009      	b.n	8009468 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009458:	4413      	add	r3, r2
 800945a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009464:	3301      	adds	r3, #1
 8009466:	64bb      	str	r3, [r7, #72]	; 0x48
 8009468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	429a      	cmp	r2, r3
 800946e:	d3f1      	bcc.n	8009454 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009470:	2201      	movs	r2, #1
 8009472:	21ff      	movs	r1, #255	; 0xff
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f002 fd33 	bl	800bee0 <VL53L0X_WrByte>
 800947a:	4603      	mov	r3, r0
 800947c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009480:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009484:	2b00      	cmp	r3, #0
 8009486:	d107      	bne.n	8009498 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009488:	2200      	movs	r2, #0
 800948a:	214f      	movs	r1, #79	; 0x4f
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f002 fd27 	bl	800bee0 <VL53L0X_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009498:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800949c:	2b00      	cmp	r3, #0
 800949e:	d107      	bne.n	80094b0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80094a0:	222c      	movs	r2, #44	; 0x2c
 80094a2:	214e      	movs	r1, #78	; 0x4e
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f002 fd1b 	bl	800bee0 <VL53L0X_WrByte>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80094b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094b8:	2200      	movs	r2, #0
 80094ba:	21ff      	movs	r1, #255	; 0xff
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f002 fd0f 	bl	800bee0 <VL53L0X_WrByte>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80094c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d109      	bne.n	80094e4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80094d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80094d4:	461a      	mov	r2, r3
 80094d6:	21b6      	movs	r1, #182	; 0xb6
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f002 fd01 	bl	800bee0 <VL53L0X_WrByte>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80094e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d107      	bne.n	80094fc <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80094ec:	2200      	movs	r2, #0
 80094ee:	2180      	movs	r1, #128	; 0x80
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f002 fcf5 	bl	800bee0 <VL53L0X_WrByte>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80094fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009504:	f107 0210 	add.w	r2, r7, #16
 8009508:	f107 0111 	add.w	r1, r7, #17
 800950c:	2300      	movs	r3, #0
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fbbb 	bl	8009c8a <VL53L0X_perform_ref_calibration>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800951a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800951e:	2b00      	cmp	r3, #0
 8009520:	d121      	bne.n	8009566 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009528:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800952e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009530:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800953e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009542:	f107 0218 	add.w	r2, r7, #24
 8009546:	9204      	str	r2, [sp, #16]
 8009548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954a:	9203      	str	r2, [sp, #12]
 800954c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800954e:	9202      	str	r2, [sp, #8]
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	4623      	mov	r3, r4
 8009558:	4602      	mov	r2, r0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff fe5e 	bl	800921c <enable_ref_spads>
 8009560:	4603      	mov	r3, r0
 8009562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009566:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800956a:	2b00      	cmp	r3, #0
 800956c:	d174      	bne.n	8009658 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009572:	f107 0312 	add.w	r3, r7, #18
 8009576:	4619      	mov	r1, r3
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fecb 	bl	8009314 <perform_ref_signal_measurement>
 800957e:	4603      	mov	r3, r0
 8009580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009588:	2b00      	cmp	r3, #0
 800958a:	d161      	bne.n	8009650 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800958c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800958e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009590:	429a      	cmp	r2, r3
 8009592:	d25d      	bcs.n	8009650 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009594:	2300      	movs	r3, #0
 8009596:	64bb      	str	r3, [r7, #72]	; 0x48
 8009598:	e009      	b.n	80095ae <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959e:	4413      	add	r3, r2
 80095a0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80095a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095aa:	3301      	adds	r3, #1
 80095ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d3f1      	bcc.n	800959a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80095b6:	e002      	b.n	80095be <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80095b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ba:	3301      	adds	r3, #1
 80095bc:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80095be:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80095c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c4:	4413      	add	r3, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fdb0 	bl	800912c <is_aperture>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80095d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d3ee      	bcc.n	80095b8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80095da:	2301      	movs	r3, #1
 80095dc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80095de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80095ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80095f2:	f107 0218 	add.w	r2, r7, #24
 80095f6:	9204      	str	r2, [sp, #16]
 80095f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095fa:	9203      	str	r2, [sp, #12]
 80095fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095fe:	9202      	str	r2, [sp, #8]
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4623      	mov	r3, r4
 8009608:	4602      	mov	r2, r0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff fe06 	bl	800921c <enable_ref_spads>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009616:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800961a:	2b00      	cmp	r3, #0
 800961c:	d11b      	bne.n	8009656 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009622:	f107 0312 	add.w	r3, r7, #18
 8009626:	4619      	mov	r1, r3
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff fe73 	bl	8009314 <perform_ref_signal_measurement>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009634:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10c      	bne.n	8009656 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800963c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800963e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009640:	429a      	cmp	r2, r3
 8009642:	d208      	bcs.n	8009656 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009644:	2301      	movs	r3, #1
 8009646:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800964a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800964e:	e002      	b.n	8009656 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009654:	e000      	b.n	8009658 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009656:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009658:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800965c:	2b00      	cmp	r3, #0
 800965e:	f040 80af 	bne.w	80097c0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009662:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009664:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009666:	429a      	cmp	r2, r3
 8009668:	f240 80aa 	bls.w	80097c0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800966c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800967c:	f107 031c 	add.w	r3, r7, #28
 8009680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009682:	4618      	mov	r0, r3
 8009684:	f004 fffd 	bl	800e682 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009688:	8a7b      	ldrh	r3, [r7, #18]
 800968a:	461a      	mov	r2, r3
 800968c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfb8      	it	lt
 8009694:	425b      	neglt	r3, r3
 8009696:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800969e:	e086      	b.n	80097ae <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80096a6:	f107 0314 	add.w	r3, r7, #20
 80096aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096ae:	f7ff fcdf 	bl	8009070 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d103      	bne.n	80096c2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80096ba:	23ce      	movs	r3, #206	; 0xce
 80096bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80096c0:	e07e      	b.n	80097c0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80096c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fd2e 	bl	800912c <is_aperture>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80096e0:	e06e      	b.n	80097c0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	3301      	adds	r3, #1
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80096f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fd32 	bl	8009160 <enable_spad_bit>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009702:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10c      	bne.n	8009724 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800970a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970c:	3301      	adds	r3, #1
 800970e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009716:	4619      	mov	r1, r3
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f7ff fd59 	bl	80091d0 <set_ref_spad_map>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009724:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009728:	2b00      	cmp	r3, #0
 800972a:	d146      	bne.n	80097ba <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800972c:	f107 0312 	add.w	r3, r7, #18
 8009730:	4619      	mov	r1, r3
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff fdee 	bl	8009314 <perform_ref_signal_measurement>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800973e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009742:	2b00      	cmp	r3, #0
 8009744:	d13b      	bne.n	80097be <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009746:	8a7b      	ldrh	r3, [r7, #18]
 8009748:	461a      	mov	r2, r3
 800974a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfb8      	it	lt
 8009752:	425b      	neglt	r3, r3
 8009754:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009756:	8a7b      	ldrh	r3, [r7, #18]
 8009758:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800975a:	429a      	cmp	r2, r3
 800975c:	d21c      	bcs.n	8009798 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800975e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009762:	429a      	cmp	r2, r3
 8009764:	d914      	bls.n	8009790 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009766:	f107 031c 	add.w	r3, r7, #28
 800976a:	4619      	mov	r1, r3
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff fd2f 	bl	80091d0 <set_ref_spad_map>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800977e:	f107 011c 	add.w	r1, r7, #28
 8009782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009784:	4618      	mov	r0, r3
 8009786:	f004 ff7c 	bl	800e682 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	3b01      	subs	r3, #1
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009796:	e00a      	b.n	80097ae <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80097a2:	f107 031c 	add.w	r3, r7, #28
 80097a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a8:	4618      	mov	r0, r3
 80097aa:	f004 ff6a 	bl	800e682 <memcpy>
		while (!complete) {
 80097ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f43f af74 	beq.w	80096a0 <VL53L0X_perform_ref_spad_management+0x2b8>
 80097b8:	e002      	b.n	80097c0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80097ba:	bf00      	nop
 80097bc:	e000      	b.n	80097c0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80097be:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80097c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d115      	bne.n	80097f4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097cc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80097d4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80097f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	375c      	adds	r7, #92	; 0x5c
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd90      	pop	{r4, r7, pc}

08009800 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b093      	sub	sp, #76	; 0x4c
 8009804:	af06      	add	r7, sp, #24
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800980e:	2300      	movs	r3, #0
 8009810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009818:	23b4      	movs	r3, #180	; 0xb4
 800981a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800981e:	2306      	movs	r3, #6
 8009820:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009822:	232c      	movs	r3, #44	; 0x2c
 8009824:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009826:	2201      	movs	r2, #1
 8009828:	21ff      	movs	r1, #255	; 0xff
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f002 fb58 	bl	800bee0 <VL53L0X_WrByte>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009836:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800983a:	2b00      	cmp	r3, #0
 800983c:	d107      	bne.n	800984e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800983e:	2200      	movs	r2, #0
 8009840:	214f      	movs	r1, #79	; 0x4f
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f002 fb4c 	bl	800bee0 <VL53L0X_WrByte>
 8009848:	4603      	mov	r3, r0
 800984a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800984e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009852:	2b00      	cmp	r3, #0
 8009854:	d107      	bne.n	8009866 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009856:	222c      	movs	r2, #44	; 0x2c
 8009858:	214e      	movs	r1, #78	; 0x4e
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f002 fb40 	bl	800bee0 <VL53L0X_WrByte>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009866:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800986a:	2b00      	cmp	r3, #0
 800986c:	d107      	bne.n	800987e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800986e:	2200      	movs	r2, #0
 8009870:	21ff      	movs	r1, #255	; 0xff
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f002 fb34 	bl	800bee0 <VL53L0X_WrByte>
 8009878:	4603      	mov	r3, r0
 800987a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800987e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800988a:	461a      	mov	r2, r3
 800988c:	21b6      	movs	r1, #182	; 0xb6
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f002 fb26 	bl	800bee0 <VL53L0X_WrByte>
 8009894:	4603      	mov	r3, r0
 8009896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800989a:	2300      	movs	r3, #0
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
 800989e:	e009      	b.n	80098b4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	3301      	adds	r3, #1
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24
 80098b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d3f1      	bcc.n	80098a0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80098c2:	e002      	b.n	80098ca <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	3301      	adds	r3, #1
 80098c8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80098ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	4413      	add	r3, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fc2a 	bl	800912c <is_aperture>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <VL53L0X_set_reference_spads+0xe6>
 80098de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d3ee      	bcc.n	80098c4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80098f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098f6:	79f9      	ldrb	r1, [r7, #7]
 80098f8:	f107 0214 	add.w	r2, r7, #20
 80098fc:	9204      	str	r2, [sp, #16]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	9203      	str	r2, [sp, #12]
 8009902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009904:	9202      	str	r2, [sp, #8]
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	4623      	mov	r3, r4
 800990e:	4602      	mov	r2, r0
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff fc83 	bl	800921c <enable_ref_spads>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800991c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10c      	bne.n	800993e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	b2da      	uxtb	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800993e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009942:	4618      	mov	r0, r3
 8009944:	3734      	adds	r7, #52	; 0x34
 8009946:	46bd      	mov	sp, r7
 8009948:	bd90      	pop	{r4, r7, pc}

0800994a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800995a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	f043 0301 	orr.w	r3, r3, #1
 8009968:	b2db      	uxtb	r3, r3
 800996a:	461a      	mov	r2, r3
 800996c:	2100      	movs	r1, #0
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f002 fab6 	bl	800bee0 <VL53L0X_WrByte>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9bf 	bl	8009d04 <VL53L0X_measurement_poll_for_completion>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800998a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff fab5 	bl	8008f04 <VL53L0X_ClearInterruptMask>
 800999a:	4603      	mov	r3, r0
 800999c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800999e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f002 fa98 	bl	800bee0 <VL53L0X_WrByte>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73fb      	strb	r3, [r7, #15]

	return Status;
 80099b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	461a      	mov	r2, r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	70fb      	strb	r3, [r7, #3]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70bb      	strb	r3, [r7, #2]
 80099d6:	4613      	mov	r3, r2
 80099d8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80099e2:	2201      	movs	r2, #1
 80099e4:	21ff      	movs	r1, #255	; 0xff
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f002 fa7a 	bl	800bee0 <VL53L0X_WrByte>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f002 fa70 	bl	800bee0 <VL53L0X_WrByte>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	21ff      	movs	r1, #255	; 0xff
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f002 fa66 	bl	800bee0 <VL53L0X_WrByte>
 8009a14:	4603      	mov	r3, r0
 8009a16:	461a      	mov	r2, r3
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009a1e:	78fb      	ldrb	r3, [r7, #3]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01e      	beq.n	8009a62 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009a24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	21cb      	movs	r1, #203	; 0xcb
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f002 fad7 	bl	800bfe4 <VL53L0X_RdByte>
 8009a36:	4603      	mov	r3, r0
 8009a38:	461a      	mov	r2, r3
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d02a      	beq.n	8009a9e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009a48:	f107 030e 	add.w	r3, r7, #14
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	21ee      	movs	r1, #238	; 0xee
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f002 fac7 	bl	800bfe4 <VL53L0X_RdByte>
 8009a56:	4603      	mov	r3, r0
 8009a58:	461a      	mov	r2, r3
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	e01d      	b.n	8009a9e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009a6a:	78bb      	ldrb	r3, [r7, #2]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	21cb      	movs	r1, #203	; 0xcb
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f002 fa35 	bl	800bee0 <VL53L0X_WrByte>
 8009a76:	4603      	mov	r3, r0
 8009a78:	461a      	mov	r2, r3
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009a80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00a      	beq.n	8009a9e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009a88:	787b      	ldrb	r3, [r7, #1]
 8009a8a:	2280      	movs	r2, #128	; 0x80
 8009a8c:	21ee      	movs	r1, #238	; 0xee
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f002 fa74 	bl	800bf7c <VL53L0X_UpdateByte>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	21ff      	movs	r1, #255	; 0xff
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f002 fa1c 	bl	800bee0 <VL53L0X_WrByte>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	461a      	mov	r2, r3
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f002 fa12 	bl	800bee0 <VL53L0X_WrByte>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461a      	mov	r2, r3
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	21ff      	movs	r1, #255	; 0xff
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f002 fa08 	bl	800bee0 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	f023 0310 	bic.w	r3, r3, #16
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	701a      	strb	r2, [r3, #0]

	return Status;
 8009ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b08a      	sub	sp, #40	; 0x28
 8009af6:	af04      	add	r7, sp, #16
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	4611      	mov	r1, r2
 8009afe:	461a      	mov	r2, r3
 8009b00:	460b      	mov	r3, r1
 8009b02:	71fb      	strb	r3, [r7, #7]
 8009b04:	4613      	mov	r3, r2
 8009b06:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009b1c:	79bb      	ldrb	r3, [r7, #6]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009b28:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f002 f9d6 	bl	800bee0 <VL53L0X_WrByte>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d105      	bne.n	8009b4c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009b40:	2140      	movs	r1, #64	; 0x40
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff ff01 	bl	800994a <VL53L0X_perform_single_ref_calibration>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d115      	bne.n	8009b80 <VL53L0X_perform_vhv_calibration+0x8e>
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d112      	bne.n	8009b80 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009b5a:	7d39      	ldrb	r1, [r7, #20]
 8009b5c:	7d7a      	ldrb	r2, [r7, #21]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9303      	str	r3, [sp, #12]
 8009b62:	2301      	movs	r3, #1
 8009b64:	9302      	str	r3, [sp, #8]
 8009b66:	f107 0313 	add.w	r3, r7, #19
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	460b      	mov	r3, r1
 8009b72:	2101      	movs	r1, #1
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff ff23 	bl	80099c0 <VL53L0X_ref_calibration_io>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	75fb      	strb	r3, [r7, #23]
 8009b7e:	e002      	b.n	8009b86 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d112      	bne.n	8009bb4 <VL53L0X_perform_vhv_calibration+0xc2>
 8009b8e:	79bb      	ldrb	r3, [r7, #6]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00f      	beq.n	8009bb4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b94:	7dbb      	ldrb	r3, [r7, #22]
 8009b96:	461a      	mov	r2, r3
 8009b98:	2101      	movs	r1, #1
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f002 f9a0 	bl	800bee0 <VL53L0X_WrByte>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d103      	bne.n	8009bb4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	7dba      	ldrb	r2, [r7, #22]
 8009bb0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009bb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	; 0x28
 8009bc4:	af04      	add	r7, sp, #16
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	4611      	mov	r1, r2
 8009bcc:	461a      	mov	r2, r3
 8009bce:	460b      	mov	r3, r1
 8009bd0:	71fb      	strb	r3, [r7, #7]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009be6:	79bb      	ldrb	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009bf2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f002 f971 	bl	800bee0 <VL53L0X_WrByte>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d105      	bne.n	8009c16 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7ff fe9c 	bl	800994a <VL53L0X_perform_single_ref_calibration>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d115      	bne.n	8009c4a <VL53L0X_perform_phase_calibration+0x8a>
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d112      	bne.n	8009c4a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009c24:	7d39      	ldrb	r1, [r7, #20]
 8009c26:	7d7a      	ldrb	r2, [r7, #21]
 8009c28:	2301      	movs	r3, #1
 8009c2a:	9303      	str	r3, [sp, #12]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9302      	str	r3, [sp, #8]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	f107 0313 	add.w	r3, r7, #19
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7ff febe 	bl	80099c0 <VL53L0X_ref_calibration_io>
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]
 8009c48:	e002      	b.n	8009c50 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d112      	bne.n	8009c7e <VL53L0X_perform_phase_calibration+0xbe>
 8009c58:	79bb      	ldrb	r3, [r7, #6]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00f      	beq.n	8009c7e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009c5e:	7dbb      	ldrb	r3, [r7, #22]
 8009c60:	461a      	mov	r2, r3
 8009c62:	2101      	movs	r1, #1
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f002 f93b 	bl	800bee0 <VL53L0X_WrByte>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d103      	bne.n	8009c7e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	7dba      	ldrb	r2, [r7, #22]
 8009c7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b086      	sub	sp, #24
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	607a      	str	r2, [r7, #4]
 8009c96:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009ca6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	2300      	movs	r3, #0
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff ff1f 	bl	8009af2 <VL53L0X_perform_vhv_calibration>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d107      	bne.n	8009cd0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009cc0:	78fa      	ldrb	r2, [r7, #3]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff ff7a 	bl	8009bc0 <VL53L0X_perform_phase_calibration>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10f      	bne.n	8009cf8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009cd8:	7dbb      	ldrb	r3, [r7, #22]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	2101      	movs	r1, #1
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f002 f8fe 	bl	800bee0 <VL53L0X_WrByte>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d103      	bne.n	8009cf8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	7dba      	ldrb	r2, [r7, #22]
 8009cf4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009d18:	f107 030f 	add.w	r3, r7, #15
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fe fe02 	bl	8008928 <VL53L0X_GetMeasurementDataReady>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d110      	bne.n	8009d52 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d00f      	beq.n	8009d56 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009d42:	d302      	bcc.n	8009d4a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009d44:	23f9      	movs	r3, #249	; 0xf9
 8009d46:	75fb      	strb	r3, [r7, #23]
			break;
 8009d48:	e006      	b.n	8009d58 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f002 f9e8 	bl	800c120 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009d50:	e7e2      	b.n	8009d18 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009d56:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	3301      	adds	r3, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d9a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009d9c:	e002      	b.n	8009da4 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	089b      	lsrs	r3, r3, #2
 8009da2:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d8f8      	bhi.n	8009d9e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009dac:	e017      	b.n	8009dde <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4413      	add	r3, r2
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d30b      	bcc.n	8009dd2 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	085b      	lsrs	r3, r3, #1
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	4413      	add	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e002      	b.n	8009dd8 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	085b      	lsrs	r3, r3, #1
 8009dd6:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e4      	bne.n	8009dae <VL53L0X_isqrt+0x24>
	}

	return res;
 8009de4:	68fb      	ldr	r3, [r7, #12]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b086      	sub	sp, #24
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2183      	movs	r1, #131	; 0x83
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f002 f86c 	bl	800bee0 <VL53L0X_WrByte>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d11e      	bne.n	8009e58 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009e1e:	f107 030f 	add.w	r3, r7, #15
 8009e22:	461a      	mov	r2, r3
 8009e24:	2183      	movs	r1, #131	; 0x83
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f002 f8dc 	bl	800bfe4 <VL53L0X_RdByte>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10a      	bne.n	8009e4c <VL53L0X_device_read_strobe+0x5a>
 8009e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3301      	adds	r3, #1
 8009e42:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e4a:	d3e8      	bcc.n	8009e1e <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e52:	d301      	bcc.n	8009e58 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009e54:	23f9      	movs	r3, #249	; 0xf9
 8009e56:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009e58:	2201      	movs	r2, #1
 8009e5a:	2183      	movs	r1, #131	; 0x83
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f002 f83f 	bl	800bee0 <VL53L0X_WrByte>
 8009e62:	4603      	mov	r3, r0
 8009e64:	461a      	mov	r2, r3
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b098      	sub	sp, #96	; 0x60
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009ea8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009eac:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ec8:	2b07      	cmp	r3, #7
 8009eca:	f000 8408 	beq.w	800a6de <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009ece:	2201      	movs	r2, #1
 8009ed0:	2180      	movs	r1, #128	; 0x80
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f002 f804 	bl	800bee0 <VL53L0X_WrByte>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	21ff      	movs	r1, #255	; 0xff
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fff8 	bl	800bee0 <VL53L0X_WrByte>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009efe:	2200      	movs	r2, #0
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 ffec 	bl	800bee0 <VL53L0X_WrByte>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009f16:	2206      	movs	r2, #6
 8009f18:	21ff      	movs	r1, #255	; 0xff
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 ffe0 	bl	800bee0 <VL53L0X_WrByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009f2e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009f32:	461a      	mov	r2, r3
 8009f34:	2183      	movs	r1, #131	; 0x83
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f002 f854 	bl	800bfe4 <VL53L0X_RdByte>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f44:	4313      	orrs	r3, r2
 8009f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f4e:	f043 0304 	orr.w	r3, r3, #4
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	2183      	movs	r1, #131	; 0x83
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 ffc1 	bl	800bee0 <VL53L0X_WrByte>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	461a      	mov	r2, r3
 8009f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009f6c:	2207      	movs	r2, #7
 8009f6e:	21ff      	movs	r1, #255	; 0xff
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 ffb5 	bl	800bee0 <VL53L0X_WrByte>
 8009f76:	4603      	mov	r3, r0
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009f84:	2201      	movs	r2, #1
 8009f86:	2181      	movs	r1, #129	; 0x81
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 ffa9 	bl	800bee0 <VL53L0X_WrByte>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
 8009f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f96:	4313      	orrs	r3, r2
 8009f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f002 f8bf 	bl	800c120 <VL53L0X_PollingDelay>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	2180      	movs	r1, #128	; 0x80
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 ff93 	bl	800bee0 <VL53L0X_WrByte>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 8098 	beq.w	800a104 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009fd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fd8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 8091 	bne.w	800a104 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009fe2:	226b      	movs	r2, #107	; 0x6b
 8009fe4:	2194      	movs	r1, #148	; 0x94
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 ff7a 	bl	800bee0 <VL53L0X_WrByte>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fef9 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a000:	4603      	mov	r3, r0
 800a002:	461a      	mov	r2, r3
 800a004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a008:	4313      	orrs	r3, r2
 800a00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a00e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a012:	461a      	mov	r2, r3
 800a014:	2190      	movs	r1, #144	; 0x90
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f002 f846 	bl	800c0a8 <VL53L0X_RdDWord>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a024:	4313      	orrs	r3, r2
 800a026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a034:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	0bdb      	lsrs	r3, r3, #15
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a046:	2224      	movs	r2, #36	; 0x24
 800a048:	2194      	movs	r1, #148	; 0x94
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 ff48 	bl	800bee0 <VL53L0X_WrByte>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a058:	4313      	orrs	r3, r2
 800a05a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fec7 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a064:	4603      	mov	r3, r0
 800a066:	461a      	mov	r2, r3
 800a068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a06c:	4313      	orrs	r3, r2
 800a06e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a076:	461a      	mov	r2, r3
 800a078:	2190      	movs	r1, #144	; 0x90
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f002 f814 	bl	800c0a8 <VL53L0X_RdDWord>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a088:	4313      	orrs	r3, r2
 800a08a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	0e1b      	lsrs	r3, r3, #24
 800a092:	b2db      	uxtb	r3, r3
 800a094:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	0c1b      	lsrs	r3, r3, #16
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	0a1b      	lsrs	r3, r3, #8
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a0ac:	2225      	movs	r2, #37	; 0x25
 800a0ae:	2194      	movs	r1, #148	; 0x94
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 ff15 	bl	800bee0 <VL53L0X_WrByte>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff fe94 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a0d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0dc:	461a      	mov	r2, r3
 800a0de:	2190      	movs	r1, #144	; 0x90
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 ffe1 	bl	800c0a8 <VL53L0X_RdDWord>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	0e1b      	lsrs	r3, r3, #24
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	0c1b      	lsrs	r3, r3, #16
 800a100:	b2db      	uxtb	r3, r3
 800a102:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 8189 	beq.w	800a422 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a110:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a114:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f040 8182 	bne.w	800a422 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a11e:	2202      	movs	r2, #2
 800a120:	2194      	movs	r1, #148	; 0x94
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 fedc 	bl	800bee0 <VL53L0X_WrByte>
 800a128:	4603      	mov	r3, r0
 800a12a:	461a      	mov	r2, r3
 800a12c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a130:	4313      	orrs	r3, r2
 800a132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff fe5b 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a13c:	4603      	mov	r3, r0
 800a13e:	461a      	mov	r2, r3
 800a140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a144:	4313      	orrs	r3, r2
 800a146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a14a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a14e:	461a      	mov	r2, r3
 800a150:	2190      	movs	r1, #144	; 0x90
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f001 ff46 	bl	800bfe4 <VL53L0X_RdByte>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a160:	4313      	orrs	r3, r2
 800a162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a166:	227b      	movs	r2, #123	; 0x7b
 800a168:	2194      	movs	r1, #148	; 0x94
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 feb8 	bl	800bee0 <VL53L0X_WrByte>
 800a170:	4603      	mov	r3, r0
 800a172:	461a      	mov	r2, r3
 800a174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a178:	4313      	orrs	r3, r2
 800a17a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff fe37 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a192:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a196:	461a      	mov	r2, r3
 800a198:	2190      	movs	r1, #144	; 0x90
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 ff22 	bl	800bfe4 <VL53L0X_RdByte>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a1ae:	2277      	movs	r2, #119	; 0x77
 800a1b0:	2194      	movs	r1, #148	; 0x94
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f001 fe94 	bl	800bee0 <VL53L0X_WrByte>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff fe13 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1de:	461a      	mov	r2, r3
 800a1e0:	2190      	movs	r1, #144	; 0x90
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 ff60 	bl	800c0a8 <VL53L0X_RdDWord>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	0e5b      	lsrs	r3, r3, #25
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a200:	b2db      	uxtb	r3, r3
 800a202:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	0c9b      	lsrs	r3, r3, #18
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	0adb      	lsrs	r3, r3, #11
 800a216:	b2db      	uxtb	r3, r3
 800a218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	091b      	lsrs	r3, r3, #4
 800a224:	b2db      	uxtb	r3, r3
 800a226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	b2db      	uxtb	r3, r3
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	b2db      	uxtb	r3, r3
 800a236:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a240:	2278      	movs	r2, #120	; 0x78
 800a242:	2194      	movs	r1, #148	; 0x94
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f001 fe4b 	bl	800bee0 <VL53L0X_WrByte>
 800a24a:	4603      	mov	r3, r0
 800a24c:	461a      	mov	r2, r3
 800a24e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a252:	4313      	orrs	r3, r2
 800a254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff fdca 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a25e:	4603      	mov	r3, r0
 800a260:	461a      	mov	r2, r3
 800a262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a266:	4313      	orrs	r3, r2
 800a268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a26c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a270:	461a      	mov	r2, r3
 800a272:	2190      	movs	r1, #144	; 0x90
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 ff17 	bl	800c0a8 <VL53L0X_RdDWord>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461a      	mov	r2, r3
 800a27e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a282:	4313      	orrs	r3, r2
 800a284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	0f5b      	lsrs	r3, r3, #29
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a292:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a298:	4413      	add	r3, r2
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a0:	0d9b      	lsrs	r3, r3, #22
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	0bdb      	lsrs	r3, r3, #15
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	019b      	lsls	r3, r3, #6
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a2e8:	2279      	movs	r2, #121	; 0x79
 800a2ea:	2194      	movs	r1, #148	; 0x94
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 fdf7 	bl	800bee0 <VL53L0X_WrByte>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff fd76 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a306:	4603      	mov	r3, r0
 800a308:	461a      	mov	r2, r3
 800a30a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a30e:	4313      	orrs	r3, r2
 800a310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a318:	461a      	mov	r2, r3
 800a31a:	2190      	movs	r1, #144	; 0x90
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 fec3 	bl	800c0a8 <VL53L0X_RdDWord>
 800a322:	4603      	mov	r3, r0
 800a324:	461a      	mov	r2, r3
 800a326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a32a:	4313      	orrs	r3, r2
 800a32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	0e9b      	lsrs	r3, r3, #26
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a33a:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a33c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a340:	4413      	add	r3, r2
 800a342:	b2db      	uxtb	r3, r3
 800a344:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	0cdb      	lsrs	r3, r3, #19
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a350:	b2db      	uxtb	r3, r3
 800a352:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	0b1b      	lsrs	r3, r3, #12
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	095b      	lsrs	r3, r3, #5
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	b2db      	uxtb	r3, r3
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a382:	227a      	movs	r2, #122	; 0x7a
 800a384:	2194      	movs	r1, #148	; 0x94
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fdaa 	bl	800bee0 <VL53L0X_WrByte>
 800a38c:	4603      	mov	r3, r0
 800a38e:	461a      	mov	r2, r3
 800a390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a394:	4313      	orrs	r3, r2
 800a396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff fd29 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a3ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	2190      	movs	r1, #144	; 0x90
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 fe76 	bl	800c0a8 <VL53L0X_RdDWord>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	0f9b      	lsrs	r3, r3, #30
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d4:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a3d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3da:	4413      	add	r3, r2
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	0ddb      	lsrs	r3, r3, #23
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	0c1b      	lsrs	r3, r3, #16
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	0a5b      	lsrs	r3, r3, #9
 800a400:	b2db      	uxtb	r3, r3
 800a402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a406:	b2db      	uxtb	r3, r3
 800a408:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	089b      	lsrs	r3, r3, #2
 800a410:	b2db      	uxtb	r3, r3
 800a412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a41c:	2300      	movs	r3, #0
 800a41e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 80f1 	beq.w	800a610 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a42e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a432:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a436:	2b00      	cmp	r3, #0
 800a438:	f040 80ea 	bne.w	800a610 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a43c:	227b      	movs	r2, #123	; 0x7b
 800a43e:	2194      	movs	r1, #148	; 0x94
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 fd4d 	bl	800bee0 <VL53L0X_WrByte>
 800a446:	4603      	mov	r3, r0
 800a448:	461a      	mov	r2, r3
 800a44a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a44e:	4313      	orrs	r3, r2
 800a450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fccc 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a45a:	4603      	mov	r3, r0
 800a45c:	461a      	mov	r2, r3
 800a45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a462:	4313      	orrs	r3, r2
 800a464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a46c:	461a      	mov	r2, r3
 800a46e:	2190      	movs	r1, #144	; 0x90
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 fe19 	bl	800c0a8 <VL53L0X_RdDWord>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a47e:	4313      	orrs	r3, r2
 800a480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a484:	227c      	movs	r2, #124	; 0x7c
 800a486:	2194      	movs	r1, #148	; 0x94
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fd29 	bl	800bee0 <VL53L0X_WrByte>
 800a48e:	4603      	mov	r3, r0
 800a490:	461a      	mov	r2, r3
 800a492:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a496:	4313      	orrs	r3, r2
 800a498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff fca8 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a4b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2190      	movs	r1, #144	; 0x90
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fdf5 	bl	800c0a8 <VL53L0X_RdDWord>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a4cc:	2273      	movs	r2, #115	; 0x73
 800a4ce:	2194      	movs	r1, #148	; 0x94
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 fd05 	bl	800bee0 <VL53L0X_WrByte>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff fc84 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a4f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	2190      	movs	r1, #144	; 0x90
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 fdd1 	bl	800c0a8 <VL53L0X_RdDWord>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a50e:	4313      	orrs	r3, r2
 800a510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a518:	b29b      	uxth	r3, r3
 800a51a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a51c:	2274      	movs	r2, #116	; 0x74
 800a51e:	2194      	movs	r1, #148	; 0x94
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 fcdd 	bl	800bee0 <VL53L0X_WrByte>
 800a526:	4603      	mov	r3, r0
 800a528:	461a      	mov	r2, r3
 800a52a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a52e:	4313      	orrs	r3, r2
 800a530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff fc5c 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461a      	mov	r2, r3
 800a53e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a542:	4313      	orrs	r3, r2
 800a544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a54c:	461a      	mov	r2, r3
 800a54e:	2190      	movs	r1, #144	; 0x90
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 fda9 	bl	800c0a8 <VL53L0X_RdDWord>
 800a556:	4603      	mov	r3, r0
 800a558:	461a      	mov	r2, r3
 800a55a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a55e:	4313      	orrs	r3, r2
 800a560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a56a:	4313      	orrs	r3, r2
 800a56c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a56e:	2275      	movs	r2, #117	; 0x75
 800a570:	2194      	movs	r1, #148	; 0x94
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 fcb4 	bl	800bee0 <VL53L0X_WrByte>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a580:	4313      	orrs	r3, r2
 800a582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fc33 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461a      	mov	r2, r3
 800a590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a594:	4313      	orrs	r3, r2
 800a596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a59a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2190      	movs	r1, #144	; 0x90
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f001 fd80 	bl	800c0a8 <VL53L0X_RdDWord>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a5be:	2276      	movs	r2, #118	; 0x76
 800a5c0:	2194      	movs	r1, #148	; 0x94
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 fc8c 	bl	800bee0 <VL53L0X_WrByte>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fc0b 	bl	8009df2 <VL53L0X_device_read_strobe>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a5ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	2190      	movs	r1, #144	; 0x90
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 fd58 	bl	800c0a8 <VL53L0X_RdDWord>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a600:	4313      	orrs	r3, r2
 800a602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a60a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a60c:	4313      	orrs	r3, r2
 800a60e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a610:	2200      	movs	r2, #0
 800a612:	2181      	movs	r1, #129	; 0x81
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 fc63 	bl	800bee0 <VL53L0X_WrByte>
 800a61a:	4603      	mov	r3, r0
 800a61c:	461a      	mov	r2, r3
 800a61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a622:	4313      	orrs	r3, r2
 800a624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a628:	2206      	movs	r2, #6
 800a62a:	21ff      	movs	r1, #255	; 0xff
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 fc57 	bl	800bee0 <VL53L0X_WrByte>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a63a:	4313      	orrs	r3, r2
 800a63c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a640:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a644:	461a      	mov	r2, r3
 800a646:	2183      	movs	r1, #131	; 0x83
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 fccb 	bl	800bfe4 <VL53L0X_RdByte>
 800a64e:	4603      	mov	r3, r0
 800a650:	461a      	mov	r2, r3
 800a652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a656:	4313      	orrs	r3, r2
 800a658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a65c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a660:	f023 0304 	bic.w	r3, r3, #4
 800a664:	b2db      	uxtb	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	2183      	movs	r1, #131	; 0x83
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fc38 	bl	800bee0 <VL53L0X_WrByte>
 800a670:	4603      	mov	r3, r0
 800a672:	461a      	mov	r2, r3
 800a674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a678:	4313      	orrs	r3, r2
 800a67a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a67e:	2201      	movs	r2, #1
 800a680:	21ff      	movs	r1, #255	; 0xff
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fc2c 	bl	800bee0 <VL53L0X_WrByte>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a690:	4313      	orrs	r3, r2
 800a692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a696:	2201      	movs	r2, #1
 800a698:	2100      	movs	r1, #0
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f001 fc20 	bl	800bee0 <VL53L0X_WrByte>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	21ff      	movs	r1, #255	; 0xff
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 fc14 	bl	800bee0 <VL53L0X_WrByte>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 fc08 	bl	800bee0 <VL53L0X_WrByte>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a6de:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 808f 	bne.w	800a806 <VL53L0X_get_info_from_device+0x98e>
 800a6e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6ec:	2b07      	cmp	r3, #7
 800a6ee:	f000 808a 	beq.w	800a806 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d024      	beq.n	800a746 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a6fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a700:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11e      	bne.n	800a746 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a70e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a718:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a71c:	2300      	movs	r3, #0
 800a71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a720:	e00e      	b.n	800a740 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a722:	f107 0208 	add.w	r2, r7, #8
 800a726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a728:	4413      	add	r3, r2
 800a72a:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a730:	4413      	add	r3, r2
 800a732:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a736:	460a      	mov	r2, r1
 800a738:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73c:	3301      	adds	r3, #1
 800a73e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a742:	2b05      	cmp	r3, #5
 800a744:	dded      	ble.n	800a722 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a746:	78fb      	ldrb	r3, [r7, #3]
 800a748:	f003 0302 	and.w	r3, r3, #2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d018      	beq.n	800a782 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a754:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d112      	bne.n	800a782 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a75c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a766:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	33f3      	adds	r3, #243	; 0xf3
 800a774:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a776:	f107 0310 	add.w	r3, r7, #16
 800a77a:	4619      	mov	r1, r3
 800a77c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a77e:	f004 fdc6 	bl	800f30e <strcpy>

		}

		if (((option & 4) == 4) &&
 800a782:	78fb      	ldrb	r3, [r7, #3]
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d030      	beq.n	800a7ee <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a78c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a790:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a794:	2b00      	cmp	r3, #0
 800a796:	d12a      	bne.n	800a7ee <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a7a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7aa:	025b      	lsls	r3, r3, #9
 800a7ac:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a7bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d011      	beq.n	800a7e6 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a7c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7d0:	fb02 f303 	mul.w	r3, r2, r3
 800a7d4:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a7d6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a7da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a7de:	425b      	negs	r3, r3
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a7e6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a7ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a7f2:	78fb      	ldrb	r3, [r7, #3]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a7fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a806:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3760      	adds	r7, #96	; 0x60
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a812:	b480      	push	{r7}
 800a814:	b087      	sub	sp, #28
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a81e:	f240 6277 	movw	r2, #1655	; 0x677
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a82a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a82e:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	fb02 f303 	mul.w	r3, r2, r3
 800a83e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a840:	68bb      	ldr	r3, [r7, #8]
}
 800a842:	4618      	mov	r0, r3
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a84e:	b480      	push	{r7}
 800a850:	b087      	sub	sp, #28
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d017      	beq.n	800a898 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a86e:	e005      	b.n	800a87c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	085b      	lsrs	r3, r3, #1
 800a874:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a876:	89fb      	ldrh	r3, [r7, #14]
 800a878:	3301      	adds	r3, #1
 800a87a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1f4      	bne.n	800a870 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a886:	89fb      	ldrh	r3, [r7, #14]
 800a888:	021b      	lsls	r3, r3, #8
 800a88a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	b2db      	uxtb	r3, r3
 800a892:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a894:	4413      	add	r3, r2
 800a896:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a898:	8afb      	ldrh	r3, [r7, #22]

}
 800a89a:	4618      	mov	r0, r3
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a8b8:	88fa      	ldrh	r2, [r7, #6]
 800a8ba:	0a12      	lsrs	r2, r2, #8
 800a8bc:	b292      	uxth	r2, r2
 800a8be:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b088      	sub	sp, #32
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff ff91 	bl	800a812 <VL53L0X_calc_macro_period_ps>
 800a8f0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8f8:	4a0a      	ldr	r2, [pc, #40]	; (800a924 <VL53L0X_calc_timeout_mclks+0x50>)
 800a8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fe:	099b      	lsrs	r3, r3, #6
 800a900:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a908:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	085b      	lsrs	r3, r3, #1
 800a910:	441a      	add	r2, r3
	timeout_period_mclks =
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a91a:	69fb      	ldr	r3, [r7, #28]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	10624dd3 	.word	0x10624dd3

0800a928 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	807b      	strh	r3, [r7, #2]
 800a934:	4613      	mov	r3, r2
 800a936:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a93c:	787b      	ldrb	r3, [r7, #1]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff ff66 	bl	800a812 <VL53L0X_calc_macro_period_ps>
 800a946:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a94e:	4a0a      	ldr	r2, [pc, #40]	; (800a978 <VL53L0X_calc_timeout_us+0x50>)
 800a950:	fba2 2303 	umull	r2, r3, r2, r3
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a958:	887b      	ldrh	r3, [r7, #2]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	fb02 f303 	mul.w	r3, r2, r3
 800a960:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a964:	4a04      	ldr	r2, [pc, #16]	; (800a978 <VL53L0X_calc_timeout_us+0x50>)
 800a966:	fba2 2303 	umull	r2, r3, r2, r3
 800a96a:	099b      	lsrs	r3, r3, #6
 800a96c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a96e:	697b      	ldr	r3, [r7, #20]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	10624dd3 	.word	0x10624dd3

0800a97c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08c      	sub	sp, #48	; 0x30
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	460b      	mov	r3, r1
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d005      	beq.n	800a9b4 <get_sequence_step_timeout+0x38>
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d002      	beq.n	800a9b4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d128      	bne.n	800aa06 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a9b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7fd fa8f 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a9c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a9d0:	f107 0320 	add.w	r3, r7, #32
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2146      	movs	r1, #70	; 0x46
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f001 fb03 	bl	800bfe4 <VL53L0X_RdByte>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a9e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff ff5b 	bl	800a8a6 <VL53L0X_decode_timeout>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a9f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a9f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff ff93 	bl	800a928 <VL53L0X_calc_timeout_us>
 800aa02:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa04:	e092      	b.n	800ab2c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800aa06:	7afb      	ldrb	r3, [r7, #11]
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d135      	bne.n	800aa78 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa0c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aa10:	461a      	mov	r2, r3
 800aa12:	2100      	movs	r1, #0
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7fd fa63 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aa20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 8081 	bne.w	800ab2c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa2a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aa2e:	461a      	mov	r2, r3
 800aa30:	2100      	movs	r1, #0
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7fd fa54 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800aa3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d109      	bne.n	800aa5a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800aa46:	f107 031e 	add.w	r3, r7, #30
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	2151      	movs	r1, #81	; 0x51
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f001 faf2 	bl	800c038 <VL53L0X_RdWord>
 800aa54:	4603      	mov	r3, r0
 800aa56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aa5a:	8bfb      	ldrh	r3, [r7, #30]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff ff22 	bl	800a8a6 <VL53L0X_decode_timeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800aa66:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800aa6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7ff ff5a 	bl	800a928 <VL53L0X_calc_timeout_us>
 800aa74:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa76:	e059      	b.n	800ab2c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d156      	bne.n	800ab2c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa7e:	f107 0314 	add.w	r3, r7, #20
 800aa82:	4619      	mov	r1, r3
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f7fd fb37 	bl	80080f8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01d      	beq.n	800aad0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa94:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aa98:	461a      	mov	r2, r3
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7fd fa1f 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800aaa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10f      	bne.n	800aad0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800aab0:	f107 031e 	add.w	r3, r7, #30
 800aab4:	461a      	mov	r2, r3
 800aab6:	2151      	movs	r1, #81	; 0x51
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f001 fabd 	bl	800c038 <VL53L0X_RdWord>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aac4:	8bfb      	ldrh	r3, [r7, #30]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7ff feed 	bl	800a8a6 <VL53L0X_decode_timeout>
 800aacc:	4603      	mov	r3, r0
 800aace:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aad0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d109      	bne.n	800aaec <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aad8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aadc:	461a      	mov	r2, r3
 800aade:	2101      	movs	r1, #1
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f7fd f9fd 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aaec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10f      	bne.n	800ab14 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800aaf4:	f107 031c 	add.w	r3, r7, #28
 800aaf8:	461a      	mov	r2, r3
 800aafa:	2171      	movs	r1, #113	; 0x71
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f001 fa9b 	bl	800c038 <VL53L0X_RdWord>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ab08:	8bbb      	ldrh	r3, [r7, #28]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff fecb 	bl	800a8a6 <VL53L0X_decode_timeout>
 800ab10:	4603      	mov	r3, r0
 800ab12:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ab14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ab1c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ab20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab22:	4619      	mov	r1, r3
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7ff feff 	bl	800a928 <VL53L0X_calc_timeout_us>
 800ab2a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab30:	601a      	str	r2, [r3, #0]

	return Status;
 800ab32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3730      	adds	r7, #48	; 0x30
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b08a      	sub	sp, #40	; 0x28
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	460b      	mov	r3, r1
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <set_sequence_step_timeout+0x26>
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d002      	beq.n	800ab64 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d138      	bne.n	800abd6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ab64:	f107 031b 	add.w	r3, r7, #27
 800ab68:	461a      	mov	r2, r3
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7fd f9b7 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800ab78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d11a      	bne.n	800abb6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800ab80:	7efb      	ldrb	r3, [r7, #27]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff fea4 	bl	800a8d4 <VL53L0X_calc_timeout_mclks>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800ab90:	8bbb      	ldrh	r3, [r7, #28]
 800ab92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab96:	d903      	bls.n	800aba0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800ab98:	23ff      	movs	r3, #255	; 0xff
 800ab9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab9e:	e004      	b.n	800abaa <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800aba0:	8bbb      	ldrh	r3, [r7, #28]
 800aba2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800aba4:	3b01      	subs	r3, #1
 800aba6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800abaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abae:	b29a      	uxth	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800abb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f040 80ab 	bne.w	800ad16 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800abc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abc4:	461a      	mov	r2, r3
 800abc6:	2146      	movs	r1, #70	; 0x46
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f001 f989 	bl	800bee0 <VL53L0X_WrByte>
 800abce:	4603      	mov	r3, r0
 800abd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800abd4:	e09f      	b.n	800ad16 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800abd6:	7afb      	ldrb	r3, [r7, #11]
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d135      	bne.n	800ac48 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800abdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d11b      	bne.n	800ac1c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800abe4:	f107 031b 	add.w	r3, r7, #27
 800abe8:	461a      	mov	r2, r3
 800abea:	2100      	movs	r1, #0
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7fd f977 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800abf8:	7efb      	ldrb	r3, [r7, #27]
 800abfa:	461a      	mov	r2, r3
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f7ff fe68 	bl	800a8d4 <VL53L0X_calc_timeout_mclks>
 800ac04:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800ac06:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800ac08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fe1f 	bl	800a84e <VL53L0X_encode_timeout>
 800ac10:	4603      	mov	r3, r0
 800ac12:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac14:	8b3a      	ldrh	r2, [r7, #24]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ac1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d108      	bne.n	800ac36 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800ac24:	8b3b      	ldrh	r3, [r7, #24]
 800ac26:	461a      	mov	r2, r3
 800ac28:	2151      	movs	r1, #81	; 0x51
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f001 f97c 	bl	800bf28 <VL53L0X_WrWord>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ac36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d16b      	bne.n	800ad16 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800ac46:	e066      	b.n	800ad16 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ac48:	7afb      	ldrb	r3, [r7, #11]
 800ac4a:	2b04      	cmp	r3, #4
 800ac4c:	d160      	bne.n	800ad10 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800ac4e:	f107 0310 	add.w	r3, r7, #16
 800ac52:	4619      	mov	r1, r3
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f7fd fa4f 	bl	80080f8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ac5e:	7cfb      	ldrb	r3, [r7, #19]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d01d      	beq.n	800aca0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ac64:	f107 031b 	add.w	r3, r7, #27
 800ac68:	461a      	mov	r2, r3
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7fd f937 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800ac78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10f      	bne.n	800aca0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800ac80:	f107 0318 	add.w	r3, r7, #24
 800ac84:	461a      	mov	r2, r3
 800ac86:	2151      	movs	r1, #81	; 0x51
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f001 f9d5 	bl	800c038 <VL53L0X_RdWord>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ac94:	8b3b      	ldrh	r3, [r7, #24]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fe05 	bl	800a8a6 <VL53L0X_decode_timeout>
 800ac9c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800ac9e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800aca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d109      	bne.n	800acbc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aca8:	f107 031b 	add.w	r3, r7, #27
 800acac:	461a      	mov	r2, r3
 800acae:	2101      	movs	r1, #1
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7fd f915 	bl	8007ee0 <VL53L0X_GetVcselPulsePeriod>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800acbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d128      	bne.n	800ad16 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800acc4:	7efb      	ldrb	r3, [r7, #27]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fe02 	bl	800a8d4 <VL53L0X_calc_timeout_mclks>
 800acd0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800acd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acd4:	6a3a      	ldr	r2, [r7, #32]
 800acd6:	4413      	add	r3, r2
 800acd8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800acda:	6a38      	ldr	r0, [r7, #32]
 800acdc:	f7ff fdb7 	bl	800a84e <VL53L0X_encode_timeout>
 800ace0:	4603      	mov	r3, r0
 800ace2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800ace4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d108      	bne.n	800acfe <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800acec:	8bfb      	ldrh	r3, [r7, #30]
 800acee:	461a      	mov	r2, r3
 800acf0:	2171      	movs	r1, #113	; 0x71
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f001 f918 	bl	800bf28 <VL53L0X_WrWord>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800acfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d107      	bne.n	800ad16 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800ad0e:	e002      	b.n	800ad16 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad10:	23fc      	movs	r3, #252	; 0xfc
 800ad12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800ad16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3728      	adds	r7, #40	; 0x28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b086      	sub	sp, #24
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ad34:	7afb      	ldrb	r3, [r7, #11]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d00a      	beq.n	800ad54 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ad3e:	e013      	b.n	800ad68 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad40:	f107 0316 	add.w	r3, r7, #22
 800ad44:	461a      	mov	r2, r3
 800ad46:	2150      	movs	r1, #80	; 0x50
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f001 f94b 	bl	800bfe4 <VL53L0X_RdByte>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad52:	e00b      	b.n	800ad6c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad54:	f107 0316 	add.w	r3, r7, #22
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2170      	movs	r1, #112	; 0x70
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f001 f941 	bl	800bfe4 <VL53L0X_RdByte>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad66:	e001      	b.n	800ad6c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad68:	23fc      	movs	r3, #252	; 0xfc
 800ad6a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ad6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d107      	bne.n	800ad84 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ad74:	7dbb      	ldrb	r3, [r7, #22]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe fff4 	bl	8009d64 <VL53L0X_decode_vcsel_period>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	701a      	strb	r2, [r3, #0]

	return Status;
 800ad84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b092      	sub	sp, #72	; 0x48
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ada0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ada4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ada6:	f240 7376 	movw	r3, #1910	; 0x776
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800adac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800adb0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800adb2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800adb6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800adb8:	f240 234e 	movw	r3, #590	; 0x24e
 800adbc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800adbe:	f240 23b2 	movw	r3, #690	; 0x2b2
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800adc4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800adc8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800adca:	f240 2326 	movw	r3, #550	; 0x226
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800add4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800add8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d205      	bcs.n	800adf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ade6:	23fc      	movs	r3, #252	; 0xfc
 800ade8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800adec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800adf0:	e0aa      	b.n	800af48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800adf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800adfe:	f107 0314 	add.w	r3, r7, #20
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7fd f977 	bl	80080f8 <VL53L0X_GetSequenceStepEnables>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ae10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d15b      	bne.n	800aed0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ae18:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d105      	bne.n	800ae2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ae1e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ae24:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d052      	beq.n	800aed0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ae2a:	f107 0310 	add.w	r3, r7, #16
 800ae2e:	461a      	mov	r2, r3
 800ae30:	2102      	movs	r1, #2
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fda2 	bl	800a97c <get_sequence_step_timeout>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ae3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ae46:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae4a:	e07d      	b.n	800af48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ae4c:	7d3b      	ldrb	r3, [r7, #20]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00f      	beq.n	800ae72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ae52:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ae54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae56:	4413      	add	r3, r2
 800ae58:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d204      	bcs.n	800ae6c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ae62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	643b      	str	r3, [r7, #64]	; 0x40
 800ae6a:	e002      	b.n	800ae72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae6c:	23fc      	movs	r3, #252	; 0xfc
 800ae6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ae72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ae7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae7e:	e063      	b.n	800af48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ae80:	7dbb      	ldrb	r3, [r7, #22]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d011      	beq.n	800aeaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	4413      	add	r3, r2
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d204      	bcs.n	800aea2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ae98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	643b      	str	r3, [r7, #64]	; 0x40
 800aea0:	e016      	b.n	800aed0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aea2:	23fc      	movs	r3, #252	; 0xfc
 800aea4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aea8:	e012      	b.n	800aed0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800aeaa:	7d7b      	ldrb	r3, [r7, #21]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00f      	beq.n	800aed0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeb4:	4413      	add	r3, r2
 800aeb6:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aeb8:	69fa      	ldr	r2, [r7, #28]
 800aeba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d204      	bcs.n	800aeca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	643b      	str	r3, [r7, #64]	; 0x40
 800aec8:	e002      	b.n	800aed0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aeca:	23fc      	movs	r3, #252	; 0xfc
 800aecc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800aed0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800aed8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aedc:	e034      	b.n	800af48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d019      	beq.n	800af18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800aee4:	f107 030c 	add.w	r3, r7, #12
 800aee8:	461a      	mov	r2, r3
 800aeea:	2103      	movs	r1, #3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fd45 	bl	800a97c <get_sequence_step_timeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aefc:	4413      	add	r3, r2
 800aefe:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800af00:	69fa      	ldr	r2, [r7, #28]
 800af02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af04:	429a      	cmp	r2, r3
 800af06:	d204      	bcs.n	800af12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800af08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	643b      	str	r3, [r7, #64]	; 0x40
 800af10:	e002      	b.n	800af18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af12:	23fc      	movs	r3, #252	; 0xfc
 800af14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800af18:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d111      	bne.n	800af44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800af20:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800af26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800af2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af30:	2104      	movs	r1, #4
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff fe03 	bl	800ab3e <set_sequence_step_timeout>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800af44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3748      	adds	r7, #72	; 0x48
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b090      	sub	sp, #64	; 0x40
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800af60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800af64:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800af66:	f240 7376 	movw	r3, #1910	; 0x776
 800af6a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800af6c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800af70:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800af72:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af76:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800af78:	f240 234e 	movw	r3, #590	; 0x24e
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800af7e:	f240 23b2 	movw	r3, #690	; 0x2b2
 800af82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800af84:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800af8a:	f240 2326 	movw	r3, #550	; 0x226
 800af8e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800af94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af98:	441a      	add	r2, r3
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800af9e:	f107 0318 	add.w	r3, r7, #24
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7fd f8a7 	bl	80080f8 <VL53L0X_GetSequenceStepEnables>
 800afaa:	4603      	mov	r3, r0
 800afac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800afb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800afb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afbc:	e075      	b.n	800b0aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800afbe:	7e3b      	ldrb	r3, [r7, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d105      	bne.n	800afd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800afc4:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800afca:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d030      	beq.n	800b032 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800afd0:	f107 0310 	add.w	r3, r7, #16
 800afd4:	461a      	mov	r2, r3
 800afd6:	2102      	movs	r1, #2
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff fccf 	bl	800a97c <get_sequence_step_timeout>
 800afde:	4603      	mov	r3, r0
 800afe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800afe4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d122      	bne.n	800b032 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800afec:	7e3b      	ldrb	r3, [r7, #24]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d007      	beq.n	800b002 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aff6:	6939      	ldr	r1, [r7, #16]
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800affc:	441a      	add	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b002:	7ebb      	ldrb	r3, [r7, #26]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d009      	beq.n	800b01c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b00c:	6939      	ldr	r1, [r7, #16]
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	440b      	add	r3, r1
 800b012:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b014:	441a      	add	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	e00a      	b.n	800b032 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b01c:	7e7b      	ldrb	r3, [r7, #25]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b026:	6939      	ldr	r1, [r7, #16]
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b02c:	441a      	add	r2, r3
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b032:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b036:	2b00      	cmp	r3, #0
 800b038:	d114      	bne.n	800b064 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b03a:	7efb      	ldrb	r3, [r7, #27]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d011      	beq.n	800b064 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b040:	f107 030c 	add.w	r3, r7, #12
 800b044:	461a      	mov	r2, r3
 800b046:	2103      	movs	r1, #3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fc97 	bl	800a97c <get_sequence_step_timeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b058:	68f9      	ldr	r1, [r7, #12]
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b05e:	441a      	add	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b064:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d114      	bne.n	800b096 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b06c:	7f3b      	ldrb	r3, [r7, #28]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d011      	beq.n	800b096 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b072:	f107 0314 	add.w	r3, r7, #20
 800b076:	461a      	mov	r2, r3
 800b078:	2104      	movs	r1, #4
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff fc7e 	bl	800a97c <get_sequence_step_timeout>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b08a:	6979      	ldr	r1, [r7, #20]
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b090:	441a      	add	r2, r3
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b096:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d103      	bne.n	800b0a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3740      	adds	r7, #64	; 0x40
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b0c6:	e0c6      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b0d8:	7cfb      	ldrb	r3, [r7, #19]
 800b0da:	2bff      	cmp	r3, #255	; 0xff
 800b0dc:	f040 808d 	bne.w	800b1fa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	747b      	strb	r3, [r7, #17]
			Index++;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b0f0:	7c7b      	ldrb	r3, [r7, #17]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d87e      	bhi.n	800b1f4 <VL53L0X_load_tuning_settings+0x140>
 800b0f6:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <VL53L0X_load_tuning_settings+0x48>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b147 	.word	0x0800b147
 800b104:	0800b181 	.word	0x0800b181
 800b108:	0800b1bb 	.word	0x0800b1bb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	4413      	add	r3, r2
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	743b      	strb	r3, [r7, #16]
				Index++;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	3301      	adds	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4413      	add	r3, r2
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	3301      	adds	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b12c:	7c3b      	ldrb	r3, [r7, #16]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	b29a      	uxth	r2, r3
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	b29b      	uxth	r3, r3
 800b138:	4413      	add	r3, r2
 800b13a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	89ba      	ldrh	r2, [r7, #12]
 800b140:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b144:	e087      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	4413      	add	r3, r2
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	743b      	strb	r3, [r7, #16]
				Index++;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	3301      	adds	r3, #1
 800b154:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	4413      	add	r3, r2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	3301      	adds	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b166:	7c3b      	ldrb	r3, [r7, #16]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	b29b      	uxth	r3, r3
 800b172:	4413      	add	r3, r2
 800b174:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	89ba      	ldrh	r2, [r7, #12]
 800b17a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b17e:	e06a      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	4413      	add	r3, r2
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	743b      	strb	r3, [r7, #16]
				Index++;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	3301      	adds	r3, #1
 800b18e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4413      	add	r3, r2
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	3301      	adds	r3, #1
 800b19e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b1a0:	7c3b      	ldrb	r3, [r7, #16]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	89ba      	ldrh	r2, [r7, #12]
 800b1b4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b1b8:	e04d      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	4413      	add	r3, r2
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	743b      	strb	r3, [r7, #16]
				Index++;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b1da:	7c3b      	ldrb	r3, [r7, #16]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	4413      	add	r3, r2
 800b1e8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	89ba      	ldrh	r2, [r7, #12]
 800b1ee:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b1f2:	e030      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1f4:	23fc      	movs	r3, #252	; 0xfc
 800b1f6:	77fb      	strb	r3, [r7, #31]
 800b1f8:	e02d      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b1fa:	7cfb      	ldrb	r3, [r7, #19]
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	d828      	bhi.n	800b252 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	4413      	add	r3, r2
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	3301      	adds	r3, #1
 800b20e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b210:	2300      	movs	r3, #0
 800b212:	61bb      	str	r3, [r7, #24]
 800b214:	e00f      	b.n	800b236 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	4413      	add	r3, r2
 800b21c:	7819      	ldrb	r1, [r3, #0]
 800b21e:	f107 0208 	add.w	r2, r7, #8
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	4413      	add	r3, r2
 800b226:	460a      	mov	r2, r1
 800b228:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	3301      	adds	r3, #1
 800b22e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	3301      	adds	r3, #1
 800b234:	61bb      	str	r3, [r7, #24]
 800b236:	7cfb      	ldrb	r3, [r7, #19]
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	dbeb      	blt.n	800b216 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b23e:	7cfb      	ldrb	r3, [r7, #19]
 800b240:	f107 0208 	add.w	r2, r7, #8
 800b244:	7cb9      	ldrb	r1, [r7, #18]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fdee 	bl	800be28 <VL53L0X_WriteMulti>
 800b24c:	4603      	mov	r3, r0
 800b24e:	77fb      	strb	r3, [r7, #31]
 800b250:	e001      	b.n	800b256 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b252:	23fc      	movs	r3, #252	; 0xfc
 800b254:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	4413      	add	r3, r2
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d004      	beq.n	800b26c <VL53L0X_load_tuning_settings+0x1b8>
 800b262:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f43f af2e 	beq.w	800b0c8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b26c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b284:	2300      	movs	r3, #0
 800b286:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b28e:	f107 0313 	add.w	r3, r7, #19
 800b292:	4619      	mov	r1, r3
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7fc ffbb 	bl	8008210 <VL53L0X_GetXTalkCompensationEnable>
 800b29a:	4603      	mov	r3, r0
 800b29c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b29e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d111      	bne.n	800b2ca <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b2a6:	7cfb      	ldrb	r3, [r7, #19]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00e      	beq.n	800b2ca <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	8a9b      	ldrh	r3, [r3, #20]
 800b2b6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
 800b2be:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	3380      	adds	r3, #128	; 0x80
 800b2c4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b2ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b2ee:	f107 0310 	add.w	r3, r7, #16
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7ff ffbe 	bl	800b278 <VL53L0X_get_total_xtalk_rate>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b300:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d105      	bne.n	800b314 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	441a      	add	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	601a      	str	r2, [r3, #0]

	return Status;
 800b314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b09a      	sub	sp, #104	; 0x68
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b32e:	2312      	movs	r3, #18
 800b330:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b336:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b338:	2342      	movs	r3, #66	; 0x42
 800b33a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b33c:	2306      	movs	r3, #6
 800b33e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b340:	2307      	movs	r3, #7
 800b342:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b344:	2300      	movs	r3, #0
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b350:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b358:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b35c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b35e:	fb02 f303 	mul.w	r3, r2, r3
 800b362:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	3380      	adds	r3, #128	; 0x80
 800b368:	0a1b      	lsrs	r3, r3, #8
 800b36a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b370:	fb02 f303 	mul.w	r3, r2, r3
 800b374:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01a      	beq.n	800b3b6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	029b      	lsls	r3, r3, #10
 800b384:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b38c:	4413      	add	r3, r2
 800b38e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b390:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	fbb2 f3f3 	udiv	r3, r2, r3
 800b398:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b39a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b39c:	4613      	mov	r3, r2
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	4413      	add	r3, r2
 800b3a2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b3a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3a6:	fb03 f303 	mul.w	r3, r3, r3
 800b3aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3b2:	0c1b      	lsrs	r3, r3, #16
 800b3b4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3ba:	fb02 f303 	mul.w	r3, r2, r3
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3c6:	0c1b      	lsrs	r3, r3, #16
 800b3c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	fb03 f303 	mul.w	r3, r3, r3
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b3d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3d8:	0c1b      	lsrs	r3, r3, #16
 800b3da:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3de:	085a      	lsrs	r2, r3, #1
 800b3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e2:	441a      	add	r2, r3
 800b3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ea:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3f0:	fb02 f303 	mul.w	r3, r2, r3
 800b3f4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3fc:	d302      	bcc.n	800b404 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b3fe:	4b54      	ldr	r3, [pc, #336]	; (800b550 <VL53L0X_calc_dmax+0x230>)
 800b400:	663b      	str	r3, [r7, #96]	; 0x60
 800b402:	e015      	b.n	800b430 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b406:	085a      	lsrs	r2, r3, #1
 800b408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b40a:	441a      	add	r2, r3
 800b40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b412:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b418:	fb02 f303 	mul.w	r3, r2, r3
 800b41c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b420:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b424:	0c1b      	lsrs	r3, r3, #16
 800b426:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b42a:	fb03 f303 	mul.w	r3, r3, r3
 800b42e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b432:	039b      	lsls	r3, r3, #14
 800b434:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b438:	4a46      	ldr	r2, [pc, #280]	; (800b554 <VL53L0X_calc_dmax+0x234>)
 800b43a:	fba2 2303 	umull	r2, r3, r2, r3
 800b43e:	099b      	lsrs	r3, r3, #6
 800b440:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	fb03 f303 	mul.w	r3, r3, r3
 800b448:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44c:	fb03 f303 	mul.w	r3, r3, r3
 800b450:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	3308      	adds	r3, #8
 800b456:	091b      	lsrs	r3, r3, #4
 800b458:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b464:	4613      	mov	r3, r2
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	4413      	add	r3, r2
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b474:	0b9b      	lsrs	r3, r3, #14
 800b476:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b47c:	4413      	add	r3, r2
 800b47e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b482:	085b      	lsrs	r3, r3, #1
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	4413      	add	r3, r2
 800b488:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b492:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	039b      	lsls	r3, r3, #14
 800b498:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	085b      	lsrs	r3, r3, #1
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ac:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
 800b4b6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b4be:	4a25      	ldr	r2, [pc, #148]	; (800b554 <VL53L0X_calc_dmax+0x234>)
 800b4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c4:	099b      	lsrs	r3, r3, #6
 800b4c6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	011b      	lsls	r3, r3, #4
 800b4cc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b4d4:	4a1f      	ldr	r2, [pc, #124]	; (800b554 <VL53L0X_calc_dmax+0x234>)
 800b4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4da:	099b      	lsrs	r3, r3, #6
 800b4dc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e0:	3380      	adds	r3, #128	; 0x80
 800b4e2:	0a1b      	lsrs	r3, r3, #8
 800b4e4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d008      	beq.n	800b4fe <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	085a      	lsrs	r2, r3, #1
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f2:	441a      	add	r2, r3
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4fc:	e001      	b.n	800b502 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b502:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b504:	f7fe fc41 	bl	8009d8a <VL53L0X_isqrt>
 800b508:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d008      	beq.n	800b522 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	085a      	lsrs	r2, r3, #1
 800b514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b516:	441a      	add	r2, r3
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b520:	e001      	b.n	800b526 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b526:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b528:	f7fe fc2f 	bl	8009d8a <VL53L0X_isqrt>
 800b52c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b52e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b538:	429a      	cmp	r2, r3
 800b53a:	d902      	bls.n	800b542 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b53c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b53e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b540:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b542:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b546:	4618      	mov	r0, r3
 800b548:	3768      	adds	r7, #104	; 0x68
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	fff00000 	.word	0xfff00000
 800b554:	10624dd3 	.word	0x10624dd3

0800b558 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b0b4      	sub	sp, #208	; 0xd0
 800b55c:	af04      	add	r7, sp, #16
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b566:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b56a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b56e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b576:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b57a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b57e:	f241 235c 	movw	r3, #4700	; 0x125c
 800b582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b586:	4b9e      	ldr	r3, [pc, #632]	; (800b800 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b58c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b590:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b592:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b59e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b5a0:	4b98      	ldr	r3, [pc, #608]	; (800b804 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b5a2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b5a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b5aa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b5ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b5b0:	f240 6377 	movw	r3, #1655	; 0x677
 800b5b4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5ca:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b5d8:	f107 0310 	add.w	r3, r7, #16
 800b5dc:	461a      	mov	r2, r3
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff fe78 	bl	800b2d6 <VL53L0X_get_total_signal_rate>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b5ec:	f107 0314 	add.w	r3, r7, #20
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	68b9      	ldr	r1, [r7, #8]
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7ff fe3f 	bl	800b278 <VL53L0X_get_total_xtalk_rate>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b606:	fb02 f303 	mul.w	r3, r2, r3
 800b60a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b60e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b612:	0c1b      	lsrs	r3, r3, #16
 800b614:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b61c:	fb02 f303 	mul.w	r3, r2, r3
 800b620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b624:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d902      	bls.n	800b634 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b630:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b634:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d168      	bne.n	800b70e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b64c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b650:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b654:	461a      	mov	r2, r3
 800b656:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff f93a 	bl	800a8d4 <VL53L0X_calc_timeout_mclks>
 800b660:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b672:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b676:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b67a:	461a      	mov	r2, r3
 800b67c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff f927 	bl	800a8d4 <VL53L0X_calc_timeout_mclks>
 800b686:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b688:	2303      	movs	r3, #3
 800b68a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b68e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b692:	2b08      	cmp	r3, #8
 800b694:	d102      	bne.n	800b69c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b696:	2302      	movs	r3, #2
 800b698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b69c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b69e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6a0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b6a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b6a6:	fb02 f303 	mul.w	r3, r2, r3
 800b6aa:	02db      	lsls	r3, r3, #11
 800b6ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b6b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6b8:	4a53      	ldr	r2, [pc, #332]	; (800b808 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b6be:	099b      	lsrs	r3, r3, #6
 800b6c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b6c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6ca:	fb02 f303 	mul.w	r3, r2, r3
 800b6ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b6d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6da:	4a4b      	ldr	r2, [pc, #300]	; (800b808 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e0:	099b      	lsrs	r3, r3, #6
 800b6e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	3380      	adds	r3, #128	; 0x80
 800b6ea:	0a1b      	lsrs	r3, r3, #8
 800b6ec:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6f4:	fb02 f303 	mul.w	r3, r2, r3
 800b6f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b6fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b700:	3380      	adds	r3, #128	; 0x80
 800b702:	0a1b      	lsrs	r3, r3, #8
 800b704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	021b      	lsls	r3, r3, #8
 800b70c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b70e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b716:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b71a:	e15e      	b.n	800b9da <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b71c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10c      	bne.n	800b73c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b728:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b730:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	e14c      	b.n	800b9d6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b73c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b740:	2b00      	cmp	r3, #0
 800b742:	d102      	bne.n	800b74a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b744:	2301      	movs	r3, #1
 800b746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b74a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b74e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b752:	041a      	lsls	r2, r3, #16
 800b754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b756:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b75e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b764:	429a      	cmp	r2, r3
 800b766:	d902      	bls.n	800b76e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b76a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b76e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b772:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b776:	fb02 f303 	mul.w	r3, r2, r3
 800b77a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b77e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b782:	4613      	mov	r3, r2
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe fafd 	bl	8009d8a <VL53L0X_isqrt>
 800b790:	4603      	mov	r3, r0
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	891b      	ldrh	r3, [r3, #8]
 800b79a:	461a      	mov	r2, r3
 800b79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b79e:	fb02 f303 	mul.w	r3, r2, r3
 800b7a2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b7a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7a6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b7a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7ac:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b7ae:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b7b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b7b4:	4a14      	ldr	r2, [pc, #80]	; (800b808 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ba:	099b      	lsrs	r3, r3, #6
 800b7bc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b7be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7c0:	041b      	lsls	r3, r3, #16
 800b7c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b7c6:	4a10      	ldr	r2, [pc, #64]	; (800b808 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7cc:	099b      	lsrs	r3, r3, #6
 800b7ce:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d2:	021b      	lsls	r3, r3, #8
 800b7d4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b7d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	bfb8      	it	lt
 800b7e2:	425b      	neglt	r3, r3
 800b7e4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e8:	021b      	lsls	r3, r3, #8
 800b7ea:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	7e1b      	ldrb	r3, [r3, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00b      	beq.n	800b80c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b7f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7fc:	e033      	b.n	800b866 <VL53L0X_calc_sigma_estimate+0x30e>
 800b7fe:	bf00      	nop
 800b800:	028f87ae 	.word	0x028f87ae
 800b804:	0006999a 	.word	0x0006999a
 800b808:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b80e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b812:	fbb2 f3f3 	udiv	r3, r2, r3
 800b816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b824:	fb02 f303 	mul.w	r3, r2, r3
 800b828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b82c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b832:	4413      	add	r3, r2
 800b834:	0c1b      	lsrs	r3, r3, #16
 800b836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b83e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b84a:	085b      	lsrs	r3, r3, #1
 800b84c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b854:	fb03 f303 	mul.w	r3, r3, r3
 800b858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b85c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b860:	0b9b      	lsrs	r3, r3, #14
 800b862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b86a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b86c:	fb02 f303 	mul.w	r3, r2, r3
 800b870:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b878:	0c1b      	lsrs	r3, r3, #16
 800b87a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	fb03 f303 	mul.w	r3, r3, r3
 800b882:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b888:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b890:	0c1b      	lsrs	r3, r3, #16
 800b892:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	fb03 f303 	mul.w	r3, r3, r3
 800b89a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	4413      	add	r3, r2
 800b8a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8a6:	f7fe fa70 	bl	8009d8a <VL53L0X_isqrt>
 800b8aa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	3332      	adds	r3, #50	; 0x32
 800b8b6:	4a4b      	ldr	r2, [pc, #300]	; (800b9e4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8bc:	095a      	lsrs	r2, r3, #5
 800b8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b8c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8cc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b8d0:	fb02 f303 	mul.w	r3, r2, r3
 800b8d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b8d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b8e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8ea:	4a3f      	ldr	r2, [pc, #252]	; (800b9e8 <VL53L0X_calc_sigma_estimate+0x490>)
 800b8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f0:	0b5b      	lsrs	r3, r3, #13
 800b8f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b8f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d902      	bls.n	800b906 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b90a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b90e:	4413      	add	r3, r2
 800b910:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b914:	4a35      	ldr	r2, [pc, #212]	; (800b9ec <VL53L0X_calc_sigma_estimate+0x494>)
 800b916:	fba2 2303 	umull	r2, r3, r2, r3
 800b91a:	099b      	lsrs	r3, r3, #6
 800b91c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b926:	441a      	add	r2, r3
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fe fa2b 	bl	8009d8a <VL53L0X_isqrt>
 800b934:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	021b      	lsls	r3, r3, #8
 800b93a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b942:	4a2a      	ldr	r2, [pc, #168]	; (800b9ec <VL53L0X_calc_sigma_estimate+0x494>)
 800b944:	fba2 2303 	umull	r2, r3, r2, r3
 800b948:	099b      	lsrs	r3, r3, #6
 800b94a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b94c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b950:	fb03 f303 	mul.w	r3, r3, r3
 800b954:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	fb03 f303 	mul.w	r3, r3, r3
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	4413      	add	r3, r2
 800b964:	4618      	mov	r0, r3
 800b966:	f7fe fa10 	bl	8009d8a <VL53L0X_isqrt>
 800b96a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b972:	fb02 f303 	mul.w	r3, r2, r3
 800b976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b97a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d009      	beq.n	800b994 <VL53L0X_calc_sigma_estimate+0x43c>
 800b980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <VL53L0X_calc_sigma_estimate+0x43c>
 800b988:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b98c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b990:	429a      	cmp	r2, r3
 800b992:	d903      	bls.n	800b99c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b9a2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b9ae:	6939      	ldr	r1, [r7, #16]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	9303      	str	r3, [sp, #12]
 800b9b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9b8:	9302      	str	r3, [sp, #8]
 800b9ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fca8 	bl	800b320 <VL53L0X_calc_dmax>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b9d6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	37c0      	adds	r7, #192	; 0xc0
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	51eb851f 	.word	0x51eb851f
 800b9e8:	d1b71759 	.word	0xd1b71759
 800b9ec:	10624dd3 	.word	0x10624dd3

0800b9f0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b090      	sub	sp, #64	; 0x40
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	72fb      	strb	r3, [r7, #11]
 800ba00:	4613      	mov	r3, r2
 800ba02:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ba16:	2300      	movs	r3, #0
 800ba18:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	10db      	asrs	r3, r3, #3
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	f003 030f 	and.w	r3, r3, #15
 800ba4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ba50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d017      	beq.n	800ba88 <VL53L0X_get_pal_range_status+0x98>
 800ba58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba5c:	2b05      	cmp	r3, #5
 800ba5e:	d013      	beq.n	800ba88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ba60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba64:	2b07      	cmp	r3, #7
 800ba66:	d00f      	beq.n	800ba88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800ba68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba6c:	2b0c      	cmp	r3, #12
 800ba6e:	d00b      	beq.n	800ba88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800ba70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba74:	2b0d      	cmp	r3, #13
 800ba76:	d007      	beq.n	800ba88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800ba78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba7c:	2b0e      	cmp	r3, #14
 800ba7e:	d003      	beq.n	800ba88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800ba80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba84:	2b0f      	cmp	r3, #15
 800ba86:	d103      	bne.n	800ba90 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ba8e:	e002      	b.n	800ba96 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800ba90:	2300      	movs	r3, #0
 800ba92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ba96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d109      	bne.n	800bab2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ba9e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800baa2:	461a      	mov	r2, r3
 800baa4:	2100      	movs	r1, #0
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f7fc fc86 	bl	80083b8 <VL53L0X_GetLimitCheckEnable>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800bab2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d02e      	beq.n	800bb18 <VL53L0X_get_pal_range_status+0x128>
 800baba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d12a      	bne.n	800bb18 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800bac2:	f107 0310 	add.w	r3, r7, #16
 800bac6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800baca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7ff fd43 	bl	800b558 <VL53L0X_calc_sigma_estimate>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800bad8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800badc:	2b00      	cmp	r3, #0
 800bade:	d103      	bne.n	800bae8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bae8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baec:	2b00      	cmp	r3, #0
 800baee:	d113      	bne.n	800bb18 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800baf0:	f107 0320 	add.w	r3, r7, #32
 800baf4:	461a      	mov	r2, r3
 800baf6:	2100      	movs	r1, #0
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7fc fce3 	bl	80084c4 <VL53L0X_GetLimitCheckValue>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d006      	beq.n	800bb18 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d902      	bls.n	800bb18 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800bb12:	2301      	movs	r3, #1
 800bb14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bb18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d109      	bne.n	800bb34 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb20:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800bb24:	461a      	mov	r2, r3
 800bb26:	2102      	movs	r1, #2
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7fc fc45 	bl	80083b8 <VL53L0X_GetLimitCheckEnable>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bb34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d044      	beq.n	800bbc6 <VL53L0X_get_pal_range_status+0x1d6>
 800bb3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d140      	bne.n	800bbc6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb44:	f107 031c 	add.w	r3, r7, #28
 800bb48:	461a      	mov	r2, r3
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7fc fcb9 	bl	80084c4 <VL53L0X_GetLimitCheckValue>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800bb58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d107      	bne.n	800bb70 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bb60:	2201      	movs	r2, #1
 800bb62:	21ff      	movs	r1, #255	; 0xff
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f9bb 	bl	800bee0 <VL53L0X_WrByte>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800bb70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d109      	bne.n	800bb8c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800bb78:	f107 0316 	add.w	r3, r7, #22
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	21b6      	movs	r1, #182	; 0xb6
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 fa59 	bl	800c038 <VL53L0X_RdWord>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800bb8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d107      	bne.n	800bba4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bb94:	2200      	movs	r2, #0
 800bb96:	21ff      	movs	r1, #255	; 0xff
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 f9a1 	bl	800bee0 <VL53L0X_WrByte>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800bba4:	8afb      	ldrh	r3, [r7, #22]
 800bba6:	025b      	lsls	r3, r3, #9
 800bba8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d006      	beq.n	800bbc6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800bbb8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800bbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d902      	bls.n	800bbc6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bbc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d109      	bne.n	800bbe2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bbce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	2103      	movs	r1, #3
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7fc fbee 	bl	80083b8 <VL53L0X_GetLimitCheckEnable>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800bbe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d023      	beq.n	800bc32 <VL53L0X_get_pal_range_status+0x242>
 800bbea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d11f      	bne.n	800bc32 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800bbf2:	893b      	ldrh	r3, [r7, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d102      	bne.n	800bbfe <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfc:	e005      	b.n	800bc0a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	021a      	lsls	r2, r3, #8
 800bc02:	893b      	ldrh	r3, [r7, #8]
 800bc04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc08:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bc0a:	f107 0318 	add.w	r3, r7, #24
 800bc0e:	461a      	mov	r2, r3
 800bc10:	2103      	movs	r1, #3
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7fc fc56 	bl	80084c4 <VL53L0X_GetLimitCheckValue>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d006      	beq.n	800bc32 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bc24:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800bc26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d202      	bcs.n	800bc32 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d14a      	bne.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800bc3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d103      	bne.n	800bc4a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc44:	22ff      	movs	r2, #255	; 0xff
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	e042      	b.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bc4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d007      	beq.n	800bc62 <VL53L0X_get_pal_range_status+0x272>
 800bc52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d003      	beq.n	800bc62 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800bc5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d103      	bne.n	800bc6a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc64:	2205      	movs	r2, #5
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	e032      	b.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bc6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc6e:	2b06      	cmp	r3, #6
 800bc70:	d003      	beq.n	800bc7a <VL53L0X_get_pal_range_status+0x28a>
 800bc72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d103      	bne.n	800bc82 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7c:	2204      	movs	r2, #4
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	e026      	b.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bc82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc86:	2b08      	cmp	r3, #8
 800bc88:	d007      	beq.n	800bc9a <VL53L0X_get_pal_range_status+0x2aa>
 800bc8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc8e:	2b0a      	cmp	r3, #10
 800bc90:	d003      	beq.n	800bc9a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800bc92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d103      	bne.n	800bca2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc9c:	2203      	movs	r2, #3
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	e016      	b.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bca6:	2b04      	cmp	r3, #4
 800bca8:	d003      	beq.n	800bcb2 <VL53L0X_get_pal_range_status+0x2c2>
 800bcaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d103      	bne.n	800bcba <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	e00a      	b.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bcba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d103      	bne.n	800bcca <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	701a      	strb	r2, [r3, #0]
 800bcc8:	e002      	b.n	800bcd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bccc:	2200      	movs	r2, #0
 800bcce:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bcd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d102      	bne.n	800bcde <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bcd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcda:	2200      	movs	r2, #0
 800bcdc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bcde:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bce2:	461a      	mov	r2, r3
 800bce4:	2101      	movs	r1, #1
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f7fc fb66 	bl	80083b8 <VL53L0X_GetLimitCheckEnable>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bcf2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d14f      	bne.n	800bd9a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bcfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <VL53L0X_get_pal_range_status+0x31a>
 800bd02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d103      	bne.n	800bd12 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd10:	e002      	b.n	800bd18 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd1e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bd22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd26:	2b04      	cmp	r3, #4
 800bd28:	d003      	beq.n	800bd32 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bd2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd38:	e002      	b.n	800bd40 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bd4a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <VL53L0X_get_pal_range_status+0x36a>
 800bd52:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d103      	bne.n	800bd62 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd60:	e002      	b.n	800bd68 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bd72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d003      	beq.n	800bd82 <VL53L0X_get_pal_range_status+0x392>
 800bd7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d103      	bne.n	800bd8a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bd82:	2301      	movs	r3, #1
 800bd84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd88:	e002      	b.n	800bd90 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3740      	adds	r7, #64	; 0x40
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b088      	sub	sp, #32
 800bdaa:	af02      	add	r7, sp, #8
 800bdac:	60f8      	str	r0, [r7, #12]
 800bdae:	60b9      	str	r1, [r7, #8]
 800bdb0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	330a      	adds	r3, #10
 800bdb6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800bdc4:	b299      	uxth	r1, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	f7f8 fe87 	bl	8004ae4 <HAL_I2C_Master_Transmit>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bdda:	693b      	ldr	r3, [r7, #16]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	330a      	adds	r3, #10
 800bdf4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800be02:	f043 0301 	orr.w	r3, r3, #1
 800be06:	b2db      	uxtb	r3, r3
 800be08:	b299      	uxth	r1, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	4613      	mov	r3, r2
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	f7f8 ff63 	bl	8004ce0 <HAL_I2C_Master_Receive>
 800be1a:	4603      	mov	r3, r0
 800be1c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800be1e:	693b      	ldr	r3, [r7, #16]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	603b      	str	r3, [r7, #0]
 800be34:	460b      	mov	r3, r1
 800be36:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be38:	2300      	movs	r3, #0
 800be3a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2b3f      	cmp	r3, #63	; 0x3f
 800be40:	d902      	bls.n	800be48 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800be42:	f06f 0303 	mvn.w	r3, #3
 800be46:	e016      	b.n	800be76 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800be48:	4a0d      	ldr	r2, [pc, #52]	; (800be80 <VL53L0X_WriteMulti+0x58>)
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	6879      	ldr	r1, [r7, #4]
 800be52:	480c      	ldr	r0, [pc, #48]	; (800be84 <VL53L0X_WriteMulti+0x5c>)
 800be54:	f002 fc15 	bl	800e682 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	3301      	adds	r3, #1
 800be5c:	461a      	mov	r2, r3
 800be5e:	4908      	ldr	r1, [pc, #32]	; (800be80 <VL53L0X_WriteMulti+0x58>)
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7ff ffa0 	bl	800bda6 <_I2CWrite>
 800be66:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be6e:	23ec      	movs	r3, #236	; 0xec
 800be70:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800be72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20004ce0 	.word	0x20004ce0
 800be84:	20004ce1 	.word	0x20004ce1

0800be88 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	607a      	str	r2, [r7, #4]
 800be92:	603b      	str	r3, [r7, #0]
 800be94:	460b      	mov	r3, r1
 800be96:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be98:	2300      	movs	r3, #0
 800be9a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800be9c:	f107 030b 	add.w	r3, r7, #11
 800bea0:	2201      	movs	r2, #1
 800bea2:	4619      	mov	r1, r3
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff ff7e 	bl	800bda6 <_I2CWrite>
 800beaa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800beb2:	23ec      	movs	r3, #236	; 0xec
 800beb4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800beb6:	e00c      	b.n	800bed2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	6879      	ldr	r1, [r7, #4]
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7ff ff91 	bl	800bde4 <_I2CRead>
 800bec2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800beca:	23ec      	movs	r3, #236	; 0xec
 800becc:	75fb      	strb	r3, [r7, #23]
 800bece:	e000      	b.n	800bed2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800bed0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
	...

0800bee0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
 800beec:	4613      	mov	r3, r2
 800beee:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bef4:	4a0b      	ldr	r2, [pc, #44]	; (800bf24 <VL53L0X_WrByte+0x44>)
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800befa:	4a0a      	ldr	r2, [pc, #40]	; (800bf24 <VL53L0X_WrByte+0x44>)
 800befc:	78bb      	ldrb	r3, [r7, #2]
 800befe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bf00:	2202      	movs	r2, #2
 800bf02:	4908      	ldr	r1, [pc, #32]	; (800bf24 <VL53L0X_WrByte+0x44>)
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff ff4e 	bl	800bda6 <_I2CWrite>
 800bf0a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf12:	23ec      	movs	r3, #236	; 0xec
 800bf14:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bf16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20004ce0 	.word	0x20004ce0

0800bf28 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	70fb      	strb	r3, [r7, #3]
 800bf34:	4613      	mov	r3, r2
 800bf36:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bf3c:	4a0e      	ldr	r2, [pc, #56]	; (800bf78 <VL53L0X_WrWord+0x50>)
 800bf3e:	78fb      	ldrb	r3, [r7, #3]
 800bf40:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bf42:	883b      	ldrh	r3, [r7, #0]
 800bf44:	0a1b      	lsrs	r3, r3, #8
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	4b0b      	ldr	r3, [pc, #44]	; (800bf78 <VL53L0X_WrWord+0x50>)
 800bf4c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bf4e:	883b      	ldrh	r3, [r7, #0]
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <VL53L0X_WrWord+0x50>)
 800bf54:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bf56:	2203      	movs	r2, #3
 800bf58:	4907      	ldr	r1, [pc, #28]	; (800bf78 <VL53L0X_WrWord+0x50>)
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff ff23 	bl	800bda6 <_I2CWrite>
 800bf60:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf68:	23ec      	movs	r3, #236	; 0xec
 800bf6a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bf6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20004ce0 	.word	0x20004ce0

0800bf7c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	4608      	mov	r0, r1
 800bf86:	4611      	mov	r1, r2
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	70fb      	strb	r3, [r7, #3]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70bb      	strb	r3, [r7, #2]
 800bf92:	4613      	mov	r3, r2
 800bf94:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bf9a:	f107 020e 	add.w	r2, r7, #14
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f81e 	bl	800bfe4 <VL53L0X_RdByte>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bfac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d110      	bne.n	800bfd6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bfb4:	7bba      	ldrb	r2, [r7, #14]
 800bfb6:	78bb      	ldrb	r3, [r7, #2]
 800bfb8:	4013      	ands	r3, r2
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	787b      	ldrb	r3, [r7, #1]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bfc4:	7bba      	ldrb	r2, [r7, #14]
 800bfc6:	78fb      	ldrb	r3, [r7, #3]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7ff ff88 	bl	800bee0 <VL53L0X_WrByte>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73fb      	strb	r3, [r7, #15]
 800bfd4:	e000      	b.n	800bfd8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bfd6:	bf00      	nop
done:
    return Status;
 800bfd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	460b      	mov	r3, r1
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bff2:	2300      	movs	r3, #0
 800bff4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bff6:	f107 030b 	add.w	r3, r7, #11
 800bffa:	2201      	movs	r2, #1
 800bffc:	4619      	mov	r1, r3
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7ff fed1 	bl	800bda6 <_I2CWrite>
 800c004:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c00c:	23ec      	movs	r3, #236	; 0xec
 800c00e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c010:	e00c      	b.n	800c02c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800c012:	2201      	movs	r2, #1
 800c014:	6879      	ldr	r1, [r7, #4]
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff fee4 	bl	800bde4 <_I2CRead>
 800c01c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c024:	23ec      	movs	r3, #236	; 0xec
 800c026:	75fb      	strb	r3, [r7, #23]
 800c028:	e000      	b.n	800c02c <VL53L0X_RdByte+0x48>
    }
done:
 800c02a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c02c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	460b      	mov	r3, r1
 800c042:	607a      	str	r2, [r7, #4]
 800c044:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c046:	2300      	movs	r3, #0
 800c048:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c04a:	f107 030b 	add.w	r3, r7, #11
 800c04e:	2201      	movs	r2, #1
 800c050:	4619      	mov	r1, r3
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f7ff fea7 	bl	800bda6 <_I2CWrite>
 800c058:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c060:	23ec      	movs	r3, #236	; 0xec
 800c062:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c064:	e017      	b.n	800c096 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c066:	2202      	movs	r2, #2
 800c068:	490e      	ldr	r1, [pc, #56]	; (800c0a4 <VL53L0X_RdWord+0x6c>)
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f7ff feba 	bl	800bde4 <_I2CRead>
 800c070:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c078:	23ec      	movs	r3, #236	; 0xec
 800c07a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c07c:	e00b      	b.n	800c096 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c07e:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <VL53L0X_RdWord+0x6c>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	b29b      	uxth	r3, r3
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	b29a      	uxth	r2, r3
 800c088:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <VL53L0X_RdWord+0x6c>)
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	4413      	add	r3, r2
 800c090:	b29a      	uxth	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800c096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20004ce0 	.word	0x20004ce0

0800c0a8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c0ba:	f107 030b 	add.w	r3, r7, #11
 800c0be:	2201      	movs	r2, #1
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f7ff fe6f 	bl	800bda6 <_I2CWrite>
 800c0c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c0d0:	23ec      	movs	r3, #236	; 0xec
 800c0d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c0d4:	e01b      	b.n	800c10e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c0d6:	2204      	movs	r2, #4
 800c0d8:	4910      	ldr	r1, [pc, #64]	; (800c11c <VL53L0X_RdDWord+0x74>)
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff fe82 	bl	800bde4 <_I2CRead>
 800c0e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c0e8:	23ec      	movs	r3, #236	; 0xec
 800c0ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c0ec:	e00f      	b.n	800c10e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c0ee:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <VL53L0X_RdDWord+0x74>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	061a      	lsls	r2, r3, #24
 800c0f4:	4b09      	ldr	r3, [pc, #36]	; (800c11c <VL53L0X_RdDWord+0x74>)
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	041b      	lsls	r3, r3, #16
 800c0fa:	441a      	add	r2, r3
 800c0fc:	4b07      	ldr	r3, [pc, #28]	; (800c11c <VL53L0X_RdDWord+0x74>)
 800c0fe:	789b      	ldrb	r3, [r3, #2]
 800c100:	021b      	lsls	r3, r3, #8
 800c102:	4413      	add	r3, r2
 800c104:	4a05      	ldr	r2, [pc, #20]	; (800c11c <VL53L0X_RdDWord+0x74>)
 800c106:	78d2      	ldrb	r2, [r2, #3]
 800c108:	441a      	add	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800c10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	20004ce0 	.word	0x20004ce0

0800c120 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c12c:	2002      	movs	r0, #2
 800c12e:	f7f7 f86b 	bl	8003208 <HAL_Delay>
    return status;
 800c132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	4603      	mov	r3, r0
 800c146:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c14c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c150:	2b84      	cmp	r3, #132	; 0x84
 800c152:	d005      	beq.n	800c160 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c154:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	4413      	add	r3, r2
 800c15c:	3303      	adds	r3, #3
 800c15e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c160:	68fb      	ldr	r3, [r7, #12]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c172:	f000 fefd 	bl	800cf70 <vTaskStartScheduler>
  
  return osOK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c17e:	b089      	sub	sp, #36	; 0x24
 800c180:	af04      	add	r7, sp, #16
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d020      	beq.n	800c1d0 <osThreadCreate+0x54>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d01c      	beq.n	800c1d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685c      	ldr	r4, [r3, #4]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681d      	ldr	r5, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	691e      	ldr	r6, [r3, #16]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7ff ffc8 	bl	800c13e <makeFreeRtosPriority>
 800c1ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c1b8:	9202      	str	r2, [sp, #8]
 800c1ba:	9301      	str	r3, [sp, #4]
 800c1bc:	9100      	str	r1, [sp, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 fced 	bl	800cba4 <xTaskCreateStatic>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	e01c      	b.n	800c20a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685c      	ldr	r4, [r3, #4]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c1dc:	b29e      	uxth	r6, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff ffaa 	bl	800c13e <makeFreeRtosPriority>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	f107 030c 	add.w	r3, r7, #12
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	9200      	str	r2, [sp, #0]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	4632      	mov	r2, r6
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 fd2f 	bl	800cc5e <xTaskCreate>
 800c200:	4603      	mov	r3, r0
 800c202:	2b01      	cmp	r3, #1
 800c204:	d001      	beq.n	800c20a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	e000      	b.n	800c20c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c20a:	68fb      	ldr	r3, [r7, #12]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c214 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <osDelay+0x16>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	e000      	b.n	800c22c <osDelay+0x18>
 800c22a:	2301      	movs	r3, #1
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fe6b 	bl	800cf08 <vTaskDelay>
  
  return osOK;
 800c232:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f103 0208 	add.w	r2, r3, #8
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f04f 32ff 	mov.w	r2, #4294967295
 800c254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f103 0208 	add.w	r2, r3, #8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f103 0208 	add.w	r2, r3, #8
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c28a:	bf00      	nop
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c296:	b480      	push	{r7}
 800c298:	b085      	sub	sp, #20
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	601a      	str	r2, [r3, #0]
}
 800c2d2:	bf00      	nop
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b085      	sub	sp, #20
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f4:	d103      	bne.n	800c2fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	e00c      	b.n	800c318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3308      	adds	r3, #8
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	e002      	b.n	800c30c <vListInsert+0x2e>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	429a      	cmp	r2, r3
 800c316:	d2f6      	bcs.n	800c306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6892      	ldr	r2, [r2, #8]
 800c366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	6852      	ldr	r2, [r2, #4]
 800c370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d103      	bne.n	800c384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	1e5a      	subs	r2, r3, #1
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3ca:	bf00      	nop
 800c3cc:	e7fe      	b.n	800c3cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3ce:	f001 fd69 	bl	800dea4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3da:	68f9      	ldr	r1, [r7, #12]
 800c3dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3de:	fb01 f303 	mul.w	r3, r1, r3
 800c3e2:	441a      	add	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fe:	3b01      	subs	r3, #1
 800c400:	68f9      	ldr	r1, [r7, #12]
 800c402:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c404:	fb01 f303 	mul.w	r3, r1, r3
 800c408:	441a      	add	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	22ff      	movs	r2, #255	; 0xff
 800c412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	22ff      	movs	r2, #255	; 0xff
 800c41a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d114      	bne.n	800c44e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01a      	beq.n	800c462 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3310      	adds	r3, #16
 800c430:	4618      	mov	r0, r3
 800c432:	f000 ffef 	bl	800d414 <xTaskRemoveFromEventList>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d012      	beq.n	800c462 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c43c:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <xQueueGenericReset+0xcc>)
 800c43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	e009      	b.n	800c462 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3310      	adds	r3, #16
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fef2 	bl	800c23c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3324      	adds	r3, #36	; 0x24
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff feed 	bl	800c23c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c462:	f001 fd4f 	bl	800df04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c466:	2301      	movs	r3, #1
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08a      	sub	sp, #40	; 0x28
 800c478:	af02      	add	r7, sp, #8
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	4613      	mov	r3, r2
 800c480:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d10a      	bne.n	800c49e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48c:	f383 8811 	msr	BASEPRI, r3
 800c490:	f3bf 8f6f 	isb	sy
 800c494:	f3bf 8f4f 	dsb	sy
 800c498:	613b      	str	r3, [r7, #16]
}
 800c49a:	bf00      	nop
 800c49c:	e7fe      	b.n	800c49c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	fb02 f303 	mul.w	r3, r2, r3
 800c4a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	3348      	adds	r3, #72	; 0x48
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f001 fddb 	bl	800e068 <pvPortMalloc>
 800c4b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d011      	beq.n	800c4de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	3348      	adds	r3, #72	; 0x48
 800c4c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4cc:	79fa      	ldrb	r2, [r7, #7]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	68b9      	ldr	r1, [r7, #8]
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 f805 	bl	800c4e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4de:	69bb      	ldr	r3, [r7, #24]
	}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3720      	adds	r7, #32
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
 800c4f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d103      	bne.n	800c504 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	69ba      	ldr	r2, [r7, #24]
 800c500:	601a      	str	r2, [r3, #0]
 800c502:	e002      	b.n	800c50a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c516:	2101      	movs	r1, #1
 800c518:	69b8      	ldr	r0, [r7, #24]
 800c51a:	f7ff ff43 	bl	800c3a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c51e:	bf00      	nop
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00e      	beq.n	800c552 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c546:	2300      	movs	r3, #0
 800c548:	2200      	movs	r2, #0
 800c54a:	2100      	movs	r1, #0
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f81d 	bl	800c58c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b086      	sub	sp, #24
 800c55e:	af00      	add	r7, sp, #0
 800c560:	4603      	mov	r3, r0
 800c562:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c564:	2301      	movs	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
 800c568:	2300      	movs	r3, #0
 800c56a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	461a      	mov	r2, r3
 800c570:	6939      	ldr	r1, [r7, #16]
 800c572:	6978      	ldr	r0, [r7, #20]
 800c574:	f7ff ff7e 	bl	800c474 <xQueueGenericCreate>
 800c578:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f7ff ffd3 	bl	800c526 <prvInitialiseMutex>

		return xNewQueue;
 800c580:	68fb      	ldr	r3, [r7, #12]
	}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
	...

0800c58c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08e      	sub	sp, #56	; 0x38
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c59a:	2300      	movs	r3, #0
 800c59c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <xQueueGenericSend+0x32>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d103      	bne.n	800c5cc <xQueueGenericSend+0x40>
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <xQueueGenericSend+0x44>
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e000      	b.n	800c5d2 <xQueueGenericSend+0x46>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10a      	bne.n	800c5ec <xQueueGenericSend+0x60>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5e8:	bf00      	nop
 800c5ea:	e7fe      	b.n	800c5ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d103      	bne.n	800c5fa <xQueueGenericSend+0x6e>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d101      	bne.n	800c5fe <xQueueGenericSend+0x72>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <xQueueGenericSend+0x74>
 800c5fe:	2300      	movs	r3, #0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <xQueueGenericSend+0x8e>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	623b      	str	r3, [r7, #32]
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c61a:	f001 f8f3 	bl	800d804 <xTaskGetSchedulerState>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <xQueueGenericSend+0x9e>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <xQueueGenericSend+0xa2>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <xQueueGenericSend+0xa4>
 800c62e:	2300      	movs	r3, #0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xQueueGenericSend+0xbe>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	61fb      	str	r3, [r7, #28]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c64a:	f001 fc2b 	bl	800dea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c656:	429a      	cmp	r2, r3
 800c658:	d302      	bcc.n	800c660 <xQueueGenericSend+0xd4>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d129      	bne.n	800c6b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c666:	f000 f9b3 	bl	800c9d0 <prvCopyDataToQueue>
 800c66a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	d010      	beq.n	800c696 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	3324      	adds	r3, #36	; 0x24
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fecb 	bl	800d414 <xTaskRemoveFromEventList>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d013      	beq.n	800c6ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c684:	4b3f      	ldr	r3, [pc, #252]	; (800c784 <xQueueGenericSend+0x1f8>)
 800c686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	e00a      	b.n	800c6ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d007      	beq.n	800c6ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c69c:	4b39      	ldr	r3, [pc, #228]	; (800c784 <xQueueGenericSend+0x1f8>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c6ac:	f001 fc2a 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e063      	b.n	800c77c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d103      	bne.n	800c6c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6ba:	f001 fc23 	bl	800df04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e05c      	b.n	800c77c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d106      	bne.n	800c6d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6c8:	f107 0314 	add.w	r3, r7, #20
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 ff03 	bl	800d4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6d6:	f001 fc15 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6da:	f000 fcb3 	bl	800d044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6de:	f001 fbe1 	bl	800dea4 <vPortEnterCritical>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6e8:	b25b      	sxtb	r3, r3
 800c6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ee:	d103      	bne.n	800c6f8 <xQueueGenericSend+0x16c>
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6fe:	b25b      	sxtb	r3, r3
 800c700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c704:	d103      	bne.n	800c70e <xQueueGenericSend+0x182>
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c70e:	f001 fbf9 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c712:	1d3a      	adds	r2, r7, #4
 800c714:	f107 0314 	add.w	r3, r7, #20
 800c718:	4611      	mov	r1, r2
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 fef2 	bl	800d504 <xTaskCheckForTimeOut>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d124      	bne.n	800c770 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c728:	f000 fa24 	bl	800cb74 <prvIsQueueFull>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d018      	beq.n	800c764 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c734:	3310      	adds	r3, #16
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	4611      	mov	r1, r2
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fe46 	bl	800d3cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c742:	f000 f9af 	bl	800caa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c746:	f000 fc8b 	bl	800d060 <xTaskResumeAll>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f47f af7c 	bne.w	800c64a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c752:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <xQueueGenericSend+0x1f8>)
 800c754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	e772      	b.n	800c64a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c766:	f000 f99d 	bl	800caa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c76a:	f000 fc79 	bl	800d060 <xTaskResumeAll>
 800c76e:	e76c      	b.n	800c64a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c772:	f000 f997 	bl	800caa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c776:	f000 fc73 	bl	800d060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c77a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3738      	adds	r7, #56	; 0x38
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	e000ed04 	.word	0xe000ed04

0800c788 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08e      	sub	sp, #56	; 0x38
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c792:	2300      	movs	r3, #0
 800c794:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c79a:	2300      	movs	r3, #0
 800c79c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	623b      	str	r3, [r7, #32]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00a      	beq.n	800c7d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	61fb      	str	r3, [r7, #28]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7d8:	f001 f814 	bl	800d804 <xTaskGetSchedulerState>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d102      	bne.n	800c7e8 <xQueueSemaphoreTake+0x60>
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <xQueueSemaphoreTake+0x64>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e000      	b.n	800c7ee <xQueueSemaphoreTake+0x66>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	61bb      	str	r3, [r7, #24]
}
 800c804:	bf00      	nop
 800c806:	e7fe      	b.n	800c806 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c808:	f001 fb4c 	bl	800dea4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c810:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	2b00      	cmp	r3, #0
 800c816:	d024      	beq.n	800c862 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	1e5a      	subs	r2, r3, #1
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d104      	bne.n	800c832 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c828:	f001 f994 	bl	800db54 <pvTaskIncrementMutexHeldCount>
 800c82c:	4602      	mov	r2, r0
 800c82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c830:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00f      	beq.n	800c85a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	3310      	adds	r3, #16
 800c83e:	4618      	mov	r0, r3
 800c840:	f000 fde8 	bl	800d414 <xTaskRemoveFromEventList>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c84a:	4b54      	ldr	r3, [pc, #336]	; (800c99c <xQueueSemaphoreTake+0x214>)
 800c84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c85a:	f001 fb53 	bl	800df04 <vPortExitCritical>
				return pdPASS;
 800c85e:	2301      	movs	r3, #1
 800c860:	e097      	b.n	800c992 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d111      	bne.n	800c88c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	617b      	str	r3, [r7, #20]
}
 800c880:	bf00      	nop
 800c882:	e7fe      	b.n	800c882 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c884:	f001 fb3e 	bl	800df04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c888:	2300      	movs	r3, #0
 800c88a:	e082      	b.n	800c992 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c892:	f107 030c 	add.w	r3, r7, #12
 800c896:	4618      	mov	r0, r3
 800c898:	f000 fe1e 	bl	800d4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c89c:	2301      	movs	r3, #1
 800c89e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8a0:	f001 fb30 	bl	800df04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8a4:	f000 fbce 	bl	800d044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8a8:	f001 fafc 	bl	800dea4 <vPortEnterCritical>
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8b2:	b25b      	sxtb	r3, r3
 800c8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b8:	d103      	bne.n	800c8c2 <xQueueSemaphoreTake+0x13a>
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8c8:	b25b      	sxtb	r3, r3
 800c8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ce:	d103      	bne.n	800c8d8 <xQueueSemaphoreTake+0x150>
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8d8:	f001 fb14 	bl	800df04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8dc:	463a      	mov	r2, r7
 800c8de:	f107 030c 	add.w	r3, r7, #12
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fe0d 	bl	800d504 <xTaskCheckForTimeOut>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d132      	bne.n	800c956 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8f2:	f000 f929 	bl	800cb48 <prvIsQueueEmpty>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d026      	beq.n	800c94a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d109      	bne.n	800c918 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c904:	f001 face 	bl	800dea4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 ff97 	bl	800d840 <xTaskPriorityInherit>
 800c912:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c914:	f001 faf6 	bl	800df04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	3324      	adds	r3, #36	; 0x24
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f000 fd53 	bl	800d3cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c928:	f000 f8bc 	bl	800caa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c92c:	f000 fb98 	bl	800d060 <xTaskResumeAll>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	f47f af68 	bne.w	800c808 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c938:	4b18      	ldr	r3, [pc, #96]	; (800c99c <xQueueSemaphoreTake+0x214>)
 800c93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	e75e      	b.n	800c808 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c94a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c94c:	f000 f8aa 	bl	800caa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c950:	f000 fb86 	bl	800d060 <xTaskResumeAll>
 800c954:	e758      	b.n	800c808 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c958:	f000 f8a4 	bl	800caa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c95c:	f000 fb80 	bl	800d060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c962:	f000 f8f1 	bl	800cb48 <prvIsQueueEmpty>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f43f af4d 	beq.w	800c808 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00d      	beq.n	800c990 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c974:	f001 fa96 	bl	800dea4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c97a:	f000 f811 	bl	800c9a0 <prvGetDisinheritPriorityAfterTimeout>
 800c97e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c986:	4618      	mov	r0, r3
 800c988:	f001 f856 	bl	800da38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c98c:	f001 faba 	bl	800df04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c990:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c992:	4618      	mov	r0, r3
 800c994:	3738      	adds	r7, #56	; 0x38
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	e000ed04 	.word	0xe000ed04

0800c9a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d006      	beq.n	800c9be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f1c3 0307 	rsb	r3, r3, #7
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	e001      	b.n	800c9c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
	}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10d      	bne.n	800ca0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d14d      	bne.n	800ca92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 ff96 	bl	800d92c <xTaskPriorityDisinherit>
 800ca00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	609a      	str	r2, [r3, #8]
 800ca08:	e043      	b.n	800ca92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d119      	bne.n	800ca44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6858      	ldr	r0, [r3, #4]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca18:	461a      	mov	r2, r3
 800ca1a:	68b9      	ldr	r1, [r7, #8]
 800ca1c:	f001 fe31 	bl	800e682 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca28:	441a      	add	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d32b      	bcc.n	800ca92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	605a      	str	r2, [r3, #4]
 800ca42:	e026      	b.n	800ca92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	68d8      	ldr	r0, [r3, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	68b9      	ldr	r1, [r7, #8]
 800ca50:	f001 fe17 	bl	800e682 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	68da      	ldr	r2, [r3, #12]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5c:	425b      	negs	r3, r3
 800ca5e:	441a      	add	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d207      	bcs.n	800ca80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca78:	425b      	negs	r3, r3
 800ca7a:	441a      	add	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d105      	bne.n	800ca92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca9a:	697b      	ldr	r3, [r7, #20]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800caac:	f001 f9fa 	bl	800dea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cab8:	e011      	b.n	800cade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d012      	beq.n	800cae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	3324      	adds	r3, #36	; 0x24
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fca4 	bl	800d414 <xTaskRemoveFromEventList>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cad2:	f000 fd79 	bl	800d5c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
 800cad8:	3b01      	subs	r3, #1
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	dce9      	bgt.n	800caba <prvUnlockQueue+0x16>
 800cae6:	e000      	b.n	800caea <prvUnlockQueue+0x46>
					break;
 800cae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	22ff      	movs	r2, #255	; 0xff
 800caee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800caf2:	f001 fa07 	bl	800df04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800caf6:	f001 f9d5 	bl	800dea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb02:	e011      	b.n	800cb28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d012      	beq.n	800cb32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3310      	adds	r3, #16
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fc7f 	bl	800d414 <xTaskRemoveFromEventList>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb1c:	f000 fd54 	bl	800d5c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
 800cb22:	3b01      	subs	r3, #1
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dce9      	bgt.n	800cb04 <prvUnlockQueue+0x60>
 800cb30:	e000      	b.n	800cb34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	22ff      	movs	r2, #255	; 0xff
 800cb38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb3c:	f001 f9e2 	bl	800df04 <vPortExitCritical>
}
 800cb40:	bf00      	nop
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb50:	f001 f9a8 	bl	800dea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d102      	bne.n	800cb62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	e001      	b.n	800cb66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb66:	f001 f9cd 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb7c:	f001 f992 	bl	800dea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d102      	bne.n	800cb92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	e001      	b.n	800cb96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb96:	f001 f9b5 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08e      	sub	sp, #56	; 0x38
 800cba8:	af04      	add	r7, sp, #16
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
 800cbb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10a      	bne.n	800cbce <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	623b      	str	r3, [r7, #32]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <xTaskCreateStatic+0x46>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	61fb      	str	r3, [r7, #28]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbea:	23b4      	movs	r3, #180	; 0xb4
 800cbec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	2bb4      	cmp	r3, #180	; 0xb4
 800cbf2:	d00a      	beq.n	800cc0a <xTaskCreateStatic+0x66>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	61bb      	str	r3, [r7, #24]
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01e      	beq.n	800cc50 <xTaskCreateStatic+0xac>
 800cc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01b      	beq.n	800cc50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	2202      	movs	r2, #2
 800cc26:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9303      	str	r3, [sp, #12]
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc30:	9302      	str	r3, [sp, #8]
 800cc32:	f107 0314 	add.w	r3, r7, #20
 800cc36:	9301      	str	r3, [sp, #4]
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	68b9      	ldr	r1, [r7, #8]
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f000 f850 	bl	800cce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc4a:	f000 f8f3 	bl	800ce34 <prvAddNewTaskToReadyList>
 800cc4e:	e001      	b.n	800cc54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc50:	2300      	movs	r3, #0
 800cc52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc54:	697b      	ldr	r3, [r7, #20]
	}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3728      	adds	r7, #40	; 0x28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b08c      	sub	sp, #48	; 0x30
 800cc62:	af04      	add	r7, sp, #16
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	603b      	str	r3, [r7, #0]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc6e:	88fb      	ldrh	r3, [r7, #6]
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 f9f8 	bl	800e068 <pvPortMalloc>
 800cc78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00e      	beq.n	800cc9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc80:	20b4      	movs	r0, #180	; 0xb4
 800cc82:	f001 f9f1 	bl	800e068 <pvPortMalloc>
 800cc86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	631a      	str	r2, [r3, #48]	; 0x30
 800cc94:	e005      	b.n	800cca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc96:	6978      	ldr	r0, [r7, #20]
 800cc98:	f001 fab2 	bl	800e200 <vPortFree>
 800cc9c:	e001      	b.n	800cca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d017      	beq.n	800ccd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccb0:	88fa      	ldrh	r2, [r7, #6]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	9303      	str	r3, [sp, #12]
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	9302      	str	r3, [sp, #8]
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	68b9      	ldr	r1, [r7, #8]
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f000 f80e 	bl	800cce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cccc:	69f8      	ldr	r0, [r7, #28]
 800ccce:	f000 f8b1 	bl	800ce34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	61bb      	str	r3, [r7, #24]
 800ccd6:	e002      	b.n	800ccde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccde:	69bb      	ldr	r3, [r7, #24]
	}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	461a      	mov	r2, r3
 800cd00:	21a5      	movs	r1, #165	; 0xa5
 800cd02:	f001 fccc 	bl	800e69e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd10:	3b01      	subs	r3, #1
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	f023 0307 	bic.w	r3, r3, #7
 800cd1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	f003 0307 	and.w	r3, r3, #7
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00a      	beq.n	800cd40 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	617b      	str	r3, [r7, #20]
}
 800cd3c:	bf00      	nop
 800cd3e:	e7fe      	b.n	800cd3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d01f      	beq.n	800cd86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd46:	2300      	movs	r3, #0
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	e012      	b.n	800cd72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	4413      	add	r3, r2
 800cd52:	7819      	ldrb	r1, [r3, #0]
 800cd54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	4413      	add	r3, r2
 800cd5a:	3334      	adds	r3, #52	; 0x34
 800cd5c:	460a      	mov	r2, r1
 800cd5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	4413      	add	r3, r2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	61fb      	str	r3, [r7, #28]
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	2b0f      	cmp	r3, #15
 800cd76:	d9e9      	bls.n	800cd4c <prvInitialiseNewTask+0x64>
 800cd78:	e000      	b.n	800cd7c <prvInitialiseNewTask+0x94>
			{
				break;
 800cd7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd84:	e003      	b.n	800cd8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	2b06      	cmp	r3, #6
 800cd92:	d901      	bls.n	800cd98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd94:	2306      	movs	r3, #6
 800cd96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cda2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	2200      	movs	r2, #0
 800cda8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	3304      	adds	r3, #4
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff fa64 	bl	800c27c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	3318      	adds	r3, #24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff fa5f 	bl	800c27c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	f1c3 0207 	rsb	r2, r3, #7
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	334c      	adds	r3, #76	; 0x4c
 800cde8:	2260      	movs	r2, #96	; 0x60
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f001 fc56 	bl	800e69e <memset>
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf4:	4a0c      	ldr	r2, [pc, #48]	; (800ce28 <prvInitialiseNewTask+0x140>)
 800cdf6:	651a      	str	r2, [r3, #80]	; 0x50
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfa:	4a0c      	ldr	r2, [pc, #48]	; (800ce2c <prvInitialiseNewTask+0x144>)
 800cdfc:	655a      	str	r2, [r3, #84]	; 0x54
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	4a0b      	ldr	r2, [pc, #44]	; (800ce30 <prvInitialiseNewTask+0x148>)
 800ce02:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	69b8      	ldr	r0, [r7, #24]
 800ce0a:	f000 ff1d 	bl	800dc48 <pxPortInitialiseStack>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce20:	bf00      	nop
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	08012e20 	.word	0x08012e20
 800ce2c:	08012e40 	.word	0x08012e40
 800ce30:	08012e00 	.word	0x08012e00

0800ce34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce3c:	f001 f832 	bl	800dea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce40:	4b2a      	ldr	r3, [pc, #168]	; (800ceec <prvAddNewTaskToReadyList+0xb8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	4a29      	ldr	r2, [pc, #164]	; (800ceec <prvAddNewTaskToReadyList+0xb8>)
 800ce48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce4a:	4b29      	ldr	r3, [pc, #164]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d109      	bne.n	800ce66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce52:	4a27      	ldr	r2, [pc, #156]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce58:	4b24      	ldr	r3, [pc, #144]	; (800ceec <prvAddNewTaskToReadyList+0xb8>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d110      	bne.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce60:	f000 fbd6 	bl	800d610 <prvInitialiseTaskLists>
 800ce64:	e00d      	b.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce66:	4b23      	ldr	r3, [pc, #140]	; (800cef4 <prvAddNewTaskToReadyList+0xc0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d109      	bne.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce6e:	4b20      	ldr	r3, [pc, #128]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d802      	bhi.n	800ce82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce7c:	4a1c      	ldr	r2, [pc, #112]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce82:	4b1d      	ldr	r3, [pc, #116]	; (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4a1b      	ldr	r2, [pc, #108]	; (800cef8 <prvAddNewTaskToReadyList+0xc4>)
 800ce8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	2201      	movs	r2, #1
 800ce92:	409a      	lsls	r2, r3
 800ce94:	4b19      	ldr	r3, [pc, #100]	; (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	4a18      	ldr	r2, [pc, #96]	; (800cefc <prvAddNewTaskToReadyList+0xc8>)
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea2:	4613      	mov	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4a15      	ldr	r2, [pc, #84]	; (800cf00 <prvAddNewTaskToReadyList+0xcc>)
 800ceac:	441a      	add	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7ff f9ee 	bl	800c296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ceba:	f001 f823 	bl	800df04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cebe:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <prvAddNewTaskToReadyList+0xc0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00e      	beq.n	800cee4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cec6:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <prvAddNewTaskToReadyList+0xbc>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d207      	bcs.n	800cee4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ced4:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <prvAddNewTaskToReadyList+0xd0>)
 800ced6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20000894 	.word	0x20000894
 800cef0:	20000794 	.word	0x20000794
 800cef4:	200008a0 	.word	0x200008a0
 800cef8:	200008b0 	.word	0x200008b0
 800cefc:	2000089c 	.word	0x2000089c
 800cf00:	20000798 	.word	0x20000798
 800cf04:	e000ed04 	.word	0xe000ed04

0800cf08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d017      	beq.n	800cf4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf1a:	4b13      	ldr	r3, [pc, #76]	; (800cf68 <vTaskDelay+0x60>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <vTaskDelay+0x30>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	60bb      	str	r3, [r7, #8]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf38:	f000 f884 	bl	800d044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fe1c 	bl	800db7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf44:	f000 f88c 	bl	800d060 <xTaskResumeAll>
 800cf48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d107      	bne.n	800cf60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <vTaskDelay+0x64>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf60:	bf00      	nop
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	200008bc 	.word	0x200008bc
 800cf6c:	e000ed04 	.word	0xe000ed04

0800cf70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08a      	sub	sp, #40	; 0x28
 800cf74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf7e:	463a      	mov	r2, r7
 800cf80:	1d39      	adds	r1, r7, #4
 800cf82:	f107 0308 	add.w	r3, r7, #8
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7f4 ffcc 	bl	8001f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	9202      	str	r2, [sp, #8]
 800cf94:	9301      	str	r3, [sp, #4]
 800cf96:	2300      	movs	r3, #0
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	460a      	mov	r2, r1
 800cf9e:	4921      	ldr	r1, [pc, #132]	; (800d024 <vTaskStartScheduler+0xb4>)
 800cfa0:	4821      	ldr	r0, [pc, #132]	; (800d028 <vTaskStartScheduler+0xb8>)
 800cfa2:	f7ff fdff 	bl	800cba4 <xTaskCreateStatic>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4a20      	ldr	r2, [pc, #128]	; (800d02c <vTaskStartScheduler+0xbc>)
 800cfaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfac:	4b1f      	ldr	r3, [pc, #124]	; (800d02c <vTaskStartScheduler+0xbc>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	617b      	str	r3, [r7, #20]
 800cfb8:	e001      	b.n	800cfbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d11b      	bne.n	800cffc <vTaskStartScheduler+0x8c>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	613b      	str	r3, [r7, #16]
}
 800cfd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfd8:	4b15      	ldr	r3, [pc, #84]	; (800d030 <vTaskStartScheduler+0xc0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	334c      	adds	r3, #76	; 0x4c
 800cfde:	4a15      	ldr	r2, [pc, #84]	; (800d034 <vTaskStartScheduler+0xc4>)
 800cfe0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <vTaskStartScheduler+0xc8>)
 800cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfea:	4b14      	ldr	r3, [pc, #80]	; (800d03c <vTaskStartScheduler+0xcc>)
 800cfec:	2201      	movs	r2, #1
 800cfee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cff0:	4b13      	ldr	r3, [pc, #76]	; (800d040 <vTaskStartScheduler+0xd0>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cff6:	f000 feb3 	bl	800dd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cffa:	e00e      	b.n	800d01a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d002:	d10a      	bne.n	800d01a <vTaskStartScheduler+0xaa>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	60fb      	str	r3, [r7, #12]
}
 800d016:	bf00      	nop
 800d018:	e7fe      	b.n	800d018 <vTaskStartScheduler+0xa8>
}
 800d01a:	bf00      	nop
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	08012dd8 	.word	0x08012dd8
 800d028:	0800d5e1 	.word	0x0800d5e1
 800d02c:	200008b8 	.word	0x200008b8
 800d030:	20000794 	.word	0x20000794
 800d034:	200002cc 	.word	0x200002cc
 800d038:	200008b4 	.word	0x200008b4
 800d03c:	200008a0 	.word	0x200008a0
 800d040:	20000898 	.word	0x20000898

0800d044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d044:	b480      	push	{r7}
 800d046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d048:	4b04      	ldr	r3, [pc, #16]	; (800d05c <vTaskSuspendAll+0x18>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3301      	adds	r3, #1
 800d04e:	4a03      	ldr	r2, [pc, #12]	; (800d05c <vTaskSuspendAll+0x18>)
 800d050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d052:	bf00      	nop
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	200008bc 	.word	0x200008bc

0800d060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d066:	2300      	movs	r3, #0
 800d068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d06e:	4b41      	ldr	r3, [pc, #260]	; (800d174 <xTaskResumeAll+0x114>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10a      	bne.n	800d08c <xTaskResumeAll+0x2c>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	603b      	str	r3, [r7, #0]
}
 800d088:	bf00      	nop
 800d08a:	e7fe      	b.n	800d08a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d08c:	f000 ff0a 	bl	800dea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d090:	4b38      	ldr	r3, [pc, #224]	; (800d174 <xTaskResumeAll+0x114>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3b01      	subs	r3, #1
 800d096:	4a37      	ldr	r2, [pc, #220]	; (800d174 <xTaskResumeAll+0x114>)
 800d098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d09a:	4b36      	ldr	r3, [pc, #216]	; (800d174 <xTaskResumeAll+0x114>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d161      	bne.n	800d166 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0a2:	4b35      	ldr	r3, [pc, #212]	; (800d178 <xTaskResumeAll+0x118>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d05d      	beq.n	800d166 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0aa:	e02e      	b.n	800d10a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ac:	4b33      	ldr	r3, [pc, #204]	; (800d17c <xTaskResumeAll+0x11c>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3318      	adds	r3, #24
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff f949 	bl	800c350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff f944 	bl	800c350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	409a      	lsls	r2, r3
 800d0d0:	4b2b      	ldr	r3, [pc, #172]	; (800d180 <xTaskResumeAll+0x120>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	4a2a      	ldr	r2, [pc, #168]	; (800d180 <xTaskResumeAll+0x120>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4a27      	ldr	r2, [pc, #156]	; (800d184 <xTaskResumeAll+0x124>)
 800d0e8:	441a      	add	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	f7ff f8d0 	bl	800c296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fa:	4b23      	ldr	r3, [pc, #140]	; (800d188 <xTaskResumeAll+0x128>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	429a      	cmp	r2, r3
 800d102:	d302      	bcc.n	800d10a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d104:	4b21      	ldr	r3, [pc, #132]	; (800d18c <xTaskResumeAll+0x12c>)
 800d106:	2201      	movs	r2, #1
 800d108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d10a:	4b1c      	ldr	r3, [pc, #112]	; (800d17c <xTaskResumeAll+0x11c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1cc      	bne.n	800d0ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d118:	f000 fb54 	bl	800d7c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d11c:	4b1c      	ldr	r3, [pc, #112]	; (800d190 <xTaskResumeAll+0x130>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d010      	beq.n	800d14a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d128:	f000 f836 	bl	800d198 <xTaskIncrementTick>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d132:	4b16      	ldr	r3, [pc, #88]	; (800d18c <xTaskResumeAll+0x12c>)
 800d134:	2201      	movs	r2, #1
 800d136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1f1      	bne.n	800d128 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d144:	4b12      	ldr	r3, [pc, #72]	; (800d190 <xTaskResumeAll+0x130>)
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d14a:	4b10      	ldr	r3, [pc, #64]	; (800d18c <xTaskResumeAll+0x12c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d009      	beq.n	800d166 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d152:	2301      	movs	r3, #1
 800d154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d156:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <xTaskResumeAll+0x134>)
 800d158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d166:	f000 fecd 	bl	800df04 <vPortExitCritical>

	return xAlreadyYielded;
 800d16a:	68bb      	ldr	r3, [r7, #8]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	200008bc 	.word	0x200008bc
 800d178:	20000894 	.word	0x20000894
 800d17c:	20000854 	.word	0x20000854
 800d180:	2000089c 	.word	0x2000089c
 800d184:	20000798 	.word	0x20000798
 800d188:	20000794 	.word	0x20000794
 800d18c:	200008a8 	.word	0x200008a8
 800d190:	200008a4 	.word	0x200008a4
 800d194:	e000ed04 	.word	0xe000ed04

0800d198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1a2:	4b4e      	ldr	r3, [pc, #312]	; (800d2dc <xTaskIncrementTick+0x144>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f040 808e 	bne.w	800d2c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1ac:	4b4c      	ldr	r3, [pc, #304]	; (800d2e0 <xTaskIncrementTick+0x148>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1b4:	4a4a      	ldr	r2, [pc, #296]	; (800d2e0 <xTaskIncrementTick+0x148>)
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d120      	bne.n	800d202 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1c0:	4b48      	ldr	r3, [pc, #288]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	e7fe      	b.n	800d1de <xTaskIncrementTick+0x46>
 800d1e0:	4b40      	ldr	r3, [pc, #256]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]
 800d1e6:	4b40      	ldr	r3, [pc, #256]	; (800d2e8 <xTaskIncrementTick+0x150>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a3e      	ldr	r2, [pc, #248]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	4a3e      	ldr	r2, [pc, #248]	; (800d2e8 <xTaskIncrementTick+0x150>)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	4b3d      	ldr	r3, [pc, #244]	; (800d2ec <xTaskIncrementTick+0x154>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	4a3c      	ldr	r2, [pc, #240]	; (800d2ec <xTaskIncrementTick+0x154>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	f000 fae1 	bl	800d7c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d202:	4b3b      	ldr	r3, [pc, #236]	; (800d2f0 <xTaskIncrementTick+0x158>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d348      	bcc.n	800d29e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d20c:	4b35      	ldr	r3, [pc, #212]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d104      	bne.n	800d220 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d216:	4b36      	ldr	r3, [pc, #216]	; (800d2f0 <xTaskIncrementTick+0x158>)
 800d218:	f04f 32ff 	mov.w	r2, #4294967295
 800d21c:	601a      	str	r2, [r3, #0]
					break;
 800d21e:	e03e      	b.n	800d29e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d220:	4b30      	ldr	r3, [pc, #192]	; (800d2e4 <xTaskIncrementTick+0x14c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	429a      	cmp	r2, r3
 800d236:	d203      	bcs.n	800d240 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d238:	4a2d      	ldr	r2, [pc, #180]	; (800d2f0 <xTaskIncrementTick+0x158>)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d23e:	e02e      	b.n	800d29e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	3304      	adds	r3, #4
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff f883 	bl	800c350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d004      	beq.n	800d25c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	3318      	adds	r3, #24
 800d256:	4618      	mov	r0, r3
 800d258:	f7ff f87a 	bl	800c350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	2201      	movs	r2, #1
 800d262:	409a      	lsls	r2, r3
 800d264:	4b23      	ldr	r3, [pc, #140]	; (800d2f4 <xTaskIncrementTick+0x15c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4313      	orrs	r3, r2
 800d26a:	4a22      	ldr	r2, [pc, #136]	; (800d2f4 <xTaskIncrementTick+0x15c>)
 800d26c:	6013      	str	r3, [r2, #0]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4a1f      	ldr	r2, [pc, #124]	; (800d2f8 <xTaskIncrementTick+0x160>)
 800d27c:	441a      	add	r2, r3
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	3304      	adds	r3, #4
 800d282:	4619      	mov	r1, r3
 800d284:	4610      	mov	r0, r2
 800d286:	f7ff f806 	bl	800c296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28e:	4b1b      	ldr	r3, [pc, #108]	; (800d2fc <xTaskIncrementTick+0x164>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	429a      	cmp	r2, r3
 800d296:	d3b9      	bcc.n	800d20c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d298:	2301      	movs	r3, #1
 800d29a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d29c:	e7b6      	b.n	800d20c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d29e:	4b17      	ldr	r3, [pc, #92]	; (800d2fc <xTaskIncrementTick+0x164>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a4:	4914      	ldr	r1, [pc, #80]	; (800d2f8 <xTaskIncrementTick+0x160>)
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4413      	add	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	440b      	add	r3, r1
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d901      	bls.n	800d2ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2ba:	4b11      	ldr	r3, [pc, #68]	; (800d300 <xTaskIncrementTick+0x168>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d007      	beq.n	800d2d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	e004      	b.n	800d2d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d2c8:	4b0e      	ldr	r3, [pc, #56]	; (800d304 <xTaskIncrementTick+0x16c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	4a0d      	ldr	r2, [pc, #52]	; (800d304 <xTaskIncrementTick+0x16c>)
 800d2d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2d2:	697b      	ldr	r3, [r7, #20]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	200008bc 	.word	0x200008bc
 800d2e0:	20000898 	.word	0x20000898
 800d2e4:	2000084c 	.word	0x2000084c
 800d2e8:	20000850 	.word	0x20000850
 800d2ec:	200008ac 	.word	0x200008ac
 800d2f0:	200008b4 	.word	0x200008b4
 800d2f4:	2000089c 	.word	0x2000089c
 800d2f8:	20000798 	.word	0x20000798
 800d2fc:	20000794 	.word	0x20000794
 800d300:	200008a8 	.word	0x200008a8
 800d304:	200008a4 	.word	0x200008a4

0800d308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d30e:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <vTaskSwitchContext+0xac>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d316:	4b28      	ldr	r3, [pc, #160]	; (800d3b8 <vTaskSwitchContext+0xb0>)
 800d318:	2201      	movs	r2, #1
 800d31a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d31c:	e044      	b.n	800d3a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d31e:	4b26      	ldr	r3, [pc, #152]	; (800d3b8 <vTaskSwitchContext+0xb0>)
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d324:	4b25      	ldr	r3, [pc, #148]	; (800d3bc <vTaskSwitchContext+0xb4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	fab3 f383 	clz	r3, r3
 800d330:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d332:	7afb      	ldrb	r3, [r7, #11]
 800d334:	f1c3 031f 	rsb	r3, r3, #31
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	4921      	ldr	r1, [pc, #132]	; (800d3c0 <vTaskSwitchContext+0xb8>)
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	440b      	add	r3, r1
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	607b      	str	r3, [r7, #4]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <vTaskSwitchContext+0x5a>
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4a14      	ldr	r2, [pc, #80]	; (800d3c0 <vTaskSwitchContext+0xb8>)
 800d370:	4413      	add	r3, r2
 800d372:	613b      	str	r3, [r7, #16]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	605a      	str	r2, [r3, #4]
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	3308      	adds	r3, #8
 800d386:	429a      	cmp	r2, r3
 800d388:	d104      	bne.n	800d394 <vTaskSwitchContext+0x8c>
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	685a      	ldr	r2, [r3, #4]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	605a      	str	r2, [r3, #4]
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	4a0a      	ldr	r2, [pc, #40]	; (800d3c4 <vTaskSwitchContext+0xbc>)
 800d39c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d39e:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <vTaskSwitchContext+0xbc>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	334c      	adds	r3, #76	; 0x4c
 800d3a4:	4a08      	ldr	r2, [pc, #32]	; (800d3c8 <vTaskSwitchContext+0xc0>)
 800d3a6:	6013      	str	r3, [r2, #0]
}
 800d3a8:	bf00      	nop
 800d3aa:	371c      	adds	r7, #28
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr
 800d3b4:	200008bc 	.word	0x200008bc
 800d3b8:	200008a8 	.word	0x200008a8
 800d3bc:	2000089c 	.word	0x2000089c
 800d3c0:	20000798 	.word	0x20000798
 800d3c4:	20000794 	.word	0x20000794
 800d3c8:	200002cc 	.word	0x200002cc

0800d3cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10a      	bne.n	800d3f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	60fb      	str	r3, [r7, #12]
}
 800d3ee:	bf00      	nop
 800d3f0:	e7fe      	b.n	800d3f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3f2:	4b07      	ldr	r3, [pc, #28]	; (800d410 <vTaskPlaceOnEventList+0x44>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3318      	adds	r3, #24
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7fe ff6f 	bl	800c2de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d400:	2101      	movs	r1, #1
 800d402:	6838      	ldr	r0, [r7, #0]
 800d404:	f000 fbba 	bl	800db7c <prvAddCurrentTaskToDelayedList>
}
 800d408:	bf00      	nop
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20000794 	.word	0x20000794

0800d414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10a      	bne.n	800d440 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	60fb      	str	r3, [r7, #12]
}
 800d43c:	bf00      	nop
 800d43e:	e7fe      	b.n	800d43e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	3318      	adds	r3, #24
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe ff83 	bl	800c350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d44a:	4b1d      	ldr	r3, [pc, #116]	; (800d4c0 <xTaskRemoveFromEventList+0xac>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d11c      	bne.n	800d48c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	3304      	adds	r3, #4
 800d456:	4618      	mov	r0, r3
 800d458:	f7fe ff7a 	bl	800c350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	2201      	movs	r2, #1
 800d462:	409a      	lsls	r2, r3
 800d464:	4b17      	ldr	r3, [pc, #92]	; (800d4c4 <xTaskRemoveFromEventList+0xb0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4313      	orrs	r3, r2
 800d46a:	4a16      	ldr	r2, [pc, #88]	; (800d4c4 <xTaskRemoveFromEventList+0xb0>)
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d472:	4613      	mov	r3, r2
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4413      	add	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4a13      	ldr	r2, [pc, #76]	; (800d4c8 <xTaskRemoveFromEventList+0xb4>)
 800d47c:	441a      	add	r2, r3
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	3304      	adds	r3, #4
 800d482:	4619      	mov	r1, r3
 800d484:	4610      	mov	r0, r2
 800d486:	f7fe ff06 	bl	800c296 <vListInsertEnd>
 800d48a:	e005      	b.n	800d498 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	3318      	adds	r3, #24
 800d490:	4619      	mov	r1, r3
 800d492:	480e      	ldr	r0, [pc, #56]	; (800d4cc <xTaskRemoveFromEventList+0xb8>)
 800d494:	f7fe feff 	bl	800c296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49c:	4b0c      	ldr	r3, [pc, #48]	; (800d4d0 <xTaskRemoveFromEventList+0xbc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d905      	bls.n	800d4b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4aa:	4b0a      	ldr	r3, [pc, #40]	; (800d4d4 <xTaskRemoveFromEventList+0xc0>)
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	e001      	b.n	800d4b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4b6:	697b      	ldr	r3, [r7, #20]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	200008bc 	.word	0x200008bc
 800d4c4:	2000089c 	.word	0x2000089c
 800d4c8:	20000798 	.word	0x20000798
 800d4cc:	20000854 	.word	0x20000854
 800d4d0:	20000794 	.word	0x20000794
 800d4d4:	200008a8 	.word	0x200008a8

0800d4d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d4e0:	4b06      	ldr	r3, [pc, #24]	; (800d4fc <vTaskInternalSetTimeOutState+0x24>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <vTaskInternalSetTimeOutState+0x28>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	605a      	str	r2, [r3, #4]
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	200008ac 	.word	0x200008ac
 800d500:	20000898 	.word	0x20000898

0800d504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	613b      	str	r3, [r7, #16]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10a      	bne.n	800d546 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	60fb      	str	r3, [r7, #12]
}
 800d542:	bf00      	nop
 800d544:	e7fe      	b.n	800d544 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d546:	f000 fcad 	bl	800dea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d54a:	4b1d      	ldr	r3, [pc, #116]	; (800d5c0 <xTaskCheckForTimeOut+0xbc>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	69ba      	ldr	r2, [r7, #24]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d562:	d102      	bne.n	800d56a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d564:	2300      	movs	r3, #0
 800d566:	61fb      	str	r3, [r7, #28]
 800d568:	e023      	b.n	800d5b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b15      	ldr	r3, [pc, #84]	; (800d5c4 <xTaskCheckForTimeOut+0xc0>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d007      	beq.n	800d586 <xTaskCheckForTimeOut+0x82>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	69ba      	ldr	r2, [r7, #24]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d302      	bcc.n	800d586 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d580:	2301      	movs	r3, #1
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	e015      	b.n	800d5b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d20b      	bcs.n	800d5a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	1ad2      	subs	r2, r2, r3
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ff9b 	bl	800d4d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	61fb      	str	r3, [r7, #28]
 800d5a6:	e004      	b.n	800d5b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5b2:	f000 fca7 	bl	800df04 <vPortExitCritical>

	return xReturn;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3720      	adds	r7, #32
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20000898 	.word	0x20000898
 800d5c4:	200008ac 	.word	0x200008ac

0800d5c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5cc:	4b03      	ldr	r3, [pc, #12]	; (800d5dc <vTaskMissedYield+0x14>)
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	601a      	str	r2, [r3, #0]
}
 800d5d2:	bf00      	nop
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr
 800d5dc:	200008a8 	.word	0x200008a8

0800d5e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d5e8:	f000 f852 	bl	800d690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d5ec:	4b06      	ldr	r3, [pc, #24]	; (800d608 <prvIdleTask+0x28>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d9f9      	bls.n	800d5e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <prvIdleTask+0x2c>)
 800d5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d604:	e7f0      	b.n	800d5e8 <prvIdleTask+0x8>
 800d606:	bf00      	nop
 800d608:	20000798 	.word	0x20000798
 800d60c:	e000ed04 	.word	0xe000ed04

0800d610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d616:	2300      	movs	r3, #0
 800d618:	607b      	str	r3, [r7, #4]
 800d61a:	e00c      	b.n	800d636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4a12      	ldr	r2, [pc, #72]	; (800d670 <prvInitialiseTaskLists+0x60>)
 800d628:	4413      	add	r3, r2
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe fe06 	bl	800c23c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3301      	adds	r3, #1
 800d634:	607b      	str	r3, [r7, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2b06      	cmp	r3, #6
 800d63a:	d9ef      	bls.n	800d61c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d63c:	480d      	ldr	r0, [pc, #52]	; (800d674 <prvInitialiseTaskLists+0x64>)
 800d63e:	f7fe fdfd 	bl	800c23c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d642:	480d      	ldr	r0, [pc, #52]	; (800d678 <prvInitialiseTaskLists+0x68>)
 800d644:	f7fe fdfa 	bl	800c23c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d648:	480c      	ldr	r0, [pc, #48]	; (800d67c <prvInitialiseTaskLists+0x6c>)
 800d64a:	f7fe fdf7 	bl	800c23c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d64e:	480c      	ldr	r0, [pc, #48]	; (800d680 <prvInitialiseTaskLists+0x70>)
 800d650:	f7fe fdf4 	bl	800c23c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d654:	480b      	ldr	r0, [pc, #44]	; (800d684 <prvInitialiseTaskLists+0x74>)
 800d656:	f7fe fdf1 	bl	800c23c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <prvInitialiseTaskLists+0x78>)
 800d65c:	4a05      	ldr	r2, [pc, #20]	; (800d674 <prvInitialiseTaskLists+0x64>)
 800d65e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d660:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <prvInitialiseTaskLists+0x7c>)
 800d662:	4a05      	ldr	r2, [pc, #20]	; (800d678 <prvInitialiseTaskLists+0x68>)
 800d664:	601a      	str	r2, [r3, #0]
}
 800d666:	bf00      	nop
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20000798 	.word	0x20000798
 800d674:	20000824 	.word	0x20000824
 800d678:	20000838 	.word	0x20000838
 800d67c:	20000854 	.word	0x20000854
 800d680:	20000868 	.word	0x20000868
 800d684:	20000880 	.word	0x20000880
 800d688:	2000084c 	.word	0x2000084c
 800d68c:	20000850 	.word	0x20000850

0800d690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d696:	e019      	b.n	800d6cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d698:	f000 fc04 	bl	800dea4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d69c:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <prvCheckTasksWaitingTermination+0x50>)
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fe fe51 	bl	800c350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6ae:	4b0d      	ldr	r3, [pc, #52]	; (800d6e4 <prvCheckTasksWaitingTermination+0x54>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	4a0b      	ldr	r2, [pc, #44]	; (800d6e4 <prvCheckTasksWaitingTermination+0x54>)
 800d6b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6b8:	4b0b      	ldr	r3, [pc, #44]	; (800d6e8 <prvCheckTasksWaitingTermination+0x58>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	4a0a      	ldr	r2, [pc, #40]	; (800d6e8 <prvCheckTasksWaitingTermination+0x58>)
 800d6c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6c2:	f000 fc1f 	bl	800df04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f848 	bl	800d75c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6cc:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <prvCheckTasksWaitingTermination+0x58>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1e1      	bne.n	800d698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20000868 	.word	0x20000868
 800d6e4:	20000894 	.word	0x20000894
 800d6e8:	2000087c 	.word	0x2000087c

0800d6ec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d6f8:	e005      	b.n	800d706 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	3301      	adds	r3, #1
 800d704:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2ba5      	cmp	r3, #165	; 0xa5
 800d70c:	d0f5      	beq.n	800d6fa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	089b      	lsrs	r3, r3, #2
 800d712:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	b29b      	uxth	r3, r3
	}
 800d718:	4618      	mov	r0, r3
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d102      	bne.n	800d738 <uxTaskGetStackHighWaterMark+0x14>
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <uxTaskGetStackHighWaterMark+0x34>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	e000      	b.n	800d73a <uxTaskGetStackHighWaterMark+0x16>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d740:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d742:	6938      	ldr	r0, [r7, #16]
 800d744:	f7ff ffd2 	bl	800d6ec <prvTaskCheckFreeStackSpace>
 800d748:	4603      	mov	r3, r0
 800d74a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d74c:	68fb      	ldr	r3, [r7, #12]
	}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000794 	.word	0x20000794

0800d75c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	334c      	adds	r3, #76	; 0x4c
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 fd01 	bl	800f170 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d774:	2b00      	cmp	r3, #0
 800d776:	d108      	bne.n	800d78a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 fd3f 	bl	800e200 <vPortFree>
				vPortFree( pxTCB );
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fd3c 	bl	800e200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d788:	e018      	b.n	800d7bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d790:	2b01      	cmp	r3, #1
 800d792:	d103      	bne.n	800d79c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fd33 	bl	800e200 <vPortFree>
	}
 800d79a:	e00f      	b.n	800d7bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d00a      	beq.n	800d7bc <prvDeleteTCB+0x60>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	60fb      	str	r3, [r7, #12]
}
 800d7b8:	bf00      	nop
 800d7ba:	e7fe      	b.n	800d7ba <prvDeleteTCB+0x5e>
	}
 800d7bc:	bf00      	nop
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <prvResetNextTaskUnblockTime+0x38>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d104      	bne.n	800d7de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	; (800d800 <prvResetNextTaskUnblockTime+0x3c>)
 800d7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7dc:	e008      	b.n	800d7f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7de:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <prvResetNextTaskUnblockTime+0x38>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	4a04      	ldr	r2, [pc, #16]	; (800d800 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ee:	6013      	str	r3, [r2, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	2000084c 	.word	0x2000084c
 800d800:	200008b4 	.word	0x200008b4

0800d804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d80a:	4b0b      	ldr	r3, [pc, #44]	; (800d838 <xTaskGetSchedulerState+0x34>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d102      	bne.n	800d818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d812:	2301      	movs	r3, #1
 800d814:	607b      	str	r3, [r7, #4]
 800d816:	e008      	b.n	800d82a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d818:	4b08      	ldr	r3, [pc, #32]	; (800d83c <xTaskGetSchedulerState+0x38>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d820:	2302      	movs	r3, #2
 800d822:	607b      	str	r3, [r7, #4]
 800d824:	e001      	b.n	800d82a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d826:	2300      	movs	r3, #0
 800d828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d82a:	687b      	ldr	r3, [r7, #4]
	}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr
 800d838:	200008a0 	.word	0x200008a0
 800d83c:	200008bc 	.word	0x200008bc

0800d840 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d84c:	2300      	movs	r3, #0
 800d84e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d05e      	beq.n	800d914 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85a:	4b31      	ldr	r3, [pc, #196]	; (800d920 <xTaskPriorityInherit+0xe0>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d860:	429a      	cmp	r2, r3
 800d862:	d24e      	bcs.n	800d902 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	db06      	blt.n	800d87a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d86c:	4b2c      	ldr	r3, [pc, #176]	; (800d920 <xTaskPriorityInherit+0xe0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	f1c3 0207 	rsb	r2, r3, #7
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6959      	ldr	r1, [r3, #20]
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d882:	4613      	mov	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4413      	add	r3, r2
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	4a26      	ldr	r2, [pc, #152]	; (800d924 <xTaskPriorityInherit+0xe4>)
 800d88c:	4413      	add	r3, r2
 800d88e:	4299      	cmp	r1, r3
 800d890:	d12f      	bne.n	800d8f2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	3304      	adds	r3, #4
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fd5a 	bl	800c350 <uxListRemove>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10a      	bne.n	800d8b8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ac:	43da      	mvns	r2, r3
 800d8ae:	4b1e      	ldr	r3, [pc, #120]	; (800d928 <xTaskPriorityInherit+0xe8>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	4a1c      	ldr	r2, [pc, #112]	; (800d928 <xTaskPriorityInherit+0xe8>)
 800d8b6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8b8:	4b19      	ldr	r3, [pc, #100]	; (800d920 <xTaskPriorityInherit+0xe0>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	409a      	lsls	r2, r3
 800d8ca:	4b17      	ldr	r3, [pc, #92]	; (800d928 <xTaskPriorityInherit+0xe8>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	4a15      	ldr	r2, [pc, #84]	; (800d928 <xTaskPriorityInherit+0xe8>)
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4a10      	ldr	r2, [pc, #64]	; (800d924 <xTaskPriorityInherit+0xe4>)
 800d8e2:	441a      	add	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fe fcd3 	bl	800c296 <vListInsertEnd>
 800d8f0:	e004      	b.n	800d8fc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8f2:	4b0b      	ldr	r3, [pc, #44]	; (800d920 <xTaskPriorityInherit+0xe0>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	60fb      	str	r3, [r7, #12]
 800d900:	e008      	b.n	800d914 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d906:	4b06      	ldr	r3, [pc, #24]	; (800d920 <xTaskPriorityInherit+0xe0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d201      	bcs.n	800d914 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d910:	2301      	movs	r3, #1
 800d912:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d914:	68fb      	ldr	r3, [r7, #12]
	}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	20000794 	.word	0x20000794
 800d924:	20000798 	.word	0x20000798
 800d928:	2000089c 	.word	0x2000089c

0800d92c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d938:	2300      	movs	r3, #0
 800d93a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d06e      	beq.n	800da20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d942:	4b3a      	ldr	r3, [pc, #232]	; (800da2c <xTaskPriorityDisinherit+0x100>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d00a      	beq.n	800d962 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	60fb      	str	r3, [r7, #12]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	60bb      	str	r3, [r7, #8]
}
 800d97c:	bf00      	nop
 800d97e:	e7fe      	b.n	800d97e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d984:	1e5a      	subs	r2, r3, #1
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d992:	429a      	cmp	r2, r3
 800d994:	d044      	beq.n	800da20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d140      	bne.n	800da20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fe fcd4 	bl	800c350 <uxListRemove>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d115      	bne.n	800d9da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b2:	491f      	ldr	r1, [pc, #124]	; (800da30 <xTaskPriorityDisinherit+0x104>)
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10a      	bne.n	800d9da <xTaskPriorityDisinherit+0xae>
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ce:	43da      	mvns	r2, r3
 800d9d0:	4b18      	ldr	r3, [pc, #96]	; (800da34 <xTaskPriorityDisinherit+0x108>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	4a17      	ldr	r2, [pc, #92]	; (800da34 <xTaskPriorityDisinherit+0x108>)
 800d9d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e6:	f1c3 0207 	rsb	r2, r3, #7
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	409a      	lsls	r2, r3
 800d9f6:	4b0f      	ldr	r3, [pc, #60]	; (800da34 <xTaskPriorityDisinherit+0x108>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	4a0d      	ldr	r2, [pc, #52]	; (800da34 <xTaskPriorityDisinherit+0x108>)
 800d9fe:	6013      	str	r3, [r2, #0]
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da04:	4613      	mov	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	4a08      	ldr	r2, [pc, #32]	; (800da30 <xTaskPriorityDisinherit+0x104>)
 800da0e:	441a      	add	r2, r3
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	3304      	adds	r3, #4
 800da14:	4619      	mov	r1, r3
 800da16:	4610      	mov	r0, r2
 800da18:	f7fe fc3d 	bl	800c296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da1c:	2301      	movs	r3, #1
 800da1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da20:	697b      	ldr	r3, [r7, #20]
	}
 800da22:	4618      	mov	r0, r3
 800da24:	3718      	adds	r7, #24
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20000794 	.word	0x20000794
 800da30:	20000798 	.word	0x20000798
 800da34:	2000089c 	.word	0x2000089c

0800da38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da46:	2301      	movs	r3, #1
 800da48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d077      	beq.n	800db40 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10a      	bne.n	800da6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5c:	f383 8811 	msr	BASEPRI, r3
 800da60:	f3bf 8f6f 	isb	sy
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	60fb      	str	r3, [r7, #12]
}
 800da6a:	bf00      	nop
 800da6c:	e7fe      	b.n	800da6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d902      	bls.n	800da7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	e002      	b.n	800da84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da88:	69fa      	ldr	r2, [r7, #28]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d058      	beq.n	800db40 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da92:	697a      	ldr	r2, [r7, #20]
 800da94:	429a      	cmp	r2, r3
 800da96:	d153      	bne.n	800db40 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da98:	4b2b      	ldr	r3, [pc, #172]	; (800db48 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	69ba      	ldr	r2, [r7, #24]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d10a      	bne.n	800dab8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	60bb      	str	r3, [r7, #8]
}
 800dab4:	bf00      	nop
 800dab6:	e7fe      	b.n	800dab6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	69fa      	ldr	r2, [r7, #28]
 800dac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	699b      	ldr	r3, [r3, #24]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	db04      	blt.n	800dad6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	f1c3 0207 	rsb	r2, r3, #7
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	6959      	ldr	r1, [r3, #20]
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	4613      	mov	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4413      	add	r3, r2
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4a19      	ldr	r2, [pc, #100]	; (800db4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dae6:	4413      	add	r3, r2
 800dae8:	4299      	cmp	r1, r3
 800daea:	d129      	bne.n	800db40 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	3304      	adds	r3, #4
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe fc2d 	bl	800c350 <uxListRemove>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10a      	bne.n	800db12 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db00:	2201      	movs	r2, #1
 800db02:	fa02 f303 	lsl.w	r3, r2, r3
 800db06:	43da      	mvns	r2, r3
 800db08:	4b11      	ldr	r3, [pc, #68]	; (800db50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4013      	ands	r3, r2
 800db0e:	4a10      	ldr	r2, [pc, #64]	; (800db50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db16:	2201      	movs	r2, #1
 800db18:	409a      	lsls	r2, r3
 800db1a:	4b0d      	ldr	r3, [pc, #52]	; (800db50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4313      	orrs	r3, r2
 800db20:	4a0b      	ldr	r2, [pc, #44]	; (800db50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db22:	6013      	str	r3, [r2, #0]
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db28:	4613      	mov	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4a06      	ldr	r2, [pc, #24]	; (800db4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db32:	441a      	add	r2, r3
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	3304      	adds	r3, #4
 800db38:	4619      	mov	r1, r3
 800db3a:	4610      	mov	r0, r2
 800db3c:	f7fe fbab 	bl	800c296 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db40:	bf00      	nop
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20000794 	.word	0x20000794
 800db4c:	20000798 	.word	0x20000798
 800db50:	2000089c 	.word	0x2000089c

0800db54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db54:	b480      	push	{r7}
 800db56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db58:	4b07      	ldr	r3, [pc, #28]	; (800db78 <pvTaskIncrementMutexHeldCount+0x24>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d004      	beq.n	800db6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db60:	4b05      	ldr	r3, [pc, #20]	; (800db78 <pvTaskIncrementMutexHeldCount+0x24>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db66:	3201      	adds	r2, #1
 800db68:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db6a:	4b03      	ldr	r3, [pc, #12]	; (800db78 <pvTaskIncrementMutexHeldCount+0x24>)
 800db6c:	681b      	ldr	r3, [r3, #0]
	}
 800db6e:	4618      	mov	r0, r3
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr
 800db78:	20000794 	.word	0x20000794

0800db7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db86:	4b29      	ldr	r3, [pc, #164]	; (800dc2c <prvAddCurrentTaskToDelayedList+0xb0>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db8c:	4b28      	ldr	r3, [pc, #160]	; (800dc30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3304      	adds	r3, #4
 800db92:	4618      	mov	r0, r3
 800db94:	f7fe fbdc 	bl	800c350 <uxListRemove>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10b      	bne.n	800dbb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db9e:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba4:	2201      	movs	r2, #1
 800dba6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbaa:	43da      	mvns	r2, r3
 800dbac:	4b21      	ldr	r3, [pc, #132]	; (800dc34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	4a20      	ldr	r2, [pc, #128]	; (800dc34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d10a      	bne.n	800dbd4 <prvAddCurrentTaskToDelayedList+0x58>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d007      	beq.n	800dbd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc4:	4b1a      	ldr	r3, [pc, #104]	; (800dc30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	4619      	mov	r1, r3
 800dbcc:	481a      	ldr	r0, [pc, #104]	; (800dc38 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbce:	f7fe fb62 	bl	800c296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbd2:	e026      	b.n	800dc22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4413      	add	r3, r2
 800dbda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbdc:	4b14      	ldr	r3, [pc, #80]	; (800dc30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d209      	bcs.n	800dc00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbec:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f7fe fb70 	bl	800c2de <vListInsert>
}
 800dbfe:	e010      	b.n	800dc22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	4b0a      	ldr	r3, [pc, #40]	; (800dc30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3304      	adds	r3, #4
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	f7fe fb66 	bl	800c2de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc12:	4b0c      	ldr	r3, [pc, #48]	; (800dc44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d202      	bcs.n	800dc22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc1c:	4a09      	ldr	r2, [pc, #36]	; (800dc44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	6013      	str	r3, [r2, #0]
}
 800dc22:	bf00      	nop
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20000898 	.word	0x20000898
 800dc30:	20000794 	.word	0x20000794
 800dc34:	2000089c 	.word	0x2000089c
 800dc38:	20000880 	.word	0x20000880
 800dc3c:	20000850 	.word	0x20000850
 800dc40:	2000084c 	.word	0x2000084c
 800dc44:	200008b4 	.word	0x200008b4

0800dc48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3b04      	subs	r3, #4
 800dc58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3b04      	subs	r3, #4
 800dc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	f023 0201 	bic.w	r2, r3, #1
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3b04      	subs	r3, #4
 800dc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc78:	4a0c      	ldr	r2, [pc, #48]	; (800dcac <pxPortInitialiseStack+0x64>)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3b14      	subs	r3, #20
 800dc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	3b04      	subs	r3, #4
 800dc8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f06f 0202 	mvn.w	r2, #2
 800dc96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	3b20      	subs	r3, #32
 800dc9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	0800dcb1 	.word	0x0800dcb1

0800dcb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcba:	4b12      	ldr	r3, [pc, #72]	; (800dd04 <prvTaskExitError+0x54>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc2:	d00a      	beq.n	800dcda <prvTaskExitError+0x2a>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	60fb      	str	r3, [r7, #12]
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <prvTaskExitError+0x28>
	__asm volatile
 800dcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	60bb      	str	r3, [r7, #8]
}
 800dcec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcee:	bf00      	nop
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d0fc      	beq.n	800dcf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcf6:	bf00      	nop
 800dcf8:	bf00      	nop
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	200002c8 	.word	0x200002c8
	...

0800dd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <pxCurrentTCBConst2>)
 800dd12:	6819      	ldr	r1, [r3, #0]
 800dd14:	6808      	ldr	r0, [r1, #0]
 800dd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1a:	f380 8809 	msr	PSP, r0
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f04f 0000 	mov.w	r0, #0
 800dd26:	f380 8811 	msr	BASEPRI, r0
 800dd2a:	4770      	bx	lr
 800dd2c:	f3af 8000 	nop.w

0800dd30 <pxCurrentTCBConst2>:
 800dd30:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop

0800dd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd38:	4808      	ldr	r0, [pc, #32]	; (800dd5c <prvPortStartFirstTask+0x24>)
 800dd3a:	6800      	ldr	r0, [r0, #0]
 800dd3c:	6800      	ldr	r0, [r0, #0]
 800dd3e:	f380 8808 	msr	MSP, r0
 800dd42:	f04f 0000 	mov.w	r0, #0
 800dd46:	f380 8814 	msr	CONTROL, r0
 800dd4a:	b662      	cpsie	i
 800dd4c:	b661      	cpsie	f
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	df00      	svc	0
 800dd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd5a:	bf00      	nop
 800dd5c:	e000ed08 	.word	0xe000ed08

0800dd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd66:	4b46      	ldr	r3, [pc, #280]	; (800de80 <xPortStartScheduler+0x120>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a46      	ldr	r2, [pc, #280]	; (800de84 <xPortStartScheduler+0x124>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d10a      	bne.n	800dd86 <xPortStartScheduler+0x26>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	613b      	str	r3, [r7, #16]
}
 800dd82:	bf00      	nop
 800dd84:	e7fe      	b.n	800dd84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dd86:	4b3e      	ldr	r3, [pc, #248]	; (800de80 <xPortStartScheduler+0x120>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a3f      	ldr	r2, [pc, #252]	; (800de88 <xPortStartScheduler+0x128>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d10a      	bne.n	800dda6 <xPortStartScheduler+0x46>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	60fb      	str	r3, [r7, #12]
}
 800dda2:	bf00      	nop
 800dda4:	e7fe      	b.n	800dda4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dda6:	4b39      	ldr	r3, [pc, #228]	; (800de8c <xPortStartScheduler+0x12c>)
 800dda8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	22ff      	movs	r2, #255	; 0xff
 800ddb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ddc0:	78fb      	ldrb	r3, [r7, #3]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <xPortStartScheduler+0x130>)
 800ddcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddce:	4b31      	ldr	r3, [pc, #196]	; (800de94 <xPortStartScheduler+0x134>)
 800ddd0:	2207      	movs	r2, #7
 800ddd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddd4:	e009      	b.n	800ddea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ddd6:	4b2f      	ldr	r3, [pc, #188]	; (800de94 <xPortStartScheduler+0x134>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	4a2d      	ldr	r2, [pc, #180]	; (800de94 <xPortStartScheduler+0x134>)
 800ddde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dde0:	78fb      	ldrb	r3, [r7, #3]
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ddea:	78fb      	ldrb	r3, [r7, #3]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf2:	2b80      	cmp	r3, #128	; 0x80
 800ddf4:	d0ef      	beq.n	800ddd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ddf6:	4b27      	ldr	r3, [pc, #156]	; (800de94 <xPortStartScheduler+0x134>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f1c3 0307 	rsb	r3, r3, #7
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d00a      	beq.n	800de18 <xPortStartScheduler+0xb8>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	60bb      	str	r3, [r7, #8]
}
 800de14:	bf00      	nop
 800de16:	e7fe      	b.n	800de16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de18:	4b1e      	ldr	r3, [pc, #120]	; (800de94 <xPortStartScheduler+0x134>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	021b      	lsls	r3, r3, #8
 800de1e:	4a1d      	ldr	r2, [pc, #116]	; (800de94 <xPortStartScheduler+0x134>)
 800de20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de22:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <xPortStartScheduler+0x134>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de2a:	4a1a      	ldr	r2, [pc, #104]	; (800de94 <xPortStartScheduler+0x134>)
 800de2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	b2da      	uxtb	r2, r3
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de36:	4b18      	ldr	r3, [pc, #96]	; (800de98 <xPortStartScheduler+0x138>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a17      	ldr	r2, [pc, #92]	; (800de98 <xPortStartScheduler+0x138>)
 800de3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de42:	4b15      	ldr	r3, [pc, #84]	; (800de98 <xPortStartScheduler+0x138>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a14      	ldr	r2, [pc, #80]	; (800de98 <xPortStartScheduler+0x138>)
 800de48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de4e:	f000 f8dd 	bl	800e00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de52:	4b12      	ldr	r3, [pc, #72]	; (800de9c <xPortStartScheduler+0x13c>)
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de58:	f000 f8fc 	bl	800e054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de5c:	4b10      	ldr	r3, [pc, #64]	; (800dea0 <xPortStartScheduler+0x140>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a0f      	ldr	r2, [pc, #60]	; (800dea0 <xPortStartScheduler+0x140>)
 800de62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de68:	f7ff ff66 	bl	800dd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de6c:	f7ff fa4c 	bl	800d308 <vTaskSwitchContext>
	prvTaskExitError();
 800de70:	f7ff ff1e 	bl	800dcb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	e000ed00 	.word	0xe000ed00
 800de84:	410fc271 	.word	0x410fc271
 800de88:	410fc270 	.word	0x410fc270
 800de8c:	e000e400 	.word	0xe000e400
 800de90:	200008c0 	.word	0x200008c0
 800de94:	200008c4 	.word	0x200008c4
 800de98:	e000ed20 	.word	0xe000ed20
 800de9c:	200002c8 	.word	0x200002c8
 800dea0:	e000ef34 	.word	0xe000ef34

0800dea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	607b      	str	r3, [r7, #4]
}
 800debc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <vPortEnterCritical+0x58>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3301      	adds	r3, #1
 800dec4:	4a0d      	ldr	r2, [pc, #52]	; (800defc <vPortEnterCritical+0x58>)
 800dec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dec8:	4b0c      	ldr	r3, [pc, #48]	; (800defc <vPortEnterCritical+0x58>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d10f      	bne.n	800def0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ded0:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <vPortEnterCritical+0x5c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00a      	beq.n	800def0 <vPortEnterCritical+0x4c>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	603b      	str	r3, [r7, #0]
}
 800deec:	bf00      	nop
 800deee:	e7fe      	b.n	800deee <vPortEnterCritical+0x4a>
	}
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	200002c8 	.word	0x200002c8
 800df00:	e000ed04 	.word	0xe000ed04

0800df04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df0a:	4b12      	ldr	r3, [pc, #72]	; (800df54 <vPortExitCritical+0x50>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <vPortExitCritical+0x24>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	607b      	str	r3, [r7, #4]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <vPortExitCritical+0x50>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	4a09      	ldr	r2, [pc, #36]	; (800df54 <vPortExitCritical+0x50>)
 800df30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df32:	4b08      	ldr	r3, [pc, #32]	; (800df54 <vPortExitCritical+0x50>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d105      	bne.n	800df46 <vPortExitCritical+0x42>
 800df3a:	2300      	movs	r3, #0
 800df3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800df44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df46:	bf00      	nop
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	200002c8 	.word	0x200002c8
	...

0800df60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df60:	f3ef 8009 	mrs	r0, PSP
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	4b15      	ldr	r3, [pc, #84]	; (800dfc0 <pxCurrentTCBConst>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	f01e 0f10 	tst.w	lr, #16
 800df70:	bf08      	it	eq
 800df72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800df76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7a:	6010      	str	r0, [r2, #0]
 800df7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df84:	f380 8811 	msr	BASEPRI, r0
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f7ff f9ba 	bl	800d308 <vTaskSwitchContext>
 800df94:	f04f 0000 	mov.w	r0, #0
 800df98:	f380 8811 	msr	BASEPRI, r0
 800df9c:	bc09      	pop	{r0, r3}
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	6808      	ldr	r0, [r1, #0]
 800dfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa6:	f01e 0f10 	tst.w	lr, #16
 800dfaa:	bf08      	it	eq
 800dfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfb0:	f380 8809 	msr	PSP, r0
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w

0800dfc0 <pxCurrentTCBConst>:
 800dfc0:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop

0800dfc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	607b      	str	r3, [r7, #4]
}
 800dfe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dfe2:	f7ff f8d9 	bl	800d198 <xTaskIncrementTick>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <SysTick_Handler+0x40>)
 800dfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff2:	601a      	str	r2, [r3, #0]
 800dff4:	2300      	movs	r3, #0
 800dff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f383 8811 	msr	BASEPRI, r3
}
 800dffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	e000ed04 	.word	0xe000ed04

0800e00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e00c:	b480      	push	{r7}
 800e00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e010:	4b0b      	ldr	r3, [pc, #44]	; (800e040 <vPortSetupTimerInterrupt+0x34>)
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <vPortSetupTimerInterrupt+0x38>)
 800e018:	2200      	movs	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e01c:	4b0a      	ldr	r3, [pc, #40]	; (800e048 <vPortSetupTimerInterrupt+0x3c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a0a      	ldr	r2, [pc, #40]	; (800e04c <vPortSetupTimerInterrupt+0x40>)
 800e022:	fba2 2303 	umull	r2, r3, r2, r3
 800e026:	099b      	lsrs	r3, r3, #6
 800e028:	4a09      	ldr	r2, [pc, #36]	; (800e050 <vPortSetupTimerInterrupt+0x44>)
 800e02a:	3b01      	subs	r3, #1
 800e02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e02e:	4b04      	ldr	r3, [pc, #16]	; (800e040 <vPortSetupTimerInterrupt+0x34>)
 800e030:	2207      	movs	r2, #7
 800e032:	601a      	str	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	e000e010 	.word	0xe000e010
 800e044:	e000e018 	.word	0xe000e018
 800e048:	20000000 	.word	0x20000000
 800e04c:	10624dd3 	.word	0x10624dd3
 800e050:	e000e014 	.word	0xe000e014

0800e054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e064 <vPortEnableVFP+0x10>
 800e058:	6801      	ldr	r1, [r0, #0]
 800e05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e05e:	6001      	str	r1, [r0, #0]
 800e060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e062:	bf00      	nop
 800e064:	e000ed88 	.word	0xe000ed88

0800e068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08a      	sub	sp, #40	; 0x28
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e070:	2300      	movs	r3, #0
 800e072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e074:	f7fe ffe6 	bl	800d044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e078:	4b5b      	ldr	r3, [pc, #364]	; (800e1e8 <pvPortMalloc+0x180>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e080:	f000 f920 	bl	800e2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e084:	4b59      	ldr	r3, [pc, #356]	; (800e1ec <pvPortMalloc+0x184>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4013      	ands	r3, r2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f040 8093 	bne.w	800e1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d01d      	beq.n	800e0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e098:	2208      	movs	r2, #8
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4413      	add	r3, r2
 800e09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d014      	beq.n	800e0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f023 0307 	bic.w	r3, r3, #7
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00a      	beq.n	800e0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	617b      	str	r3, [r7, #20]
}
 800e0d0:	bf00      	nop
 800e0d2:	e7fe      	b.n	800e0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d06e      	beq.n	800e1b8 <pvPortMalloc+0x150>
 800e0da:	4b45      	ldr	r3, [pc, #276]	; (800e1f0 <pvPortMalloc+0x188>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d869      	bhi.n	800e1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0e4:	4b43      	ldr	r3, [pc, #268]	; (800e1f4 <pvPortMalloc+0x18c>)
 800e0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0e8:	4b42      	ldr	r3, [pc, #264]	; (800e1f4 <pvPortMalloc+0x18c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0ee:	e004      	b.n	800e0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	429a      	cmp	r2, r3
 800e102:	d903      	bls.n	800e10c <pvPortMalloc+0xa4>
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f1      	bne.n	800e0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e10c:	4b36      	ldr	r3, [pc, #216]	; (800e1e8 <pvPortMalloc+0x180>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e112:	429a      	cmp	r2, r3
 800e114:	d050      	beq.n	800e1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2208      	movs	r2, #8
 800e11c:	4413      	add	r3, r2
 800e11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	2308      	movs	r3, #8
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	429a      	cmp	r2, r3
 800e136:	d91f      	bls.n	800e178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4413      	add	r3, r2
 800e13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <pvPortMalloc+0xf8>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	613b      	str	r3, [r7, #16]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	1ad2      	subs	r2, r2, r3
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e172:	69b8      	ldr	r0, [r7, #24]
 800e174:	f000 f908 	bl	800e388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e178:	4b1d      	ldr	r3, [pc, #116]	; (800e1f0 <pvPortMalloc+0x188>)
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	4a1b      	ldr	r2, [pc, #108]	; (800e1f0 <pvPortMalloc+0x188>)
 800e184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e186:	4b1a      	ldr	r3, [pc, #104]	; (800e1f0 <pvPortMalloc+0x188>)
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	4b1b      	ldr	r3, [pc, #108]	; (800e1f8 <pvPortMalloc+0x190>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d203      	bcs.n	800e19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e192:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <pvPortMalloc+0x188>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a18      	ldr	r2, [pc, #96]	; (800e1f8 <pvPortMalloc+0x190>)
 800e198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	685a      	ldr	r2, [r3, #4]
 800e19e:	4b13      	ldr	r3, [pc, #76]	; (800e1ec <pvPortMalloc+0x184>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	431a      	orrs	r2, r3
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e1ae:	4b13      	ldr	r3, [pc, #76]	; (800e1fc <pvPortMalloc+0x194>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	4a11      	ldr	r2, [pc, #68]	; (800e1fc <pvPortMalloc+0x194>)
 800e1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e1b8:	f7fe ff52 	bl	800d060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	f003 0307 	and.w	r3, r3, #7
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00a      	beq.n	800e1dc <pvPortMalloc+0x174>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	60fb      	str	r3, [r7, #12]
}
 800e1d8:	bf00      	nop
 800e1da:	e7fe      	b.n	800e1da <pvPortMalloc+0x172>
	return pvReturn;
 800e1dc:	69fb      	ldr	r3, [r7, #28]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3728      	adds	r7, #40	; 0x28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200044d0 	.word	0x200044d0
 800e1ec:	200044e4 	.word	0x200044e4
 800e1f0:	200044d4 	.word	0x200044d4
 800e1f4:	200044c8 	.word	0x200044c8
 800e1f8:	200044d8 	.word	0x200044d8
 800e1fc:	200044dc 	.word	0x200044dc

0800e200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d04d      	beq.n	800e2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e212:	2308      	movs	r3, #8
 800e214:	425b      	negs	r3, r3
 800e216:	697a      	ldr	r2, [r7, #20]
 800e218:	4413      	add	r3, r2
 800e21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	4b24      	ldr	r3, [pc, #144]	; (800e2b8 <vPortFree+0xb8>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4013      	ands	r3, r2
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10a      	bne.n	800e244 <vPortFree+0x44>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	60fb      	str	r3, [r7, #12]
}
 800e240:	bf00      	nop
 800e242:	e7fe      	b.n	800e242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00a      	beq.n	800e262 <vPortFree+0x62>
	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	60bb      	str	r3, [r7, #8]
}
 800e25e:	bf00      	nop
 800e260:	e7fe      	b.n	800e260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	685a      	ldr	r2, [r3, #4]
 800e266:	4b14      	ldr	r3, [pc, #80]	; (800e2b8 <vPortFree+0xb8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4013      	ands	r3, r2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01e      	beq.n	800e2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d11a      	bne.n	800e2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	4b0e      	ldr	r3, [pc, #56]	; (800e2b8 <vPortFree+0xb8>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	43db      	mvns	r3, r3
 800e282:	401a      	ands	r2, r3
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e288:	f7fe fedc 	bl	800d044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	4b0a      	ldr	r3, [pc, #40]	; (800e2bc <vPortFree+0xbc>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4413      	add	r3, r2
 800e296:	4a09      	ldr	r2, [pc, #36]	; (800e2bc <vPortFree+0xbc>)
 800e298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e29a:	6938      	ldr	r0, [r7, #16]
 800e29c:	f000 f874 	bl	800e388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e2a0:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <vPortFree+0xc0>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	4a06      	ldr	r2, [pc, #24]	; (800e2c0 <vPortFree+0xc0>)
 800e2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e2aa:	f7fe fed9 	bl	800d060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2ae:	bf00      	nop
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	200044e4 	.word	0x200044e4
 800e2bc:	200044d4 	.word	0x200044d4
 800e2c0:	200044e0 	.word	0x200044e0

0800e2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e2d0:	4b27      	ldr	r3, [pc, #156]	; (800e370 <prvHeapInit+0xac>)
 800e2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00c      	beq.n	800e2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	3307      	adds	r3, #7
 800e2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f023 0307 	bic.w	r3, r3, #7
 800e2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	4a1f      	ldr	r2, [pc, #124]	; (800e370 <prvHeapInit+0xac>)
 800e2f4:	4413      	add	r3, r2
 800e2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2fc:	4a1d      	ldr	r2, [pc, #116]	; (800e374 <prvHeapInit+0xb0>)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e302:	4b1c      	ldr	r3, [pc, #112]	; (800e374 <prvHeapInit+0xb0>)
 800e304:	2200      	movs	r2, #0
 800e306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	4413      	add	r3, r2
 800e30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e310:	2208      	movs	r2, #8
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	1a9b      	subs	r3, r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f023 0307 	bic.w	r3, r3, #7
 800e31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4a15      	ldr	r2, [pc, #84]	; (800e378 <prvHeapInit+0xb4>)
 800e324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e326:	4b14      	ldr	r3, [pc, #80]	; (800e378 <prvHeapInit+0xb4>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e32e:	4b12      	ldr	r3, [pc, #72]	; (800e378 <prvHeapInit+0xb4>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	1ad2      	subs	r2, r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e344:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <prvHeapInit+0xb4>)
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4a0a      	ldr	r2, [pc, #40]	; (800e37c <prvHeapInit+0xb8>)
 800e352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	4a09      	ldr	r2, [pc, #36]	; (800e380 <prvHeapInit+0xbc>)
 800e35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e35c:	4b09      	ldr	r3, [pc, #36]	; (800e384 <prvHeapInit+0xc0>)
 800e35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e362:	601a      	str	r2, [r3, #0]
}
 800e364:	bf00      	nop
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	200008c8 	.word	0x200008c8
 800e374:	200044c8 	.word	0x200044c8
 800e378:	200044d0 	.word	0x200044d0
 800e37c:	200044d8 	.word	0x200044d8
 800e380:	200044d4 	.word	0x200044d4
 800e384:	200044e4 	.word	0x200044e4

0800e388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e390:	4b28      	ldr	r3, [pc, #160]	; (800e434 <prvInsertBlockIntoFreeList+0xac>)
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	e002      	b.n	800e39c <prvInsertBlockIntoFreeList+0x14>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d8f7      	bhi.n	800e396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d108      	bne.n	800e3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	685a      	ldr	r2, [r3, #4]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	441a      	add	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d118      	bne.n	800e410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	4b15      	ldr	r3, [pc, #84]	; (800e438 <prvInsertBlockIntoFreeList+0xb0>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d00d      	beq.n	800e406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	441a      	add	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	e008      	b.n	800e418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e406:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <prvInsertBlockIntoFreeList+0xb0>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	e003      	b.n	800e418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d002      	beq.n	800e426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e426:	bf00      	nop
 800e428:	3714      	adds	r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	200044c8 	.word	0x200044c8
 800e438:	200044d0 	.word	0x200044d0

0800e43c <__errno>:
 800e43c:	4b01      	ldr	r3, [pc, #4]	; (800e444 <__errno+0x8>)
 800e43e:	6818      	ldr	r0, [r3, #0]
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	200002cc 	.word	0x200002cc

0800e448 <std>:
 800e448:	2300      	movs	r3, #0
 800e44a:	b510      	push	{r4, lr}
 800e44c:	4604      	mov	r4, r0
 800e44e:	e9c0 3300 	strd	r3, r3, [r0]
 800e452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e456:	6083      	str	r3, [r0, #8]
 800e458:	8181      	strh	r1, [r0, #12]
 800e45a:	6643      	str	r3, [r0, #100]	; 0x64
 800e45c:	81c2      	strh	r2, [r0, #14]
 800e45e:	6183      	str	r3, [r0, #24]
 800e460:	4619      	mov	r1, r3
 800e462:	2208      	movs	r2, #8
 800e464:	305c      	adds	r0, #92	; 0x5c
 800e466:	f000 f91a 	bl	800e69e <memset>
 800e46a:	4b05      	ldr	r3, [pc, #20]	; (800e480 <std+0x38>)
 800e46c:	6263      	str	r3, [r4, #36]	; 0x24
 800e46e:	4b05      	ldr	r3, [pc, #20]	; (800e484 <std+0x3c>)
 800e470:	62a3      	str	r3, [r4, #40]	; 0x28
 800e472:	4b05      	ldr	r3, [pc, #20]	; (800e488 <std+0x40>)
 800e474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e476:	4b05      	ldr	r3, [pc, #20]	; (800e48c <std+0x44>)
 800e478:	6224      	str	r4, [r4, #32]
 800e47a:	6323      	str	r3, [r4, #48]	; 0x30
 800e47c:	bd10      	pop	{r4, pc}
 800e47e:	bf00      	nop
 800e480:	0800f289 	.word	0x0800f289
 800e484:	0800f2ab 	.word	0x0800f2ab
 800e488:	0800f2e3 	.word	0x0800f2e3
 800e48c:	0800f307 	.word	0x0800f307

0800e490 <_cleanup_r>:
 800e490:	4901      	ldr	r1, [pc, #4]	; (800e498 <_cleanup_r+0x8>)
 800e492:	f000 b8af 	b.w	800e5f4 <_fwalk_reent>
 800e496:	bf00      	nop
 800e498:	080102e5 	.word	0x080102e5

0800e49c <__sfmoreglue>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	1e4a      	subs	r2, r1, #1
 800e4a0:	2568      	movs	r5, #104	; 0x68
 800e4a2:	4355      	muls	r5, r2
 800e4a4:	460e      	mov	r6, r1
 800e4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4aa:	f000 f901 	bl	800e6b0 <_malloc_r>
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	b140      	cbz	r0, 800e4c4 <__sfmoreglue+0x28>
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800e4b8:	300c      	adds	r0, #12
 800e4ba:	60a0      	str	r0, [r4, #8]
 800e4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4c0:	f000 f8ed 	bl	800e69e <memset>
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}

0800e4c8 <__sfp_lock_acquire>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	; (800e4d0 <__sfp_lock_acquire+0x8>)
 800e4ca:	f000 b8d8 	b.w	800e67e <__retarget_lock_acquire_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	20004d28 	.word	0x20004d28

0800e4d4 <__sfp_lock_release>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__sfp_lock_release+0x8>)
 800e4d6:	f000 b8d3 	b.w	800e680 <__retarget_lock_release_recursive>
 800e4da:	bf00      	nop
 800e4dc:	20004d28 	.word	0x20004d28

0800e4e0 <__sinit_lock_acquire>:
 800e4e0:	4801      	ldr	r0, [pc, #4]	; (800e4e8 <__sinit_lock_acquire+0x8>)
 800e4e2:	f000 b8cc 	b.w	800e67e <__retarget_lock_acquire_recursive>
 800e4e6:	bf00      	nop
 800e4e8:	20004d23 	.word	0x20004d23

0800e4ec <__sinit_lock_release>:
 800e4ec:	4801      	ldr	r0, [pc, #4]	; (800e4f4 <__sinit_lock_release+0x8>)
 800e4ee:	f000 b8c7 	b.w	800e680 <__retarget_lock_release_recursive>
 800e4f2:	bf00      	nop
 800e4f4:	20004d23 	.word	0x20004d23

0800e4f8 <__sinit>:
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	f7ff fff0 	bl	800e4e0 <__sinit_lock_acquire>
 800e500:	69a3      	ldr	r3, [r4, #24]
 800e502:	b11b      	cbz	r3, 800e50c <__sinit+0x14>
 800e504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e508:	f7ff bff0 	b.w	800e4ec <__sinit_lock_release>
 800e50c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e510:	6523      	str	r3, [r4, #80]	; 0x50
 800e512:	4b13      	ldr	r3, [pc, #76]	; (800e560 <__sinit+0x68>)
 800e514:	4a13      	ldr	r2, [pc, #76]	; (800e564 <__sinit+0x6c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	62a2      	str	r2, [r4, #40]	; 0x28
 800e51a:	42a3      	cmp	r3, r4
 800e51c:	bf04      	itt	eq
 800e51e:	2301      	moveq	r3, #1
 800e520:	61a3      	streq	r3, [r4, #24]
 800e522:	4620      	mov	r0, r4
 800e524:	f000 f820 	bl	800e568 <__sfp>
 800e528:	6060      	str	r0, [r4, #4]
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 f81c 	bl	800e568 <__sfp>
 800e530:	60a0      	str	r0, [r4, #8]
 800e532:	4620      	mov	r0, r4
 800e534:	f000 f818 	bl	800e568 <__sfp>
 800e538:	2200      	movs	r2, #0
 800e53a:	60e0      	str	r0, [r4, #12]
 800e53c:	2104      	movs	r1, #4
 800e53e:	6860      	ldr	r0, [r4, #4]
 800e540:	f7ff ff82 	bl	800e448 <std>
 800e544:	68a0      	ldr	r0, [r4, #8]
 800e546:	2201      	movs	r2, #1
 800e548:	2109      	movs	r1, #9
 800e54a:	f7ff ff7d 	bl	800e448 <std>
 800e54e:	68e0      	ldr	r0, [r4, #12]
 800e550:	2202      	movs	r2, #2
 800e552:	2112      	movs	r1, #18
 800e554:	f7ff ff78 	bl	800e448 <std>
 800e558:	2301      	movs	r3, #1
 800e55a:	61a3      	str	r3, [r4, #24]
 800e55c:	e7d2      	b.n	800e504 <__sinit+0xc>
 800e55e:	bf00      	nop
 800e560:	08012e60 	.word	0x08012e60
 800e564:	0800e491 	.word	0x0800e491

0800e568 <__sfp>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	4607      	mov	r7, r0
 800e56c:	f7ff ffac 	bl	800e4c8 <__sfp_lock_acquire>
 800e570:	4b1e      	ldr	r3, [pc, #120]	; (800e5ec <__sfp+0x84>)
 800e572:	681e      	ldr	r6, [r3, #0]
 800e574:	69b3      	ldr	r3, [r6, #24]
 800e576:	b913      	cbnz	r3, 800e57e <__sfp+0x16>
 800e578:	4630      	mov	r0, r6
 800e57a:	f7ff ffbd 	bl	800e4f8 <__sinit>
 800e57e:	3648      	adds	r6, #72	; 0x48
 800e580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e584:	3b01      	subs	r3, #1
 800e586:	d503      	bpl.n	800e590 <__sfp+0x28>
 800e588:	6833      	ldr	r3, [r6, #0]
 800e58a:	b30b      	cbz	r3, 800e5d0 <__sfp+0x68>
 800e58c:	6836      	ldr	r6, [r6, #0]
 800e58e:	e7f7      	b.n	800e580 <__sfp+0x18>
 800e590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e594:	b9d5      	cbnz	r5, 800e5cc <__sfp+0x64>
 800e596:	4b16      	ldr	r3, [pc, #88]	; (800e5f0 <__sfp+0x88>)
 800e598:	60e3      	str	r3, [r4, #12]
 800e59a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e59e:	6665      	str	r5, [r4, #100]	; 0x64
 800e5a0:	f000 f86c 	bl	800e67c <__retarget_lock_init_recursive>
 800e5a4:	f7ff ff96 	bl	800e4d4 <__sfp_lock_release>
 800e5a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5b0:	6025      	str	r5, [r4, #0]
 800e5b2:	61a5      	str	r5, [r4, #24]
 800e5b4:	2208      	movs	r2, #8
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5bc:	f000 f86f 	bl	800e69e <memset>
 800e5c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5cc:	3468      	adds	r4, #104	; 0x68
 800e5ce:	e7d9      	b.n	800e584 <__sfp+0x1c>
 800e5d0:	2104      	movs	r1, #4
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	f7ff ff62 	bl	800e49c <__sfmoreglue>
 800e5d8:	4604      	mov	r4, r0
 800e5da:	6030      	str	r0, [r6, #0]
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d1d5      	bne.n	800e58c <__sfp+0x24>
 800e5e0:	f7ff ff78 	bl	800e4d4 <__sfp_lock_release>
 800e5e4:	230c      	movs	r3, #12
 800e5e6:	603b      	str	r3, [r7, #0]
 800e5e8:	e7ee      	b.n	800e5c8 <__sfp+0x60>
 800e5ea:	bf00      	nop
 800e5ec:	08012e60 	.word	0x08012e60
 800e5f0:	ffff0001 	.word	0xffff0001

0800e5f4 <_fwalk_reent>:
 800e5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	4688      	mov	r8, r1
 800e5fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e600:	2700      	movs	r7, #0
 800e602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e606:	f1b9 0901 	subs.w	r9, r9, #1
 800e60a:	d505      	bpl.n	800e618 <_fwalk_reent+0x24>
 800e60c:	6824      	ldr	r4, [r4, #0]
 800e60e:	2c00      	cmp	r4, #0
 800e610:	d1f7      	bne.n	800e602 <_fwalk_reent+0xe>
 800e612:	4638      	mov	r0, r7
 800e614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e618:	89ab      	ldrh	r3, [r5, #12]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d907      	bls.n	800e62e <_fwalk_reent+0x3a>
 800e61e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e622:	3301      	adds	r3, #1
 800e624:	d003      	beq.n	800e62e <_fwalk_reent+0x3a>
 800e626:	4629      	mov	r1, r5
 800e628:	4630      	mov	r0, r6
 800e62a:	47c0      	blx	r8
 800e62c:	4307      	orrs	r7, r0
 800e62e:	3568      	adds	r5, #104	; 0x68
 800e630:	e7e9      	b.n	800e606 <_fwalk_reent+0x12>
	...

0800e634 <__libc_init_array>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	4d0d      	ldr	r5, [pc, #52]	; (800e66c <__libc_init_array+0x38>)
 800e638:	4c0d      	ldr	r4, [pc, #52]	; (800e670 <__libc_init_array+0x3c>)
 800e63a:	1b64      	subs	r4, r4, r5
 800e63c:	10a4      	asrs	r4, r4, #2
 800e63e:	2600      	movs	r6, #0
 800e640:	42a6      	cmp	r6, r4
 800e642:	d109      	bne.n	800e658 <__libc_init_array+0x24>
 800e644:	4d0b      	ldr	r5, [pc, #44]	; (800e674 <__libc_init_array+0x40>)
 800e646:	4c0c      	ldr	r4, [pc, #48]	; (800e678 <__libc_init_array+0x44>)
 800e648:	f004 f920 	bl	801288c <_init>
 800e64c:	1b64      	subs	r4, r4, r5
 800e64e:	10a4      	asrs	r4, r4, #2
 800e650:	2600      	movs	r6, #0
 800e652:	42a6      	cmp	r6, r4
 800e654:	d105      	bne.n	800e662 <__libc_init_array+0x2e>
 800e656:	bd70      	pop	{r4, r5, r6, pc}
 800e658:	f855 3b04 	ldr.w	r3, [r5], #4
 800e65c:	4798      	blx	r3
 800e65e:	3601      	adds	r6, #1
 800e660:	e7ee      	b.n	800e640 <__libc_init_array+0xc>
 800e662:	f855 3b04 	ldr.w	r3, [r5], #4
 800e666:	4798      	blx	r3
 800e668:	3601      	adds	r6, #1
 800e66a:	e7f2      	b.n	800e652 <__libc_init_array+0x1e>
 800e66c:	080133f8 	.word	0x080133f8
 800e670:	080133f8 	.word	0x080133f8
 800e674:	080133f8 	.word	0x080133f8
 800e678:	080133fc 	.word	0x080133fc

0800e67c <__retarget_lock_init_recursive>:
 800e67c:	4770      	bx	lr

0800e67e <__retarget_lock_acquire_recursive>:
 800e67e:	4770      	bx	lr

0800e680 <__retarget_lock_release_recursive>:
 800e680:	4770      	bx	lr

0800e682 <memcpy>:
 800e682:	440a      	add	r2, r1
 800e684:	4291      	cmp	r1, r2
 800e686:	f100 33ff 	add.w	r3, r0, #4294967295
 800e68a:	d100      	bne.n	800e68e <memcpy+0xc>
 800e68c:	4770      	bx	lr
 800e68e:	b510      	push	{r4, lr}
 800e690:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e694:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e698:	4291      	cmp	r1, r2
 800e69a:	d1f9      	bne.n	800e690 <memcpy+0xe>
 800e69c:	bd10      	pop	{r4, pc}

0800e69e <memset>:
 800e69e:	4402      	add	r2, r0
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d100      	bne.n	800e6a8 <memset+0xa>
 800e6a6:	4770      	bx	lr
 800e6a8:	f803 1b01 	strb.w	r1, [r3], #1
 800e6ac:	e7f9      	b.n	800e6a2 <memset+0x4>
	...

0800e6b0 <_malloc_r>:
 800e6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b2:	1ccd      	adds	r5, r1, #3
 800e6b4:	f025 0503 	bic.w	r5, r5, #3
 800e6b8:	3508      	adds	r5, #8
 800e6ba:	2d0c      	cmp	r5, #12
 800e6bc:	bf38      	it	cc
 800e6be:	250c      	movcc	r5, #12
 800e6c0:	2d00      	cmp	r5, #0
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	db01      	blt.n	800e6ca <_malloc_r+0x1a>
 800e6c6:	42a9      	cmp	r1, r5
 800e6c8:	d903      	bls.n	800e6d2 <_malloc_r+0x22>
 800e6ca:	230c      	movs	r3, #12
 800e6cc:	6033      	str	r3, [r6, #0]
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6d2:	f001 fec5 	bl	8010460 <__malloc_lock>
 800e6d6:	4921      	ldr	r1, [pc, #132]	; (800e75c <_malloc_r+0xac>)
 800e6d8:	680a      	ldr	r2, [r1, #0]
 800e6da:	4614      	mov	r4, r2
 800e6dc:	b99c      	cbnz	r4, 800e706 <_malloc_r+0x56>
 800e6de:	4f20      	ldr	r7, [pc, #128]	; (800e760 <_malloc_r+0xb0>)
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	b923      	cbnz	r3, 800e6ee <_malloc_r+0x3e>
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f000 fd9e 	bl	800f228 <_sbrk_r>
 800e6ec:	6038      	str	r0, [r7, #0]
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f000 fd99 	bl	800f228 <_sbrk_r>
 800e6f6:	1c43      	adds	r3, r0, #1
 800e6f8:	d123      	bne.n	800e742 <_malloc_r+0x92>
 800e6fa:	230c      	movs	r3, #12
 800e6fc:	6033      	str	r3, [r6, #0]
 800e6fe:	4630      	mov	r0, r6
 800e700:	f001 feb4 	bl	801046c <__malloc_unlock>
 800e704:	e7e3      	b.n	800e6ce <_malloc_r+0x1e>
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	1b5b      	subs	r3, r3, r5
 800e70a:	d417      	bmi.n	800e73c <_malloc_r+0x8c>
 800e70c:	2b0b      	cmp	r3, #11
 800e70e:	d903      	bls.n	800e718 <_malloc_r+0x68>
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	441c      	add	r4, r3
 800e714:	6025      	str	r5, [r4, #0]
 800e716:	e004      	b.n	800e722 <_malloc_r+0x72>
 800e718:	6863      	ldr	r3, [r4, #4]
 800e71a:	42a2      	cmp	r2, r4
 800e71c:	bf0c      	ite	eq
 800e71e:	600b      	streq	r3, [r1, #0]
 800e720:	6053      	strne	r3, [r2, #4]
 800e722:	4630      	mov	r0, r6
 800e724:	f001 fea2 	bl	801046c <__malloc_unlock>
 800e728:	f104 000b 	add.w	r0, r4, #11
 800e72c:	1d23      	adds	r3, r4, #4
 800e72e:	f020 0007 	bic.w	r0, r0, #7
 800e732:	1ac2      	subs	r2, r0, r3
 800e734:	d0cc      	beq.n	800e6d0 <_malloc_r+0x20>
 800e736:	1a1b      	subs	r3, r3, r0
 800e738:	50a3      	str	r3, [r4, r2]
 800e73a:	e7c9      	b.n	800e6d0 <_malloc_r+0x20>
 800e73c:	4622      	mov	r2, r4
 800e73e:	6864      	ldr	r4, [r4, #4]
 800e740:	e7cc      	b.n	800e6dc <_malloc_r+0x2c>
 800e742:	1cc4      	adds	r4, r0, #3
 800e744:	f024 0403 	bic.w	r4, r4, #3
 800e748:	42a0      	cmp	r0, r4
 800e74a:	d0e3      	beq.n	800e714 <_malloc_r+0x64>
 800e74c:	1a21      	subs	r1, r4, r0
 800e74e:	4630      	mov	r0, r6
 800e750:	f000 fd6a 	bl	800f228 <_sbrk_r>
 800e754:	3001      	adds	r0, #1
 800e756:	d1dd      	bne.n	800e714 <_malloc_r+0x64>
 800e758:	e7cf      	b.n	800e6fa <_malloc_r+0x4a>
 800e75a:	bf00      	nop
 800e75c:	200044e8 	.word	0x200044e8
 800e760:	200044ec 	.word	0x200044ec

0800e764 <__cvt>:
 800e764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e768:	ec55 4b10 	vmov	r4, r5, d0
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	460e      	mov	r6, r1
 800e770:	4619      	mov	r1, r3
 800e772:	462b      	mov	r3, r5
 800e774:	bfbb      	ittet	lt
 800e776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e77a:	461d      	movlt	r5, r3
 800e77c:	2300      	movge	r3, #0
 800e77e:	232d      	movlt	r3, #45	; 0x2d
 800e780:	700b      	strb	r3, [r1, #0]
 800e782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e784:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e788:	4691      	mov	r9, r2
 800e78a:	f023 0820 	bic.w	r8, r3, #32
 800e78e:	bfbc      	itt	lt
 800e790:	4622      	movlt	r2, r4
 800e792:	4614      	movlt	r4, r2
 800e794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e798:	d005      	beq.n	800e7a6 <__cvt+0x42>
 800e79a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e79e:	d100      	bne.n	800e7a2 <__cvt+0x3e>
 800e7a0:	3601      	adds	r6, #1
 800e7a2:	2102      	movs	r1, #2
 800e7a4:	e000      	b.n	800e7a8 <__cvt+0x44>
 800e7a6:	2103      	movs	r1, #3
 800e7a8:	ab03      	add	r3, sp, #12
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	ab02      	add	r3, sp, #8
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	ec45 4b10 	vmov	d0, r4, r5
 800e7b4:	4653      	mov	r3, sl
 800e7b6:	4632      	mov	r2, r6
 800e7b8:	f000 ff22 	bl	800f600 <_dtoa_r>
 800e7bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	d102      	bne.n	800e7ca <__cvt+0x66>
 800e7c4:	f019 0f01 	tst.w	r9, #1
 800e7c8:	d022      	beq.n	800e810 <__cvt+0xac>
 800e7ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7ce:	eb07 0906 	add.w	r9, r7, r6
 800e7d2:	d110      	bne.n	800e7f6 <__cvt+0x92>
 800e7d4:	783b      	ldrb	r3, [r7, #0]
 800e7d6:	2b30      	cmp	r3, #48	; 0x30
 800e7d8:	d10a      	bne.n	800e7f0 <__cvt+0x8c>
 800e7da:	2200      	movs	r2, #0
 800e7dc:	2300      	movs	r3, #0
 800e7de:	4620      	mov	r0, r4
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	f7f2 f979 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7e6:	b918      	cbnz	r0, 800e7f0 <__cvt+0x8c>
 800e7e8:	f1c6 0601 	rsb	r6, r6, #1
 800e7ec:	f8ca 6000 	str.w	r6, [sl]
 800e7f0:	f8da 3000 	ldr.w	r3, [sl]
 800e7f4:	4499      	add	r9, r3
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7f2 f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e802:	b108      	cbz	r0, 800e808 <__cvt+0xa4>
 800e804:	f8cd 900c 	str.w	r9, [sp, #12]
 800e808:	2230      	movs	r2, #48	; 0x30
 800e80a:	9b03      	ldr	r3, [sp, #12]
 800e80c:	454b      	cmp	r3, r9
 800e80e:	d307      	bcc.n	800e820 <__cvt+0xbc>
 800e810:	9b03      	ldr	r3, [sp, #12]
 800e812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e814:	1bdb      	subs	r3, r3, r7
 800e816:	4638      	mov	r0, r7
 800e818:	6013      	str	r3, [r2, #0]
 800e81a:	b004      	add	sp, #16
 800e81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e820:	1c59      	adds	r1, r3, #1
 800e822:	9103      	str	r1, [sp, #12]
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	e7f0      	b.n	800e80a <__cvt+0xa6>

0800e828 <__exponent>:
 800e828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e82a:	4603      	mov	r3, r0
 800e82c:	2900      	cmp	r1, #0
 800e82e:	bfb8      	it	lt
 800e830:	4249      	neglt	r1, r1
 800e832:	f803 2b02 	strb.w	r2, [r3], #2
 800e836:	bfb4      	ite	lt
 800e838:	222d      	movlt	r2, #45	; 0x2d
 800e83a:	222b      	movge	r2, #43	; 0x2b
 800e83c:	2909      	cmp	r1, #9
 800e83e:	7042      	strb	r2, [r0, #1]
 800e840:	dd2a      	ble.n	800e898 <__exponent+0x70>
 800e842:	f10d 0407 	add.w	r4, sp, #7
 800e846:	46a4      	mov	ip, r4
 800e848:	270a      	movs	r7, #10
 800e84a:	46a6      	mov	lr, r4
 800e84c:	460a      	mov	r2, r1
 800e84e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e852:	fb07 1516 	mls	r5, r7, r6, r1
 800e856:	3530      	adds	r5, #48	; 0x30
 800e858:	2a63      	cmp	r2, #99	; 0x63
 800e85a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e85e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e862:	4631      	mov	r1, r6
 800e864:	dcf1      	bgt.n	800e84a <__exponent+0x22>
 800e866:	3130      	adds	r1, #48	; 0x30
 800e868:	f1ae 0502 	sub.w	r5, lr, #2
 800e86c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e870:	1c44      	adds	r4, r0, #1
 800e872:	4629      	mov	r1, r5
 800e874:	4561      	cmp	r1, ip
 800e876:	d30a      	bcc.n	800e88e <__exponent+0x66>
 800e878:	f10d 0209 	add.w	r2, sp, #9
 800e87c:	eba2 020e 	sub.w	r2, r2, lr
 800e880:	4565      	cmp	r5, ip
 800e882:	bf88      	it	hi
 800e884:	2200      	movhi	r2, #0
 800e886:	4413      	add	r3, r2
 800e888:	1a18      	subs	r0, r3, r0
 800e88a:	b003      	add	sp, #12
 800e88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e892:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e896:	e7ed      	b.n	800e874 <__exponent+0x4c>
 800e898:	2330      	movs	r3, #48	; 0x30
 800e89a:	3130      	adds	r1, #48	; 0x30
 800e89c:	7083      	strb	r3, [r0, #2]
 800e89e:	70c1      	strb	r1, [r0, #3]
 800e8a0:	1d03      	adds	r3, r0, #4
 800e8a2:	e7f1      	b.n	800e888 <__exponent+0x60>

0800e8a4 <_printf_float>:
 800e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a8:	ed2d 8b02 	vpush	{d8}
 800e8ac:	b08d      	sub	sp, #52	; 0x34
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e8b4:	4616      	mov	r6, r2
 800e8b6:	461f      	mov	r7, r3
 800e8b8:	4605      	mov	r5, r0
 800e8ba:	f001 fd4f 	bl	801035c <_localeconv_r>
 800e8be:	f8d0 a000 	ldr.w	sl, [r0]
 800e8c2:	4650      	mov	r0, sl
 800e8c4:	f7f1 fc8c 	bl	80001e0 <strlen>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800e8cc:	6823      	ldr	r3, [r4, #0]
 800e8ce:	9305      	str	r3, [sp, #20]
 800e8d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e8d8:	3307      	adds	r3, #7
 800e8da:	f023 0307 	bic.w	r3, r3, #7
 800e8de:	f103 0208 	add.w	r2, r3, #8
 800e8e2:	f8c8 2000 	str.w	r2, [r8]
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e8ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e8f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e8f6:	9307      	str	r3, [sp, #28]
 800e8f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8fc:	ee08 0a10 	vmov	s16, r0
 800e900:	4b9f      	ldr	r3, [pc, #636]	; (800eb80 <_printf_float+0x2dc>)
 800e902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e906:	f04f 32ff 	mov.w	r2, #4294967295
 800e90a:	f7f2 f917 	bl	8000b3c <__aeabi_dcmpun>
 800e90e:	bb88      	cbnz	r0, 800e974 <_printf_float+0xd0>
 800e910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e914:	4b9a      	ldr	r3, [pc, #616]	; (800eb80 <_printf_float+0x2dc>)
 800e916:	f04f 32ff 	mov.w	r2, #4294967295
 800e91a:	f7f2 f8f1 	bl	8000b00 <__aeabi_dcmple>
 800e91e:	bb48      	cbnz	r0, 800e974 <_printf_float+0xd0>
 800e920:	2200      	movs	r2, #0
 800e922:	2300      	movs	r3, #0
 800e924:	4640      	mov	r0, r8
 800e926:	4649      	mov	r1, r9
 800e928:	f7f2 f8e0 	bl	8000aec <__aeabi_dcmplt>
 800e92c:	b110      	cbz	r0, 800e934 <_printf_float+0x90>
 800e92e:	232d      	movs	r3, #45	; 0x2d
 800e930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e934:	4b93      	ldr	r3, [pc, #588]	; (800eb84 <_printf_float+0x2e0>)
 800e936:	4894      	ldr	r0, [pc, #592]	; (800eb88 <_printf_float+0x2e4>)
 800e938:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e93c:	bf94      	ite	ls
 800e93e:	4698      	movls	r8, r3
 800e940:	4680      	movhi	r8, r0
 800e942:	2303      	movs	r3, #3
 800e944:	6123      	str	r3, [r4, #16]
 800e946:	9b05      	ldr	r3, [sp, #20]
 800e948:	f023 0204 	bic.w	r2, r3, #4
 800e94c:	6022      	str	r2, [r4, #0]
 800e94e:	f04f 0900 	mov.w	r9, #0
 800e952:	9700      	str	r7, [sp, #0]
 800e954:	4633      	mov	r3, r6
 800e956:	aa0b      	add	r2, sp, #44	; 0x2c
 800e958:	4621      	mov	r1, r4
 800e95a:	4628      	mov	r0, r5
 800e95c:	f000 f9d8 	bl	800ed10 <_printf_common>
 800e960:	3001      	adds	r0, #1
 800e962:	f040 8090 	bne.w	800ea86 <_printf_float+0x1e2>
 800e966:	f04f 30ff 	mov.w	r0, #4294967295
 800e96a:	b00d      	add	sp, #52	; 0x34
 800e96c:	ecbd 8b02 	vpop	{d8}
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e974:	4642      	mov	r2, r8
 800e976:	464b      	mov	r3, r9
 800e978:	4640      	mov	r0, r8
 800e97a:	4649      	mov	r1, r9
 800e97c:	f7f2 f8de 	bl	8000b3c <__aeabi_dcmpun>
 800e980:	b140      	cbz	r0, 800e994 <_printf_float+0xf0>
 800e982:	464b      	mov	r3, r9
 800e984:	2b00      	cmp	r3, #0
 800e986:	bfbc      	itt	lt
 800e988:	232d      	movlt	r3, #45	; 0x2d
 800e98a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e98e:	487f      	ldr	r0, [pc, #508]	; (800eb8c <_printf_float+0x2e8>)
 800e990:	4b7f      	ldr	r3, [pc, #508]	; (800eb90 <_printf_float+0x2ec>)
 800e992:	e7d1      	b.n	800e938 <_printf_float+0x94>
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e99a:	9206      	str	r2, [sp, #24]
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	d13f      	bne.n	800ea20 <_printf_float+0x17c>
 800e9a0:	2306      	movs	r3, #6
 800e9a2:	6063      	str	r3, [r4, #4]
 800e9a4:	9b05      	ldr	r3, [sp, #20]
 800e9a6:	6861      	ldr	r1, [r4, #4]
 800e9a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	9303      	str	r3, [sp, #12]
 800e9b0:	ab0a      	add	r3, sp, #40	; 0x28
 800e9b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e9b6:	ab09      	add	r3, sp, #36	; 0x24
 800e9b8:	ec49 8b10 	vmov	d0, r8, r9
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	6022      	str	r2, [r4, #0]
 800e9c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f7ff fecd 	bl	800e764 <__cvt>
 800e9ca:	9b06      	ldr	r3, [sp, #24]
 800e9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9ce:	2b47      	cmp	r3, #71	; 0x47
 800e9d0:	4680      	mov	r8, r0
 800e9d2:	d108      	bne.n	800e9e6 <_printf_float+0x142>
 800e9d4:	1cc8      	adds	r0, r1, #3
 800e9d6:	db02      	blt.n	800e9de <_printf_float+0x13a>
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	4299      	cmp	r1, r3
 800e9dc:	dd41      	ble.n	800ea62 <_printf_float+0x1be>
 800e9de:	f1ab 0b02 	sub.w	fp, fp, #2
 800e9e2:	fa5f fb8b 	uxtb.w	fp, fp
 800e9e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e9ea:	d820      	bhi.n	800ea2e <_printf_float+0x18a>
 800e9ec:	3901      	subs	r1, #1
 800e9ee:	465a      	mov	r2, fp
 800e9f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e9f4:	9109      	str	r1, [sp, #36]	; 0x24
 800e9f6:	f7ff ff17 	bl	800e828 <__exponent>
 800e9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9fc:	1813      	adds	r3, r2, r0
 800e9fe:	2a01      	cmp	r2, #1
 800ea00:	4681      	mov	r9, r0
 800ea02:	6123      	str	r3, [r4, #16]
 800ea04:	dc02      	bgt.n	800ea0c <_printf_float+0x168>
 800ea06:	6822      	ldr	r2, [r4, #0]
 800ea08:	07d2      	lsls	r2, r2, #31
 800ea0a:	d501      	bpl.n	800ea10 <_printf_float+0x16c>
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	6123      	str	r3, [r4, #16]
 800ea10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d09c      	beq.n	800e952 <_printf_float+0xae>
 800ea18:	232d      	movs	r3, #45	; 0x2d
 800ea1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea1e:	e798      	b.n	800e952 <_printf_float+0xae>
 800ea20:	9a06      	ldr	r2, [sp, #24]
 800ea22:	2a47      	cmp	r2, #71	; 0x47
 800ea24:	d1be      	bne.n	800e9a4 <_printf_float+0x100>
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1bc      	bne.n	800e9a4 <_printf_float+0x100>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e7b9      	b.n	800e9a2 <_printf_float+0xfe>
 800ea2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ea32:	d118      	bne.n	800ea66 <_printf_float+0x1c2>
 800ea34:	2900      	cmp	r1, #0
 800ea36:	6863      	ldr	r3, [r4, #4]
 800ea38:	dd0b      	ble.n	800ea52 <_printf_float+0x1ae>
 800ea3a:	6121      	str	r1, [r4, #16]
 800ea3c:	b913      	cbnz	r3, 800ea44 <_printf_float+0x1a0>
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	07d0      	lsls	r0, r2, #31
 800ea42:	d502      	bpl.n	800ea4a <_printf_float+0x1a6>
 800ea44:	3301      	adds	r3, #1
 800ea46:	440b      	add	r3, r1
 800ea48:	6123      	str	r3, [r4, #16]
 800ea4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea4c:	f04f 0900 	mov.w	r9, #0
 800ea50:	e7de      	b.n	800ea10 <_printf_float+0x16c>
 800ea52:	b913      	cbnz	r3, 800ea5a <_printf_float+0x1b6>
 800ea54:	6822      	ldr	r2, [r4, #0]
 800ea56:	07d2      	lsls	r2, r2, #31
 800ea58:	d501      	bpl.n	800ea5e <_printf_float+0x1ba>
 800ea5a:	3302      	adds	r3, #2
 800ea5c:	e7f4      	b.n	800ea48 <_printf_float+0x1a4>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e7f2      	b.n	800ea48 <_printf_float+0x1a4>
 800ea62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ea66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea68:	4299      	cmp	r1, r3
 800ea6a:	db05      	blt.n	800ea78 <_printf_float+0x1d4>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	6121      	str	r1, [r4, #16]
 800ea70:	07d8      	lsls	r0, r3, #31
 800ea72:	d5ea      	bpl.n	800ea4a <_printf_float+0x1a6>
 800ea74:	1c4b      	adds	r3, r1, #1
 800ea76:	e7e7      	b.n	800ea48 <_printf_float+0x1a4>
 800ea78:	2900      	cmp	r1, #0
 800ea7a:	bfd4      	ite	le
 800ea7c:	f1c1 0202 	rsble	r2, r1, #2
 800ea80:	2201      	movgt	r2, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	e7e0      	b.n	800ea48 <_printf_float+0x1a4>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	055a      	lsls	r2, r3, #21
 800ea8a:	d407      	bmi.n	800ea9c <_printf_float+0x1f8>
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	4642      	mov	r2, r8
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	d12c      	bne.n	800eaf4 <_printf_float+0x250>
 800ea9a:	e764      	b.n	800e966 <_printf_float+0xc2>
 800ea9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eaa0:	f240 80e0 	bls.w	800ec64 <_printf_float+0x3c0>
 800eaa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f7f2 f814 	bl	8000ad8 <__aeabi_dcmpeq>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d034      	beq.n	800eb1e <_printf_float+0x27a>
 800eab4:	4a37      	ldr	r2, [pc, #220]	; (800eb94 <_printf_float+0x2f0>)
 800eab6:	2301      	movs	r3, #1
 800eab8:	4631      	mov	r1, r6
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b8      	blx	r7
 800eabe:	3001      	adds	r0, #1
 800eac0:	f43f af51 	beq.w	800e966 <_printf_float+0xc2>
 800eac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eac8:	429a      	cmp	r2, r3
 800eaca:	db02      	blt.n	800ead2 <_printf_float+0x22e>
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	07d8      	lsls	r0, r3, #31
 800ead0:	d510      	bpl.n	800eaf4 <_printf_float+0x250>
 800ead2:	ee18 3a10 	vmov	r3, s16
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f af41 	beq.w	800e966 <_printf_float+0xc2>
 800eae4:	f04f 0800 	mov.w	r8, #0
 800eae8:	f104 091a 	add.w	r9, r4, #26
 800eaec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	4543      	cmp	r3, r8
 800eaf2:	dc09      	bgt.n	800eb08 <_printf_float+0x264>
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	079b      	lsls	r3, r3, #30
 800eaf8:	f100 8105 	bmi.w	800ed06 <_printf_float+0x462>
 800eafc:	68e0      	ldr	r0, [r4, #12]
 800eafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb00:	4298      	cmp	r0, r3
 800eb02:	bfb8      	it	lt
 800eb04:	4618      	movlt	r0, r3
 800eb06:	e730      	b.n	800e96a <_printf_float+0xc6>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	464a      	mov	r2, r9
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	4628      	mov	r0, r5
 800eb10:	47b8      	blx	r7
 800eb12:	3001      	adds	r0, #1
 800eb14:	f43f af27 	beq.w	800e966 <_printf_float+0xc2>
 800eb18:	f108 0801 	add.w	r8, r8, #1
 800eb1c:	e7e6      	b.n	800eaec <_printf_float+0x248>
 800eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	dc39      	bgt.n	800eb98 <_printf_float+0x2f4>
 800eb24:	4a1b      	ldr	r2, [pc, #108]	; (800eb94 <_printf_float+0x2f0>)
 800eb26:	2301      	movs	r3, #1
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f af19 	beq.w	800e966 <_printf_float+0xc2>
 800eb34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	d102      	bne.n	800eb42 <_printf_float+0x29e>
 800eb3c:	6823      	ldr	r3, [r4, #0]
 800eb3e:	07d9      	lsls	r1, r3, #31
 800eb40:	d5d8      	bpl.n	800eaf4 <_printf_float+0x250>
 800eb42:	ee18 3a10 	vmov	r3, s16
 800eb46:	4652      	mov	r2, sl
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	47b8      	blx	r7
 800eb4e:	3001      	adds	r0, #1
 800eb50:	f43f af09 	beq.w	800e966 <_printf_float+0xc2>
 800eb54:	f04f 0900 	mov.w	r9, #0
 800eb58:	f104 0a1a 	add.w	sl, r4, #26
 800eb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb5e:	425b      	negs	r3, r3
 800eb60:	454b      	cmp	r3, r9
 800eb62:	dc01      	bgt.n	800eb68 <_printf_float+0x2c4>
 800eb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb66:	e792      	b.n	800ea8e <_printf_float+0x1ea>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4652      	mov	r2, sl
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	47b8      	blx	r7
 800eb72:	3001      	adds	r0, #1
 800eb74:	f43f aef7 	beq.w	800e966 <_printf_float+0xc2>
 800eb78:	f109 0901 	add.w	r9, r9, #1
 800eb7c:	e7ee      	b.n	800eb5c <_printf_float+0x2b8>
 800eb7e:	bf00      	nop
 800eb80:	7fefffff 	.word	0x7fefffff
 800eb84:	08012e64 	.word	0x08012e64
 800eb88:	08012e68 	.word	0x08012e68
 800eb8c:	08012e70 	.word	0x08012e70
 800eb90:	08012e6c 	.word	0x08012e6c
 800eb94:	08012e74 	.word	0x08012e74
 800eb98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	bfa8      	it	ge
 800eba0:	461a      	movge	r2, r3
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	4691      	mov	r9, r2
 800eba6:	dc37      	bgt.n	800ec18 <_printf_float+0x374>
 800eba8:	f04f 0b00 	mov.w	fp, #0
 800ebac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebb0:	f104 021a 	add.w	r2, r4, #26
 800ebb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebb6:	9305      	str	r3, [sp, #20]
 800ebb8:	eba3 0309 	sub.w	r3, r3, r9
 800ebbc:	455b      	cmp	r3, fp
 800ebbe:	dc33      	bgt.n	800ec28 <_printf_float+0x384>
 800ebc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	db3b      	blt.n	800ec40 <_printf_float+0x39c>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	07da      	lsls	r2, r3, #31
 800ebcc:	d438      	bmi.n	800ec40 <_printf_float+0x39c>
 800ebce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebd0:	9b05      	ldr	r3, [sp, #20]
 800ebd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	eba2 0901 	sub.w	r9, r2, r1
 800ebda:	4599      	cmp	r9, r3
 800ebdc:	bfa8      	it	ge
 800ebde:	4699      	movge	r9, r3
 800ebe0:	f1b9 0f00 	cmp.w	r9, #0
 800ebe4:	dc35      	bgt.n	800ec52 <_printf_float+0x3ae>
 800ebe6:	f04f 0800 	mov.w	r8, #0
 800ebea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebee:	f104 0a1a 	add.w	sl, r4, #26
 800ebf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebf6:	1a9b      	subs	r3, r3, r2
 800ebf8:	eba3 0309 	sub.w	r3, r3, r9
 800ebfc:	4543      	cmp	r3, r8
 800ebfe:	f77f af79 	ble.w	800eaf4 <_printf_float+0x250>
 800ec02:	2301      	movs	r3, #1
 800ec04:	4652      	mov	r2, sl
 800ec06:	4631      	mov	r1, r6
 800ec08:	4628      	mov	r0, r5
 800ec0a:	47b8      	blx	r7
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	f43f aeaa 	beq.w	800e966 <_printf_float+0xc2>
 800ec12:	f108 0801 	add.w	r8, r8, #1
 800ec16:	e7ec      	b.n	800ebf2 <_printf_float+0x34e>
 800ec18:	4613      	mov	r3, r2
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	4628      	mov	r0, r5
 800ec20:	47b8      	blx	r7
 800ec22:	3001      	adds	r0, #1
 800ec24:	d1c0      	bne.n	800eba8 <_printf_float+0x304>
 800ec26:	e69e      	b.n	800e966 <_printf_float+0xc2>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	9205      	str	r2, [sp, #20]
 800ec30:	47b8      	blx	r7
 800ec32:	3001      	adds	r0, #1
 800ec34:	f43f ae97 	beq.w	800e966 <_printf_float+0xc2>
 800ec38:	9a05      	ldr	r2, [sp, #20]
 800ec3a:	f10b 0b01 	add.w	fp, fp, #1
 800ec3e:	e7b9      	b.n	800ebb4 <_printf_float+0x310>
 800ec40:	ee18 3a10 	vmov	r3, s16
 800ec44:	4652      	mov	r2, sl
 800ec46:	4631      	mov	r1, r6
 800ec48:	4628      	mov	r0, r5
 800ec4a:	47b8      	blx	r7
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d1be      	bne.n	800ebce <_printf_float+0x32a>
 800ec50:	e689      	b.n	800e966 <_printf_float+0xc2>
 800ec52:	9a05      	ldr	r2, [sp, #20]
 800ec54:	464b      	mov	r3, r9
 800ec56:	4442      	add	r2, r8
 800ec58:	4631      	mov	r1, r6
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	47b8      	blx	r7
 800ec5e:	3001      	adds	r0, #1
 800ec60:	d1c1      	bne.n	800ebe6 <_printf_float+0x342>
 800ec62:	e680      	b.n	800e966 <_printf_float+0xc2>
 800ec64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec66:	2a01      	cmp	r2, #1
 800ec68:	dc01      	bgt.n	800ec6e <_printf_float+0x3ca>
 800ec6a:	07db      	lsls	r3, r3, #31
 800ec6c:	d538      	bpl.n	800ece0 <_printf_float+0x43c>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4642      	mov	r2, r8
 800ec72:	4631      	mov	r1, r6
 800ec74:	4628      	mov	r0, r5
 800ec76:	47b8      	blx	r7
 800ec78:	3001      	adds	r0, #1
 800ec7a:	f43f ae74 	beq.w	800e966 <_printf_float+0xc2>
 800ec7e:	ee18 3a10 	vmov	r3, s16
 800ec82:	4652      	mov	r2, sl
 800ec84:	4631      	mov	r1, r6
 800ec86:	4628      	mov	r0, r5
 800ec88:	47b8      	blx	r7
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	f43f ae6b 	beq.w	800e966 <_printf_float+0xc2>
 800ec90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec94:	2200      	movs	r2, #0
 800ec96:	2300      	movs	r3, #0
 800ec98:	f7f1 ff1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec9c:	b9d8      	cbnz	r0, 800ecd6 <_printf_float+0x432>
 800ec9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca0:	f108 0201 	add.w	r2, r8, #1
 800eca4:	3b01      	subs	r3, #1
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b8      	blx	r7
 800ecac:	3001      	adds	r0, #1
 800ecae:	d10e      	bne.n	800ecce <_printf_float+0x42a>
 800ecb0:	e659      	b.n	800e966 <_printf_float+0xc2>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	4652      	mov	r2, sl
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4628      	mov	r0, r5
 800ecba:	47b8      	blx	r7
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	f43f ae52 	beq.w	800e966 <_printf_float+0xc2>
 800ecc2:	f108 0801 	add.w	r8, r8, #1
 800ecc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	4543      	cmp	r3, r8
 800eccc:	dcf1      	bgt.n	800ecb2 <_printf_float+0x40e>
 800ecce:	464b      	mov	r3, r9
 800ecd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ecd4:	e6dc      	b.n	800ea90 <_printf_float+0x1ec>
 800ecd6:	f04f 0800 	mov.w	r8, #0
 800ecda:	f104 0a1a 	add.w	sl, r4, #26
 800ecde:	e7f2      	b.n	800ecc6 <_printf_float+0x422>
 800ece0:	2301      	movs	r3, #1
 800ece2:	4642      	mov	r2, r8
 800ece4:	e7df      	b.n	800eca6 <_printf_float+0x402>
 800ece6:	2301      	movs	r3, #1
 800ece8:	464a      	mov	r2, r9
 800ecea:	4631      	mov	r1, r6
 800ecec:	4628      	mov	r0, r5
 800ecee:	47b8      	blx	r7
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	f43f ae38 	beq.w	800e966 <_printf_float+0xc2>
 800ecf6:	f108 0801 	add.w	r8, r8, #1
 800ecfa:	68e3      	ldr	r3, [r4, #12]
 800ecfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecfe:	1a5b      	subs	r3, r3, r1
 800ed00:	4543      	cmp	r3, r8
 800ed02:	dcf0      	bgt.n	800ece6 <_printf_float+0x442>
 800ed04:	e6fa      	b.n	800eafc <_printf_float+0x258>
 800ed06:	f04f 0800 	mov.w	r8, #0
 800ed0a:	f104 0919 	add.w	r9, r4, #25
 800ed0e:	e7f4      	b.n	800ecfa <_printf_float+0x456>

0800ed10 <_printf_common>:
 800ed10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed14:	4616      	mov	r6, r2
 800ed16:	4699      	mov	r9, r3
 800ed18:	688a      	ldr	r2, [r1, #8]
 800ed1a:	690b      	ldr	r3, [r1, #16]
 800ed1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed20:	4293      	cmp	r3, r2
 800ed22:	bfb8      	it	lt
 800ed24:	4613      	movlt	r3, r2
 800ed26:	6033      	str	r3, [r6, #0]
 800ed28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed2c:	4607      	mov	r7, r0
 800ed2e:	460c      	mov	r4, r1
 800ed30:	b10a      	cbz	r2, 800ed36 <_printf_common+0x26>
 800ed32:	3301      	adds	r3, #1
 800ed34:	6033      	str	r3, [r6, #0]
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	0699      	lsls	r1, r3, #26
 800ed3a:	bf42      	ittt	mi
 800ed3c:	6833      	ldrmi	r3, [r6, #0]
 800ed3e:	3302      	addmi	r3, #2
 800ed40:	6033      	strmi	r3, [r6, #0]
 800ed42:	6825      	ldr	r5, [r4, #0]
 800ed44:	f015 0506 	ands.w	r5, r5, #6
 800ed48:	d106      	bne.n	800ed58 <_printf_common+0x48>
 800ed4a:	f104 0a19 	add.w	sl, r4, #25
 800ed4e:	68e3      	ldr	r3, [r4, #12]
 800ed50:	6832      	ldr	r2, [r6, #0]
 800ed52:	1a9b      	subs	r3, r3, r2
 800ed54:	42ab      	cmp	r3, r5
 800ed56:	dc26      	bgt.n	800eda6 <_printf_common+0x96>
 800ed58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed5c:	1e13      	subs	r3, r2, #0
 800ed5e:	6822      	ldr	r2, [r4, #0]
 800ed60:	bf18      	it	ne
 800ed62:	2301      	movne	r3, #1
 800ed64:	0692      	lsls	r2, r2, #26
 800ed66:	d42b      	bmi.n	800edc0 <_printf_common+0xb0>
 800ed68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed6c:	4649      	mov	r1, r9
 800ed6e:	4638      	mov	r0, r7
 800ed70:	47c0      	blx	r8
 800ed72:	3001      	adds	r0, #1
 800ed74:	d01e      	beq.n	800edb4 <_printf_common+0xa4>
 800ed76:	6823      	ldr	r3, [r4, #0]
 800ed78:	68e5      	ldr	r5, [r4, #12]
 800ed7a:	6832      	ldr	r2, [r6, #0]
 800ed7c:	f003 0306 	and.w	r3, r3, #6
 800ed80:	2b04      	cmp	r3, #4
 800ed82:	bf08      	it	eq
 800ed84:	1aad      	subeq	r5, r5, r2
 800ed86:	68a3      	ldr	r3, [r4, #8]
 800ed88:	6922      	ldr	r2, [r4, #16]
 800ed8a:	bf0c      	ite	eq
 800ed8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed90:	2500      	movne	r5, #0
 800ed92:	4293      	cmp	r3, r2
 800ed94:	bfc4      	itt	gt
 800ed96:	1a9b      	subgt	r3, r3, r2
 800ed98:	18ed      	addgt	r5, r5, r3
 800ed9a:	2600      	movs	r6, #0
 800ed9c:	341a      	adds	r4, #26
 800ed9e:	42b5      	cmp	r5, r6
 800eda0:	d11a      	bne.n	800edd8 <_printf_common+0xc8>
 800eda2:	2000      	movs	r0, #0
 800eda4:	e008      	b.n	800edb8 <_printf_common+0xa8>
 800eda6:	2301      	movs	r3, #1
 800eda8:	4652      	mov	r2, sl
 800edaa:	4649      	mov	r1, r9
 800edac:	4638      	mov	r0, r7
 800edae:	47c0      	blx	r8
 800edb0:	3001      	adds	r0, #1
 800edb2:	d103      	bne.n	800edbc <_printf_common+0xac>
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbc:	3501      	adds	r5, #1
 800edbe:	e7c6      	b.n	800ed4e <_printf_common+0x3e>
 800edc0:	18e1      	adds	r1, r4, r3
 800edc2:	1c5a      	adds	r2, r3, #1
 800edc4:	2030      	movs	r0, #48	; 0x30
 800edc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800edca:	4422      	add	r2, r4
 800edcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800edd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800edd4:	3302      	adds	r3, #2
 800edd6:	e7c7      	b.n	800ed68 <_printf_common+0x58>
 800edd8:	2301      	movs	r3, #1
 800edda:	4622      	mov	r2, r4
 800eddc:	4649      	mov	r1, r9
 800edde:	4638      	mov	r0, r7
 800ede0:	47c0      	blx	r8
 800ede2:	3001      	adds	r0, #1
 800ede4:	d0e6      	beq.n	800edb4 <_printf_common+0xa4>
 800ede6:	3601      	adds	r6, #1
 800ede8:	e7d9      	b.n	800ed9e <_printf_common+0x8e>
	...

0800edec <_printf_i>:
 800edec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edf0:	460c      	mov	r4, r1
 800edf2:	4691      	mov	r9, r2
 800edf4:	7e27      	ldrb	r7, [r4, #24]
 800edf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800edf8:	2f78      	cmp	r7, #120	; 0x78
 800edfa:	4680      	mov	r8, r0
 800edfc:	469a      	mov	sl, r3
 800edfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee02:	d807      	bhi.n	800ee14 <_printf_i+0x28>
 800ee04:	2f62      	cmp	r7, #98	; 0x62
 800ee06:	d80a      	bhi.n	800ee1e <_printf_i+0x32>
 800ee08:	2f00      	cmp	r7, #0
 800ee0a:	f000 80d8 	beq.w	800efbe <_printf_i+0x1d2>
 800ee0e:	2f58      	cmp	r7, #88	; 0x58
 800ee10:	f000 80a3 	beq.w	800ef5a <_printf_i+0x16e>
 800ee14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee1c:	e03a      	b.n	800ee94 <_printf_i+0xa8>
 800ee1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee22:	2b15      	cmp	r3, #21
 800ee24:	d8f6      	bhi.n	800ee14 <_printf_i+0x28>
 800ee26:	a001      	add	r0, pc, #4	; (adr r0, 800ee2c <_printf_i+0x40>)
 800ee28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ee2c:	0800ee85 	.word	0x0800ee85
 800ee30:	0800ee99 	.word	0x0800ee99
 800ee34:	0800ee15 	.word	0x0800ee15
 800ee38:	0800ee15 	.word	0x0800ee15
 800ee3c:	0800ee15 	.word	0x0800ee15
 800ee40:	0800ee15 	.word	0x0800ee15
 800ee44:	0800ee99 	.word	0x0800ee99
 800ee48:	0800ee15 	.word	0x0800ee15
 800ee4c:	0800ee15 	.word	0x0800ee15
 800ee50:	0800ee15 	.word	0x0800ee15
 800ee54:	0800ee15 	.word	0x0800ee15
 800ee58:	0800efa5 	.word	0x0800efa5
 800ee5c:	0800eec9 	.word	0x0800eec9
 800ee60:	0800ef87 	.word	0x0800ef87
 800ee64:	0800ee15 	.word	0x0800ee15
 800ee68:	0800ee15 	.word	0x0800ee15
 800ee6c:	0800efc7 	.word	0x0800efc7
 800ee70:	0800ee15 	.word	0x0800ee15
 800ee74:	0800eec9 	.word	0x0800eec9
 800ee78:	0800ee15 	.word	0x0800ee15
 800ee7c:	0800ee15 	.word	0x0800ee15
 800ee80:	0800ef8f 	.word	0x0800ef8f
 800ee84:	680b      	ldr	r3, [r1, #0]
 800ee86:	1d1a      	adds	r2, r3, #4
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	600a      	str	r2, [r1, #0]
 800ee8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee94:	2301      	movs	r3, #1
 800ee96:	e0a3      	b.n	800efe0 <_printf_i+0x1f4>
 800ee98:	6825      	ldr	r5, [r4, #0]
 800ee9a:	6808      	ldr	r0, [r1, #0]
 800ee9c:	062e      	lsls	r6, r5, #24
 800ee9e:	f100 0304 	add.w	r3, r0, #4
 800eea2:	d50a      	bpl.n	800eeba <_printf_i+0xce>
 800eea4:	6805      	ldr	r5, [r0, #0]
 800eea6:	600b      	str	r3, [r1, #0]
 800eea8:	2d00      	cmp	r5, #0
 800eeaa:	da03      	bge.n	800eeb4 <_printf_i+0xc8>
 800eeac:	232d      	movs	r3, #45	; 0x2d
 800eeae:	426d      	negs	r5, r5
 800eeb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eeb4:	485e      	ldr	r0, [pc, #376]	; (800f030 <_printf_i+0x244>)
 800eeb6:	230a      	movs	r3, #10
 800eeb8:	e019      	b.n	800eeee <_printf_i+0x102>
 800eeba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eebe:	6805      	ldr	r5, [r0, #0]
 800eec0:	600b      	str	r3, [r1, #0]
 800eec2:	bf18      	it	ne
 800eec4:	b22d      	sxthne	r5, r5
 800eec6:	e7ef      	b.n	800eea8 <_printf_i+0xbc>
 800eec8:	680b      	ldr	r3, [r1, #0]
 800eeca:	6825      	ldr	r5, [r4, #0]
 800eecc:	1d18      	adds	r0, r3, #4
 800eece:	6008      	str	r0, [r1, #0]
 800eed0:	0628      	lsls	r0, r5, #24
 800eed2:	d501      	bpl.n	800eed8 <_printf_i+0xec>
 800eed4:	681d      	ldr	r5, [r3, #0]
 800eed6:	e002      	b.n	800eede <_printf_i+0xf2>
 800eed8:	0669      	lsls	r1, r5, #25
 800eeda:	d5fb      	bpl.n	800eed4 <_printf_i+0xe8>
 800eedc:	881d      	ldrh	r5, [r3, #0]
 800eede:	4854      	ldr	r0, [pc, #336]	; (800f030 <_printf_i+0x244>)
 800eee0:	2f6f      	cmp	r7, #111	; 0x6f
 800eee2:	bf0c      	ite	eq
 800eee4:	2308      	moveq	r3, #8
 800eee6:	230a      	movne	r3, #10
 800eee8:	2100      	movs	r1, #0
 800eeea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eeee:	6866      	ldr	r6, [r4, #4]
 800eef0:	60a6      	str	r6, [r4, #8]
 800eef2:	2e00      	cmp	r6, #0
 800eef4:	bfa2      	ittt	ge
 800eef6:	6821      	ldrge	r1, [r4, #0]
 800eef8:	f021 0104 	bicge.w	r1, r1, #4
 800eefc:	6021      	strge	r1, [r4, #0]
 800eefe:	b90d      	cbnz	r5, 800ef04 <_printf_i+0x118>
 800ef00:	2e00      	cmp	r6, #0
 800ef02:	d04d      	beq.n	800efa0 <_printf_i+0x1b4>
 800ef04:	4616      	mov	r6, r2
 800ef06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ef0e:	5dc7      	ldrb	r7, [r0, r7]
 800ef10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef14:	462f      	mov	r7, r5
 800ef16:	42bb      	cmp	r3, r7
 800ef18:	460d      	mov	r5, r1
 800ef1a:	d9f4      	bls.n	800ef06 <_printf_i+0x11a>
 800ef1c:	2b08      	cmp	r3, #8
 800ef1e:	d10b      	bne.n	800ef38 <_printf_i+0x14c>
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	07df      	lsls	r7, r3, #31
 800ef24:	d508      	bpl.n	800ef38 <_printf_i+0x14c>
 800ef26:	6923      	ldr	r3, [r4, #16]
 800ef28:	6861      	ldr	r1, [r4, #4]
 800ef2a:	4299      	cmp	r1, r3
 800ef2c:	bfde      	ittt	le
 800ef2e:	2330      	movle	r3, #48	; 0x30
 800ef30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef38:	1b92      	subs	r2, r2, r6
 800ef3a:	6122      	str	r2, [r4, #16]
 800ef3c:	f8cd a000 	str.w	sl, [sp]
 800ef40:	464b      	mov	r3, r9
 800ef42:	aa03      	add	r2, sp, #12
 800ef44:	4621      	mov	r1, r4
 800ef46:	4640      	mov	r0, r8
 800ef48:	f7ff fee2 	bl	800ed10 <_printf_common>
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d14c      	bne.n	800efea <_printf_i+0x1fe>
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	b004      	add	sp, #16
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5a:	4835      	ldr	r0, [pc, #212]	; (800f030 <_printf_i+0x244>)
 800ef5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	680e      	ldr	r6, [r1, #0]
 800ef64:	061f      	lsls	r7, r3, #24
 800ef66:	f856 5b04 	ldr.w	r5, [r6], #4
 800ef6a:	600e      	str	r6, [r1, #0]
 800ef6c:	d514      	bpl.n	800ef98 <_printf_i+0x1ac>
 800ef6e:	07d9      	lsls	r1, r3, #31
 800ef70:	bf44      	itt	mi
 800ef72:	f043 0320 	orrmi.w	r3, r3, #32
 800ef76:	6023      	strmi	r3, [r4, #0]
 800ef78:	b91d      	cbnz	r5, 800ef82 <_printf_i+0x196>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	f023 0320 	bic.w	r3, r3, #32
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	2310      	movs	r3, #16
 800ef84:	e7b0      	b.n	800eee8 <_printf_i+0xfc>
 800ef86:	6823      	ldr	r3, [r4, #0]
 800ef88:	f043 0320 	orr.w	r3, r3, #32
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	2378      	movs	r3, #120	; 0x78
 800ef90:	4828      	ldr	r0, [pc, #160]	; (800f034 <_printf_i+0x248>)
 800ef92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef96:	e7e3      	b.n	800ef60 <_printf_i+0x174>
 800ef98:	065e      	lsls	r6, r3, #25
 800ef9a:	bf48      	it	mi
 800ef9c:	b2ad      	uxthmi	r5, r5
 800ef9e:	e7e6      	b.n	800ef6e <_printf_i+0x182>
 800efa0:	4616      	mov	r6, r2
 800efa2:	e7bb      	b.n	800ef1c <_printf_i+0x130>
 800efa4:	680b      	ldr	r3, [r1, #0]
 800efa6:	6826      	ldr	r6, [r4, #0]
 800efa8:	6960      	ldr	r0, [r4, #20]
 800efaa:	1d1d      	adds	r5, r3, #4
 800efac:	600d      	str	r5, [r1, #0]
 800efae:	0635      	lsls	r5, r6, #24
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	d501      	bpl.n	800efb8 <_printf_i+0x1cc>
 800efb4:	6018      	str	r0, [r3, #0]
 800efb6:	e002      	b.n	800efbe <_printf_i+0x1d2>
 800efb8:	0671      	lsls	r1, r6, #25
 800efba:	d5fb      	bpl.n	800efb4 <_printf_i+0x1c8>
 800efbc:	8018      	strh	r0, [r3, #0]
 800efbe:	2300      	movs	r3, #0
 800efc0:	6123      	str	r3, [r4, #16]
 800efc2:	4616      	mov	r6, r2
 800efc4:	e7ba      	b.n	800ef3c <_printf_i+0x150>
 800efc6:	680b      	ldr	r3, [r1, #0]
 800efc8:	1d1a      	adds	r2, r3, #4
 800efca:	600a      	str	r2, [r1, #0]
 800efcc:	681e      	ldr	r6, [r3, #0]
 800efce:	6862      	ldr	r2, [r4, #4]
 800efd0:	2100      	movs	r1, #0
 800efd2:	4630      	mov	r0, r6
 800efd4:	f7f1 f90c 	bl	80001f0 <memchr>
 800efd8:	b108      	cbz	r0, 800efde <_printf_i+0x1f2>
 800efda:	1b80      	subs	r0, r0, r6
 800efdc:	6060      	str	r0, [r4, #4]
 800efde:	6863      	ldr	r3, [r4, #4]
 800efe0:	6123      	str	r3, [r4, #16]
 800efe2:	2300      	movs	r3, #0
 800efe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efe8:	e7a8      	b.n	800ef3c <_printf_i+0x150>
 800efea:	6923      	ldr	r3, [r4, #16]
 800efec:	4632      	mov	r2, r6
 800efee:	4649      	mov	r1, r9
 800eff0:	4640      	mov	r0, r8
 800eff2:	47d0      	blx	sl
 800eff4:	3001      	adds	r0, #1
 800eff6:	d0ab      	beq.n	800ef50 <_printf_i+0x164>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	079b      	lsls	r3, r3, #30
 800effc:	d413      	bmi.n	800f026 <_printf_i+0x23a>
 800effe:	68e0      	ldr	r0, [r4, #12]
 800f000:	9b03      	ldr	r3, [sp, #12]
 800f002:	4298      	cmp	r0, r3
 800f004:	bfb8      	it	lt
 800f006:	4618      	movlt	r0, r3
 800f008:	e7a4      	b.n	800ef54 <_printf_i+0x168>
 800f00a:	2301      	movs	r3, #1
 800f00c:	4632      	mov	r2, r6
 800f00e:	4649      	mov	r1, r9
 800f010:	4640      	mov	r0, r8
 800f012:	47d0      	blx	sl
 800f014:	3001      	adds	r0, #1
 800f016:	d09b      	beq.n	800ef50 <_printf_i+0x164>
 800f018:	3501      	adds	r5, #1
 800f01a:	68e3      	ldr	r3, [r4, #12]
 800f01c:	9903      	ldr	r1, [sp, #12]
 800f01e:	1a5b      	subs	r3, r3, r1
 800f020:	42ab      	cmp	r3, r5
 800f022:	dcf2      	bgt.n	800f00a <_printf_i+0x21e>
 800f024:	e7eb      	b.n	800effe <_printf_i+0x212>
 800f026:	2500      	movs	r5, #0
 800f028:	f104 0619 	add.w	r6, r4, #25
 800f02c:	e7f5      	b.n	800f01a <_printf_i+0x22e>
 800f02e:	bf00      	nop
 800f030:	08012e76 	.word	0x08012e76
 800f034:	08012e87 	.word	0x08012e87

0800f038 <iprintf>:
 800f038:	b40f      	push	{r0, r1, r2, r3}
 800f03a:	4b0a      	ldr	r3, [pc, #40]	; (800f064 <iprintf+0x2c>)
 800f03c:	b513      	push	{r0, r1, r4, lr}
 800f03e:	681c      	ldr	r4, [r3, #0]
 800f040:	b124      	cbz	r4, 800f04c <iprintf+0x14>
 800f042:	69a3      	ldr	r3, [r4, #24]
 800f044:	b913      	cbnz	r3, 800f04c <iprintf+0x14>
 800f046:	4620      	mov	r0, r4
 800f048:	f7ff fa56 	bl	800e4f8 <__sinit>
 800f04c:	ab05      	add	r3, sp, #20
 800f04e:	9a04      	ldr	r2, [sp, #16]
 800f050:	68a1      	ldr	r1, [r4, #8]
 800f052:	9301      	str	r3, [sp, #4]
 800f054:	4620      	mov	r0, r4
 800f056:	f001 ff73 	bl	8010f40 <_vfiprintf_r>
 800f05a:	b002      	add	sp, #8
 800f05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f060:	b004      	add	sp, #16
 800f062:	4770      	bx	lr
 800f064:	200002cc 	.word	0x200002cc

0800f068 <_puts_r>:
 800f068:	b570      	push	{r4, r5, r6, lr}
 800f06a:	460e      	mov	r6, r1
 800f06c:	4605      	mov	r5, r0
 800f06e:	b118      	cbz	r0, 800f078 <_puts_r+0x10>
 800f070:	6983      	ldr	r3, [r0, #24]
 800f072:	b90b      	cbnz	r3, 800f078 <_puts_r+0x10>
 800f074:	f7ff fa40 	bl	800e4f8 <__sinit>
 800f078:	69ab      	ldr	r3, [r5, #24]
 800f07a:	68ac      	ldr	r4, [r5, #8]
 800f07c:	b913      	cbnz	r3, 800f084 <_puts_r+0x1c>
 800f07e:	4628      	mov	r0, r5
 800f080:	f7ff fa3a 	bl	800e4f8 <__sinit>
 800f084:	4b2c      	ldr	r3, [pc, #176]	; (800f138 <_puts_r+0xd0>)
 800f086:	429c      	cmp	r4, r3
 800f088:	d120      	bne.n	800f0cc <_puts_r+0x64>
 800f08a:	686c      	ldr	r4, [r5, #4]
 800f08c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f08e:	07db      	lsls	r3, r3, #31
 800f090:	d405      	bmi.n	800f09e <_puts_r+0x36>
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	0598      	lsls	r0, r3, #22
 800f096:	d402      	bmi.n	800f09e <_puts_r+0x36>
 800f098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f09a:	f7ff faf0 	bl	800e67e <__retarget_lock_acquire_recursive>
 800f09e:	89a3      	ldrh	r3, [r4, #12]
 800f0a0:	0719      	lsls	r1, r3, #28
 800f0a2:	d51d      	bpl.n	800f0e0 <_puts_r+0x78>
 800f0a4:	6923      	ldr	r3, [r4, #16]
 800f0a6:	b1db      	cbz	r3, 800f0e0 <_puts_r+0x78>
 800f0a8:	3e01      	subs	r6, #1
 800f0aa:	68a3      	ldr	r3, [r4, #8]
 800f0ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	60a3      	str	r3, [r4, #8]
 800f0b4:	bb39      	cbnz	r1, 800f106 <_puts_r+0x9e>
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	da38      	bge.n	800f12c <_puts_r+0xc4>
 800f0ba:	4622      	mov	r2, r4
 800f0bc:	210a      	movs	r1, #10
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f000 f92e 	bl	800f320 <__swbuf_r>
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d011      	beq.n	800f0ec <_puts_r+0x84>
 800f0c8:	250a      	movs	r5, #10
 800f0ca:	e011      	b.n	800f0f0 <_puts_r+0x88>
 800f0cc:	4b1b      	ldr	r3, [pc, #108]	; (800f13c <_puts_r+0xd4>)
 800f0ce:	429c      	cmp	r4, r3
 800f0d0:	d101      	bne.n	800f0d6 <_puts_r+0x6e>
 800f0d2:	68ac      	ldr	r4, [r5, #8]
 800f0d4:	e7da      	b.n	800f08c <_puts_r+0x24>
 800f0d6:	4b1a      	ldr	r3, [pc, #104]	; (800f140 <_puts_r+0xd8>)
 800f0d8:	429c      	cmp	r4, r3
 800f0da:	bf08      	it	eq
 800f0dc:	68ec      	ldreq	r4, [r5, #12]
 800f0de:	e7d5      	b.n	800f08c <_puts_r+0x24>
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f000 f980 	bl	800f3e8 <__swsetup_r>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d0dd      	beq.n	800f0a8 <_puts_r+0x40>
 800f0ec:	f04f 35ff 	mov.w	r5, #4294967295
 800f0f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0f2:	07da      	lsls	r2, r3, #31
 800f0f4:	d405      	bmi.n	800f102 <_puts_r+0x9a>
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	059b      	lsls	r3, r3, #22
 800f0fa:	d402      	bmi.n	800f102 <_puts_r+0x9a>
 800f0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0fe:	f7ff fabf 	bl	800e680 <__retarget_lock_release_recursive>
 800f102:	4628      	mov	r0, r5
 800f104:	bd70      	pop	{r4, r5, r6, pc}
 800f106:	2b00      	cmp	r3, #0
 800f108:	da04      	bge.n	800f114 <_puts_r+0xac>
 800f10a:	69a2      	ldr	r2, [r4, #24]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	dc06      	bgt.n	800f11e <_puts_r+0xb6>
 800f110:	290a      	cmp	r1, #10
 800f112:	d004      	beq.n	800f11e <_puts_r+0xb6>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	6022      	str	r2, [r4, #0]
 800f11a:	7019      	strb	r1, [r3, #0]
 800f11c:	e7c5      	b.n	800f0aa <_puts_r+0x42>
 800f11e:	4622      	mov	r2, r4
 800f120:	4628      	mov	r0, r5
 800f122:	f000 f8fd 	bl	800f320 <__swbuf_r>
 800f126:	3001      	adds	r0, #1
 800f128:	d1bf      	bne.n	800f0aa <_puts_r+0x42>
 800f12a:	e7df      	b.n	800f0ec <_puts_r+0x84>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	250a      	movs	r5, #10
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	6022      	str	r2, [r4, #0]
 800f134:	701d      	strb	r5, [r3, #0]
 800f136:	e7db      	b.n	800f0f0 <_puts_r+0x88>
 800f138:	08012e20 	.word	0x08012e20
 800f13c:	08012e40 	.word	0x08012e40
 800f140:	08012e00 	.word	0x08012e00

0800f144 <puts>:
 800f144:	4b02      	ldr	r3, [pc, #8]	; (800f150 <puts+0xc>)
 800f146:	4601      	mov	r1, r0
 800f148:	6818      	ldr	r0, [r3, #0]
 800f14a:	f7ff bf8d 	b.w	800f068 <_puts_r>
 800f14e:	bf00      	nop
 800f150:	200002cc 	.word	0x200002cc

0800f154 <cleanup_glue>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	460c      	mov	r4, r1
 800f158:	6809      	ldr	r1, [r1, #0]
 800f15a:	4605      	mov	r5, r0
 800f15c:	b109      	cbz	r1, 800f162 <cleanup_glue+0xe>
 800f15e:	f7ff fff9 	bl	800f154 <cleanup_glue>
 800f162:	4621      	mov	r1, r4
 800f164:	4628      	mov	r0, r5
 800f166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f16a:	f001 bd13 	b.w	8010b94 <_free_r>
	...

0800f170 <_reclaim_reent>:
 800f170:	4b2c      	ldr	r3, [pc, #176]	; (800f224 <_reclaim_reent+0xb4>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4283      	cmp	r3, r0
 800f176:	b570      	push	{r4, r5, r6, lr}
 800f178:	4604      	mov	r4, r0
 800f17a:	d051      	beq.n	800f220 <_reclaim_reent+0xb0>
 800f17c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f17e:	b143      	cbz	r3, 800f192 <_reclaim_reent+0x22>
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d14a      	bne.n	800f21c <_reclaim_reent+0xac>
 800f186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f188:	6819      	ldr	r1, [r3, #0]
 800f18a:	b111      	cbz	r1, 800f192 <_reclaim_reent+0x22>
 800f18c:	4620      	mov	r0, r4
 800f18e:	f001 fd01 	bl	8010b94 <_free_r>
 800f192:	6961      	ldr	r1, [r4, #20]
 800f194:	b111      	cbz	r1, 800f19c <_reclaim_reent+0x2c>
 800f196:	4620      	mov	r0, r4
 800f198:	f001 fcfc 	bl	8010b94 <_free_r>
 800f19c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f19e:	b111      	cbz	r1, 800f1a6 <_reclaim_reent+0x36>
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f001 fcf7 	bl	8010b94 <_free_r>
 800f1a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f1a8:	b111      	cbz	r1, 800f1b0 <_reclaim_reent+0x40>
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	f001 fcf2 	bl	8010b94 <_free_r>
 800f1b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f1b2:	b111      	cbz	r1, 800f1ba <_reclaim_reent+0x4a>
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f001 fced 	bl	8010b94 <_free_r>
 800f1ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f1bc:	b111      	cbz	r1, 800f1c4 <_reclaim_reent+0x54>
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f001 fce8 	bl	8010b94 <_free_r>
 800f1c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f1c6:	b111      	cbz	r1, 800f1ce <_reclaim_reent+0x5e>
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f001 fce3 	bl	8010b94 <_free_r>
 800f1ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f1d0:	b111      	cbz	r1, 800f1d8 <_reclaim_reent+0x68>
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f001 fcde 	bl	8010b94 <_free_r>
 800f1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1da:	b111      	cbz	r1, 800f1e2 <_reclaim_reent+0x72>
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f001 fcd9 	bl	8010b94 <_free_r>
 800f1e2:	69a3      	ldr	r3, [r4, #24]
 800f1e4:	b1e3      	cbz	r3, 800f220 <_reclaim_reent+0xb0>
 800f1e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	4798      	blx	r3
 800f1ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1ee:	b1b9      	cbz	r1, 800f220 <_reclaim_reent+0xb0>
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1f6:	f7ff bfad 	b.w	800f154 <cleanup_glue>
 800f1fa:	5949      	ldr	r1, [r1, r5]
 800f1fc:	b941      	cbnz	r1, 800f210 <_reclaim_reent+0xa0>
 800f1fe:	3504      	adds	r5, #4
 800f200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f202:	2d80      	cmp	r5, #128	; 0x80
 800f204:	68d9      	ldr	r1, [r3, #12]
 800f206:	d1f8      	bne.n	800f1fa <_reclaim_reent+0x8a>
 800f208:	4620      	mov	r0, r4
 800f20a:	f001 fcc3 	bl	8010b94 <_free_r>
 800f20e:	e7ba      	b.n	800f186 <_reclaim_reent+0x16>
 800f210:	680e      	ldr	r6, [r1, #0]
 800f212:	4620      	mov	r0, r4
 800f214:	f001 fcbe 	bl	8010b94 <_free_r>
 800f218:	4631      	mov	r1, r6
 800f21a:	e7ef      	b.n	800f1fc <_reclaim_reent+0x8c>
 800f21c:	2500      	movs	r5, #0
 800f21e:	e7ef      	b.n	800f200 <_reclaim_reent+0x90>
 800f220:	bd70      	pop	{r4, r5, r6, pc}
 800f222:	bf00      	nop
 800f224:	200002cc 	.word	0x200002cc

0800f228 <_sbrk_r>:
 800f228:	b538      	push	{r3, r4, r5, lr}
 800f22a:	4d06      	ldr	r5, [pc, #24]	; (800f244 <_sbrk_r+0x1c>)
 800f22c:	2300      	movs	r3, #0
 800f22e:	4604      	mov	r4, r0
 800f230:	4608      	mov	r0, r1
 800f232:	602b      	str	r3, [r5, #0]
 800f234:	f7f3 fdae 	bl	8002d94 <_sbrk>
 800f238:	1c43      	adds	r3, r0, #1
 800f23a:	d102      	bne.n	800f242 <_sbrk_r+0x1a>
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	b103      	cbz	r3, 800f242 <_sbrk_r+0x1a>
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	bd38      	pop	{r3, r4, r5, pc}
 800f244:	20004d2c 	.word	0x20004d2c

0800f248 <siprintf>:
 800f248:	b40e      	push	{r1, r2, r3}
 800f24a:	b500      	push	{lr}
 800f24c:	b09c      	sub	sp, #112	; 0x70
 800f24e:	ab1d      	add	r3, sp, #116	; 0x74
 800f250:	9002      	str	r0, [sp, #8]
 800f252:	9006      	str	r0, [sp, #24]
 800f254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f258:	4809      	ldr	r0, [pc, #36]	; (800f280 <siprintf+0x38>)
 800f25a:	9107      	str	r1, [sp, #28]
 800f25c:	9104      	str	r1, [sp, #16]
 800f25e:	4909      	ldr	r1, [pc, #36]	; (800f284 <siprintf+0x3c>)
 800f260:	f853 2b04 	ldr.w	r2, [r3], #4
 800f264:	9105      	str	r1, [sp, #20]
 800f266:	6800      	ldr	r0, [r0, #0]
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	a902      	add	r1, sp, #8
 800f26c:	f001 fd3e 	bl	8010cec <_svfiprintf_r>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	2200      	movs	r2, #0
 800f274:	701a      	strb	r2, [r3, #0]
 800f276:	b01c      	add	sp, #112	; 0x70
 800f278:	f85d eb04 	ldr.w	lr, [sp], #4
 800f27c:	b003      	add	sp, #12
 800f27e:	4770      	bx	lr
 800f280:	200002cc 	.word	0x200002cc
 800f284:	ffff0208 	.word	0xffff0208

0800f288 <__sread>:
 800f288:	b510      	push	{r4, lr}
 800f28a:	460c      	mov	r4, r1
 800f28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f290:	f001 ff86 	bl	80111a0 <_read_r>
 800f294:	2800      	cmp	r0, #0
 800f296:	bfab      	itete	ge
 800f298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f29a:	89a3      	ldrhlt	r3, [r4, #12]
 800f29c:	181b      	addge	r3, r3, r0
 800f29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2a2:	bfac      	ite	ge
 800f2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2a6:	81a3      	strhlt	r3, [r4, #12]
 800f2a8:	bd10      	pop	{r4, pc}

0800f2aa <__swrite>:
 800f2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ae:	461f      	mov	r7, r3
 800f2b0:	898b      	ldrh	r3, [r1, #12]
 800f2b2:	05db      	lsls	r3, r3, #23
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	4616      	mov	r6, r2
 800f2ba:	d505      	bpl.n	800f2c8 <__swrite+0x1e>
 800f2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f001 f84e 	bl	8010364 <_lseek_r>
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2d2:	81a3      	strh	r3, [r4, #12]
 800f2d4:	4632      	mov	r2, r6
 800f2d6:	463b      	mov	r3, r7
 800f2d8:	4628      	mov	r0, r5
 800f2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2de:	f000 b871 	b.w	800f3c4 <_write_r>

0800f2e2 <__sseek>:
 800f2e2:	b510      	push	{r4, lr}
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ea:	f001 f83b 	bl	8010364 <_lseek_r>
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	89a3      	ldrh	r3, [r4, #12]
 800f2f2:	bf15      	itete	ne
 800f2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2fe:	81a3      	strheq	r3, [r4, #12]
 800f300:	bf18      	it	ne
 800f302:	81a3      	strhne	r3, [r4, #12]
 800f304:	bd10      	pop	{r4, pc}

0800f306 <__sclose>:
 800f306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30a:	f000 b8db 	b.w	800f4c4 <_close_r>

0800f30e <strcpy>:
 800f30e:	4603      	mov	r3, r0
 800f310:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f314:	f803 2b01 	strb.w	r2, [r3], #1
 800f318:	2a00      	cmp	r2, #0
 800f31a:	d1f9      	bne.n	800f310 <strcpy+0x2>
 800f31c:	4770      	bx	lr
	...

0800f320 <__swbuf_r>:
 800f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f322:	460e      	mov	r6, r1
 800f324:	4614      	mov	r4, r2
 800f326:	4605      	mov	r5, r0
 800f328:	b118      	cbz	r0, 800f332 <__swbuf_r+0x12>
 800f32a:	6983      	ldr	r3, [r0, #24]
 800f32c:	b90b      	cbnz	r3, 800f332 <__swbuf_r+0x12>
 800f32e:	f7ff f8e3 	bl	800e4f8 <__sinit>
 800f332:	4b21      	ldr	r3, [pc, #132]	; (800f3b8 <__swbuf_r+0x98>)
 800f334:	429c      	cmp	r4, r3
 800f336:	d12b      	bne.n	800f390 <__swbuf_r+0x70>
 800f338:	686c      	ldr	r4, [r5, #4]
 800f33a:	69a3      	ldr	r3, [r4, #24]
 800f33c:	60a3      	str	r3, [r4, #8]
 800f33e:	89a3      	ldrh	r3, [r4, #12]
 800f340:	071a      	lsls	r2, r3, #28
 800f342:	d52f      	bpl.n	800f3a4 <__swbuf_r+0x84>
 800f344:	6923      	ldr	r3, [r4, #16]
 800f346:	b36b      	cbz	r3, 800f3a4 <__swbuf_r+0x84>
 800f348:	6923      	ldr	r3, [r4, #16]
 800f34a:	6820      	ldr	r0, [r4, #0]
 800f34c:	1ac0      	subs	r0, r0, r3
 800f34e:	6963      	ldr	r3, [r4, #20]
 800f350:	b2f6      	uxtb	r6, r6
 800f352:	4283      	cmp	r3, r0
 800f354:	4637      	mov	r7, r6
 800f356:	dc04      	bgt.n	800f362 <__swbuf_r+0x42>
 800f358:	4621      	mov	r1, r4
 800f35a:	4628      	mov	r0, r5
 800f35c:	f000 ffc2 	bl	80102e4 <_fflush_r>
 800f360:	bb30      	cbnz	r0, 800f3b0 <__swbuf_r+0x90>
 800f362:	68a3      	ldr	r3, [r4, #8]
 800f364:	3b01      	subs	r3, #1
 800f366:	60a3      	str	r3, [r4, #8]
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	1c5a      	adds	r2, r3, #1
 800f36c:	6022      	str	r2, [r4, #0]
 800f36e:	701e      	strb	r6, [r3, #0]
 800f370:	6963      	ldr	r3, [r4, #20]
 800f372:	3001      	adds	r0, #1
 800f374:	4283      	cmp	r3, r0
 800f376:	d004      	beq.n	800f382 <__swbuf_r+0x62>
 800f378:	89a3      	ldrh	r3, [r4, #12]
 800f37a:	07db      	lsls	r3, r3, #31
 800f37c:	d506      	bpl.n	800f38c <__swbuf_r+0x6c>
 800f37e:	2e0a      	cmp	r6, #10
 800f380:	d104      	bne.n	800f38c <__swbuf_r+0x6c>
 800f382:	4621      	mov	r1, r4
 800f384:	4628      	mov	r0, r5
 800f386:	f000 ffad 	bl	80102e4 <_fflush_r>
 800f38a:	b988      	cbnz	r0, 800f3b0 <__swbuf_r+0x90>
 800f38c:	4638      	mov	r0, r7
 800f38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f390:	4b0a      	ldr	r3, [pc, #40]	; (800f3bc <__swbuf_r+0x9c>)
 800f392:	429c      	cmp	r4, r3
 800f394:	d101      	bne.n	800f39a <__swbuf_r+0x7a>
 800f396:	68ac      	ldr	r4, [r5, #8]
 800f398:	e7cf      	b.n	800f33a <__swbuf_r+0x1a>
 800f39a:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <__swbuf_r+0xa0>)
 800f39c:	429c      	cmp	r4, r3
 800f39e:	bf08      	it	eq
 800f3a0:	68ec      	ldreq	r4, [r5, #12]
 800f3a2:	e7ca      	b.n	800f33a <__swbuf_r+0x1a>
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f000 f81e 	bl	800f3e8 <__swsetup_r>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d0cb      	beq.n	800f348 <__swbuf_r+0x28>
 800f3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800f3b4:	e7ea      	b.n	800f38c <__swbuf_r+0x6c>
 800f3b6:	bf00      	nop
 800f3b8:	08012e20 	.word	0x08012e20
 800f3bc:	08012e40 	.word	0x08012e40
 800f3c0:	08012e00 	.word	0x08012e00

0800f3c4 <_write_r>:
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	4d07      	ldr	r5, [pc, #28]	; (800f3e4 <_write_r+0x20>)
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	4608      	mov	r0, r1
 800f3cc:	4611      	mov	r1, r2
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	602a      	str	r2, [r5, #0]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	f7f3 fc8d 	bl	8002cf2 <_write>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d102      	bne.n	800f3e2 <_write_r+0x1e>
 800f3dc:	682b      	ldr	r3, [r5, #0]
 800f3de:	b103      	cbz	r3, 800f3e2 <_write_r+0x1e>
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	bd38      	pop	{r3, r4, r5, pc}
 800f3e4:	20004d2c 	.word	0x20004d2c

0800f3e8 <__swsetup_r>:
 800f3e8:	4b32      	ldr	r3, [pc, #200]	; (800f4b4 <__swsetup_r+0xcc>)
 800f3ea:	b570      	push	{r4, r5, r6, lr}
 800f3ec:	681d      	ldr	r5, [r3, #0]
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	b125      	cbz	r5, 800f3fe <__swsetup_r+0x16>
 800f3f4:	69ab      	ldr	r3, [r5, #24]
 800f3f6:	b913      	cbnz	r3, 800f3fe <__swsetup_r+0x16>
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f7ff f87d 	bl	800e4f8 <__sinit>
 800f3fe:	4b2e      	ldr	r3, [pc, #184]	; (800f4b8 <__swsetup_r+0xd0>)
 800f400:	429c      	cmp	r4, r3
 800f402:	d10f      	bne.n	800f424 <__swsetup_r+0x3c>
 800f404:	686c      	ldr	r4, [r5, #4]
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f40c:	0719      	lsls	r1, r3, #28
 800f40e:	d42c      	bmi.n	800f46a <__swsetup_r+0x82>
 800f410:	06dd      	lsls	r5, r3, #27
 800f412:	d411      	bmi.n	800f438 <__swsetup_r+0x50>
 800f414:	2309      	movs	r3, #9
 800f416:	6033      	str	r3, [r6, #0]
 800f418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f41c:	81a3      	strh	r3, [r4, #12]
 800f41e:	f04f 30ff 	mov.w	r0, #4294967295
 800f422:	e03e      	b.n	800f4a2 <__swsetup_r+0xba>
 800f424:	4b25      	ldr	r3, [pc, #148]	; (800f4bc <__swsetup_r+0xd4>)
 800f426:	429c      	cmp	r4, r3
 800f428:	d101      	bne.n	800f42e <__swsetup_r+0x46>
 800f42a:	68ac      	ldr	r4, [r5, #8]
 800f42c:	e7eb      	b.n	800f406 <__swsetup_r+0x1e>
 800f42e:	4b24      	ldr	r3, [pc, #144]	; (800f4c0 <__swsetup_r+0xd8>)
 800f430:	429c      	cmp	r4, r3
 800f432:	bf08      	it	eq
 800f434:	68ec      	ldreq	r4, [r5, #12]
 800f436:	e7e6      	b.n	800f406 <__swsetup_r+0x1e>
 800f438:	0758      	lsls	r0, r3, #29
 800f43a:	d512      	bpl.n	800f462 <__swsetup_r+0x7a>
 800f43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f43e:	b141      	cbz	r1, 800f452 <__swsetup_r+0x6a>
 800f440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f444:	4299      	cmp	r1, r3
 800f446:	d002      	beq.n	800f44e <__swsetup_r+0x66>
 800f448:	4630      	mov	r0, r6
 800f44a:	f001 fba3 	bl	8010b94 <_free_r>
 800f44e:	2300      	movs	r3, #0
 800f450:	6363      	str	r3, [r4, #52]	; 0x34
 800f452:	89a3      	ldrh	r3, [r4, #12]
 800f454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f458:	81a3      	strh	r3, [r4, #12]
 800f45a:	2300      	movs	r3, #0
 800f45c:	6063      	str	r3, [r4, #4]
 800f45e:	6923      	ldr	r3, [r4, #16]
 800f460:	6023      	str	r3, [r4, #0]
 800f462:	89a3      	ldrh	r3, [r4, #12]
 800f464:	f043 0308 	orr.w	r3, r3, #8
 800f468:	81a3      	strh	r3, [r4, #12]
 800f46a:	6923      	ldr	r3, [r4, #16]
 800f46c:	b94b      	cbnz	r3, 800f482 <__swsetup_r+0x9a>
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f478:	d003      	beq.n	800f482 <__swsetup_r+0x9a>
 800f47a:	4621      	mov	r1, r4
 800f47c:	4630      	mov	r0, r6
 800f47e:	f000 ffa7 	bl	80103d0 <__smakebuf_r>
 800f482:	89a0      	ldrh	r0, [r4, #12]
 800f484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f488:	f010 0301 	ands.w	r3, r0, #1
 800f48c:	d00a      	beq.n	800f4a4 <__swsetup_r+0xbc>
 800f48e:	2300      	movs	r3, #0
 800f490:	60a3      	str	r3, [r4, #8]
 800f492:	6963      	ldr	r3, [r4, #20]
 800f494:	425b      	negs	r3, r3
 800f496:	61a3      	str	r3, [r4, #24]
 800f498:	6923      	ldr	r3, [r4, #16]
 800f49a:	b943      	cbnz	r3, 800f4ae <__swsetup_r+0xc6>
 800f49c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4a0:	d1ba      	bne.n	800f418 <__swsetup_r+0x30>
 800f4a2:	bd70      	pop	{r4, r5, r6, pc}
 800f4a4:	0781      	lsls	r1, r0, #30
 800f4a6:	bf58      	it	pl
 800f4a8:	6963      	ldrpl	r3, [r4, #20]
 800f4aa:	60a3      	str	r3, [r4, #8]
 800f4ac:	e7f4      	b.n	800f498 <__swsetup_r+0xb0>
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	e7f7      	b.n	800f4a2 <__swsetup_r+0xba>
 800f4b2:	bf00      	nop
 800f4b4:	200002cc 	.word	0x200002cc
 800f4b8:	08012e20 	.word	0x08012e20
 800f4bc:	08012e40 	.word	0x08012e40
 800f4c0:	08012e00 	.word	0x08012e00

0800f4c4 <_close_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4d06      	ldr	r5, [pc, #24]	; (800f4e0 <_close_r+0x1c>)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	f7f3 fc2b 	bl	8002d2a <_close>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_close_r+0x1a>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_close_r+0x1a>
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	20004d2c 	.word	0x20004d2c

0800f4e4 <quorem>:
 800f4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	6903      	ldr	r3, [r0, #16]
 800f4ea:	690c      	ldr	r4, [r1, #16]
 800f4ec:	42a3      	cmp	r3, r4
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	f2c0 8081 	blt.w	800f5f6 <quorem+0x112>
 800f4f4:	3c01      	subs	r4, #1
 800f4f6:	f101 0814 	add.w	r8, r1, #20
 800f4fa:	f100 0514 	add.w	r5, r0, #20
 800f4fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f502:	9301      	str	r3, [sp, #4]
 800f504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f50c:	3301      	adds	r3, #1
 800f50e:	429a      	cmp	r2, r3
 800f510:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f518:	fbb2 f6f3 	udiv	r6, r2, r3
 800f51c:	d331      	bcc.n	800f582 <quorem+0x9e>
 800f51e:	f04f 0e00 	mov.w	lr, #0
 800f522:	4640      	mov	r0, r8
 800f524:	46ac      	mov	ip, r5
 800f526:	46f2      	mov	sl, lr
 800f528:	f850 2b04 	ldr.w	r2, [r0], #4
 800f52c:	b293      	uxth	r3, r2
 800f52e:	fb06 e303 	mla	r3, r6, r3, lr
 800f532:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f536:	b29b      	uxth	r3, r3
 800f538:	ebaa 0303 	sub.w	r3, sl, r3
 800f53c:	0c12      	lsrs	r2, r2, #16
 800f53e:	f8dc a000 	ldr.w	sl, [ip]
 800f542:	fb06 e202 	mla	r2, r6, r2, lr
 800f546:	fa13 f38a 	uxtah	r3, r3, sl
 800f54a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f54e:	fa1f fa82 	uxth.w	sl, r2
 800f552:	f8dc 2000 	ldr.w	r2, [ip]
 800f556:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f55a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f55e:	b29b      	uxth	r3, r3
 800f560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f564:	4581      	cmp	r9, r0
 800f566:	f84c 3b04 	str.w	r3, [ip], #4
 800f56a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f56e:	d2db      	bcs.n	800f528 <quorem+0x44>
 800f570:	f855 300b 	ldr.w	r3, [r5, fp]
 800f574:	b92b      	cbnz	r3, 800f582 <quorem+0x9e>
 800f576:	9b01      	ldr	r3, [sp, #4]
 800f578:	3b04      	subs	r3, #4
 800f57a:	429d      	cmp	r5, r3
 800f57c:	461a      	mov	r2, r3
 800f57e:	d32e      	bcc.n	800f5de <quorem+0xfa>
 800f580:	613c      	str	r4, [r7, #16]
 800f582:	4638      	mov	r0, r7
 800f584:	f001 f9f6 	bl	8010974 <__mcmp>
 800f588:	2800      	cmp	r0, #0
 800f58a:	db24      	blt.n	800f5d6 <quorem+0xf2>
 800f58c:	3601      	adds	r6, #1
 800f58e:	4628      	mov	r0, r5
 800f590:	f04f 0c00 	mov.w	ip, #0
 800f594:	f858 2b04 	ldr.w	r2, [r8], #4
 800f598:	f8d0 e000 	ldr.w	lr, [r0]
 800f59c:	b293      	uxth	r3, r2
 800f59e:	ebac 0303 	sub.w	r3, ip, r3
 800f5a2:	0c12      	lsrs	r2, r2, #16
 800f5a4:	fa13 f38e 	uxtah	r3, r3, lr
 800f5a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5b6:	45c1      	cmp	r9, r8
 800f5b8:	f840 3b04 	str.w	r3, [r0], #4
 800f5bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f5c0:	d2e8      	bcs.n	800f594 <quorem+0xb0>
 800f5c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5ca:	b922      	cbnz	r2, 800f5d6 <quorem+0xf2>
 800f5cc:	3b04      	subs	r3, #4
 800f5ce:	429d      	cmp	r5, r3
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	d30a      	bcc.n	800f5ea <quorem+0x106>
 800f5d4:	613c      	str	r4, [r7, #16]
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	b003      	add	sp, #12
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	6812      	ldr	r2, [r2, #0]
 800f5e0:	3b04      	subs	r3, #4
 800f5e2:	2a00      	cmp	r2, #0
 800f5e4:	d1cc      	bne.n	800f580 <quorem+0x9c>
 800f5e6:	3c01      	subs	r4, #1
 800f5e8:	e7c7      	b.n	800f57a <quorem+0x96>
 800f5ea:	6812      	ldr	r2, [r2, #0]
 800f5ec:	3b04      	subs	r3, #4
 800f5ee:	2a00      	cmp	r2, #0
 800f5f0:	d1f0      	bne.n	800f5d4 <quorem+0xf0>
 800f5f2:	3c01      	subs	r4, #1
 800f5f4:	e7eb      	b.n	800f5ce <quorem+0xea>
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	e7ee      	b.n	800f5d8 <quorem+0xf4>
 800f5fa:	0000      	movs	r0, r0
 800f5fc:	0000      	movs	r0, r0
	...

0800f600 <_dtoa_r>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	ed2d 8b02 	vpush	{d8}
 800f608:	ec57 6b10 	vmov	r6, r7, d0
 800f60c:	b095      	sub	sp, #84	; 0x54
 800f60e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f610:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f614:	9105      	str	r1, [sp, #20]
 800f616:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f61a:	4604      	mov	r4, r0
 800f61c:	9209      	str	r2, [sp, #36]	; 0x24
 800f61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f620:	b975      	cbnz	r5, 800f640 <_dtoa_r+0x40>
 800f622:	2010      	movs	r0, #16
 800f624:	f000 ff14 	bl	8010450 <malloc>
 800f628:	4602      	mov	r2, r0
 800f62a:	6260      	str	r0, [r4, #36]	; 0x24
 800f62c:	b920      	cbnz	r0, 800f638 <_dtoa_r+0x38>
 800f62e:	4bb2      	ldr	r3, [pc, #712]	; (800f8f8 <_dtoa_r+0x2f8>)
 800f630:	21ea      	movs	r1, #234	; 0xea
 800f632:	48b2      	ldr	r0, [pc, #712]	; (800f8fc <_dtoa_r+0x2fc>)
 800f634:	f001 fdc6 	bl	80111c4 <__assert_func>
 800f638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f63c:	6005      	str	r5, [r0, #0]
 800f63e:	60c5      	str	r5, [r0, #12]
 800f640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f642:	6819      	ldr	r1, [r3, #0]
 800f644:	b151      	cbz	r1, 800f65c <_dtoa_r+0x5c>
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	604a      	str	r2, [r1, #4]
 800f64a:	2301      	movs	r3, #1
 800f64c:	4093      	lsls	r3, r2
 800f64e:	608b      	str	r3, [r1, #8]
 800f650:	4620      	mov	r0, r4
 800f652:	f000 ff51 	bl	80104f8 <_Bfree>
 800f656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f658:	2200      	movs	r2, #0
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	1e3b      	subs	r3, r7, #0
 800f65e:	bfb9      	ittee	lt
 800f660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f664:	9303      	strlt	r3, [sp, #12]
 800f666:	2300      	movge	r3, #0
 800f668:	f8c8 3000 	strge.w	r3, [r8]
 800f66c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f670:	4ba3      	ldr	r3, [pc, #652]	; (800f900 <_dtoa_r+0x300>)
 800f672:	bfbc      	itt	lt
 800f674:	2201      	movlt	r2, #1
 800f676:	f8c8 2000 	strlt.w	r2, [r8]
 800f67a:	ea33 0309 	bics.w	r3, r3, r9
 800f67e:	d11b      	bne.n	800f6b8 <_dtoa_r+0xb8>
 800f680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f682:	f242 730f 	movw	r3, #9999	; 0x270f
 800f686:	6013      	str	r3, [r2, #0]
 800f688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f68c:	4333      	orrs	r3, r6
 800f68e:	f000 857a 	beq.w	8010186 <_dtoa_r+0xb86>
 800f692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f694:	b963      	cbnz	r3, 800f6b0 <_dtoa_r+0xb0>
 800f696:	4b9b      	ldr	r3, [pc, #620]	; (800f904 <_dtoa_r+0x304>)
 800f698:	e024      	b.n	800f6e4 <_dtoa_r+0xe4>
 800f69a:	4b9b      	ldr	r3, [pc, #620]	; (800f908 <_dtoa_r+0x308>)
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	3308      	adds	r3, #8
 800f6a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f6a2:	6013      	str	r3, [r2, #0]
 800f6a4:	9800      	ldr	r0, [sp, #0]
 800f6a6:	b015      	add	sp, #84	; 0x54
 800f6a8:	ecbd 8b02 	vpop	{d8}
 800f6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b0:	4b94      	ldr	r3, [pc, #592]	; (800f904 <_dtoa_r+0x304>)
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	3303      	adds	r3, #3
 800f6b6:	e7f3      	b.n	800f6a0 <_dtoa_r+0xa0>
 800f6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	ec51 0b17 	vmov	r0, r1, d7
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f6c8:	f7f1 fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6cc:	4680      	mov	r8, r0
 800f6ce:	b158      	cbz	r0, 800f6e8 <_dtoa_r+0xe8>
 800f6d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 8551 	beq.w	8010180 <_dtoa_r+0xb80>
 800f6de:	488b      	ldr	r0, [pc, #556]	; (800f90c <_dtoa_r+0x30c>)
 800f6e0:	6018      	str	r0, [r3, #0]
 800f6e2:	1e43      	subs	r3, r0, #1
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	e7dd      	b.n	800f6a4 <_dtoa_r+0xa4>
 800f6e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f6ec:	aa12      	add	r2, sp, #72	; 0x48
 800f6ee:	a913      	add	r1, sp, #76	; 0x4c
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f001 f9e3 	bl	8010abc <__d2b>
 800f6f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f6fa:	4683      	mov	fp, r0
 800f6fc:	2d00      	cmp	r5, #0
 800f6fe:	d07c      	beq.n	800f7fa <_dtoa_r+0x1fa>
 800f700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f702:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f70a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f70e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f71a:	4b7d      	ldr	r3, [pc, #500]	; (800f910 <_dtoa_r+0x310>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	4630      	mov	r0, r6
 800f720:	4639      	mov	r1, r7
 800f722:	f7f0 fdb9 	bl	8000298 <__aeabi_dsub>
 800f726:	a36e      	add	r3, pc, #440	; (adr r3, 800f8e0 <_dtoa_r+0x2e0>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f7f0 ff6c 	bl	8000608 <__aeabi_dmul>
 800f730:	a36d      	add	r3, pc, #436	; (adr r3, 800f8e8 <_dtoa_r+0x2e8>)
 800f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f736:	f7f0 fdb1 	bl	800029c <__adddf3>
 800f73a:	4606      	mov	r6, r0
 800f73c:	4628      	mov	r0, r5
 800f73e:	460f      	mov	r7, r1
 800f740:	f7f0 fef8 	bl	8000534 <__aeabi_i2d>
 800f744:	a36a      	add	r3, pc, #424	; (adr r3, 800f8f0 <_dtoa_r+0x2f0>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	f7f0 ff5d 	bl	8000608 <__aeabi_dmul>
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	4630      	mov	r0, r6
 800f754:	4639      	mov	r1, r7
 800f756:	f7f0 fda1 	bl	800029c <__adddf3>
 800f75a:	4606      	mov	r6, r0
 800f75c:	460f      	mov	r7, r1
 800f75e:	f7f1 fa03 	bl	8000b68 <__aeabi_d2iz>
 800f762:	2200      	movs	r2, #0
 800f764:	4682      	mov	sl, r0
 800f766:	2300      	movs	r3, #0
 800f768:	4630      	mov	r0, r6
 800f76a:	4639      	mov	r1, r7
 800f76c:	f7f1 f9be 	bl	8000aec <__aeabi_dcmplt>
 800f770:	b148      	cbz	r0, 800f786 <_dtoa_r+0x186>
 800f772:	4650      	mov	r0, sl
 800f774:	f7f0 fede 	bl	8000534 <__aeabi_i2d>
 800f778:	4632      	mov	r2, r6
 800f77a:	463b      	mov	r3, r7
 800f77c:	f7f1 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800f780:	b908      	cbnz	r0, 800f786 <_dtoa_r+0x186>
 800f782:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f786:	f1ba 0f16 	cmp.w	sl, #22
 800f78a:	d854      	bhi.n	800f836 <_dtoa_r+0x236>
 800f78c:	4b61      	ldr	r3, [pc, #388]	; (800f914 <_dtoa_r+0x314>)
 800f78e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f79a:	f7f1 f9a7 	bl	8000aec <__aeabi_dcmplt>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d04b      	beq.n	800f83a <_dtoa_r+0x23a>
 800f7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	930e      	str	r3, [sp, #56]	; 0x38
 800f7aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7ac:	1b5d      	subs	r5, r3, r5
 800f7ae:	1e6b      	subs	r3, r5, #1
 800f7b0:	9304      	str	r3, [sp, #16]
 800f7b2:	bf43      	ittte	mi
 800f7b4:	2300      	movmi	r3, #0
 800f7b6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f7ba:	9304      	strmi	r3, [sp, #16]
 800f7bc:	f04f 0800 	movpl.w	r8, #0
 800f7c0:	f1ba 0f00 	cmp.w	sl, #0
 800f7c4:	db3b      	blt.n	800f83e <_dtoa_r+0x23e>
 800f7c6:	9b04      	ldr	r3, [sp, #16]
 800f7c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f7cc:	4453      	add	r3, sl
 800f7ce:	9304      	str	r3, [sp, #16]
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	9306      	str	r3, [sp, #24]
 800f7d4:	9b05      	ldr	r3, [sp, #20]
 800f7d6:	2b09      	cmp	r3, #9
 800f7d8:	d869      	bhi.n	800f8ae <_dtoa_r+0x2ae>
 800f7da:	2b05      	cmp	r3, #5
 800f7dc:	bfc4      	itt	gt
 800f7de:	3b04      	subgt	r3, #4
 800f7e0:	9305      	strgt	r3, [sp, #20]
 800f7e2:	9b05      	ldr	r3, [sp, #20]
 800f7e4:	f1a3 0302 	sub.w	r3, r3, #2
 800f7e8:	bfcc      	ite	gt
 800f7ea:	2500      	movgt	r5, #0
 800f7ec:	2501      	movle	r5, #1
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	d869      	bhi.n	800f8c6 <_dtoa_r+0x2c6>
 800f7f2:	e8df f003 	tbb	[pc, r3]
 800f7f6:	4e2c      	.short	0x4e2c
 800f7f8:	5a4c      	.short	0x5a4c
 800f7fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f7fe:	441d      	add	r5, r3
 800f800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f804:	2b20      	cmp	r3, #32
 800f806:	bfc1      	itttt	gt
 800f808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f80c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f810:	fa09 f303 	lslgt.w	r3, r9, r3
 800f814:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f818:	bfda      	itte	le
 800f81a:	f1c3 0320 	rsble	r3, r3, #32
 800f81e:	fa06 f003 	lslle.w	r0, r6, r3
 800f822:	4318      	orrgt	r0, r3
 800f824:	f7f0 fe76 	bl	8000514 <__aeabi_ui2d>
 800f828:	2301      	movs	r3, #1
 800f82a:	4606      	mov	r6, r0
 800f82c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f830:	3d01      	subs	r5, #1
 800f832:	9310      	str	r3, [sp, #64]	; 0x40
 800f834:	e771      	b.n	800f71a <_dtoa_r+0x11a>
 800f836:	2301      	movs	r3, #1
 800f838:	e7b6      	b.n	800f7a8 <_dtoa_r+0x1a8>
 800f83a:	900e      	str	r0, [sp, #56]	; 0x38
 800f83c:	e7b5      	b.n	800f7aa <_dtoa_r+0x1aa>
 800f83e:	f1ca 0300 	rsb	r3, sl, #0
 800f842:	9306      	str	r3, [sp, #24]
 800f844:	2300      	movs	r3, #0
 800f846:	eba8 080a 	sub.w	r8, r8, sl
 800f84a:	930d      	str	r3, [sp, #52]	; 0x34
 800f84c:	e7c2      	b.n	800f7d4 <_dtoa_r+0x1d4>
 800f84e:	2300      	movs	r3, #0
 800f850:	9308      	str	r3, [sp, #32]
 800f852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f854:	2b00      	cmp	r3, #0
 800f856:	dc39      	bgt.n	800f8cc <_dtoa_r+0x2cc>
 800f858:	f04f 0901 	mov.w	r9, #1
 800f85c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f860:	464b      	mov	r3, r9
 800f862:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f866:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f868:	2200      	movs	r2, #0
 800f86a:	6042      	str	r2, [r0, #4]
 800f86c:	2204      	movs	r2, #4
 800f86e:	f102 0614 	add.w	r6, r2, #20
 800f872:	429e      	cmp	r6, r3
 800f874:	6841      	ldr	r1, [r0, #4]
 800f876:	d92f      	bls.n	800f8d8 <_dtoa_r+0x2d8>
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 fdfd 	bl	8010478 <_Balloc>
 800f87e:	9000      	str	r0, [sp, #0]
 800f880:	2800      	cmp	r0, #0
 800f882:	d14b      	bne.n	800f91c <_dtoa_r+0x31c>
 800f884:	4b24      	ldr	r3, [pc, #144]	; (800f918 <_dtoa_r+0x318>)
 800f886:	4602      	mov	r2, r0
 800f888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f88c:	e6d1      	b.n	800f632 <_dtoa_r+0x32>
 800f88e:	2301      	movs	r3, #1
 800f890:	e7de      	b.n	800f850 <_dtoa_r+0x250>
 800f892:	2300      	movs	r3, #0
 800f894:	9308      	str	r3, [sp, #32]
 800f896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f898:	eb0a 0903 	add.w	r9, sl, r3
 800f89c:	f109 0301 	add.w	r3, r9, #1
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	bfb8      	it	lt
 800f8a6:	2301      	movlt	r3, #1
 800f8a8:	e7dd      	b.n	800f866 <_dtoa_r+0x266>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e7f2      	b.n	800f894 <_dtoa_r+0x294>
 800f8ae:	2501      	movs	r5, #1
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	9305      	str	r3, [sp, #20]
 800f8b4:	9508      	str	r5, [sp, #32]
 800f8b6:	f04f 39ff 	mov.w	r9, #4294967295
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f8c0:	2312      	movs	r3, #18
 800f8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f8c4:	e7cf      	b.n	800f866 <_dtoa_r+0x266>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	9308      	str	r3, [sp, #32]
 800f8ca:	e7f4      	b.n	800f8b6 <_dtoa_r+0x2b6>
 800f8cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f8d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f8d4:	464b      	mov	r3, r9
 800f8d6:	e7c6      	b.n	800f866 <_dtoa_r+0x266>
 800f8d8:	3101      	adds	r1, #1
 800f8da:	6041      	str	r1, [r0, #4]
 800f8dc:	0052      	lsls	r2, r2, #1
 800f8de:	e7c6      	b.n	800f86e <_dtoa_r+0x26e>
 800f8e0:	636f4361 	.word	0x636f4361
 800f8e4:	3fd287a7 	.word	0x3fd287a7
 800f8e8:	8b60c8b3 	.word	0x8b60c8b3
 800f8ec:	3fc68a28 	.word	0x3fc68a28
 800f8f0:	509f79fb 	.word	0x509f79fb
 800f8f4:	3fd34413 	.word	0x3fd34413
 800f8f8:	08012ea5 	.word	0x08012ea5
 800f8fc:	08012ebc 	.word	0x08012ebc
 800f900:	7ff00000 	.word	0x7ff00000
 800f904:	08012ea1 	.word	0x08012ea1
 800f908:	08012e98 	.word	0x08012e98
 800f90c:	08012e75 	.word	0x08012e75
 800f910:	3ff80000 	.word	0x3ff80000
 800f914:	08012fb8 	.word	0x08012fb8
 800f918:	08012f1b 	.word	0x08012f1b
 800f91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f91e:	9a00      	ldr	r2, [sp, #0]
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	9b01      	ldr	r3, [sp, #4]
 800f924:	2b0e      	cmp	r3, #14
 800f926:	f200 80ad 	bhi.w	800fa84 <_dtoa_r+0x484>
 800f92a:	2d00      	cmp	r5, #0
 800f92c:	f000 80aa 	beq.w	800fa84 <_dtoa_r+0x484>
 800f930:	f1ba 0f00 	cmp.w	sl, #0
 800f934:	dd36      	ble.n	800f9a4 <_dtoa_r+0x3a4>
 800f936:	4ac3      	ldr	r2, [pc, #780]	; (800fc44 <_dtoa_r+0x644>)
 800f938:	f00a 030f 	and.w	r3, sl, #15
 800f93c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f940:	ed93 7b00 	vldr	d7, [r3]
 800f944:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f948:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f94c:	eeb0 8a47 	vmov.f32	s16, s14
 800f950:	eef0 8a67 	vmov.f32	s17, s15
 800f954:	d016      	beq.n	800f984 <_dtoa_r+0x384>
 800f956:	4bbc      	ldr	r3, [pc, #752]	; (800fc48 <_dtoa_r+0x648>)
 800f958:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f95c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f960:	f7f0 ff7c 	bl	800085c <__aeabi_ddiv>
 800f964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f968:	f007 070f 	and.w	r7, r7, #15
 800f96c:	2503      	movs	r5, #3
 800f96e:	4eb6      	ldr	r6, [pc, #728]	; (800fc48 <_dtoa_r+0x648>)
 800f970:	b957      	cbnz	r7, 800f988 <_dtoa_r+0x388>
 800f972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f976:	ec53 2b18 	vmov	r2, r3, d8
 800f97a:	f7f0 ff6f 	bl	800085c <__aeabi_ddiv>
 800f97e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f982:	e029      	b.n	800f9d8 <_dtoa_r+0x3d8>
 800f984:	2502      	movs	r5, #2
 800f986:	e7f2      	b.n	800f96e <_dtoa_r+0x36e>
 800f988:	07f9      	lsls	r1, r7, #31
 800f98a:	d508      	bpl.n	800f99e <_dtoa_r+0x39e>
 800f98c:	ec51 0b18 	vmov	r0, r1, d8
 800f990:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f994:	f7f0 fe38 	bl	8000608 <__aeabi_dmul>
 800f998:	ec41 0b18 	vmov	d8, r0, r1
 800f99c:	3501      	adds	r5, #1
 800f99e:	107f      	asrs	r7, r7, #1
 800f9a0:	3608      	adds	r6, #8
 800f9a2:	e7e5      	b.n	800f970 <_dtoa_r+0x370>
 800f9a4:	f000 80a6 	beq.w	800faf4 <_dtoa_r+0x4f4>
 800f9a8:	f1ca 0600 	rsb	r6, sl, #0
 800f9ac:	4ba5      	ldr	r3, [pc, #660]	; (800fc44 <_dtoa_r+0x644>)
 800f9ae:	4fa6      	ldr	r7, [pc, #664]	; (800fc48 <_dtoa_r+0x648>)
 800f9b0:	f006 020f 	and.w	r2, r6, #15
 800f9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f9c0:	f7f0 fe22 	bl	8000608 <__aeabi_dmul>
 800f9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9c8:	1136      	asrs	r6, r6, #4
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	2502      	movs	r5, #2
 800f9ce:	2e00      	cmp	r6, #0
 800f9d0:	f040 8085 	bne.w	800fade <_dtoa_r+0x4de>
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1d2      	bne.n	800f97e <_dtoa_r+0x37e>
 800f9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f000 808c 	beq.w	800faf8 <_dtoa_r+0x4f8>
 800f9e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9e4:	4b99      	ldr	r3, [pc, #612]	; (800fc4c <_dtoa_r+0x64c>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	f7f1 f87e 	bl	8000aec <__aeabi_dcmplt>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f000 8081 	beq.w	800faf8 <_dtoa_r+0x4f8>
 800f9f6:	9b01      	ldr	r3, [sp, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d07d      	beq.n	800faf8 <_dtoa_r+0x4f8>
 800f9fc:	f1b9 0f00 	cmp.w	r9, #0
 800fa00:	dd3c      	ble.n	800fa7c <_dtoa_r+0x47c>
 800fa02:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fa06:	9307      	str	r3, [sp, #28]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	4b91      	ldr	r3, [pc, #580]	; (800fc50 <_dtoa_r+0x650>)
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	4639      	mov	r1, r7
 800fa10:	f7f0 fdfa 	bl	8000608 <__aeabi_dmul>
 800fa14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa18:	3501      	adds	r5, #1
 800fa1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fa1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fa22:	4628      	mov	r0, r5
 800fa24:	f7f0 fd86 	bl	8000534 <__aeabi_i2d>
 800fa28:	4632      	mov	r2, r6
 800fa2a:	463b      	mov	r3, r7
 800fa2c:	f7f0 fdec 	bl	8000608 <__aeabi_dmul>
 800fa30:	4b88      	ldr	r3, [pc, #544]	; (800fc54 <_dtoa_r+0x654>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	f7f0 fc32 	bl	800029c <__adddf3>
 800fa38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fa3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa40:	9303      	str	r3, [sp, #12]
 800fa42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d15c      	bne.n	800fb02 <_dtoa_r+0x502>
 800fa48:	4b83      	ldr	r3, [pc, #524]	; (800fc58 <_dtoa_r+0x658>)
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	4639      	mov	r1, r7
 800fa50:	f7f0 fc22 	bl	8000298 <__aeabi_dsub>
 800fa54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa58:	4606      	mov	r6, r0
 800fa5a:	460f      	mov	r7, r1
 800fa5c:	f7f1 f864 	bl	8000b28 <__aeabi_dcmpgt>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	f040 8296 	bne.w	800ff92 <_dtoa_r+0x992>
 800fa66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa70:	4639      	mov	r1, r7
 800fa72:	f7f1 f83b 	bl	8000aec <__aeabi_dcmplt>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	f040 8288 	bne.w	800ff8c <_dtoa_r+0x98c>
 800fa7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fa80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f2c0 8158 	blt.w	800fd3c <_dtoa_r+0x73c>
 800fa8c:	f1ba 0f0e 	cmp.w	sl, #14
 800fa90:	f300 8154 	bgt.w	800fd3c <_dtoa_r+0x73c>
 800fa94:	4b6b      	ldr	r3, [pc, #428]	; (800fc44 <_dtoa_r+0x644>)
 800fa96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fa9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f280 80e3 	bge.w	800fc6c <_dtoa_r+0x66c>
 800faa6:	9b01      	ldr	r3, [sp, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f300 80df 	bgt.w	800fc6c <_dtoa_r+0x66c>
 800faae:	f040 826d 	bne.w	800ff8c <_dtoa_r+0x98c>
 800fab2:	4b69      	ldr	r3, [pc, #420]	; (800fc58 <_dtoa_r+0x658>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	4640      	mov	r0, r8
 800fab8:	4649      	mov	r1, r9
 800faba:	f7f0 fda5 	bl	8000608 <__aeabi_dmul>
 800fabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fac2:	f7f1 f827 	bl	8000b14 <__aeabi_dcmpge>
 800fac6:	9e01      	ldr	r6, [sp, #4]
 800fac8:	4637      	mov	r7, r6
 800faca:	2800      	cmp	r0, #0
 800facc:	f040 8243 	bne.w	800ff56 <_dtoa_r+0x956>
 800fad0:	9d00      	ldr	r5, [sp, #0]
 800fad2:	2331      	movs	r3, #49	; 0x31
 800fad4:	f805 3b01 	strb.w	r3, [r5], #1
 800fad8:	f10a 0a01 	add.w	sl, sl, #1
 800fadc:	e23f      	b.n	800ff5e <_dtoa_r+0x95e>
 800fade:	07f2      	lsls	r2, r6, #31
 800fae0:	d505      	bpl.n	800faee <_dtoa_r+0x4ee>
 800fae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fae6:	f7f0 fd8f 	bl	8000608 <__aeabi_dmul>
 800faea:	3501      	adds	r5, #1
 800faec:	2301      	movs	r3, #1
 800faee:	1076      	asrs	r6, r6, #1
 800faf0:	3708      	adds	r7, #8
 800faf2:	e76c      	b.n	800f9ce <_dtoa_r+0x3ce>
 800faf4:	2502      	movs	r5, #2
 800faf6:	e76f      	b.n	800f9d8 <_dtoa_r+0x3d8>
 800faf8:	9b01      	ldr	r3, [sp, #4]
 800fafa:	f8cd a01c 	str.w	sl, [sp, #28]
 800fafe:	930c      	str	r3, [sp, #48]	; 0x30
 800fb00:	e78d      	b.n	800fa1e <_dtoa_r+0x41e>
 800fb02:	9900      	ldr	r1, [sp, #0]
 800fb04:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fb06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb08:	4b4e      	ldr	r3, [pc, #312]	; (800fc44 <_dtoa_r+0x644>)
 800fb0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb0e:	4401      	add	r1, r0
 800fb10:	9102      	str	r1, [sp, #8]
 800fb12:	9908      	ldr	r1, [sp, #32]
 800fb14:	eeb0 8a47 	vmov.f32	s16, s14
 800fb18:	eef0 8a67 	vmov.f32	s17, s15
 800fb1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb24:	2900      	cmp	r1, #0
 800fb26:	d045      	beq.n	800fbb4 <_dtoa_r+0x5b4>
 800fb28:	494c      	ldr	r1, [pc, #304]	; (800fc5c <_dtoa_r+0x65c>)
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	f7f0 fe96 	bl	800085c <__aeabi_ddiv>
 800fb30:	ec53 2b18 	vmov	r2, r3, d8
 800fb34:	f7f0 fbb0 	bl	8000298 <__aeabi_dsub>
 800fb38:	9d00      	ldr	r5, [sp, #0]
 800fb3a:	ec41 0b18 	vmov	d8, r0, r1
 800fb3e:	4639      	mov	r1, r7
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7f1 f811 	bl	8000b68 <__aeabi_d2iz>
 800fb46:	900c      	str	r0, [sp, #48]	; 0x30
 800fb48:	f7f0 fcf4 	bl	8000534 <__aeabi_i2d>
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	460b      	mov	r3, r1
 800fb50:	4630      	mov	r0, r6
 800fb52:	4639      	mov	r1, r7
 800fb54:	f7f0 fba0 	bl	8000298 <__aeabi_dsub>
 800fb58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb5a:	3330      	adds	r3, #48	; 0x30
 800fb5c:	f805 3b01 	strb.w	r3, [r5], #1
 800fb60:	ec53 2b18 	vmov	r2, r3, d8
 800fb64:	4606      	mov	r6, r0
 800fb66:	460f      	mov	r7, r1
 800fb68:	f7f0 ffc0 	bl	8000aec <__aeabi_dcmplt>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d165      	bne.n	800fc3c <_dtoa_r+0x63c>
 800fb70:	4632      	mov	r2, r6
 800fb72:	463b      	mov	r3, r7
 800fb74:	4935      	ldr	r1, [pc, #212]	; (800fc4c <_dtoa_r+0x64c>)
 800fb76:	2000      	movs	r0, #0
 800fb78:	f7f0 fb8e 	bl	8000298 <__aeabi_dsub>
 800fb7c:	ec53 2b18 	vmov	r2, r3, d8
 800fb80:	f7f0 ffb4 	bl	8000aec <__aeabi_dcmplt>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	f040 80b9 	bne.w	800fcfc <_dtoa_r+0x6fc>
 800fb8a:	9b02      	ldr	r3, [sp, #8]
 800fb8c:	429d      	cmp	r5, r3
 800fb8e:	f43f af75 	beq.w	800fa7c <_dtoa_r+0x47c>
 800fb92:	4b2f      	ldr	r3, [pc, #188]	; (800fc50 <_dtoa_r+0x650>)
 800fb94:	ec51 0b18 	vmov	r0, r1, d8
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f7f0 fd35 	bl	8000608 <__aeabi_dmul>
 800fb9e:	4b2c      	ldr	r3, [pc, #176]	; (800fc50 <_dtoa_r+0x650>)
 800fba0:	ec41 0b18 	vmov	d8, r0, r1
 800fba4:	2200      	movs	r2, #0
 800fba6:	4630      	mov	r0, r6
 800fba8:	4639      	mov	r1, r7
 800fbaa:	f7f0 fd2d 	bl	8000608 <__aeabi_dmul>
 800fbae:	4606      	mov	r6, r0
 800fbb0:	460f      	mov	r7, r1
 800fbb2:	e7c4      	b.n	800fb3e <_dtoa_r+0x53e>
 800fbb4:	ec51 0b17 	vmov	r0, r1, d7
 800fbb8:	f7f0 fd26 	bl	8000608 <__aeabi_dmul>
 800fbbc:	9b02      	ldr	r3, [sp, #8]
 800fbbe:	9d00      	ldr	r5, [sp, #0]
 800fbc0:	930c      	str	r3, [sp, #48]	; 0x30
 800fbc2:	ec41 0b18 	vmov	d8, r0, r1
 800fbc6:	4639      	mov	r1, r7
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f7f0 ffcd 	bl	8000b68 <__aeabi_d2iz>
 800fbce:	9011      	str	r0, [sp, #68]	; 0x44
 800fbd0:	f7f0 fcb0 	bl	8000534 <__aeabi_i2d>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	4630      	mov	r0, r6
 800fbda:	4639      	mov	r1, r7
 800fbdc:	f7f0 fb5c 	bl	8000298 <__aeabi_dsub>
 800fbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbe2:	3330      	adds	r3, #48	; 0x30
 800fbe4:	f805 3b01 	strb.w	r3, [r5], #1
 800fbe8:	9b02      	ldr	r3, [sp, #8]
 800fbea:	429d      	cmp	r5, r3
 800fbec:	4606      	mov	r6, r0
 800fbee:	460f      	mov	r7, r1
 800fbf0:	f04f 0200 	mov.w	r2, #0
 800fbf4:	d134      	bne.n	800fc60 <_dtoa_r+0x660>
 800fbf6:	4b19      	ldr	r3, [pc, #100]	; (800fc5c <_dtoa_r+0x65c>)
 800fbf8:	ec51 0b18 	vmov	r0, r1, d8
 800fbfc:	f7f0 fb4e 	bl	800029c <__adddf3>
 800fc00:	4602      	mov	r2, r0
 800fc02:	460b      	mov	r3, r1
 800fc04:	4630      	mov	r0, r6
 800fc06:	4639      	mov	r1, r7
 800fc08:	f7f0 ff8e 	bl	8000b28 <__aeabi_dcmpgt>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d175      	bne.n	800fcfc <_dtoa_r+0x6fc>
 800fc10:	ec53 2b18 	vmov	r2, r3, d8
 800fc14:	4911      	ldr	r1, [pc, #68]	; (800fc5c <_dtoa_r+0x65c>)
 800fc16:	2000      	movs	r0, #0
 800fc18:	f7f0 fb3e 	bl	8000298 <__aeabi_dsub>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	460b      	mov	r3, r1
 800fc20:	4630      	mov	r0, r6
 800fc22:	4639      	mov	r1, r7
 800fc24:	f7f0 ff62 	bl	8000aec <__aeabi_dcmplt>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	f43f af27 	beq.w	800fa7c <_dtoa_r+0x47c>
 800fc2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc30:	1e6b      	subs	r3, r5, #1
 800fc32:	930c      	str	r3, [sp, #48]	; 0x30
 800fc34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc38:	2b30      	cmp	r3, #48	; 0x30
 800fc3a:	d0f8      	beq.n	800fc2e <_dtoa_r+0x62e>
 800fc3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fc40:	e04a      	b.n	800fcd8 <_dtoa_r+0x6d8>
 800fc42:	bf00      	nop
 800fc44:	08012fb8 	.word	0x08012fb8
 800fc48:	08012f90 	.word	0x08012f90
 800fc4c:	3ff00000 	.word	0x3ff00000
 800fc50:	40240000 	.word	0x40240000
 800fc54:	401c0000 	.word	0x401c0000
 800fc58:	40140000 	.word	0x40140000
 800fc5c:	3fe00000 	.word	0x3fe00000
 800fc60:	4baf      	ldr	r3, [pc, #700]	; (800ff20 <_dtoa_r+0x920>)
 800fc62:	f7f0 fcd1 	bl	8000608 <__aeabi_dmul>
 800fc66:	4606      	mov	r6, r0
 800fc68:	460f      	mov	r7, r1
 800fc6a:	e7ac      	b.n	800fbc6 <_dtoa_r+0x5c6>
 800fc6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc70:	9d00      	ldr	r5, [sp, #0]
 800fc72:	4642      	mov	r2, r8
 800fc74:	464b      	mov	r3, r9
 800fc76:	4630      	mov	r0, r6
 800fc78:	4639      	mov	r1, r7
 800fc7a:	f7f0 fdef 	bl	800085c <__aeabi_ddiv>
 800fc7e:	f7f0 ff73 	bl	8000b68 <__aeabi_d2iz>
 800fc82:	9002      	str	r0, [sp, #8]
 800fc84:	f7f0 fc56 	bl	8000534 <__aeabi_i2d>
 800fc88:	4642      	mov	r2, r8
 800fc8a:	464b      	mov	r3, r9
 800fc8c:	f7f0 fcbc 	bl	8000608 <__aeabi_dmul>
 800fc90:	4602      	mov	r2, r0
 800fc92:	460b      	mov	r3, r1
 800fc94:	4630      	mov	r0, r6
 800fc96:	4639      	mov	r1, r7
 800fc98:	f7f0 fafe 	bl	8000298 <__aeabi_dsub>
 800fc9c:	9e02      	ldr	r6, [sp, #8]
 800fc9e:	9f01      	ldr	r7, [sp, #4]
 800fca0:	3630      	adds	r6, #48	; 0x30
 800fca2:	f805 6b01 	strb.w	r6, [r5], #1
 800fca6:	9e00      	ldr	r6, [sp, #0]
 800fca8:	1bae      	subs	r6, r5, r6
 800fcaa:	42b7      	cmp	r7, r6
 800fcac:	4602      	mov	r2, r0
 800fcae:	460b      	mov	r3, r1
 800fcb0:	d137      	bne.n	800fd22 <_dtoa_r+0x722>
 800fcb2:	f7f0 faf3 	bl	800029c <__adddf3>
 800fcb6:	4642      	mov	r2, r8
 800fcb8:	464b      	mov	r3, r9
 800fcba:	4606      	mov	r6, r0
 800fcbc:	460f      	mov	r7, r1
 800fcbe:	f7f0 ff33 	bl	8000b28 <__aeabi_dcmpgt>
 800fcc2:	b9c8      	cbnz	r0, 800fcf8 <_dtoa_r+0x6f8>
 800fcc4:	4642      	mov	r2, r8
 800fcc6:	464b      	mov	r3, r9
 800fcc8:	4630      	mov	r0, r6
 800fcca:	4639      	mov	r1, r7
 800fccc:	f7f0 ff04 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcd0:	b110      	cbz	r0, 800fcd8 <_dtoa_r+0x6d8>
 800fcd2:	9b02      	ldr	r3, [sp, #8]
 800fcd4:	07d9      	lsls	r1, r3, #31
 800fcd6:	d40f      	bmi.n	800fcf8 <_dtoa_r+0x6f8>
 800fcd8:	4620      	mov	r0, r4
 800fcda:	4659      	mov	r1, fp
 800fcdc:	f000 fc0c 	bl	80104f8 <_Bfree>
 800fce0:	2300      	movs	r3, #0
 800fce2:	702b      	strb	r3, [r5, #0]
 800fce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fce6:	f10a 0001 	add.w	r0, sl, #1
 800fcea:	6018      	str	r0, [r3, #0]
 800fcec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f43f acd8 	beq.w	800f6a4 <_dtoa_r+0xa4>
 800fcf4:	601d      	str	r5, [r3, #0]
 800fcf6:	e4d5      	b.n	800f6a4 <_dtoa_r+0xa4>
 800fcf8:	f8cd a01c 	str.w	sl, [sp, #28]
 800fcfc:	462b      	mov	r3, r5
 800fcfe:	461d      	mov	r5, r3
 800fd00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd04:	2a39      	cmp	r2, #57	; 0x39
 800fd06:	d108      	bne.n	800fd1a <_dtoa_r+0x71a>
 800fd08:	9a00      	ldr	r2, [sp, #0]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d1f7      	bne.n	800fcfe <_dtoa_r+0x6fe>
 800fd0e:	9a07      	ldr	r2, [sp, #28]
 800fd10:	9900      	ldr	r1, [sp, #0]
 800fd12:	3201      	adds	r2, #1
 800fd14:	9207      	str	r2, [sp, #28]
 800fd16:	2230      	movs	r2, #48	; 0x30
 800fd18:	700a      	strb	r2, [r1, #0]
 800fd1a:	781a      	ldrb	r2, [r3, #0]
 800fd1c:	3201      	adds	r2, #1
 800fd1e:	701a      	strb	r2, [r3, #0]
 800fd20:	e78c      	b.n	800fc3c <_dtoa_r+0x63c>
 800fd22:	4b7f      	ldr	r3, [pc, #508]	; (800ff20 <_dtoa_r+0x920>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	f7f0 fc6f 	bl	8000608 <__aeabi_dmul>
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	4606      	mov	r6, r0
 800fd30:	460f      	mov	r7, r1
 800fd32:	f7f0 fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d09b      	beq.n	800fc72 <_dtoa_r+0x672>
 800fd3a:	e7cd      	b.n	800fcd8 <_dtoa_r+0x6d8>
 800fd3c:	9a08      	ldr	r2, [sp, #32]
 800fd3e:	2a00      	cmp	r2, #0
 800fd40:	f000 80c4 	beq.w	800fecc <_dtoa_r+0x8cc>
 800fd44:	9a05      	ldr	r2, [sp, #20]
 800fd46:	2a01      	cmp	r2, #1
 800fd48:	f300 80a8 	bgt.w	800fe9c <_dtoa_r+0x89c>
 800fd4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd4e:	2a00      	cmp	r2, #0
 800fd50:	f000 80a0 	beq.w	800fe94 <_dtoa_r+0x894>
 800fd54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd58:	9e06      	ldr	r6, [sp, #24]
 800fd5a:	4645      	mov	r5, r8
 800fd5c:	9a04      	ldr	r2, [sp, #16]
 800fd5e:	2101      	movs	r1, #1
 800fd60:	441a      	add	r2, r3
 800fd62:	4620      	mov	r0, r4
 800fd64:	4498      	add	r8, r3
 800fd66:	9204      	str	r2, [sp, #16]
 800fd68:	f000 fc82 	bl	8010670 <__i2b>
 800fd6c:	4607      	mov	r7, r0
 800fd6e:	2d00      	cmp	r5, #0
 800fd70:	dd0b      	ble.n	800fd8a <_dtoa_r+0x78a>
 800fd72:	9b04      	ldr	r3, [sp, #16]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	dd08      	ble.n	800fd8a <_dtoa_r+0x78a>
 800fd78:	42ab      	cmp	r3, r5
 800fd7a:	9a04      	ldr	r2, [sp, #16]
 800fd7c:	bfa8      	it	ge
 800fd7e:	462b      	movge	r3, r5
 800fd80:	eba8 0803 	sub.w	r8, r8, r3
 800fd84:	1aed      	subs	r5, r5, r3
 800fd86:	1ad3      	subs	r3, r2, r3
 800fd88:	9304      	str	r3, [sp, #16]
 800fd8a:	9b06      	ldr	r3, [sp, #24]
 800fd8c:	b1fb      	cbz	r3, 800fdce <_dtoa_r+0x7ce>
 800fd8e:	9b08      	ldr	r3, [sp, #32]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 809f 	beq.w	800fed4 <_dtoa_r+0x8d4>
 800fd96:	2e00      	cmp	r6, #0
 800fd98:	dd11      	ble.n	800fdbe <_dtoa_r+0x7be>
 800fd9a:	4639      	mov	r1, r7
 800fd9c:	4632      	mov	r2, r6
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 fd22 	bl	80107e8 <__pow5mult>
 800fda4:	465a      	mov	r2, fp
 800fda6:	4601      	mov	r1, r0
 800fda8:	4607      	mov	r7, r0
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f000 fc76 	bl	801069c <__multiply>
 800fdb0:	4659      	mov	r1, fp
 800fdb2:	9007      	str	r0, [sp, #28]
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f000 fb9f 	bl	80104f8 <_Bfree>
 800fdba:	9b07      	ldr	r3, [sp, #28]
 800fdbc:	469b      	mov	fp, r3
 800fdbe:	9b06      	ldr	r3, [sp, #24]
 800fdc0:	1b9a      	subs	r2, r3, r6
 800fdc2:	d004      	beq.n	800fdce <_dtoa_r+0x7ce>
 800fdc4:	4659      	mov	r1, fp
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f000 fd0e 	bl	80107e8 <__pow5mult>
 800fdcc:	4683      	mov	fp, r0
 800fdce:	2101      	movs	r1, #1
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 fc4d 	bl	8010670 <__i2b>
 800fdd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	4606      	mov	r6, r0
 800fddc:	dd7c      	ble.n	800fed8 <_dtoa_r+0x8d8>
 800fdde:	461a      	mov	r2, r3
 800fde0:	4601      	mov	r1, r0
 800fde2:	4620      	mov	r0, r4
 800fde4:	f000 fd00 	bl	80107e8 <__pow5mult>
 800fde8:	9b05      	ldr	r3, [sp, #20]
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	4606      	mov	r6, r0
 800fdee:	dd76      	ble.n	800fede <_dtoa_r+0x8de>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	9306      	str	r3, [sp, #24]
 800fdf4:	6933      	ldr	r3, [r6, #16]
 800fdf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fdfa:	6918      	ldr	r0, [r3, #16]
 800fdfc:	f000 fbe8 	bl	80105d0 <__hi0bits>
 800fe00:	f1c0 0020 	rsb	r0, r0, #32
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	4418      	add	r0, r3
 800fe08:	f010 001f 	ands.w	r0, r0, #31
 800fe0c:	f000 8086 	beq.w	800ff1c <_dtoa_r+0x91c>
 800fe10:	f1c0 0320 	rsb	r3, r0, #32
 800fe14:	2b04      	cmp	r3, #4
 800fe16:	dd7f      	ble.n	800ff18 <_dtoa_r+0x918>
 800fe18:	f1c0 001c 	rsb	r0, r0, #28
 800fe1c:	9b04      	ldr	r3, [sp, #16]
 800fe1e:	4403      	add	r3, r0
 800fe20:	4480      	add	r8, r0
 800fe22:	4405      	add	r5, r0
 800fe24:	9304      	str	r3, [sp, #16]
 800fe26:	f1b8 0f00 	cmp.w	r8, #0
 800fe2a:	dd05      	ble.n	800fe38 <_dtoa_r+0x838>
 800fe2c:	4659      	mov	r1, fp
 800fe2e:	4642      	mov	r2, r8
 800fe30:	4620      	mov	r0, r4
 800fe32:	f000 fd33 	bl	801089c <__lshift>
 800fe36:	4683      	mov	fp, r0
 800fe38:	9b04      	ldr	r3, [sp, #16]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	dd05      	ble.n	800fe4a <_dtoa_r+0x84a>
 800fe3e:	4631      	mov	r1, r6
 800fe40:	461a      	mov	r2, r3
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fd2a 	bl	801089c <__lshift>
 800fe48:	4606      	mov	r6, r0
 800fe4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d069      	beq.n	800ff24 <_dtoa_r+0x924>
 800fe50:	4631      	mov	r1, r6
 800fe52:	4658      	mov	r0, fp
 800fe54:	f000 fd8e 	bl	8010974 <__mcmp>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	da63      	bge.n	800ff24 <_dtoa_r+0x924>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	4659      	mov	r1, fp
 800fe60:	220a      	movs	r2, #10
 800fe62:	4620      	mov	r0, r4
 800fe64:	f000 fb6a 	bl	801053c <__multadd>
 800fe68:	9b08      	ldr	r3, [sp, #32]
 800fe6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe6e:	4683      	mov	fp, r0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f000 818f 	beq.w	8010194 <_dtoa_r+0xb94>
 800fe76:	4639      	mov	r1, r7
 800fe78:	2300      	movs	r3, #0
 800fe7a:	220a      	movs	r2, #10
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f000 fb5d 	bl	801053c <__multadd>
 800fe82:	f1b9 0f00 	cmp.w	r9, #0
 800fe86:	4607      	mov	r7, r0
 800fe88:	f300 808e 	bgt.w	800ffa8 <_dtoa_r+0x9a8>
 800fe8c:	9b05      	ldr	r3, [sp, #20]
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	dc50      	bgt.n	800ff34 <_dtoa_r+0x934>
 800fe92:	e089      	b.n	800ffa8 <_dtoa_r+0x9a8>
 800fe94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe9a:	e75d      	b.n	800fd58 <_dtoa_r+0x758>
 800fe9c:	9b01      	ldr	r3, [sp, #4]
 800fe9e:	1e5e      	subs	r6, r3, #1
 800fea0:	9b06      	ldr	r3, [sp, #24]
 800fea2:	42b3      	cmp	r3, r6
 800fea4:	bfbf      	itttt	lt
 800fea6:	9b06      	ldrlt	r3, [sp, #24]
 800fea8:	9606      	strlt	r6, [sp, #24]
 800feaa:	1af2      	sublt	r2, r6, r3
 800feac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800feae:	bfb6      	itet	lt
 800feb0:	189b      	addlt	r3, r3, r2
 800feb2:	1b9e      	subge	r6, r3, r6
 800feb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	bfb8      	it	lt
 800feba:	2600      	movlt	r6, #0
 800febc:	2b00      	cmp	r3, #0
 800febe:	bfb5      	itete	lt
 800fec0:	eba8 0503 	sublt.w	r5, r8, r3
 800fec4:	9b01      	ldrge	r3, [sp, #4]
 800fec6:	2300      	movlt	r3, #0
 800fec8:	4645      	movge	r5, r8
 800feca:	e747      	b.n	800fd5c <_dtoa_r+0x75c>
 800fecc:	9e06      	ldr	r6, [sp, #24]
 800fece:	9f08      	ldr	r7, [sp, #32]
 800fed0:	4645      	mov	r5, r8
 800fed2:	e74c      	b.n	800fd6e <_dtoa_r+0x76e>
 800fed4:	9a06      	ldr	r2, [sp, #24]
 800fed6:	e775      	b.n	800fdc4 <_dtoa_r+0x7c4>
 800fed8:	9b05      	ldr	r3, [sp, #20]
 800feda:	2b01      	cmp	r3, #1
 800fedc:	dc18      	bgt.n	800ff10 <_dtoa_r+0x910>
 800fede:	9b02      	ldr	r3, [sp, #8]
 800fee0:	b9b3      	cbnz	r3, 800ff10 <_dtoa_r+0x910>
 800fee2:	9b03      	ldr	r3, [sp, #12]
 800fee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fee8:	b9a3      	cbnz	r3, 800ff14 <_dtoa_r+0x914>
 800feea:	9b03      	ldr	r3, [sp, #12]
 800feec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fef0:	0d1b      	lsrs	r3, r3, #20
 800fef2:	051b      	lsls	r3, r3, #20
 800fef4:	b12b      	cbz	r3, 800ff02 <_dtoa_r+0x902>
 800fef6:	9b04      	ldr	r3, [sp, #16]
 800fef8:	3301      	adds	r3, #1
 800fefa:	9304      	str	r3, [sp, #16]
 800fefc:	f108 0801 	add.w	r8, r8, #1
 800ff00:	2301      	movs	r3, #1
 800ff02:	9306      	str	r3, [sp, #24]
 800ff04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f47f af74 	bne.w	800fdf4 <_dtoa_r+0x7f4>
 800ff0c:	2001      	movs	r0, #1
 800ff0e:	e779      	b.n	800fe04 <_dtoa_r+0x804>
 800ff10:	2300      	movs	r3, #0
 800ff12:	e7f6      	b.n	800ff02 <_dtoa_r+0x902>
 800ff14:	9b02      	ldr	r3, [sp, #8]
 800ff16:	e7f4      	b.n	800ff02 <_dtoa_r+0x902>
 800ff18:	d085      	beq.n	800fe26 <_dtoa_r+0x826>
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	301c      	adds	r0, #28
 800ff1e:	e77d      	b.n	800fe1c <_dtoa_r+0x81c>
 800ff20:	40240000 	.word	0x40240000
 800ff24:	9b01      	ldr	r3, [sp, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	dc38      	bgt.n	800ff9c <_dtoa_r+0x99c>
 800ff2a:	9b05      	ldr	r3, [sp, #20]
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	dd35      	ble.n	800ff9c <_dtoa_r+0x99c>
 800ff30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ff34:	f1b9 0f00 	cmp.w	r9, #0
 800ff38:	d10d      	bne.n	800ff56 <_dtoa_r+0x956>
 800ff3a:	4631      	mov	r1, r6
 800ff3c:	464b      	mov	r3, r9
 800ff3e:	2205      	movs	r2, #5
 800ff40:	4620      	mov	r0, r4
 800ff42:	f000 fafb 	bl	801053c <__multadd>
 800ff46:	4601      	mov	r1, r0
 800ff48:	4606      	mov	r6, r0
 800ff4a:	4658      	mov	r0, fp
 800ff4c:	f000 fd12 	bl	8010974 <__mcmp>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	f73f adbd 	bgt.w	800fad0 <_dtoa_r+0x4d0>
 800ff56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff58:	9d00      	ldr	r5, [sp, #0]
 800ff5a:	ea6f 0a03 	mvn.w	sl, r3
 800ff5e:	f04f 0800 	mov.w	r8, #0
 800ff62:	4631      	mov	r1, r6
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fac7 	bl	80104f8 <_Bfree>
 800ff6a:	2f00      	cmp	r7, #0
 800ff6c:	f43f aeb4 	beq.w	800fcd8 <_dtoa_r+0x6d8>
 800ff70:	f1b8 0f00 	cmp.w	r8, #0
 800ff74:	d005      	beq.n	800ff82 <_dtoa_r+0x982>
 800ff76:	45b8      	cmp	r8, r7
 800ff78:	d003      	beq.n	800ff82 <_dtoa_r+0x982>
 800ff7a:	4641      	mov	r1, r8
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f000 fabb 	bl	80104f8 <_Bfree>
 800ff82:	4639      	mov	r1, r7
 800ff84:	4620      	mov	r0, r4
 800ff86:	f000 fab7 	bl	80104f8 <_Bfree>
 800ff8a:	e6a5      	b.n	800fcd8 <_dtoa_r+0x6d8>
 800ff8c:	2600      	movs	r6, #0
 800ff8e:	4637      	mov	r7, r6
 800ff90:	e7e1      	b.n	800ff56 <_dtoa_r+0x956>
 800ff92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ff98:	4637      	mov	r7, r6
 800ff9a:	e599      	b.n	800fad0 <_dtoa_r+0x4d0>
 800ff9c:	9b08      	ldr	r3, [sp, #32]
 800ff9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f000 80fd 	beq.w	80101a2 <_dtoa_r+0xba2>
 800ffa8:	2d00      	cmp	r5, #0
 800ffaa:	dd05      	ble.n	800ffb8 <_dtoa_r+0x9b8>
 800ffac:	4639      	mov	r1, r7
 800ffae:	462a      	mov	r2, r5
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f000 fc73 	bl	801089c <__lshift>
 800ffb6:	4607      	mov	r7, r0
 800ffb8:	9b06      	ldr	r3, [sp, #24]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d05c      	beq.n	8010078 <_dtoa_r+0xa78>
 800ffbe:	6879      	ldr	r1, [r7, #4]
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f000 fa59 	bl	8010478 <_Balloc>
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	b928      	cbnz	r0, 800ffd6 <_dtoa_r+0x9d6>
 800ffca:	4b80      	ldr	r3, [pc, #512]	; (80101cc <_dtoa_r+0xbcc>)
 800ffcc:	4602      	mov	r2, r0
 800ffce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ffd2:	f7ff bb2e 	b.w	800f632 <_dtoa_r+0x32>
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	3202      	adds	r2, #2
 800ffda:	0092      	lsls	r2, r2, #2
 800ffdc:	f107 010c 	add.w	r1, r7, #12
 800ffe0:	300c      	adds	r0, #12
 800ffe2:	f7fe fb4e 	bl	800e682 <memcpy>
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	4629      	mov	r1, r5
 800ffea:	4620      	mov	r0, r4
 800ffec:	f000 fc56 	bl	801089c <__lshift>
 800fff0:	9b00      	ldr	r3, [sp, #0]
 800fff2:	3301      	adds	r3, #1
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	9b00      	ldr	r3, [sp, #0]
 800fff8:	444b      	add	r3, r9
 800fffa:	9307      	str	r3, [sp, #28]
 800fffc:	9b02      	ldr	r3, [sp, #8]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	46b8      	mov	r8, r7
 8010004:	9306      	str	r3, [sp, #24]
 8010006:	4607      	mov	r7, r0
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	4631      	mov	r1, r6
 801000c:	3b01      	subs	r3, #1
 801000e:	4658      	mov	r0, fp
 8010010:	9302      	str	r3, [sp, #8]
 8010012:	f7ff fa67 	bl	800f4e4 <quorem>
 8010016:	4603      	mov	r3, r0
 8010018:	3330      	adds	r3, #48	; 0x30
 801001a:	9004      	str	r0, [sp, #16]
 801001c:	4641      	mov	r1, r8
 801001e:	4658      	mov	r0, fp
 8010020:	9308      	str	r3, [sp, #32]
 8010022:	f000 fca7 	bl	8010974 <__mcmp>
 8010026:	463a      	mov	r2, r7
 8010028:	4681      	mov	r9, r0
 801002a:	4631      	mov	r1, r6
 801002c:	4620      	mov	r0, r4
 801002e:	f000 fcbd 	bl	80109ac <__mdiff>
 8010032:	68c2      	ldr	r2, [r0, #12]
 8010034:	9b08      	ldr	r3, [sp, #32]
 8010036:	4605      	mov	r5, r0
 8010038:	bb02      	cbnz	r2, 801007c <_dtoa_r+0xa7c>
 801003a:	4601      	mov	r1, r0
 801003c:	4658      	mov	r0, fp
 801003e:	f000 fc99 	bl	8010974 <__mcmp>
 8010042:	9b08      	ldr	r3, [sp, #32]
 8010044:	4602      	mov	r2, r0
 8010046:	4629      	mov	r1, r5
 8010048:	4620      	mov	r0, r4
 801004a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801004e:	f000 fa53 	bl	80104f8 <_Bfree>
 8010052:	9b05      	ldr	r3, [sp, #20]
 8010054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010056:	9d01      	ldr	r5, [sp, #4]
 8010058:	ea43 0102 	orr.w	r1, r3, r2
 801005c:	9b06      	ldr	r3, [sp, #24]
 801005e:	430b      	orrs	r3, r1
 8010060:	9b08      	ldr	r3, [sp, #32]
 8010062:	d10d      	bne.n	8010080 <_dtoa_r+0xa80>
 8010064:	2b39      	cmp	r3, #57	; 0x39
 8010066:	d029      	beq.n	80100bc <_dtoa_r+0xabc>
 8010068:	f1b9 0f00 	cmp.w	r9, #0
 801006c:	dd01      	ble.n	8010072 <_dtoa_r+0xa72>
 801006e:	9b04      	ldr	r3, [sp, #16]
 8010070:	3331      	adds	r3, #49	; 0x31
 8010072:	9a02      	ldr	r2, [sp, #8]
 8010074:	7013      	strb	r3, [r2, #0]
 8010076:	e774      	b.n	800ff62 <_dtoa_r+0x962>
 8010078:	4638      	mov	r0, r7
 801007a:	e7b9      	b.n	800fff0 <_dtoa_r+0x9f0>
 801007c:	2201      	movs	r2, #1
 801007e:	e7e2      	b.n	8010046 <_dtoa_r+0xa46>
 8010080:	f1b9 0f00 	cmp.w	r9, #0
 8010084:	db06      	blt.n	8010094 <_dtoa_r+0xa94>
 8010086:	9905      	ldr	r1, [sp, #20]
 8010088:	ea41 0909 	orr.w	r9, r1, r9
 801008c:	9906      	ldr	r1, [sp, #24]
 801008e:	ea59 0101 	orrs.w	r1, r9, r1
 8010092:	d120      	bne.n	80100d6 <_dtoa_r+0xad6>
 8010094:	2a00      	cmp	r2, #0
 8010096:	ddec      	ble.n	8010072 <_dtoa_r+0xa72>
 8010098:	4659      	mov	r1, fp
 801009a:	2201      	movs	r2, #1
 801009c:	4620      	mov	r0, r4
 801009e:	9301      	str	r3, [sp, #4]
 80100a0:	f000 fbfc 	bl	801089c <__lshift>
 80100a4:	4631      	mov	r1, r6
 80100a6:	4683      	mov	fp, r0
 80100a8:	f000 fc64 	bl	8010974 <__mcmp>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	9b01      	ldr	r3, [sp, #4]
 80100b0:	dc02      	bgt.n	80100b8 <_dtoa_r+0xab8>
 80100b2:	d1de      	bne.n	8010072 <_dtoa_r+0xa72>
 80100b4:	07da      	lsls	r2, r3, #31
 80100b6:	d5dc      	bpl.n	8010072 <_dtoa_r+0xa72>
 80100b8:	2b39      	cmp	r3, #57	; 0x39
 80100ba:	d1d8      	bne.n	801006e <_dtoa_r+0xa6e>
 80100bc:	9a02      	ldr	r2, [sp, #8]
 80100be:	2339      	movs	r3, #57	; 0x39
 80100c0:	7013      	strb	r3, [r2, #0]
 80100c2:	462b      	mov	r3, r5
 80100c4:	461d      	mov	r5, r3
 80100c6:	3b01      	subs	r3, #1
 80100c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80100cc:	2a39      	cmp	r2, #57	; 0x39
 80100ce:	d050      	beq.n	8010172 <_dtoa_r+0xb72>
 80100d0:	3201      	adds	r2, #1
 80100d2:	701a      	strb	r2, [r3, #0]
 80100d4:	e745      	b.n	800ff62 <_dtoa_r+0x962>
 80100d6:	2a00      	cmp	r2, #0
 80100d8:	dd03      	ble.n	80100e2 <_dtoa_r+0xae2>
 80100da:	2b39      	cmp	r3, #57	; 0x39
 80100dc:	d0ee      	beq.n	80100bc <_dtoa_r+0xabc>
 80100de:	3301      	adds	r3, #1
 80100e0:	e7c7      	b.n	8010072 <_dtoa_r+0xa72>
 80100e2:	9a01      	ldr	r2, [sp, #4]
 80100e4:	9907      	ldr	r1, [sp, #28]
 80100e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80100ea:	428a      	cmp	r2, r1
 80100ec:	d02a      	beq.n	8010144 <_dtoa_r+0xb44>
 80100ee:	4659      	mov	r1, fp
 80100f0:	2300      	movs	r3, #0
 80100f2:	220a      	movs	r2, #10
 80100f4:	4620      	mov	r0, r4
 80100f6:	f000 fa21 	bl	801053c <__multadd>
 80100fa:	45b8      	cmp	r8, r7
 80100fc:	4683      	mov	fp, r0
 80100fe:	f04f 0300 	mov.w	r3, #0
 8010102:	f04f 020a 	mov.w	r2, #10
 8010106:	4641      	mov	r1, r8
 8010108:	4620      	mov	r0, r4
 801010a:	d107      	bne.n	801011c <_dtoa_r+0xb1c>
 801010c:	f000 fa16 	bl	801053c <__multadd>
 8010110:	4680      	mov	r8, r0
 8010112:	4607      	mov	r7, r0
 8010114:	9b01      	ldr	r3, [sp, #4]
 8010116:	3301      	adds	r3, #1
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	e775      	b.n	8010008 <_dtoa_r+0xa08>
 801011c:	f000 fa0e 	bl	801053c <__multadd>
 8010120:	4639      	mov	r1, r7
 8010122:	4680      	mov	r8, r0
 8010124:	2300      	movs	r3, #0
 8010126:	220a      	movs	r2, #10
 8010128:	4620      	mov	r0, r4
 801012a:	f000 fa07 	bl	801053c <__multadd>
 801012e:	4607      	mov	r7, r0
 8010130:	e7f0      	b.n	8010114 <_dtoa_r+0xb14>
 8010132:	f1b9 0f00 	cmp.w	r9, #0
 8010136:	9a00      	ldr	r2, [sp, #0]
 8010138:	bfcc      	ite	gt
 801013a:	464d      	movgt	r5, r9
 801013c:	2501      	movle	r5, #1
 801013e:	4415      	add	r5, r2
 8010140:	f04f 0800 	mov.w	r8, #0
 8010144:	4659      	mov	r1, fp
 8010146:	2201      	movs	r2, #1
 8010148:	4620      	mov	r0, r4
 801014a:	9301      	str	r3, [sp, #4]
 801014c:	f000 fba6 	bl	801089c <__lshift>
 8010150:	4631      	mov	r1, r6
 8010152:	4683      	mov	fp, r0
 8010154:	f000 fc0e 	bl	8010974 <__mcmp>
 8010158:	2800      	cmp	r0, #0
 801015a:	dcb2      	bgt.n	80100c2 <_dtoa_r+0xac2>
 801015c:	d102      	bne.n	8010164 <_dtoa_r+0xb64>
 801015e:	9b01      	ldr	r3, [sp, #4]
 8010160:	07db      	lsls	r3, r3, #31
 8010162:	d4ae      	bmi.n	80100c2 <_dtoa_r+0xac2>
 8010164:	462b      	mov	r3, r5
 8010166:	461d      	mov	r5, r3
 8010168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801016c:	2a30      	cmp	r2, #48	; 0x30
 801016e:	d0fa      	beq.n	8010166 <_dtoa_r+0xb66>
 8010170:	e6f7      	b.n	800ff62 <_dtoa_r+0x962>
 8010172:	9a00      	ldr	r2, [sp, #0]
 8010174:	429a      	cmp	r2, r3
 8010176:	d1a5      	bne.n	80100c4 <_dtoa_r+0xac4>
 8010178:	f10a 0a01 	add.w	sl, sl, #1
 801017c:	2331      	movs	r3, #49	; 0x31
 801017e:	e779      	b.n	8010074 <_dtoa_r+0xa74>
 8010180:	4b13      	ldr	r3, [pc, #76]	; (80101d0 <_dtoa_r+0xbd0>)
 8010182:	f7ff baaf 	b.w	800f6e4 <_dtoa_r+0xe4>
 8010186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010188:	2b00      	cmp	r3, #0
 801018a:	f47f aa86 	bne.w	800f69a <_dtoa_r+0x9a>
 801018e:	4b11      	ldr	r3, [pc, #68]	; (80101d4 <_dtoa_r+0xbd4>)
 8010190:	f7ff baa8 	b.w	800f6e4 <_dtoa_r+0xe4>
 8010194:	f1b9 0f00 	cmp.w	r9, #0
 8010198:	dc03      	bgt.n	80101a2 <_dtoa_r+0xba2>
 801019a:	9b05      	ldr	r3, [sp, #20]
 801019c:	2b02      	cmp	r3, #2
 801019e:	f73f aec9 	bgt.w	800ff34 <_dtoa_r+0x934>
 80101a2:	9d00      	ldr	r5, [sp, #0]
 80101a4:	4631      	mov	r1, r6
 80101a6:	4658      	mov	r0, fp
 80101a8:	f7ff f99c 	bl	800f4e4 <quorem>
 80101ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80101b0:	f805 3b01 	strb.w	r3, [r5], #1
 80101b4:	9a00      	ldr	r2, [sp, #0]
 80101b6:	1aaa      	subs	r2, r5, r2
 80101b8:	4591      	cmp	r9, r2
 80101ba:	ddba      	ble.n	8010132 <_dtoa_r+0xb32>
 80101bc:	4659      	mov	r1, fp
 80101be:	2300      	movs	r3, #0
 80101c0:	220a      	movs	r2, #10
 80101c2:	4620      	mov	r0, r4
 80101c4:	f000 f9ba 	bl	801053c <__multadd>
 80101c8:	4683      	mov	fp, r0
 80101ca:	e7eb      	b.n	80101a4 <_dtoa_r+0xba4>
 80101cc:	08012f1b 	.word	0x08012f1b
 80101d0:	08012e74 	.word	0x08012e74
 80101d4:	08012e98 	.word	0x08012e98

080101d8 <__sflush_r>:
 80101d8:	898a      	ldrh	r2, [r1, #12]
 80101da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101de:	4605      	mov	r5, r0
 80101e0:	0710      	lsls	r0, r2, #28
 80101e2:	460c      	mov	r4, r1
 80101e4:	d458      	bmi.n	8010298 <__sflush_r+0xc0>
 80101e6:	684b      	ldr	r3, [r1, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	dc05      	bgt.n	80101f8 <__sflush_r+0x20>
 80101ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	dc02      	bgt.n	80101f8 <__sflush_r+0x20>
 80101f2:	2000      	movs	r0, #0
 80101f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101fa:	2e00      	cmp	r6, #0
 80101fc:	d0f9      	beq.n	80101f2 <__sflush_r+0x1a>
 80101fe:	2300      	movs	r3, #0
 8010200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010204:	682f      	ldr	r7, [r5, #0]
 8010206:	602b      	str	r3, [r5, #0]
 8010208:	d032      	beq.n	8010270 <__sflush_r+0x98>
 801020a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801020c:	89a3      	ldrh	r3, [r4, #12]
 801020e:	075a      	lsls	r2, r3, #29
 8010210:	d505      	bpl.n	801021e <__sflush_r+0x46>
 8010212:	6863      	ldr	r3, [r4, #4]
 8010214:	1ac0      	subs	r0, r0, r3
 8010216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010218:	b10b      	cbz	r3, 801021e <__sflush_r+0x46>
 801021a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801021c:	1ac0      	subs	r0, r0, r3
 801021e:	2300      	movs	r3, #0
 8010220:	4602      	mov	r2, r0
 8010222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010224:	6a21      	ldr	r1, [r4, #32]
 8010226:	4628      	mov	r0, r5
 8010228:	47b0      	blx	r6
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	89a3      	ldrh	r3, [r4, #12]
 801022e:	d106      	bne.n	801023e <__sflush_r+0x66>
 8010230:	6829      	ldr	r1, [r5, #0]
 8010232:	291d      	cmp	r1, #29
 8010234:	d82c      	bhi.n	8010290 <__sflush_r+0xb8>
 8010236:	4a2a      	ldr	r2, [pc, #168]	; (80102e0 <__sflush_r+0x108>)
 8010238:	40ca      	lsrs	r2, r1
 801023a:	07d6      	lsls	r6, r2, #31
 801023c:	d528      	bpl.n	8010290 <__sflush_r+0xb8>
 801023e:	2200      	movs	r2, #0
 8010240:	6062      	str	r2, [r4, #4]
 8010242:	04d9      	lsls	r1, r3, #19
 8010244:	6922      	ldr	r2, [r4, #16]
 8010246:	6022      	str	r2, [r4, #0]
 8010248:	d504      	bpl.n	8010254 <__sflush_r+0x7c>
 801024a:	1c42      	adds	r2, r0, #1
 801024c:	d101      	bne.n	8010252 <__sflush_r+0x7a>
 801024e:	682b      	ldr	r3, [r5, #0]
 8010250:	b903      	cbnz	r3, 8010254 <__sflush_r+0x7c>
 8010252:	6560      	str	r0, [r4, #84]	; 0x54
 8010254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010256:	602f      	str	r7, [r5, #0]
 8010258:	2900      	cmp	r1, #0
 801025a:	d0ca      	beq.n	80101f2 <__sflush_r+0x1a>
 801025c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010260:	4299      	cmp	r1, r3
 8010262:	d002      	beq.n	801026a <__sflush_r+0x92>
 8010264:	4628      	mov	r0, r5
 8010266:	f000 fc95 	bl	8010b94 <_free_r>
 801026a:	2000      	movs	r0, #0
 801026c:	6360      	str	r0, [r4, #52]	; 0x34
 801026e:	e7c1      	b.n	80101f4 <__sflush_r+0x1c>
 8010270:	6a21      	ldr	r1, [r4, #32]
 8010272:	2301      	movs	r3, #1
 8010274:	4628      	mov	r0, r5
 8010276:	47b0      	blx	r6
 8010278:	1c41      	adds	r1, r0, #1
 801027a:	d1c7      	bne.n	801020c <__sflush_r+0x34>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d0c4      	beq.n	801020c <__sflush_r+0x34>
 8010282:	2b1d      	cmp	r3, #29
 8010284:	d001      	beq.n	801028a <__sflush_r+0xb2>
 8010286:	2b16      	cmp	r3, #22
 8010288:	d101      	bne.n	801028e <__sflush_r+0xb6>
 801028a:	602f      	str	r7, [r5, #0]
 801028c:	e7b1      	b.n	80101f2 <__sflush_r+0x1a>
 801028e:	89a3      	ldrh	r3, [r4, #12]
 8010290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010294:	81a3      	strh	r3, [r4, #12]
 8010296:	e7ad      	b.n	80101f4 <__sflush_r+0x1c>
 8010298:	690f      	ldr	r7, [r1, #16]
 801029a:	2f00      	cmp	r7, #0
 801029c:	d0a9      	beq.n	80101f2 <__sflush_r+0x1a>
 801029e:	0793      	lsls	r3, r2, #30
 80102a0:	680e      	ldr	r6, [r1, #0]
 80102a2:	bf08      	it	eq
 80102a4:	694b      	ldreq	r3, [r1, #20]
 80102a6:	600f      	str	r7, [r1, #0]
 80102a8:	bf18      	it	ne
 80102aa:	2300      	movne	r3, #0
 80102ac:	eba6 0807 	sub.w	r8, r6, r7
 80102b0:	608b      	str	r3, [r1, #8]
 80102b2:	f1b8 0f00 	cmp.w	r8, #0
 80102b6:	dd9c      	ble.n	80101f2 <__sflush_r+0x1a>
 80102b8:	6a21      	ldr	r1, [r4, #32]
 80102ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102bc:	4643      	mov	r3, r8
 80102be:	463a      	mov	r2, r7
 80102c0:	4628      	mov	r0, r5
 80102c2:	47b0      	blx	r6
 80102c4:	2800      	cmp	r0, #0
 80102c6:	dc06      	bgt.n	80102d6 <__sflush_r+0xfe>
 80102c8:	89a3      	ldrh	r3, [r4, #12]
 80102ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102ce:	81a3      	strh	r3, [r4, #12]
 80102d0:	f04f 30ff 	mov.w	r0, #4294967295
 80102d4:	e78e      	b.n	80101f4 <__sflush_r+0x1c>
 80102d6:	4407      	add	r7, r0
 80102d8:	eba8 0800 	sub.w	r8, r8, r0
 80102dc:	e7e9      	b.n	80102b2 <__sflush_r+0xda>
 80102de:	bf00      	nop
 80102e0:	20400001 	.word	0x20400001

080102e4 <_fflush_r>:
 80102e4:	b538      	push	{r3, r4, r5, lr}
 80102e6:	690b      	ldr	r3, [r1, #16]
 80102e8:	4605      	mov	r5, r0
 80102ea:	460c      	mov	r4, r1
 80102ec:	b913      	cbnz	r3, 80102f4 <_fflush_r+0x10>
 80102ee:	2500      	movs	r5, #0
 80102f0:	4628      	mov	r0, r5
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	b118      	cbz	r0, 80102fe <_fflush_r+0x1a>
 80102f6:	6983      	ldr	r3, [r0, #24]
 80102f8:	b90b      	cbnz	r3, 80102fe <_fflush_r+0x1a>
 80102fa:	f7fe f8fd 	bl	800e4f8 <__sinit>
 80102fe:	4b14      	ldr	r3, [pc, #80]	; (8010350 <_fflush_r+0x6c>)
 8010300:	429c      	cmp	r4, r3
 8010302:	d11b      	bne.n	801033c <_fflush_r+0x58>
 8010304:	686c      	ldr	r4, [r5, #4]
 8010306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0ef      	beq.n	80102ee <_fflush_r+0xa>
 801030e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010310:	07d0      	lsls	r0, r2, #31
 8010312:	d404      	bmi.n	801031e <_fflush_r+0x3a>
 8010314:	0599      	lsls	r1, r3, #22
 8010316:	d402      	bmi.n	801031e <_fflush_r+0x3a>
 8010318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801031a:	f7fe f9b0 	bl	800e67e <__retarget_lock_acquire_recursive>
 801031e:	4628      	mov	r0, r5
 8010320:	4621      	mov	r1, r4
 8010322:	f7ff ff59 	bl	80101d8 <__sflush_r>
 8010326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010328:	07da      	lsls	r2, r3, #31
 801032a:	4605      	mov	r5, r0
 801032c:	d4e0      	bmi.n	80102f0 <_fflush_r+0xc>
 801032e:	89a3      	ldrh	r3, [r4, #12]
 8010330:	059b      	lsls	r3, r3, #22
 8010332:	d4dd      	bmi.n	80102f0 <_fflush_r+0xc>
 8010334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010336:	f7fe f9a3 	bl	800e680 <__retarget_lock_release_recursive>
 801033a:	e7d9      	b.n	80102f0 <_fflush_r+0xc>
 801033c:	4b05      	ldr	r3, [pc, #20]	; (8010354 <_fflush_r+0x70>)
 801033e:	429c      	cmp	r4, r3
 8010340:	d101      	bne.n	8010346 <_fflush_r+0x62>
 8010342:	68ac      	ldr	r4, [r5, #8]
 8010344:	e7df      	b.n	8010306 <_fflush_r+0x22>
 8010346:	4b04      	ldr	r3, [pc, #16]	; (8010358 <_fflush_r+0x74>)
 8010348:	429c      	cmp	r4, r3
 801034a:	bf08      	it	eq
 801034c:	68ec      	ldreq	r4, [r5, #12]
 801034e:	e7da      	b.n	8010306 <_fflush_r+0x22>
 8010350:	08012e20 	.word	0x08012e20
 8010354:	08012e40 	.word	0x08012e40
 8010358:	08012e00 	.word	0x08012e00

0801035c <_localeconv_r>:
 801035c:	4800      	ldr	r0, [pc, #0]	; (8010360 <_localeconv_r+0x4>)
 801035e:	4770      	bx	lr
 8010360:	20000420 	.word	0x20000420

08010364 <_lseek_r>:
 8010364:	b538      	push	{r3, r4, r5, lr}
 8010366:	4d07      	ldr	r5, [pc, #28]	; (8010384 <_lseek_r+0x20>)
 8010368:	4604      	mov	r4, r0
 801036a:	4608      	mov	r0, r1
 801036c:	4611      	mov	r1, r2
 801036e:	2200      	movs	r2, #0
 8010370:	602a      	str	r2, [r5, #0]
 8010372:	461a      	mov	r2, r3
 8010374:	f7f2 fd00 	bl	8002d78 <_lseek>
 8010378:	1c43      	adds	r3, r0, #1
 801037a:	d102      	bne.n	8010382 <_lseek_r+0x1e>
 801037c:	682b      	ldr	r3, [r5, #0]
 801037e:	b103      	cbz	r3, 8010382 <_lseek_r+0x1e>
 8010380:	6023      	str	r3, [r4, #0]
 8010382:	bd38      	pop	{r3, r4, r5, pc}
 8010384:	20004d2c 	.word	0x20004d2c

08010388 <__swhatbuf_r>:
 8010388:	b570      	push	{r4, r5, r6, lr}
 801038a:	460e      	mov	r6, r1
 801038c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010390:	2900      	cmp	r1, #0
 8010392:	b096      	sub	sp, #88	; 0x58
 8010394:	4614      	mov	r4, r2
 8010396:	461d      	mov	r5, r3
 8010398:	da07      	bge.n	80103aa <__swhatbuf_r+0x22>
 801039a:	2300      	movs	r3, #0
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	89b3      	ldrh	r3, [r6, #12]
 80103a0:	061a      	lsls	r2, r3, #24
 80103a2:	d410      	bmi.n	80103c6 <__swhatbuf_r+0x3e>
 80103a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103a8:	e00e      	b.n	80103c8 <__swhatbuf_r+0x40>
 80103aa:	466a      	mov	r2, sp
 80103ac:	f000 ff3a 	bl	8011224 <_fstat_r>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	dbf2      	blt.n	801039a <__swhatbuf_r+0x12>
 80103b4:	9a01      	ldr	r2, [sp, #4]
 80103b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103be:	425a      	negs	r2, r3
 80103c0:	415a      	adcs	r2, r3
 80103c2:	602a      	str	r2, [r5, #0]
 80103c4:	e7ee      	b.n	80103a4 <__swhatbuf_r+0x1c>
 80103c6:	2340      	movs	r3, #64	; 0x40
 80103c8:	2000      	movs	r0, #0
 80103ca:	6023      	str	r3, [r4, #0]
 80103cc:	b016      	add	sp, #88	; 0x58
 80103ce:	bd70      	pop	{r4, r5, r6, pc}

080103d0 <__smakebuf_r>:
 80103d0:	898b      	ldrh	r3, [r1, #12]
 80103d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103d4:	079d      	lsls	r5, r3, #30
 80103d6:	4606      	mov	r6, r0
 80103d8:	460c      	mov	r4, r1
 80103da:	d507      	bpl.n	80103ec <__smakebuf_r+0x1c>
 80103dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	6123      	str	r3, [r4, #16]
 80103e4:	2301      	movs	r3, #1
 80103e6:	6163      	str	r3, [r4, #20]
 80103e8:	b002      	add	sp, #8
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	ab01      	add	r3, sp, #4
 80103ee:	466a      	mov	r2, sp
 80103f0:	f7ff ffca 	bl	8010388 <__swhatbuf_r>
 80103f4:	9900      	ldr	r1, [sp, #0]
 80103f6:	4605      	mov	r5, r0
 80103f8:	4630      	mov	r0, r6
 80103fa:	f7fe f959 	bl	800e6b0 <_malloc_r>
 80103fe:	b948      	cbnz	r0, 8010414 <__smakebuf_r+0x44>
 8010400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010404:	059a      	lsls	r2, r3, #22
 8010406:	d4ef      	bmi.n	80103e8 <__smakebuf_r+0x18>
 8010408:	f023 0303 	bic.w	r3, r3, #3
 801040c:	f043 0302 	orr.w	r3, r3, #2
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	e7e3      	b.n	80103dc <__smakebuf_r+0xc>
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <__smakebuf_r+0x7c>)
 8010416:	62b3      	str	r3, [r6, #40]	; 0x28
 8010418:	89a3      	ldrh	r3, [r4, #12]
 801041a:	6020      	str	r0, [r4, #0]
 801041c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010420:	81a3      	strh	r3, [r4, #12]
 8010422:	9b00      	ldr	r3, [sp, #0]
 8010424:	6163      	str	r3, [r4, #20]
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	6120      	str	r0, [r4, #16]
 801042a:	b15b      	cbz	r3, 8010444 <__smakebuf_r+0x74>
 801042c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010430:	4630      	mov	r0, r6
 8010432:	f000 ff09 	bl	8011248 <_isatty_r>
 8010436:	b128      	cbz	r0, 8010444 <__smakebuf_r+0x74>
 8010438:	89a3      	ldrh	r3, [r4, #12]
 801043a:	f023 0303 	bic.w	r3, r3, #3
 801043e:	f043 0301 	orr.w	r3, r3, #1
 8010442:	81a3      	strh	r3, [r4, #12]
 8010444:	89a0      	ldrh	r0, [r4, #12]
 8010446:	4305      	orrs	r5, r0
 8010448:	81a5      	strh	r5, [r4, #12]
 801044a:	e7cd      	b.n	80103e8 <__smakebuf_r+0x18>
 801044c:	0800e491 	.word	0x0800e491

08010450 <malloc>:
 8010450:	4b02      	ldr	r3, [pc, #8]	; (801045c <malloc+0xc>)
 8010452:	4601      	mov	r1, r0
 8010454:	6818      	ldr	r0, [r3, #0]
 8010456:	f7fe b92b 	b.w	800e6b0 <_malloc_r>
 801045a:	bf00      	nop
 801045c:	200002cc 	.word	0x200002cc

08010460 <__malloc_lock>:
 8010460:	4801      	ldr	r0, [pc, #4]	; (8010468 <__malloc_lock+0x8>)
 8010462:	f7fe b90c 	b.w	800e67e <__retarget_lock_acquire_recursive>
 8010466:	bf00      	nop
 8010468:	20004d24 	.word	0x20004d24

0801046c <__malloc_unlock>:
 801046c:	4801      	ldr	r0, [pc, #4]	; (8010474 <__malloc_unlock+0x8>)
 801046e:	f7fe b907 	b.w	800e680 <__retarget_lock_release_recursive>
 8010472:	bf00      	nop
 8010474:	20004d24 	.word	0x20004d24

08010478 <_Balloc>:
 8010478:	b570      	push	{r4, r5, r6, lr}
 801047a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801047c:	4604      	mov	r4, r0
 801047e:	460d      	mov	r5, r1
 8010480:	b976      	cbnz	r6, 80104a0 <_Balloc+0x28>
 8010482:	2010      	movs	r0, #16
 8010484:	f7ff ffe4 	bl	8010450 <malloc>
 8010488:	4602      	mov	r2, r0
 801048a:	6260      	str	r0, [r4, #36]	; 0x24
 801048c:	b920      	cbnz	r0, 8010498 <_Balloc+0x20>
 801048e:	4b18      	ldr	r3, [pc, #96]	; (80104f0 <_Balloc+0x78>)
 8010490:	4818      	ldr	r0, [pc, #96]	; (80104f4 <_Balloc+0x7c>)
 8010492:	2166      	movs	r1, #102	; 0x66
 8010494:	f000 fe96 	bl	80111c4 <__assert_func>
 8010498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801049c:	6006      	str	r6, [r0, #0]
 801049e:	60c6      	str	r6, [r0, #12]
 80104a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104a2:	68f3      	ldr	r3, [r6, #12]
 80104a4:	b183      	cbz	r3, 80104c8 <_Balloc+0x50>
 80104a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104ae:	b9b8      	cbnz	r0, 80104e0 <_Balloc+0x68>
 80104b0:	2101      	movs	r1, #1
 80104b2:	fa01 f605 	lsl.w	r6, r1, r5
 80104b6:	1d72      	adds	r2, r6, #5
 80104b8:	0092      	lsls	r2, r2, #2
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 fb5a 	bl	8010b74 <_calloc_r>
 80104c0:	b160      	cbz	r0, 80104dc <_Balloc+0x64>
 80104c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104c6:	e00e      	b.n	80104e6 <_Balloc+0x6e>
 80104c8:	2221      	movs	r2, #33	; 0x21
 80104ca:	2104      	movs	r1, #4
 80104cc:	4620      	mov	r0, r4
 80104ce:	f000 fb51 	bl	8010b74 <_calloc_r>
 80104d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104d4:	60f0      	str	r0, [r6, #12]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1e4      	bne.n	80104a6 <_Balloc+0x2e>
 80104dc:	2000      	movs	r0, #0
 80104de:	bd70      	pop	{r4, r5, r6, pc}
 80104e0:	6802      	ldr	r2, [r0, #0]
 80104e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80104e6:	2300      	movs	r3, #0
 80104e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80104ec:	e7f7      	b.n	80104de <_Balloc+0x66>
 80104ee:	bf00      	nop
 80104f0:	08012ea5 	.word	0x08012ea5
 80104f4:	08012f2c 	.word	0x08012f2c

080104f8 <_Bfree>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104fc:	4605      	mov	r5, r0
 80104fe:	460c      	mov	r4, r1
 8010500:	b976      	cbnz	r6, 8010520 <_Bfree+0x28>
 8010502:	2010      	movs	r0, #16
 8010504:	f7ff ffa4 	bl	8010450 <malloc>
 8010508:	4602      	mov	r2, r0
 801050a:	6268      	str	r0, [r5, #36]	; 0x24
 801050c:	b920      	cbnz	r0, 8010518 <_Bfree+0x20>
 801050e:	4b09      	ldr	r3, [pc, #36]	; (8010534 <_Bfree+0x3c>)
 8010510:	4809      	ldr	r0, [pc, #36]	; (8010538 <_Bfree+0x40>)
 8010512:	218a      	movs	r1, #138	; 0x8a
 8010514:	f000 fe56 	bl	80111c4 <__assert_func>
 8010518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801051c:	6006      	str	r6, [r0, #0]
 801051e:	60c6      	str	r6, [r0, #12]
 8010520:	b13c      	cbz	r4, 8010532 <_Bfree+0x3a>
 8010522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010524:	6862      	ldr	r2, [r4, #4]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801052c:	6021      	str	r1, [r4, #0]
 801052e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010532:	bd70      	pop	{r4, r5, r6, pc}
 8010534:	08012ea5 	.word	0x08012ea5
 8010538:	08012f2c 	.word	0x08012f2c

0801053c <__multadd>:
 801053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010540:	690e      	ldr	r6, [r1, #16]
 8010542:	4607      	mov	r7, r0
 8010544:	4698      	mov	r8, r3
 8010546:	460c      	mov	r4, r1
 8010548:	f101 0014 	add.w	r0, r1, #20
 801054c:	2300      	movs	r3, #0
 801054e:	6805      	ldr	r5, [r0, #0]
 8010550:	b2a9      	uxth	r1, r5
 8010552:	fb02 8101 	mla	r1, r2, r1, r8
 8010556:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801055a:	0c2d      	lsrs	r5, r5, #16
 801055c:	fb02 c505 	mla	r5, r2, r5, ip
 8010560:	b289      	uxth	r1, r1
 8010562:	3301      	adds	r3, #1
 8010564:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010568:	429e      	cmp	r6, r3
 801056a:	f840 1b04 	str.w	r1, [r0], #4
 801056e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010572:	dcec      	bgt.n	801054e <__multadd+0x12>
 8010574:	f1b8 0f00 	cmp.w	r8, #0
 8010578:	d022      	beq.n	80105c0 <__multadd+0x84>
 801057a:	68a3      	ldr	r3, [r4, #8]
 801057c:	42b3      	cmp	r3, r6
 801057e:	dc19      	bgt.n	80105b4 <__multadd+0x78>
 8010580:	6861      	ldr	r1, [r4, #4]
 8010582:	4638      	mov	r0, r7
 8010584:	3101      	adds	r1, #1
 8010586:	f7ff ff77 	bl	8010478 <_Balloc>
 801058a:	4605      	mov	r5, r0
 801058c:	b928      	cbnz	r0, 801059a <__multadd+0x5e>
 801058e:	4602      	mov	r2, r0
 8010590:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <__multadd+0x8c>)
 8010592:	480e      	ldr	r0, [pc, #56]	; (80105cc <__multadd+0x90>)
 8010594:	21b5      	movs	r1, #181	; 0xb5
 8010596:	f000 fe15 	bl	80111c4 <__assert_func>
 801059a:	6922      	ldr	r2, [r4, #16]
 801059c:	3202      	adds	r2, #2
 801059e:	f104 010c 	add.w	r1, r4, #12
 80105a2:	0092      	lsls	r2, r2, #2
 80105a4:	300c      	adds	r0, #12
 80105a6:	f7fe f86c 	bl	800e682 <memcpy>
 80105aa:	4621      	mov	r1, r4
 80105ac:	4638      	mov	r0, r7
 80105ae:	f7ff ffa3 	bl	80104f8 <_Bfree>
 80105b2:	462c      	mov	r4, r5
 80105b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80105b8:	3601      	adds	r6, #1
 80105ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80105be:	6126      	str	r6, [r4, #16]
 80105c0:	4620      	mov	r0, r4
 80105c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c6:	bf00      	nop
 80105c8:	08012f1b 	.word	0x08012f1b
 80105cc:	08012f2c 	.word	0x08012f2c

080105d0 <__hi0bits>:
 80105d0:	0c03      	lsrs	r3, r0, #16
 80105d2:	041b      	lsls	r3, r3, #16
 80105d4:	b9d3      	cbnz	r3, 801060c <__hi0bits+0x3c>
 80105d6:	0400      	lsls	r0, r0, #16
 80105d8:	2310      	movs	r3, #16
 80105da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105de:	bf04      	itt	eq
 80105e0:	0200      	lsleq	r0, r0, #8
 80105e2:	3308      	addeq	r3, #8
 80105e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105e8:	bf04      	itt	eq
 80105ea:	0100      	lsleq	r0, r0, #4
 80105ec:	3304      	addeq	r3, #4
 80105ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80105f2:	bf04      	itt	eq
 80105f4:	0080      	lsleq	r0, r0, #2
 80105f6:	3302      	addeq	r3, #2
 80105f8:	2800      	cmp	r0, #0
 80105fa:	db05      	blt.n	8010608 <__hi0bits+0x38>
 80105fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010600:	f103 0301 	add.w	r3, r3, #1
 8010604:	bf08      	it	eq
 8010606:	2320      	moveq	r3, #32
 8010608:	4618      	mov	r0, r3
 801060a:	4770      	bx	lr
 801060c:	2300      	movs	r3, #0
 801060e:	e7e4      	b.n	80105da <__hi0bits+0xa>

08010610 <__lo0bits>:
 8010610:	6803      	ldr	r3, [r0, #0]
 8010612:	f013 0207 	ands.w	r2, r3, #7
 8010616:	4601      	mov	r1, r0
 8010618:	d00b      	beq.n	8010632 <__lo0bits+0x22>
 801061a:	07da      	lsls	r2, r3, #31
 801061c:	d424      	bmi.n	8010668 <__lo0bits+0x58>
 801061e:	0798      	lsls	r0, r3, #30
 8010620:	bf49      	itett	mi
 8010622:	085b      	lsrmi	r3, r3, #1
 8010624:	089b      	lsrpl	r3, r3, #2
 8010626:	2001      	movmi	r0, #1
 8010628:	600b      	strmi	r3, [r1, #0]
 801062a:	bf5c      	itt	pl
 801062c:	600b      	strpl	r3, [r1, #0]
 801062e:	2002      	movpl	r0, #2
 8010630:	4770      	bx	lr
 8010632:	b298      	uxth	r0, r3
 8010634:	b9b0      	cbnz	r0, 8010664 <__lo0bits+0x54>
 8010636:	0c1b      	lsrs	r3, r3, #16
 8010638:	2010      	movs	r0, #16
 801063a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801063e:	bf04      	itt	eq
 8010640:	0a1b      	lsreq	r3, r3, #8
 8010642:	3008      	addeq	r0, #8
 8010644:	071a      	lsls	r2, r3, #28
 8010646:	bf04      	itt	eq
 8010648:	091b      	lsreq	r3, r3, #4
 801064a:	3004      	addeq	r0, #4
 801064c:	079a      	lsls	r2, r3, #30
 801064e:	bf04      	itt	eq
 8010650:	089b      	lsreq	r3, r3, #2
 8010652:	3002      	addeq	r0, #2
 8010654:	07da      	lsls	r2, r3, #31
 8010656:	d403      	bmi.n	8010660 <__lo0bits+0x50>
 8010658:	085b      	lsrs	r3, r3, #1
 801065a:	f100 0001 	add.w	r0, r0, #1
 801065e:	d005      	beq.n	801066c <__lo0bits+0x5c>
 8010660:	600b      	str	r3, [r1, #0]
 8010662:	4770      	bx	lr
 8010664:	4610      	mov	r0, r2
 8010666:	e7e8      	b.n	801063a <__lo0bits+0x2a>
 8010668:	2000      	movs	r0, #0
 801066a:	4770      	bx	lr
 801066c:	2020      	movs	r0, #32
 801066e:	4770      	bx	lr

08010670 <__i2b>:
 8010670:	b510      	push	{r4, lr}
 8010672:	460c      	mov	r4, r1
 8010674:	2101      	movs	r1, #1
 8010676:	f7ff feff 	bl	8010478 <_Balloc>
 801067a:	4602      	mov	r2, r0
 801067c:	b928      	cbnz	r0, 801068a <__i2b+0x1a>
 801067e:	4b05      	ldr	r3, [pc, #20]	; (8010694 <__i2b+0x24>)
 8010680:	4805      	ldr	r0, [pc, #20]	; (8010698 <__i2b+0x28>)
 8010682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010686:	f000 fd9d 	bl	80111c4 <__assert_func>
 801068a:	2301      	movs	r3, #1
 801068c:	6144      	str	r4, [r0, #20]
 801068e:	6103      	str	r3, [r0, #16]
 8010690:	bd10      	pop	{r4, pc}
 8010692:	bf00      	nop
 8010694:	08012f1b 	.word	0x08012f1b
 8010698:	08012f2c 	.word	0x08012f2c

0801069c <__multiply>:
 801069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a0:	4614      	mov	r4, r2
 80106a2:	690a      	ldr	r2, [r1, #16]
 80106a4:	6923      	ldr	r3, [r4, #16]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	bfb8      	it	lt
 80106aa:	460b      	movlt	r3, r1
 80106ac:	460d      	mov	r5, r1
 80106ae:	bfbc      	itt	lt
 80106b0:	4625      	movlt	r5, r4
 80106b2:	461c      	movlt	r4, r3
 80106b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80106b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80106bc:	68ab      	ldr	r3, [r5, #8]
 80106be:	6869      	ldr	r1, [r5, #4]
 80106c0:	eb0a 0709 	add.w	r7, sl, r9
 80106c4:	42bb      	cmp	r3, r7
 80106c6:	b085      	sub	sp, #20
 80106c8:	bfb8      	it	lt
 80106ca:	3101      	addlt	r1, #1
 80106cc:	f7ff fed4 	bl	8010478 <_Balloc>
 80106d0:	b930      	cbnz	r0, 80106e0 <__multiply+0x44>
 80106d2:	4602      	mov	r2, r0
 80106d4:	4b42      	ldr	r3, [pc, #264]	; (80107e0 <__multiply+0x144>)
 80106d6:	4843      	ldr	r0, [pc, #268]	; (80107e4 <__multiply+0x148>)
 80106d8:	f240 115d 	movw	r1, #349	; 0x15d
 80106dc:	f000 fd72 	bl	80111c4 <__assert_func>
 80106e0:	f100 0614 	add.w	r6, r0, #20
 80106e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80106e8:	4633      	mov	r3, r6
 80106ea:	2200      	movs	r2, #0
 80106ec:	4543      	cmp	r3, r8
 80106ee:	d31e      	bcc.n	801072e <__multiply+0x92>
 80106f0:	f105 0c14 	add.w	ip, r5, #20
 80106f4:	f104 0314 	add.w	r3, r4, #20
 80106f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80106fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010700:	9202      	str	r2, [sp, #8]
 8010702:	ebac 0205 	sub.w	r2, ip, r5
 8010706:	3a15      	subs	r2, #21
 8010708:	f022 0203 	bic.w	r2, r2, #3
 801070c:	3204      	adds	r2, #4
 801070e:	f105 0115 	add.w	r1, r5, #21
 8010712:	458c      	cmp	ip, r1
 8010714:	bf38      	it	cc
 8010716:	2204      	movcc	r2, #4
 8010718:	9201      	str	r2, [sp, #4]
 801071a:	9a02      	ldr	r2, [sp, #8]
 801071c:	9303      	str	r3, [sp, #12]
 801071e:	429a      	cmp	r2, r3
 8010720:	d808      	bhi.n	8010734 <__multiply+0x98>
 8010722:	2f00      	cmp	r7, #0
 8010724:	dc55      	bgt.n	80107d2 <__multiply+0x136>
 8010726:	6107      	str	r7, [r0, #16]
 8010728:	b005      	add	sp, #20
 801072a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072e:	f843 2b04 	str.w	r2, [r3], #4
 8010732:	e7db      	b.n	80106ec <__multiply+0x50>
 8010734:	f8b3 a000 	ldrh.w	sl, [r3]
 8010738:	f1ba 0f00 	cmp.w	sl, #0
 801073c:	d020      	beq.n	8010780 <__multiply+0xe4>
 801073e:	f105 0e14 	add.w	lr, r5, #20
 8010742:	46b1      	mov	r9, r6
 8010744:	2200      	movs	r2, #0
 8010746:	f85e 4b04 	ldr.w	r4, [lr], #4
 801074a:	f8d9 b000 	ldr.w	fp, [r9]
 801074e:	b2a1      	uxth	r1, r4
 8010750:	fa1f fb8b 	uxth.w	fp, fp
 8010754:	fb0a b101 	mla	r1, sl, r1, fp
 8010758:	4411      	add	r1, r2
 801075a:	f8d9 2000 	ldr.w	r2, [r9]
 801075e:	0c24      	lsrs	r4, r4, #16
 8010760:	0c12      	lsrs	r2, r2, #16
 8010762:	fb0a 2404 	mla	r4, sl, r4, r2
 8010766:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801076a:	b289      	uxth	r1, r1
 801076c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010770:	45f4      	cmp	ip, lr
 8010772:	f849 1b04 	str.w	r1, [r9], #4
 8010776:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801077a:	d8e4      	bhi.n	8010746 <__multiply+0xaa>
 801077c:	9901      	ldr	r1, [sp, #4]
 801077e:	5072      	str	r2, [r6, r1]
 8010780:	9a03      	ldr	r2, [sp, #12]
 8010782:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010786:	3304      	adds	r3, #4
 8010788:	f1b9 0f00 	cmp.w	r9, #0
 801078c:	d01f      	beq.n	80107ce <__multiply+0x132>
 801078e:	6834      	ldr	r4, [r6, #0]
 8010790:	f105 0114 	add.w	r1, r5, #20
 8010794:	46b6      	mov	lr, r6
 8010796:	f04f 0a00 	mov.w	sl, #0
 801079a:	880a      	ldrh	r2, [r1, #0]
 801079c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80107a0:	fb09 b202 	mla	r2, r9, r2, fp
 80107a4:	4492      	add	sl, r2
 80107a6:	b2a4      	uxth	r4, r4
 80107a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80107ac:	f84e 4b04 	str.w	r4, [lr], #4
 80107b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80107b4:	f8be 2000 	ldrh.w	r2, [lr]
 80107b8:	0c24      	lsrs	r4, r4, #16
 80107ba:	fb09 2404 	mla	r4, r9, r4, r2
 80107be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80107c2:	458c      	cmp	ip, r1
 80107c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80107c8:	d8e7      	bhi.n	801079a <__multiply+0xfe>
 80107ca:	9a01      	ldr	r2, [sp, #4]
 80107cc:	50b4      	str	r4, [r6, r2]
 80107ce:	3604      	adds	r6, #4
 80107d0:	e7a3      	b.n	801071a <__multiply+0x7e>
 80107d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d1a5      	bne.n	8010726 <__multiply+0x8a>
 80107da:	3f01      	subs	r7, #1
 80107dc:	e7a1      	b.n	8010722 <__multiply+0x86>
 80107de:	bf00      	nop
 80107e0:	08012f1b 	.word	0x08012f1b
 80107e4:	08012f2c 	.word	0x08012f2c

080107e8 <__pow5mult>:
 80107e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107ec:	4615      	mov	r5, r2
 80107ee:	f012 0203 	ands.w	r2, r2, #3
 80107f2:	4606      	mov	r6, r0
 80107f4:	460f      	mov	r7, r1
 80107f6:	d007      	beq.n	8010808 <__pow5mult+0x20>
 80107f8:	4c25      	ldr	r4, [pc, #148]	; (8010890 <__pow5mult+0xa8>)
 80107fa:	3a01      	subs	r2, #1
 80107fc:	2300      	movs	r3, #0
 80107fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010802:	f7ff fe9b 	bl	801053c <__multadd>
 8010806:	4607      	mov	r7, r0
 8010808:	10ad      	asrs	r5, r5, #2
 801080a:	d03d      	beq.n	8010888 <__pow5mult+0xa0>
 801080c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801080e:	b97c      	cbnz	r4, 8010830 <__pow5mult+0x48>
 8010810:	2010      	movs	r0, #16
 8010812:	f7ff fe1d 	bl	8010450 <malloc>
 8010816:	4602      	mov	r2, r0
 8010818:	6270      	str	r0, [r6, #36]	; 0x24
 801081a:	b928      	cbnz	r0, 8010828 <__pow5mult+0x40>
 801081c:	4b1d      	ldr	r3, [pc, #116]	; (8010894 <__pow5mult+0xac>)
 801081e:	481e      	ldr	r0, [pc, #120]	; (8010898 <__pow5mult+0xb0>)
 8010820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010824:	f000 fcce 	bl	80111c4 <__assert_func>
 8010828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801082c:	6004      	str	r4, [r0, #0]
 801082e:	60c4      	str	r4, [r0, #12]
 8010830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010838:	b94c      	cbnz	r4, 801084e <__pow5mult+0x66>
 801083a:	f240 2171 	movw	r1, #625	; 0x271
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff ff16 	bl	8010670 <__i2b>
 8010844:	2300      	movs	r3, #0
 8010846:	f8c8 0008 	str.w	r0, [r8, #8]
 801084a:	4604      	mov	r4, r0
 801084c:	6003      	str	r3, [r0, #0]
 801084e:	f04f 0900 	mov.w	r9, #0
 8010852:	07eb      	lsls	r3, r5, #31
 8010854:	d50a      	bpl.n	801086c <__pow5mult+0x84>
 8010856:	4639      	mov	r1, r7
 8010858:	4622      	mov	r2, r4
 801085a:	4630      	mov	r0, r6
 801085c:	f7ff ff1e 	bl	801069c <__multiply>
 8010860:	4639      	mov	r1, r7
 8010862:	4680      	mov	r8, r0
 8010864:	4630      	mov	r0, r6
 8010866:	f7ff fe47 	bl	80104f8 <_Bfree>
 801086a:	4647      	mov	r7, r8
 801086c:	106d      	asrs	r5, r5, #1
 801086e:	d00b      	beq.n	8010888 <__pow5mult+0xa0>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	b938      	cbnz	r0, 8010884 <__pow5mult+0x9c>
 8010874:	4622      	mov	r2, r4
 8010876:	4621      	mov	r1, r4
 8010878:	4630      	mov	r0, r6
 801087a:	f7ff ff0f 	bl	801069c <__multiply>
 801087e:	6020      	str	r0, [r4, #0]
 8010880:	f8c0 9000 	str.w	r9, [r0]
 8010884:	4604      	mov	r4, r0
 8010886:	e7e4      	b.n	8010852 <__pow5mult+0x6a>
 8010888:	4638      	mov	r0, r7
 801088a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801088e:	bf00      	nop
 8010890:	08013080 	.word	0x08013080
 8010894:	08012ea5 	.word	0x08012ea5
 8010898:	08012f2c 	.word	0x08012f2c

0801089c <__lshift>:
 801089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a0:	460c      	mov	r4, r1
 80108a2:	6849      	ldr	r1, [r1, #4]
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108aa:	68a3      	ldr	r3, [r4, #8]
 80108ac:	4607      	mov	r7, r0
 80108ae:	4691      	mov	r9, r2
 80108b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108b4:	f108 0601 	add.w	r6, r8, #1
 80108b8:	42b3      	cmp	r3, r6
 80108ba:	db0b      	blt.n	80108d4 <__lshift+0x38>
 80108bc:	4638      	mov	r0, r7
 80108be:	f7ff fddb 	bl	8010478 <_Balloc>
 80108c2:	4605      	mov	r5, r0
 80108c4:	b948      	cbnz	r0, 80108da <__lshift+0x3e>
 80108c6:	4602      	mov	r2, r0
 80108c8:	4b28      	ldr	r3, [pc, #160]	; (801096c <__lshift+0xd0>)
 80108ca:	4829      	ldr	r0, [pc, #164]	; (8010970 <__lshift+0xd4>)
 80108cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108d0:	f000 fc78 	bl	80111c4 <__assert_func>
 80108d4:	3101      	adds	r1, #1
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	e7ee      	b.n	80108b8 <__lshift+0x1c>
 80108da:	2300      	movs	r3, #0
 80108dc:	f100 0114 	add.w	r1, r0, #20
 80108e0:	f100 0210 	add.w	r2, r0, #16
 80108e4:	4618      	mov	r0, r3
 80108e6:	4553      	cmp	r3, sl
 80108e8:	db33      	blt.n	8010952 <__lshift+0xb6>
 80108ea:	6920      	ldr	r0, [r4, #16]
 80108ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108f0:	f104 0314 	add.w	r3, r4, #20
 80108f4:	f019 091f 	ands.w	r9, r9, #31
 80108f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010900:	d02b      	beq.n	801095a <__lshift+0xbe>
 8010902:	f1c9 0e20 	rsb	lr, r9, #32
 8010906:	468a      	mov	sl, r1
 8010908:	2200      	movs	r2, #0
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	fa00 f009 	lsl.w	r0, r0, r9
 8010910:	4302      	orrs	r2, r0
 8010912:	f84a 2b04 	str.w	r2, [sl], #4
 8010916:	f853 2b04 	ldr.w	r2, [r3], #4
 801091a:	459c      	cmp	ip, r3
 801091c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010920:	d8f3      	bhi.n	801090a <__lshift+0x6e>
 8010922:	ebac 0304 	sub.w	r3, ip, r4
 8010926:	3b15      	subs	r3, #21
 8010928:	f023 0303 	bic.w	r3, r3, #3
 801092c:	3304      	adds	r3, #4
 801092e:	f104 0015 	add.w	r0, r4, #21
 8010932:	4584      	cmp	ip, r0
 8010934:	bf38      	it	cc
 8010936:	2304      	movcc	r3, #4
 8010938:	50ca      	str	r2, [r1, r3]
 801093a:	b10a      	cbz	r2, 8010940 <__lshift+0xa4>
 801093c:	f108 0602 	add.w	r6, r8, #2
 8010940:	3e01      	subs	r6, #1
 8010942:	4638      	mov	r0, r7
 8010944:	612e      	str	r6, [r5, #16]
 8010946:	4621      	mov	r1, r4
 8010948:	f7ff fdd6 	bl	80104f8 <_Bfree>
 801094c:	4628      	mov	r0, r5
 801094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010952:	f842 0f04 	str.w	r0, [r2, #4]!
 8010956:	3301      	adds	r3, #1
 8010958:	e7c5      	b.n	80108e6 <__lshift+0x4a>
 801095a:	3904      	subs	r1, #4
 801095c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010960:	f841 2f04 	str.w	r2, [r1, #4]!
 8010964:	459c      	cmp	ip, r3
 8010966:	d8f9      	bhi.n	801095c <__lshift+0xc0>
 8010968:	e7ea      	b.n	8010940 <__lshift+0xa4>
 801096a:	bf00      	nop
 801096c:	08012f1b 	.word	0x08012f1b
 8010970:	08012f2c 	.word	0x08012f2c

08010974 <__mcmp>:
 8010974:	b530      	push	{r4, r5, lr}
 8010976:	6902      	ldr	r2, [r0, #16]
 8010978:	690c      	ldr	r4, [r1, #16]
 801097a:	1b12      	subs	r2, r2, r4
 801097c:	d10e      	bne.n	801099c <__mcmp+0x28>
 801097e:	f100 0314 	add.w	r3, r0, #20
 8010982:	3114      	adds	r1, #20
 8010984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801098c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010994:	42a5      	cmp	r5, r4
 8010996:	d003      	beq.n	80109a0 <__mcmp+0x2c>
 8010998:	d305      	bcc.n	80109a6 <__mcmp+0x32>
 801099a:	2201      	movs	r2, #1
 801099c:	4610      	mov	r0, r2
 801099e:	bd30      	pop	{r4, r5, pc}
 80109a0:	4283      	cmp	r3, r0
 80109a2:	d3f3      	bcc.n	801098c <__mcmp+0x18>
 80109a4:	e7fa      	b.n	801099c <__mcmp+0x28>
 80109a6:	f04f 32ff 	mov.w	r2, #4294967295
 80109aa:	e7f7      	b.n	801099c <__mcmp+0x28>

080109ac <__mdiff>:
 80109ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	460c      	mov	r4, r1
 80109b2:	4606      	mov	r6, r0
 80109b4:	4611      	mov	r1, r2
 80109b6:	4620      	mov	r0, r4
 80109b8:	4617      	mov	r7, r2
 80109ba:	f7ff ffdb 	bl	8010974 <__mcmp>
 80109be:	1e05      	subs	r5, r0, #0
 80109c0:	d110      	bne.n	80109e4 <__mdiff+0x38>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff fd57 	bl	8010478 <_Balloc>
 80109ca:	b930      	cbnz	r0, 80109da <__mdiff+0x2e>
 80109cc:	4b39      	ldr	r3, [pc, #228]	; (8010ab4 <__mdiff+0x108>)
 80109ce:	4602      	mov	r2, r0
 80109d0:	f240 2132 	movw	r1, #562	; 0x232
 80109d4:	4838      	ldr	r0, [pc, #224]	; (8010ab8 <__mdiff+0x10c>)
 80109d6:	f000 fbf5 	bl	80111c4 <__assert_func>
 80109da:	2301      	movs	r3, #1
 80109dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e4:	bfa4      	itt	ge
 80109e6:	463b      	movge	r3, r7
 80109e8:	4627      	movge	r7, r4
 80109ea:	4630      	mov	r0, r6
 80109ec:	6879      	ldr	r1, [r7, #4]
 80109ee:	bfa6      	itte	ge
 80109f0:	461c      	movge	r4, r3
 80109f2:	2500      	movge	r5, #0
 80109f4:	2501      	movlt	r5, #1
 80109f6:	f7ff fd3f 	bl	8010478 <_Balloc>
 80109fa:	b920      	cbnz	r0, 8010a06 <__mdiff+0x5a>
 80109fc:	4b2d      	ldr	r3, [pc, #180]	; (8010ab4 <__mdiff+0x108>)
 80109fe:	4602      	mov	r2, r0
 8010a00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a04:	e7e6      	b.n	80109d4 <__mdiff+0x28>
 8010a06:	693e      	ldr	r6, [r7, #16]
 8010a08:	60c5      	str	r5, [r0, #12]
 8010a0a:	6925      	ldr	r5, [r4, #16]
 8010a0c:	f107 0114 	add.w	r1, r7, #20
 8010a10:	f104 0914 	add.w	r9, r4, #20
 8010a14:	f100 0e14 	add.w	lr, r0, #20
 8010a18:	f107 0210 	add.w	r2, r7, #16
 8010a1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010a20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010a24:	46f2      	mov	sl, lr
 8010a26:	2700      	movs	r7, #0
 8010a28:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a30:	fa1f f883 	uxth.w	r8, r3
 8010a34:	fa17 f78b 	uxtah	r7, r7, fp
 8010a38:	0c1b      	lsrs	r3, r3, #16
 8010a3a:	eba7 0808 	sub.w	r8, r7, r8
 8010a3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a46:	fa1f f888 	uxth.w	r8, r8
 8010a4a:	141f      	asrs	r7, r3, #16
 8010a4c:	454d      	cmp	r5, r9
 8010a4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a52:	f84a 3b04 	str.w	r3, [sl], #4
 8010a56:	d8e7      	bhi.n	8010a28 <__mdiff+0x7c>
 8010a58:	1b2b      	subs	r3, r5, r4
 8010a5a:	3b15      	subs	r3, #21
 8010a5c:	f023 0303 	bic.w	r3, r3, #3
 8010a60:	3304      	adds	r3, #4
 8010a62:	3415      	adds	r4, #21
 8010a64:	42a5      	cmp	r5, r4
 8010a66:	bf38      	it	cc
 8010a68:	2304      	movcc	r3, #4
 8010a6a:	4419      	add	r1, r3
 8010a6c:	4473      	add	r3, lr
 8010a6e:	469e      	mov	lr, r3
 8010a70:	460d      	mov	r5, r1
 8010a72:	4565      	cmp	r5, ip
 8010a74:	d30e      	bcc.n	8010a94 <__mdiff+0xe8>
 8010a76:	f10c 0203 	add.w	r2, ip, #3
 8010a7a:	1a52      	subs	r2, r2, r1
 8010a7c:	f022 0203 	bic.w	r2, r2, #3
 8010a80:	3903      	subs	r1, #3
 8010a82:	458c      	cmp	ip, r1
 8010a84:	bf38      	it	cc
 8010a86:	2200      	movcc	r2, #0
 8010a88:	441a      	add	r2, r3
 8010a8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010a8e:	b17b      	cbz	r3, 8010ab0 <__mdiff+0x104>
 8010a90:	6106      	str	r6, [r0, #16]
 8010a92:	e7a5      	b.n	80109e0 <__mdiff+0x34>
 8010a94:	f855 8b04 	ldr.w	r8, [r5], #4
 8010a98:	fa17 f488 	uxtah	r4, r7, r8
 8010a9c:	1422      	asrs	r2, r4, #16
 8010a9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010aa2:	b2a4      	uxth	r4, r4
 8010aa4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010aa8:	f84e 4b04 	str.w	r4, [lr], #4
 8010aac:	1417      	asrs	r7, r2, #16
 8010aae:	e7e0      	b.n	8010a72 <__mdiff+0xc6>
 8010ab0:	3e01      	subs	r6, #1
 8010ab2:	e7ea      	b.n	8010a8a <__mdiff+0xde>
 8010ab4:	08012f1b 	.word	0x08012f1b
 8010ab8:	08012f2c 	.word	0x08012f2c

08010abc <__d2b>:
 8010abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ac0:	4689      	mov	r9, r1
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	ec57 6b10 	vmov	r6, r7, d0
 8010ac8:	4690      	mov	r8, r2
 8010aca:	f7ff fcd5 	bl	8010478 <_Balloc>
 8010ace:	4604      	mov	r4, r0
 8010ad0:	b930      	cbnz	r0, 8010ae0 <__d2b+0x24>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	4b25      	ldr	r3, [pc, #148]	; (8010b6c <__d2b+0xb0>)
 8010ad6:	4826      	ldr	r0, [pc, #152]	; (8010b70 <__d2b+0xb4>)
 8010ad8:	f240 310a 	movw	r1, #778	; 0x30a
 8010adc:	f000 fb72 	bl	80111c4 <__assert_func>
 8010ae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010ae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ae8:	bb35      	cbnz	r5, 8010b38 <__d2b+0x7c>
 8010aea:	2e00      	cmp	r6, #0
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	d028      	beq.n	8010b42 <__d2b+0x86>
 8010af0:	4668      	mov	r0, sp
 8010af2:	9600      	str	r6, [sp, #0]
 8010af4:	f7ff fd8c 	bl	8010610 <__lo0bits>
 8010af8:	9900      	ldr	r1, [sp, #0]
 8010afa:	b300      	cbz	r0, 8010b3e <__d2b+0x82>
 8010afc:	9a01      	ldr	r2, [sp, #4]
 8010afe:	f1c0 0320 	rsb	r3, r0, #32
 8010b02:	fa02 f303 	lsl.w	r3, r2, r3
 8010b06:	430b      	orrs	r3, r1
 8010b08:	40c2      	lsrs	r2, r0
 8010b0a:	6163      	str	r3, [r4, #20]
 8010b0c:	9201      	str	r2, [sp, #4]
 8010b0e:	9b01      	ldr	r3, [sp, #4]
 8010b10:	61a3      	str	r3, [r4, #24]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	bf14      	ite	ne
 8010b16:	2202      	movne	r2, #2
 8010b18:	2201      	moveq	r2, #1
 8010b1a:	6122      	str	r2, [r4, #16]
 8010b1c:	b1d5      	cbz	r5, 8010b54 <__d2b+0x98>
 8010b1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b22:	4405      	add	r5, r0
 8010b24:	f8c9 5000 	str.w	r5, [r9]
 8010b28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b2c:	f8c8 0000 	str.w	r0, [r8]
 8010b30:	4620      	mov	r0, r4
 8010b32:	b003      	add	sp, #12
 8010b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b3c:	e7d5      	b.n	8010aea <__d2b+0x2e>
 8010b3e:	6161      	str	r1, [r4, #20]
 8010b40:	e7e5      	b.n	8010b0e <__d2b+0x52>
 8010b42:	a801      	add	r0, sp, #4
 8010b44:	f7ff fd64 	bl	8010610 <__lo0bits>
 8010b48:	9b01      	ldr	r3, [sp, #4]
 8010b4a:	6163      	str	r3, [r4, #20]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	6122      	str	r2, [r4, #16]
 8010b50:	3020      	adds	r0, #32
 8010b52:	e7e3      	b.n	8010b1c <__d2b+0x60>
 8010b54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b5c:	f8c9 0000 	str.w	r0, [r9]
 8010b60:	6918      	ldr	r0, [r3, #16]
 8010b62:	f7ff fd35 	bl	80105d0 <__hi0bits>
 8010b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b6a:	e7df      	b.n	8010b2c <__d2b+0x70>
 8010b6c:	08012f1b 	.word	0x08012f1b
 8010b70:	08012f2c 	.word	0x08012f2c

08010b74 <_calloc_r>:
 8010b74:	b513      	push	{r0, r1, r4, lr}
 8010b76:	434a      	muls	r2, r1
 8010b78:	4611      	mov	r1, r2
 8010b7a:	9201      	str	r2, [sp, #4]
 8010b7c:	f7fd fd98 	bl	800e6b0 <_malloc_r>
 8010b80:	4604      	mov	r4, r0
 8010b82:	b118      	cbz	r0, 8010b8c <_calloc_r+0x18>
 8010b84:	9a01      	ldr	r2, [sp, #4]
 8010b86:	2100      	movs	r1, #0
 8010b88:	f7fd fd89 	bl	800e69e <memset>
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	b002      	add	sp, #8
 8010b90:	bd10      	pop	{r4, pc}
	...

08010b94 <_free_r>:
 8010b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b96:	2900      	cmp	r1, #0
 8010b98:	d048      	beq.n	8010c2c <_free_r+0x98>
 8010b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b9e:	9001      	str	r0, [sp, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ba6:	bfb8      	it	lt
 8010ba8:	18e4      	addlt	r4, r4, r3
 8010baa:	f7ff fc59 	bl	8010460 <__malloc_lock>
 8010bae:	4a20      	ldr	r2, [pc, #128]	; (8010c30 <_free_r+0x9c>)
 8010bb0:	9801      	ldr	r0, [sp, #4]
 8010bb2:	6813      	ldr	r3, [r2, #0]
 8010bb4:	4615      	mov	r5, r2
 8010bb6:	b933      	cbnz	r3, 8010bc6 <_free_r+0x32>
 8010bb8:	6063      	str	r3, [r4, #4]
 8010bba:	6014      	str	r4, [r2, #0]
 8010bbc:	b003      	add	sp, #12
 8010bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bc2:	f7ff bc53 	b.w	801046c <__malloc_unlock>
 8010bc6:	42a3      	cmp	r3, r4
 8010bc8:	d90b      	bls.n	8010be2 <_free_r+0x4e>
 8010bca:	6821      	ldr	r1, [r4, #0]
 8010bcc:	1862      	adds	r2, r4, r1
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	bf04      	itt	eq
 8010bd2:	681a      	ldreq	r2, [r3, #0]
 8010bd4:	685b      	ldreq	r3, [r3, #4]
 8010bd6:	6063      	str	r3, [r4, #4]
 8010bd8:	bf04      	itt	eq
 8010bda:	1852      	addeq	r2, r2, r1
 8010bdc:	6022      	streq	r2, [r4, #0]
 8010bde:	602c      	str	r4, [r5, #0]
 8010be0:	e7ec      	b.n	8010bbc <_free_r+0x28>
 8010be2:	461a      	mov	r2, r3
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	b10b      	cbz	r3, 8010bec <_free_r+0x58>
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	d9fa      	bls.n	8010be2 <_free_r+0x4e>
 8010bec:	6811      	ldr	r1, [r2, #0]
 8010bee:	1855      	adds	r5, r2, r1
 8010bf0:	42a5      	cmp	r5, r4
 8010bf2:	d10b      	bne.n	8010c0c <_free_r+0x78>
 8010bf4:	6824      	ldr	r4, [r4, #0]
 8010bf6:	4421      	add	r1, r4
 8010bf8:	1854      	adds	r4, r2, r1
 8010bfa:	42a3      	cmp	r3, r4
 8010bfc:	6011      	str	r1, [r2, #0]
 8010bfe:	d1dd      	bne.n	8010bbc <_free_r+0x28>
 8010c00:	681c      	ldr	r4, [r3, #0]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	6053      	str	r3, [r2, #4]
 8010c06:	4421      	add	r1, r4
 8010c08:	6011      	str	r1, [r2, #0]
 8010c0a:	e7d7      	b.n	8010bbc <_free_r+0x28>
 8010c0c:	d902      	bls.n	8010c14 <_free_r+0x80>
 8010c0e:	230c      	movs	r3, #12
 8010c10:	6003      	str	r3, [r0, #0]
 8010c12:	e7d3      	b.n	8010bbc <_free_r+0x28>
 8010c14:	6825      	ldr	r5, [r4, #0]
 8010c16:	1961      	adds	r1, r4, r5
 8010c18:	428b      	cmp	r3, r1
 8010c1a:	bf04      	itt	eq
 8010c1c:	6819      	ldreq	r1, [r3, #0]
 8010c1e:	685b      	ldreq	r3, [r3, #4]
 8010c20:	6063      	str	r3, [r4, #4]
 8010c22:	bf04      	itt	eq
 8010c24:	1949      	addeq	r1, r1, r5
 8010c26:	6021      	streq	r1, [r4, #0]
 8010c28:	6054      	str	r4, [r2, #4]
 8010c2a:	e7c7      	b.n	8010bbc <_free_r+0x28>
 8010c2c:	b003      	add	sp, #12
 8010c2e:	bd30      	pop	{r4, r5, pc}
 8010c30:	200044e8 	.word	0x200044e8

08010c34 <__ssputs_r>:
 8010c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c38:	688e      	ldr	r6, [r1, #8]
 8010c3a:	429e      	cmp	r6, r3
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	460c      	mov	r4, r1
 8010c40:	4690      	mov	r8, r2
 8010c42:	461f      	mov	r7, r3
 8010c44:	d838      	bhi.n	8010cb8 <__ssputs_r+0x84>
 8010c46:	898a      	ldrh	r2, [r1, #12]
 8010c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c4c:	d032      	beq.n	8010cb4 <__ssputs_r+0x80>
 8010c4e:	6825      	ldr	r5, [r4, #0]
 8010c50:	6909      	ldr	r1, [r1, #16]
 8010c52:	eba5 0901 	sub.w	r9, r5, r1
 8010c56:	6965      	ldr	r5, [r4, #20]
 8010c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c60:	3301      	adds	r3, #1
 8010c62:	444b      	add	r3, r9
 8010c64:	106d      	asrs	r5, r5, #1
 8010c66:	429d      	cmp	r5, r3
 8010c68:	bf38      	it	cc
 8010c6a:	461d      	movcc	r5, r3
 8010c6c:	0553      	lsls	r3, r2, #21
 8010c6e:	d531      	bpl.n	8010cd4 <__ssputs_r+0xa0>
 8010c70:	4629      	mov	r1, r5
 8010c72:	f7fd fd1d 	bl	800e6b0 <_malloc_r>
 8010c76:	4606      	mov	r6, r0
 8010c78:	b950      	cbnz	r0, 8010c90 <__ssputs_r+0x5c>
 8010c7a:	230c      	movs	r3, #12
 8010c7c:	f8ca 3000 	str.w	r3, [sl]
 8010c80:	89a3      	ldrh	r3, [r4, #12]
 8010c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c86:	81a3      	strh	r3, [r4, #12]
 8010c88:	f04f 30ff 	mov.w	r0, #4294967295
 8010c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c90:	6921      	ldr	r1, [r4, #16]
 8010c92:	464a      	mov	r2, r9
 8010c94:	f7fd fcf5 	bl	800e682 <memcpy>
 8010c98:	89a3      	ldrh	r3, [r4, #12]
 8010c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ca2:	81a3      	strh	r3, [r4, #12]
 8010ca4:	6126      	str	r6, [r4, #16]
 8010ca6:	6165      	str	r5, [r4, #20]
 8010ca8:	444e      	add	r6, r9
 8010caa:	eba5 0509 	sub.w	r5, r5, r9
 8010cae:	6026      	str	r6, [r4, #0]
 8010cb0:	60a5      	str	r5, [r4, #8]
 8010cb2:	463e      	mov	r6, r7
 8010cb4:	42be      	cmp	r6, r7
 8010cb6:	d900      	bls.n	8010cba <__ssputs_r+0x86>
 8010cb8:	463e      	mov	r6, r7
 8010cba:	4632      	mov	r2, r6
 8010cbc:	6820      	ldr	r0, [r4, #0]
 8010cbe:	4641      	mov	r1, r8
 8010cc0:	f000 fae4 	bl	801128c <memmove>
 8010cc4:	68a3      	ldr	r3, [r4, #8]
 8010cc6:	6822      	ldr	r2, [r4, #0]
 8010cc8:	1b9b      	subs	r3, r3, r6
 8010cca:	4432      	add	r2, r6
 8010ccc:	60a3      	str	r3, [r4, #8]
 8010cce:	6022      	str	r2, [r4, #0]
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	e7db      	b.n	8010c8c <__ssputs_r+0x58>
 8010cd4:	462a      	mov	r2, r5
 8010cd6:	f000 faf3 	bl	80112c0 <_realloc_r>
 8010cda:	4606      	mov	r6, r0
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	d1e1      	bne.n	8010ca4 <__ssputs_r+0x70>
 8010ce0:	6921      	ldr	r1, [r4, #16]
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	f7ff ff56 	bl	8010b94 <_free_r>
 8010ce8:	e7c7      	b.n	8010c7a <__ssputs_r+0x46>
	...

08010cec <_svfiprintf_r>:
 8010cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	4698      	mov	r8, r3
 8010cf2:	898b      	ldrh	r3, [r1, #12]
 8010cf4:	061b      	lsls	r3, r3, #24
 8010cf6:	b09d      	sub	sp, #116	; 0x74
 8010cf8:	4607      	mov	r7, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	4614      	mov	r4, r2
 8010cfe:	d50e      	bpl.n	8010d1e <_svfiprintf_r+0x32>
 8010d00:	690b      	ldr	r3, [r1, #16]
 8010d02:	b963      	cbnz	r3, 8010d1e <_svfiprintf_r+0x32>
 8010d04:	2140      	movs	r1, #64	; 0x40
 8010d06:	f7fd fcd3 	bl	800e6b0 <_malloc_r>
 8010d0a:	6028      	str	r0, [r5, #0]
 8010d0c:	6128      	str	r0, [r5, #16]
 8010d0e:	b920      	cbnz	r0, 8010d1a <_svfiprintf_r+0x2e>
 8010d10:	230c      	movs	r3, #12
 8010d12:	603b      	str	r3, [r7, #0]
 8010d14:	f04f 30ff 	mov.w	r0, #4294967295
 8010d18:	e0d1      	b.n	8010ebe <_svfiprintf_r+0x1d2>
 8010d1a:	2340      	movs	r3, #64	; 0x40
 8010d1c:	616b      	str	r3, [r5, #20]
 8010d1e:	2300      	movs	r3, #0
 8010d20:	9309      	str	r3, [sp, #36]	; 0x24
 8010d22:	2320      	movs	r3, #32
 8010d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d2c:	2330      	movs	r3, #48	; 0x30
 8010d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ed8 <_svfiprintf_r+0x1ec>
 8010d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d36:	f04f 0901 	mov.w	r9, #1
 8010d3a:	4623      	mov	r3, r4
 8010d3c:	469a      	mov	sl, r3
 8010d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d42:	b10a      	cbz	r2, 8010d48 <_svfiprintf_r+0x5c>
 8010d44:	2a25      	cmp	r2, #37	; 0x25
 8010d46:	d1f9      	bne.n	8010d3c <_svfiprintf_r+0x50>
 8010d48:	ebba 0b04 	subs.w	fp, sl, r4
 8010d4c:	d00b      	beq.n	8010d66 <_svfiprintf_r+0x7a>
 8010d4e:	465b      	mov	r3, fp
 8010d50:	4622      	mov	r2, r4
 8010d52:	4629      	mov	r1, r5
 8010d54:	4638      	mov	r0, r7
 8010d56:	f7ff ff6d 	bl	8010c34 <__ssputs_r>
 8010d5a:	3001      	adds	r0, #1
 8010d5c:	f000 80aa 	beq.w	8010eb4 <_svfiprintf_r+0x1c8>
 8010d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d62:	445a      	add	r2, fp
 8010d64:	9209      	str	r2, [sp, #36]	; 0x24
 8010d66:	f89a 3000 	ldrb.w	r3, [sl]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	f000 80a2 	beq.w	8010eb4 <_svfiprintf_r+0x1c8>
 8010d70:	2300      	movs	r3, #0
 8010d72:	f04f 32ff 	mov.w	r2, #4294967295
 8010d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d7a:	f10a 0a01 	add.w	sl, sl, #1
 8010d7e:	9304      	str	r3, [sp, #16]
 8010d80:	9307      	str	r3, [sp, #28]
 8010d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d86:	931a      	str	r3, [sp, #104]	; 0x68
 8010d88:	4654      	mov	r4, sl
 8010d8a:	2205      	movs	r2, #5
 8010d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d90:	4851      	ldr	r0, [pc, #324]	; (8010ed8 <_svfiprintf_r+0x1ec>)
 8010d92:	f7ef fa2d 	bl	80001f0 <memchr>
 8010d96:	9a04      	ldr	r2, [sp, #16]
 8010d98:	b9d8      	cbnz	r0, 8010dd2 <_svfiprintf_r+0xe6>
 8010d9a:	06d0      	lsls	r0, r2, #27
 8010d9c:	bf44      	itt	mi
 8010d9e:	2320      	movmi	r3, #32
 8010da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010da4:	0711      	lsls	r1, r2, #28
 8010da6:	bf44      	itt	mi
 8010da8:	232b      	movmi	r3, #43	; 0x2b
 8010daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dae:	f89a 3000 	ldrb.w	r3, [sl]
 8010db2:	2b2a      	cmp	r3, #42	; 0x2a
 8010db4:	d015      	beq.n	8010de2 <_svfiprintf_r+0xf6>
 8010db6:	9a07      	ldr	r2, [sp, #28]
 8010db8:	4654      	mov	r4, sl
 8010dba:	2000      	movs	r0, #0
 8010dbc:	f04f 0c0a 	mov.w	ip, #10
 8010dc0:	4621      	mov	r1, r4
 8010dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dc6:	3b30      	subs	r3, #48	; 0x30
 8010dc8:	2b09      	cmp	r3, #9
 8010dca:	d94e      	bls.n	8010e6a <_svfiprintf_r+0x17e>
 8010dcc:	b1b0      	cbz	r0, 8010dfc <_svfiprintf_r+0x110>
 8010dce:	9207      	str	r2, [sp, #28]
 8010dd0:	e014      	b.n	8010dfc <_svfiprintf_r+0x110>
 8010dd2:	eba0 0308 	sub.w	r3, r0, r8
 8010dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	9304      	str	r3, [sp, #16]
 8010dde:	46a2      	mov	sl, r4
 8010de0:	e7d2      	b.n	8010d88 <_svfiprintf_r+0x9c>
 8010de2:	9b03      	ldr	r3, [sp, #12]
 8010de4:	1d19      	adds	r1, r3, #4
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	9103      	str	r1, [sp, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bfbb      	ittet	lt
 8010dee:	425b      	neglt	r3, r3
 8010df0:	f042 0202 	orrlt.w	r2, r2, #2
 8010df4:	9307      	strge	r3, [sp, #28]
 8010df6:	9307      	strlt	r3, [sp, #28]
 8010df8:	bfb8      	it	lt
 8010dfa:	9204      	strlt	r2, [sp, #16]
 8010dfc:	7823      	ldrb	r3, [r4, #0]
 8010dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8010e00:	d10c      	bne.n	8010e1c <_svfiprintf_r+0x130>
 8010e02:	7863      	ldrb	r3, [r4, #1]
 8010e04:	2b2a      	cmp	r3, #42	; 0x2a
 8010e06:	d135      	bne.n	8010e74 <_svfiprintf_r+0x188>
 8010e08:	9b03      	ldr	r3, [sp, #12]
 8010e0a:	1d1a      	adds	r2, r3, #4
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	9203      	str	r2, [sp, #12]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	bfb8      	it	lt
 8010e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e18:	3402      	adds	r4, #2
 8010e1a:	9305      	str	r3, [sp, #20]
 8010e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ee8 <_svfiprintf_r+0x1fc>
 8010e20:	7821      	ldrb	r1, [r4, #0]
 8010e22:	2203      	movs	r2, #3
 8010e24:	4650      	mov	r0, sl
 8010e26:	f7ef f9e3 	bl	80001f0 <memchr>
 8010e2a:	b140      	cbz	r0, 8010e3e <_svfiprintf_r+0x152>
 8010e2c:	2340      	movs	r3, #64	; 0x40
 8010e2e:	eba0 000a 	sub.w	r0, r0, sl
 8010e32:	fa03 f000 	lsl.w	r0, r3, r0
 8010e36:	9b04      	ldr	r3, [sp, #16]
 8010e38:	4303      	orrs	r3, r0
 8010e3a:	3401      	adds	r4, #1
 8010e3c:	9304      	str	r3, [sp, #16]
 8010e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e42:	4826      	ldr	r0, [pc, #152]	; (8010edc <_svfiprintf_r+0x1f0>)
 8010e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e48:	2206      	movs	r2, #6
 8010e4a:	f7ef f9d1 	bl	80001f0 <memchr>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d038      	beq.n	8010ec4 <_svfiprintf_r+0x1d8>
 8010e52:	4b23      	ldr	r3, [pc, #140]	; (8010ee0 <_svfiprintf_r+0x1f4>)
 8010e54:	bb1b      	cbnz	r3, 8010e9e <_svfiprintf_r+0x1b2>
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	3307      	adds	r3, #7
 8010e5a:	f023 0307 	bic.w	r3, r3, #7
 8010e5e:	3308      	adds	r3, #8
 8010e60:	9303      	str	r3, [sp, #12]
 8010e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e64:	4433      	add	r3, r6
 8010e66:	9309      	str	r3, [sp, #36]	; 0x24
 8010e68:	e767      	b.n	8010d3a <_svfiprintf_r+0x4e>
 8010e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e6e:	460c      	mov	r4, r1
 8010e70:	2001      	movs	r0, #1
 8010e72:	e7a5      	b.n	8010dc0 <_svfiprintf_r+0xd4>
 8010e74:	2300      	movs	r3, #0
 8010e76:	3401      	adds	r4, #1
 8010e78:	9305      	str	r3, [sp, #20]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	f04f 0c0a 	mov.w	ip, #10
 8010e80:	4620      	mov	r0, r4
 8010e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e86:	3a30      	subs	r2, #48	; 0x30
 8010e88:	2a09      	cmp	r2, #9
 8010e8a:	d903      	bls.n	8010e94 <_svfiprintf_r+0x1a8>
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d0c5      	beq.n	8010e1c <_svfiprintf_r+0x130>
 8010e90:	9105      	str	r1, [sp, #20]
 8010e92:	e7c3      	b.n	8010e1c <_svfiprintf_r+0x130>
 8010e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e98:	4604      	mov	r4, r0
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e7f0      	b.n	8010e80 <_svfiprintf_r+0x194>
 8010e9e:	ab03      	add	r3, sp, #12
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	462a      	mov	r2, r5
 8010ea4:	4b0f      	ldr	r3, [pc, #60]	; (8010ee4 <_svfiprintf_r+0x1f8>)
 8010ea6:	a904      	add	r1, sp, #16
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	f7fd fcfb 	bl	800e8a4 <_printf_float>
 8010eae:	1c42      	adds	r2, r0, #1
 8010eb0:	4606      	mov	r6, r0
 8010eb2:	d1d6      	bne.n	8010e62 <_svfiprintf_r+0x176>
 8010eb4:	89ab      	ldrh	r3, [r5, #12]
 8010eb6:	065b      	lsls	r3, r3, #25
 8010eb8:	f53f af2c 	bmi.w	8010d14 <_svfiprintf_r+0x28>
 8010ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ebe:	b01d      	add	sp, #116	; 0x74
 8010ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec4:	ab03      	add	r3, sp, #12
 8010ec6:	9300      	str	r3, [sp, #0]
 8010ec8:	462a      	mov	r2, r5
 8010eca:	4b06      	ldr	r3, [pc, #24]	; (8010ee4 <_svfiprintf_r+0x1f8>)
 8010ecc:	a904      	add	r1, sp, #16
 8010ece:	4638      	mov	r0, r7
 8010ed0:	f7fd ff8c 	bl	800edec <_printf_i>
 8010ed4:	e7eb      	b.n	8010eae <_svfiprintf_r+0x1c2>
 8010ed6:	bf00      	nop
 8010ed8:	0801308c 	.word	0x0801308c
 8010edc:	08013096 	.word	0x08013096
 8010ee0:	0800e8a5 	.word	0x0800e8a5
 8010ee4:	08010c35 	.word	0x08010c35
 8010ee8:	08013092 	.word	0x08013092

08010eec <__sfputc_r>:
 8010eec:	6893      	ldr	r3, [r2, #8]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	b410      	push	{r4}
 8010ef4:	6093      	str	r3, [r2, #8]
 8010ef6:	da08      	bge.n	8010f0a <__sfputc_r+0x1e>
 8010ef8:	6994      	ldr	r4, [r2, #24]
 8010efa:	42a3      	cmp	r3, r4
 8010efc:	db01      	blt.n	8010f02 <__sfputc_r+0x16>
 8010efe:	290a      	cmp	r1, #10
 8010f00:	d103      	bne.n	8010f0a <__sfputc_r+0x1e>
 8010f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f06:	f7fe ba0b 	b.w	800f320 <__swbuf_r>
 8010f0a:	6813      	ldr	r3, [r2, #0]
 8010f0c:	1c58      	adds	r0, r3, #1
 8010f0e:	6010      	str	r0, [r2, #0]
 8010f10:	7019      	strb	r1, [r3, #0]
 8010f12:	4608      	mov	r0, r1
 8010f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f18:	4770      	bx	lr

08010f1a <__sfputs_r>:
 8010f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1c:	4606      	mov	r6, r0
 8010f1e:	460f      	mov	r7, r1
 8010f20:	4614      	mov	r4, r2
 8010f22:	18d5      	adds	r5, r2, r3
 8010f24:	42ac      	cmp	r4, r5
 8010f26:	d101      	bne.n	8010f2c <__sfputs_r+0x12>
 8010f28:	2000      	movs	r0, #0
 8010f2a:	e007      	b.n	8010f3c <__sfputs_r+0x22>
 8010f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f30:	463a      	mov	r2, r7
 8010f32:	4630      	mov	r0, r6
 8010f34:	f7ff ffda 	bl	8010eec <__sfputc_r>
 8010f38:	1c43      	adds	r3, r0, #1
 8010f3a:	d1f3      	bne.n	8010f24 <__sfputs_r+0xa>
 8010f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f40 <_vfiprintf_r>:
 8010f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f44:	460d      	mov	r5, r1
 8010f46:	b09d      	sub	sp, #116	; 0x74
 8010f48:	4614      	mov	r4, r2
 8010f4a:	4698      	mov	r8, r3
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	b118      	cbz	r0, 8010f58 <_vfiprintf_r+0x18>
 8010f50:	6983      	ldr	r3, [r0, #24]
 8010f52:	b90b      	cbnz	r3, 8010f58 <_vfiprintf_r+0x18>
 8010f54:	f7fd fad0 	bl	800e4f8 <__sinit>
 8010f58:	4b89      	ldr	r3, [pc, #548]	; (8011180 <_vfiprintf_r+0x240>)
 8010f5a:	429d      	cmp	r5, r3
 8010f5c:	d11b      	bne.n	8010f96 <_vfiprintf_r+0x56>
 8010f5e:	6875      	ldr	r5, [r6, #4]
 8010f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f62:	07d9      	lsls	r1, r3, #31
 8010f64:	d405      	bmi.n	8010f72 <_vfiprintf_r+0x32>
 8010f66:	89ab      	ldrh	r3, [r5, #12]
 8010f68:	059a      	lsls	r2, r3, #22
 8010f6a:	d402      	bmi.n	8010f72 <_vfiprintf_r+0x32>
 8010f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f6e:	f7fd fb86 	bl	800e67e <__retarget_lock_acquire_recursive>
 8010f72:	89ab      	ldrh	r3, [r5, #12]
 8010f74:	071b      	lsls	r3, r3, #28
 8010f76:	d501      	bpl.n	8010f7c <_vfiprintf_r+0x3c>
 8010f78:	692b      	ldr	r3, [r5, #16]
 8010f7a:	b9eb      	cbnz	r3, 8010fb8 <_vfiprintf_r+0x78>
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f7fe fa32 	bl	800f3e8 <__swsetup_r>
 8010f84:	b1c0      	cbz	r0, 8010fb8 <_vfiprintf_r+0x78>
 8010f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f88:	07dc      	lsls	r4, r3, #31
 8010f8a:	d50e      	bpl.n	8010faa <_vfiprintf_r+0x6a>
 8010f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f90:	b01d      	add	sp, #116	; 0x74
 8010f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f96:	4b7b      	ldr	r3, [pc, #492]	; (8011184 <_vfiprintf_r+0x244>)
 8010f98:	429d      	cmp	r5, r3
 8010f9a:	d101      	bne.n	8010fa0 <_vfiprintf_r+0x60>
 8010f9c:	68b5      	ldr	r5, [r6, #8]
 8010f9e:	e7df      	b.n	8010f60 <_vfiprintf_r+0x20>
 8010fa0:	4b79      	ldr	r3, [pc, #484]	; (8011188 <_vfiprintf_r+0x248>)
 8010fa2:	429d      	cmp	r5, r3
 8010fa4:	bf08      	it	eq
 8010fa6:	68f5      	ldreq	r5, [r6, #12]
 8010fa8:	e7da      	b.n	8010f60 <_vfiprintf_r+0x20>
 8010faa:	89ab      	ldrh	r3, [r5, #12]
 8010fac:	0598      	lsls	r0, r3, #22
 8010fae:	d4ed      	bmi.n	8010f8c <_vfiprintf_r+0x4c>
 8010fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fb2:	f7fd fb65 	bl	800e680 <__retarget_lock_release_recursive>
 8010fb6:	e7e9      	b.n	8010f8c <_vfiprintf_r+0x4c>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	9309      	str	r3, [sp, #36]	; 0x24
 8010fbc:	2320      	movs	r3, #32
 8010fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fc6:	2330      	movs	r3, #48	; 0x30
 8010fc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801118c <_vfiprintf_r+0x24c>
 8010fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fd0:	f04f 0901 	mov.w	r9, #1
 8010fd4:	4623      	mov	r3, r4
 8010fd6:	469a      	mov	sl, r3
 8010fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fdc:	b10a      	cbz	r2, 8010fe2 <_vfiprintf_r+0xa2>
 8010fde:	2a25      	cmp	r2, #37	; 0x25
 8010fe0:	d1f9      	bne.n	8010fd6 <_vfiprintf_r+0x96>
 8010fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8010fe6:	d00b      	beq.n	8011000 <_vfiprintf_r+0xc0>
 8010fe8:	465b      	mov	r3, fp
 8010fea:	4622      	mov	r2, r4
 8010fec:	4629      	mov	r1, r5
 8010fee:	4630      	mov	r0, r6
 8010ff0:	f7ff ff93 	bl	8010f1a <__sfputs_r>
 8010ff4:	3001      	adds	r0, #1
 8010ff6:	f000 80aa 	beq.w	801114e <_vfiprintf_r+0x20e>
 8010ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ffc:	445a      	add	r2, fp
 8010ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8011000:	f89a 3000 	ldrb.w	r3, [sl]
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 80a2 	beq.w	801114e <_vfiprintf_r+0x20e>
 801100a:	2300      	movs	r3, #0
 801100c:	f04f 32ff 	mov.w	r2, #4294967295
 8011010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011014:	f10a 0a01 	add.w	sl, sl, #1
 8011018:	9304      	str	r3, [sp, #16]
 801101a:	9307      	str	r3, [sp, #28]
 801101c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011020:	931a      	str	r3, [sp, #104]	; 0x68
 8011022:	4654      	mov	r4, sl
 8011024:	2205      	movs	r2, #5
 8011026:	f814 1b01 	ldrb.w	r1, [r4], #1
 801102a:	4858      	ldr	r0, [pc, #352]	; (801118c <_vfiprintf_r+0x24c>)
 801102c:	f7ef f8e0 	bl	80001f0 <memchr>
 8011030:	9a04      	ldr	r2, [sp, #16]
 8011032:	b9d8      	cbnz	r0, 801106c <_vfiprintf_r+0x12c>
 8011034:	06d1      	lsls	r1, r2, #27
 8011036:	bf44      	itt	mi
 8011038:	2320      	movmi	r3, #32
 801103a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801103e:	0713      	lsls	r3, r2, #28
 8011040:	bf44      	itt	mi
 8011042:	232b      	movmi	r3, #43	; 0x2b
 8011044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011048:	f89a 3000 	ldrb.w	r3, [sl]
 801104c:	2b2a      	cmp	r3, #42	; 0x2a
 801104e:	d015      	beq.n	801107c <_vfiprintf_r+0x13c>
 8011050:	9a07      	ldr	r2, [sp, #28]
 8011052:	4654      	mov	r4, sl
 8011054:	2000      	movs	r0, #0
 8011056:	f04f 0c0a 	mov.w	ip, #10
 801105a:	4621      	mov	r1, r4
 801105c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011060:	3b30      	subs	r3, #48	; 0x30
 8011062:	2b09      	cmp	r3, #9
 8011064:	d94e      	bls.n	8011104 <_vfiprintf_r+0x1c4>
 8011066:	b1b0      	cbz	r0, 8011096 <_vfiprintf_r+0x156>
 8011068:	9207      	str	r2, [sp, #28]
 801106a:	e014      	b.n	8011096 <_vfiprintf_r+0x156>
 801106c:	eba0 0308 	sub.w	r3, r0, r8
 8011070:	fa09 f303 	lsl.w	r3, r9, r3
 8011074:	4313      	orrs	r3, r2
 8011076:	9304      	str	r3, [sp, #16]
 8011078:	46a2      	mov	sl, r4
 801107a:	e7d2      	b.n	8011022 <_vfiprintf_r+0xe2>
 801107c:	9b03      	ldr	r3, [sp, #12]
 801107e:	1d19      	adds	r1, r3, #4
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	9103      	str	r1, [sp, #12]
 8011084:	2b00      	cmp	r3, #0
 8011086:	bfbb      	ittet	lt
 8011088:	425b      	neglt	r3, r3
 801108a:	f042 0202 	orrlt.w	r2, r2, #2
 801108e:	9307      	strge	r3, [sp, #28]
 8011090:	9307      	strlt	r3, [sp, #28]
 8011092:	bfb8      	it	lt
 8011094:	9204      	strlt	r2, [sp, #16]
 8011096:	7823      	ldrb	r3, [r4, #0]
 8011098:	2b2e      	cmp	r3, #46	; 0x2e
 801109a:	d10c      	bne.n	80110b6 <_vfiprintf_r+0x176>
 801109c:	7863      	ldrb	r3, [r4, #1]
 801109e:	2b2a      	cmp	r3, #42	; 0x2a
 80110a0:	d135      	bne.n	801110e <_vfiprintf_r+0x1ce>
 80110a2:	9b03      	ldr	r3, [sp, #12]
 80110a4:	1d1a      	adds	r2, r3, #4
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	9203      	str	r2, [sp, #12]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	bfb8      	it	lt
 80110ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80110b2:	3402      	adds	r4, #2
 80110b4:	9305      	str	r3, [sp, #20]
 80110b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801119c <_vfiprintf_r+0x25c>
 80110ba:	7821      	ldrb	r1, [r4, #0]
 80110bc:	2203      	movs	r2, #3
 80110be:	4650      	mov	r0, sl
 80110c0:	f7ef f896 	bl	80001f0 <memchr>
 80110c4:	b140      	cbz	r0, 80110d8 <_vfiprintf_r+0x198>
 80110c6:	2340      	movs	r3, #64	; 0x40
 80110c8:	eba0 000a 	sub.w	r0, r0, sl
 80110cc:	fa03 f000 	lsl.w	r0, r3, r0
 80110d0:	9b04      	ldr	r3, [sp, #16]
 80110d2:	4303      	orrs	r3, r0
 80110d4:	3401      	adds	r4, #1
 80110d6:	9304      	str	r3, [sp, #16]
 80110d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110dc:	482c      	ldr	r0, [pc, #176]	; (8011190 <_vfiprintf_r+0x250>)
 80110de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110e2:	2206      	movs	r2, #6
 80110e4:	f7ef f884 	bl	80001f0 <memchr>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d03f      	beq.n	801116c <_vfiprintf_r+0x22c>
 80110ec:	4b29      	ldr	r3, [pc, #164]	; (8011194 <_vfiprintf_r+0x254>)
 80110ee:	bb1b      	cbnz	r3, 8011138 <_vfiprintf_r+0x1f8>
 80110f0:	9b03      	ldr	r3, [sp, #12]
 80110f2:	3307      	adds	r3, #7
 80110f4:	f023 0307 	bic.w	r3, r3, #7
 80110f8:	3308      	adds	r3, #8
 80110fa:	9303      	str	r3, [sp, #12]
 80110fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110fe:	443b      	add	r3, r7
 8011100:	9309      	str	r3, [sp, #36]	; 0x24
 8011102:	e767      	b.n	8010fd4 <_vfiprintf_r+0x94>
 8011104:	fb0c 3202 	mla	r2, ip, r2, r3
 8011108:	460c      	mov	r4, r1
 801110a:	2001      	movs	r0, #1
 801110c:	e7a5      	b.n	801105a <_vfiprintf_r+0x11a>
 801110e:	2300      	movs	r3, #0
 8011110:	3401      	adds	r4, #1
 8011112:	9305      	str	r3, [sp, #20]
 8011114:	4619      	mov	r1, r3
 8011116:	f04f 0c0a 	mov.w	ip, #10
 801111a:	4620      	mov	r0, r4
 801111c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011120:	3a30      	subs	r2, #48	; 0x30
 8011122:	2a09      	cmp	r2, #9
 8011124:	d903      	bls.n	801112e <_vfiprintf_r+0x1ee>
 8011126:	2b00      	cmp	r3, #0
 8011128:	d0c5      	beq.n	80110b6 <_vfiprintf_r+0x176>
 801112a:	9105      	str	r1, [sp, #20]
 801112c:	e7c3      	b.n	80110b6 <_vfiprintf_r+0x176>
 801112e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011132:	4604      	mov	r4, r0
 8011134:	2301      	movs	r3, #1
 8011136:	e7f0      	b.n	801111a <_vfiprintf_r+0x1da>
 8011138:	ab03      	add	r3, sp, #12
 801113a:	9300      	str	r3, [sp, #0]
 801113c:	462a      	mov	r2, r5
 801113e:	4b16      	ldr	r3, [pc, #88]	; (8011198 <_vfiprintf_r+0x258>)
 8011140:	a904      	add	r1, sp, #16
 8011142:	4630      	mov	r0, r6
 8011144:	f7fd fbae 	bl	800e8a4 <_printf_float>
 8011148:	4607      	mov	r7, r0
 801114a:	1c78      	adds	r0, r7, #1
 801114c:	d1d6      	bne.n	80110fc <_vfiprintf_r+0x1bc>
 801114e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011150:	07d9      	lsls	r1, r3, #31
 8011152:	d405      	bmi.n	8011160 <_vfiprintf_r+0x220>
 8011154:	89ab      	ldrh	r3, [r5, #12]
 8011156:	059a      	lsls	r2, r3, #22
 8011158:	d402      	bmi.n	8011160 <_vfiprintf_r+0x220>
 801115a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801115c:	f7fd fa90 	bl	800e680 <__retarget_lock_release_recursive>
 8011160:	89ab      	ldrh	r3, [r5, #12]
 8011162:	065b      	lsls	r3, r3, #25
 8011164:	f53f af12 	bmi.w	8010f8c <_vfiprintf_r+0x4c>
 8011168:	9809      	ldr	r0, [sp, #36]	; 0x24
 801116a:	e711      	b.n	8010f90 <_vfiprintf_r+0x50>
 801116c:	ab03      	add	r3, sp, #12
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	462a      	mov	r2, r5
 8011172:	4b09      	ldr	r3, [pc, #36]	; (8011198 <_vfiprintf_r+0x258>)
 8011174:	a904      	add	r1, sp, #16
 8011176:	4630      	mov	r0, r6
 8011178:	f7fd fe38 	bl	800edec <_printf_i>
 801117c:	e7e4      	b.n	8011148 <_vfiprintf_r+0x208>
 801117e:	bf00      	nop
 8011180:	08012e20 	.word	0x08012e20
 8011184:	08012e40 	.word	0x08012e40
 8011188:	08012e00 	.word	0x08012e00
 801118c:	0801308c 	.word	0x0801308c
 8011190:	08013096 	.word	0x08013096
 8011194:	0800e8a5 	.word	0x0800e8a5
 8011198:	08010f1b 	.word	0x08010f1b
 801119c:	08013092 	.word	0x08013092

080111a0 <_read_r>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	4d07      	ldr	r5, [pc, #28]	; (80111c0 <_read_r+0x20>)
 80111a4:	4604      	mov	r4, r0
 80111a6:	4608      	mov	r0, r1
 80111a8:	4611      	mov	r1, r2
 80111aa:	2200      	movs	r2, #0
 80111ac:	602a      	str	r2, [r5, #0]
 80111ae:	461a      	mov	r2, r3
 80111b0:	f7f1 fd82 	bl	8002cb8 <_read>
 80111b4:	1c43      	adds	r3, r0, #1
 80111b6:	d102      	bne.n	80111be <_read_r+0x1e>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	b103      	cbz	r3, 80111be <_read_r+0x1e>
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	bd38      	pop	{r3, r4, r5, pc}
 80111c0:	20004d2c 	.word	0x20004d2c

080111c4 <__assert_func>:
 80111c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111c6:	4614      	mov	r4, r2
 80111c8:	461a      	mov	r2, r3
 80111ca:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <__assert_func+0x2c>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	4605      	mov	r5, r0
 80111d0:	68d8      	ldr	r0, [r3, #12]
 80111d2:	b14c      	cbz	r4, 80111e8 <__assert_func+0x24>
 80111d4:	4b07      	ldr	r3, [pc, #28]	; (80111f4 <__assert_func+0x30>)
 80111d6:	9100      	str	r1, [sp, #0]
 80111d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111dc:	4906      	ldr	r1, [pc, #24]	; (80111f8 <__assert_func+0x34>)
 80111de:	462b      	mov	r3, r5
 80111e0:	f000 f80e 	bl	8011200 <fiprintf>
 80111e4:	f000 f89f 	bl	8011326 <abort>
 80111e8:	4b04      	ldr	r3, [pc, #16]	; (80111fc <__assert_func+0x38>)
 80111ea:	461c      	mov	r4, r3
 80111ec:	e7f3      	b.n	80111d6 <__assert_func+0x12>
 80111ee:	bf00      	nop
 80111f0:	200002cc 	.word	0x200002cc
 80111f4:	0801309d 	.word	0x0801309d
 80111f8:	080130aa 	.word	0x080130aa
 80111fc:	080130d8 	.word	0x080130d8

08011200 <fiprintf>:
 8011200:	b40e      	push	{r1, r2, r3}
 8011202:	b503      	push	{r0, r1, lr}
 8011204:	4601      	mov	r1, r0
 8011206:	ab03      	add	r3, sp, #12
 8011208:	4805      	ldr	r0, [pc, #20]	; (8011220 <fiprintf+0x20>)
 801120a:	f853 2b04 	ldr.w	r2, [r3], #4
 801120e:	6800      	ldr	r0, [r0, #0]
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	f7ff fe95 	bl	8010f40 <_vfiprintf_r>
 8011216:	b002      	add	sp, #8
 8011218:	f85d eb04 	ldr.w	lr, [sp], #4
 801121c:	b003      	add	sp, #12
 801121e:	4770      	bx	lr
 8011220:	200002cc 	.word	0x200002cc

08011224 <_fstat_r>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	4d07      	ldr	r5, [pc, #28]	; (8011244 <_fstat_r+0x20>)
 8011228:	2300      	movs	r3, #0
 801122a:	4604      	mov	r4, r0
 801122c:	4608      	mov	r0, r1
 801122e:	4611      	mov	r1, r2
 8011230:	602b      	str	r3, [r5, #0]
 8011232:	f7f1 fd86 	bl	8002d42 <_fstat>
 8011236:	1c43      	adds	r3, r0, #1
 8011238:	d102      	bne.n	8011240 <_fstat_r+0x1c>
 801123a:	682b      	ldr	r3, [r5, #0]
 801123c:	b103      	cbz	r3, 8011240 <_fstat_r+0x1c>
 801123e:	6023      	str	r3, [r4, #0]
 8011240:	bd38      	pop	{r3, r4, r5, pc}
 8011242:	bf00      	nop
 8011244:	20004d2c 	.word	0x20004d2c

08011248 <_isatty_r>:
 8011248:	b538      	push	{r3, r4, r5, lr}
 801124a:	4d06      	ldr	r5, [pc, #24]	; (8011264 <_isatty_r+0x1c>)
 801124c:	2300      	movs	r3, #0
 801124e:	4604      	mov	r4, r0
 8011250:	4608      	mov	r0, r1
 8011252:	602b      	str	r3, [r5, #0]
 8011254:	f7f1 fd85 	bl	8002d62 <_isatty>
 8011258:	1c43      	adds	r3, r0, #1
 801125a:	d102      	bne.n	8011262 <_isatty_r+0x1a>
 801125c:	682b      	ldr	r3, [r5, #0]
 801125e:	b103      	cbz	r3, 8011262 <_isatty_r+0x1a>
 8011260:	6023      	str	r3, [r4, #0]
 8011262:	bd38      	pop	{r3, r4, r5, pc}
 8011264:	20004d2c 	.word	0x20004d2c

08011268 <__ascii_mbtowc>:
 8011268:	b082      	sub	sp, #8
 801126a:	b901      	cbnz	r1, 801126e <__ascii_mbtowc+0x6>
 801126c:	a901      	add	r1, sp, #4
 801126e:	b142      	cbz	r2, 8011282 <__ascii_mbtowc+0x1a>
 8011270:	b14b      	cbz	r3, 8011286 <__ascii_mbtowc+0x1e>
 8011272:	7813      	ldrb	r3, [r2, #0]
 8011274:	600b      	str	r3, [r1, #0]
 8011276:	7812      	ldrb	r2, [r2, #0]
 8011278:	1e10      	subs	r0, r2, #0
 801127a:	bf18      	it	ne
 801127c:	2001      	movne	r0, #1
 801127e:	b002      	add	sp, #8
 8011280:	4770      	bx	lr
 8011282:	4610      	mov	r0, r2
 8011284:	e7fb      	b.n	801127e <__ascii_mbtowc+0x16>
 8011286:	f06f 0001 	mvn.w	r0, #1
 801128a:	e7f8      	b.n	801127e <__ascii_mbtowc+0x16>

0801128c <memmove>:
 801128c:	4288      	cmp	r0, r1
 801128e:	b510      	push	{r4, lr}
 8011290:	eb01 0402 	add.w	r4, r1, r2
 8011294:	d902      	bls.n	801129c <memmove+0x10>
 8011296:	4284      	cmp	r4, r0
 8011298:	4623      	mov	r3, r4
 801129a:	d807      	bhi.n	80112ac <memmove+0x20>
 801129c:	1e43      	subs	r3, r0, #1
 801129e:	42a1      	cmp	r1, r4
 80112a0:	d008      	beq.n	80112b4 <memmove+0x28>
 80112a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112aa:	e7f8      	b.n	801129e <memmove+0x12>
 80112ac:	4402      	add	r2, r0
 80112ae:	4601      	mov	r1, r0
 80112b0:	428a      	cmp	r2, r1
 80112b2:	d100      	bne.n	80112b6 <memmove+0x2a>
 80112b4:	bd10      	pop	{r4, pc}
 80112b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112be:	e7f7      	b.n	80112b0 <memmove+0x24>

080112c0 <_realloc_r>:
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c2:	4607      	mov	r7, r0
 80112c4:	4614      	mov	r4, r2
 80112c6:	460e      	mov	r6, r1
 80112c8:	b921      	cbnz	r1, 80112d4 <_realloc_r+0x14>
 80112ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80112ce:	4611      	mov	r1, r2
 80112d0:	f7fd b9ee 	b.w	800e6b0 <_malloc_r>
 80112d4:	b922      	cbnz	r2, 80112e0 <_realloc_r+0x20>
 80112d6:	f7ff fc5d 	bl	8010b94 <_free_r>
 80112da:	4625      	mov	r5, r4
 80112dc:	4628      	mov	r0, r5
 80112de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112e0:	f000 f828 	bl	8011334 <_malloc_usable_size_r>
 80112e4:	42a0      	cmp	r0, r4
 80112e6:	d20f      	bcs.n	8011308 <_realloc_r+0x48>
 80112e8:	4621      	mov	r1, r4
 80112ea:	4638      	mov	r0, r7
 80112ec:	f7fd f9e0 	bl	800e6b0 <_malloc_r>
 80112f0:	4605      	mov	r5, r0
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d0f2      	beq.n	80112dc <_realloc_r+0x1c>
 80112f6:	4631      	mov	r1, r6
 80112f8:	4622      	mov	r2, r4
 80112fa:	f7fd f9c2 	bl	800e682 <memcpy>
 80112fe:	4631      	mov	r1, r6
 8011300:	4638      	mov	r0, r7
 8011302:	f7ff fc47 	bl	8010b94 <_free_r>
 8011306:	e7e9      	b.n	80112dc <_realloc_r+0x1c>
 8011308:	4635      	mov	r5, r6
 801130a:	e7e7      	b.n	80112dc <_realloc_r+0x1c>

0801130c <__ascii_wctomb>:
 801130c:	b149      	cbz	r1, 8011322 <__ascii_wctomb+0x16>
 801130e:	2aff      	cmp	r2, #255	; 0xff
 8011310:	bf85      	ittet	hi
 8011312:	238a      	movhi	r3, #138	; 0x8a
 8011314:	6003      	strhi	r3, [r0, #0]
 8011316:	700a      	strbls	r2, [r1, #0]
 8011318:	f04f 30ff 	movhi.w	r0, #4294967295
 801131c:	bf98      	it	ls
 801131e:	2001      	movls	r0, #1
 8011320:	4770      	bx	lr
 8011322:	4608      	mov	r0, r1
 8011324:	4770      	bx	lr

08011326 <abort>:
 8011326:	b508      	push	{r3, lr}
 8011328:	2006      	movs	r0, #6
 801132a:	f000 f833 	bl	8011394 <raise>
 801132e:	2001      	movs	r0, #1
 8011330:	f7f1 fcb8 	bl	8002ca4 <_exit>

08011334 <_malloc_usable_size_r>:
 8011334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011338:	1f18      	subs	r0, r3, #4
 801133a:	2b00      	cmp	r3, #0
 801133c:	bfbc      	itt	lt
 801133e:	580b      	ldrlt	r3, [r1, r0]
 8011340:	18c0      	addlt	r0, r0, r3
 8011342:	4770      	bx	lr

08011344 <_raise_r>:
 8011344:	291f      	cmp	r1, #31
 8011346:	b538      	push	{r3, r4, r5, lr}
 8011348:	4604      	mov	r4, r0
 801134a:	460d      	mov	r5, r1
 801134c:	d904      	bls.n	8011358 <_raise_r+0x14>
 801134e:	2316      	movs	r3, #22
 8011350:	6003      	str	r3, [r0, #0]
 8011352:	f04f 30ff 	mov.w	r0, #4294967295
 8011356:	bd38      	pop	{r3, r4, r5, pc}
 8011358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801135a:	b112      	cbz	r2, 8011362 <_raise_r+0x1e>
 801135c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011360:	b94b      	cbnz	r3, 8011376 <_raise_r+0x32>
 8011362:	4620      	mov	r0, r4
 8011364:	f000 f830 	bl	80113c8 <_getpid_r>
 8011368:	462a      	mov	r2, r5
 801136a:	4601      	mov	r1, r0
 801136c:	4620      	mov	r0, r4
 801136e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011372:	f000 b817 	b.w	80113a4 <_kill_r>
 8011376:	2b01      	cmp	r3, #1
 8011378:	d00a      	beq.n	8011390 <_raise_r+0x4c>
 801137a:	1c59      	adds	r1, r3, #1
 801137c:	d103      	bne.n	8011386 <_raise_r+0x42>
 801137e:	2316      	movs	r3, #22
 8011380:	6003      	str	r3, [r0, #0]
 8011382:	2001      	movs	r0, #1
 8011384:	e7e7      	b.n	8011356 <_raise_r+0x12>
 8011386:	2400      	movs	r4, #0
 8011388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801138c:	4628      	mov	r0, r5
 801138e:	4798      	blx	r3
 8011390:	2000      	movs	r0, #0
 8011392:	e7e0      	b.n	8011356 <_raise_r+0x12>

08011394 <raise>:
 8011394:	4b02      	ldr	r3, [pc, #8]	; (80113a0 <raise+0xc>)
 8011396:	4601      	mov	r1, r0
 8011398:	6818      	ldr	r0, [r3, #0]
 801139a:	f7ff bfd3 	b.w	8011344 <_raise_r>
 801139e:	bf00      	nop
 80113a0:	200002cc 	.word	0x200002cc

080113a4 <_kill_r>:
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	4d07      	ldr	r5, [pc, #28]	; (80113c4 <_kill_r+0x20>)
 80113a8:	2300      	movs	r3, #0
 80113aa:	4604      	mov	r4, r0
 80113ac:	4608      	mov	r0, r1
 80113ae:	4611      	mov	r1, r2
 80113b0:	602b      	str	r3, [r5, #0]
 80113b2:	f7f1 fc67 	bl	8002c84 <_kill>
 80113b6:	1c43      	adds	r3, r0, #1
 80113b8:	d102      	bne.n	80113c0 <_kill_r+0x1c>
 80113ba:	682b      	ldr	r3, [r5, #0]
 80113bc:	b103      	cbz	r3, 80113c0 <_kill_r+0x1c>
 80113be:	6023      	str	r3, [r4, #0]
 80113c0:	bd38      	pop	{r3, r4, r5, pc}
 80113c2:	bf00      	nop
 80113c4:	20004d2c 	.word	0x20004d2c

080113c8 <_getpid_r>:
 80113c8:	f7f1 bc54 	b.w	8002c74 <_getpid>
 80113cc:	0000      	movs	r0, r0
	...

080113d0 <cos>:
 80113d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113d2:	ec53 2b10 	vmov	r2, r3, d0
 80113d6:	4824      	ldr	r0, [pc, #144]	; (8011468 <cos+0x98>)
 80113d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80113dc:	4281      	cmp	r1, r0
 80113de:	dc06      	bgt.n	80113ee <cos+0x1e>
 80113e0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8011460 <cos+0x90>
 80113e4:	f000 fc70 	bl	8011cc8 <__kernel_cos>
 80113e8:	ec51 0b10 	vmov	r0, r1, d0
 80113ec:	e007      	b.n	80113fe <cos+0x2e>
 80113ee:	481f      	ldr	r0, [pc, #124]	; (801146c <cos+0x9c>)
 80113f0:	4281      	cmp	r1, r0
 80113f2:	dd09      	ble.n	8011408 <cos+0x38>
 80113f4:	ee10 0a10 	vmov	r0, s0
 80113f8:	4619      	mov	r1, r3
 80113fa:	f7ee ff4d 	bl	8000298 <__aeabi_dsub>
 80113fe:	ec41 0b10 	vmov	d0, r0, r1
 8011402:	b005      	add	sp, #20
 8011404:	f85d fb04 	ldr.w	pc, [sp], #4
 8011408:	4668      	mov	r0, sp
 801140a:	f000 fa51 	bl	80118b0 <__ieee754_rem_pio2>
 801140e:	f000 0003 	and.w	r0, r0, #3
 8011412:	2801      	cmp	r0, #1
 8011414:	d007      	beq.n	8011426 <cos+0x56>
 8011416:	2802      	cmp	r0, #2
 8011418:	d012      	beq.n	8011440 <cos+0x70>
 801141a:	b9c0      	cbnz	r0, 801144e <cos+0x7e>
 801141c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011420:	ed9d 0b00 	vldr	d0, [sp]
 8011424:	e7de      	b.n	80113e4 <cos+0x14>
 8011426:	ed9d 1b02 	vldr	d1, [sp, #8]
 801142a:	ed9d 0b00 	vldr	d0, [sp]
 801142e:	f001 f853 	bl	80124d8 <__kernel_sin>
 8011432:	ec53 2b10 	vmov	r2, r3, d0
 8011436:	ee10 0a10 	vmov	r0, s0
 801143a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801143e:	e7de      	b.n	80113fe <cos+0x2e>
 8011440:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011444:	ed9d 0b00 	vldr	d0, [sp]
 8011448:	f000 fc3e 	bl	8011cc8 <__kernel_cos>
 801144c:	e7f1      	b.n	8011432 <cos+0x62>
 801144e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011452:	ed9d 0b00 	vldr	d0, [sp]
 8011456:	2001      	movs	r0, #1
 8011458:	f001 f83e 	bl	80124d8 <__kernel_sin>
 801145c:	e7c4      	b.n	80113e8 <cos+0x18>
 801145e:	bf00      	nop
	...
 8011468:	3fe921fb 	.word	0x3fe921fb
 801146c:	7fefffff 	.word	0x7fefffff

08011470 <sin>:
 8011470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011472:	ec53 2b10 	vmov	r2, r3, d0
 8011476:	4826      	ldr	r0, [pc, #152]	; (8011510 <sin+0xa0>)
 8011478:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801147c:	4281      	cmp	r1, r0
 801147e:	dc07      	bgt.n	8011490 <sin+0x20>
 8011480:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011508 <sin+0x98>
 8011484:	2000      	movs	r0, #0
 8011486:	f001 f827 	bl	80124d8 <__kernel_sin>
 801148a:	ec51 0b10 	vmov	r0, r1, d0
 801148e:	e007      	b.n	80114a0 <sin+0x30>
 8011490:	4820      	ldr	r0, [pc, #128]	; (8011514 <sin+0xa4>)
 8011492:	4281      	cmp	r1, r0
 8011494:	dd09      	ble.n	80114aa <sin+0x3a>
 8011496:	ee10 0a10 	vmov	r0, s0
 801149a:	4619      	mov	r1, r3
 801149c:	f7ee fefc 	bl	8000298 <__aeabi_dsub>
 80114a0:	ec41 0b10 	vmov	d0, r0, r1
 80114a4:	b005      	add	sp, #20
 80114a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80114aa:	4668      	mov	r0, sp
 80114ac:	f000 fa00 	bl	80118b0 <__ieee754_rem_pio2>
 80114b0:	f000 0003 	and.w	r0, r0, #3
 80114b4:	2801      	cmp	r0, #1
 80114b6:	d008      	beq.n	80114ca <sin+0x5a>
 80114b8:	2802      	cmp	r0, #2
 80114ba:	d00d      	beq.n	80114d8 <sin+0x68>
 80114bc:	b9d0      	cbnz	r0, 80114f4 <sin+0x84>
 80114be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114c2:	ed9d 0b00 	vldr	d0, [sp]
 80114c6:	2001      	movs	r0, #1
 80114c8:	e7dd      	b.n	8011486 <sin+0x16>
 80114ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114ce:	ed9d 0b00 	vldr	d0, [sp]
 80114d2:	f000 fbf9 	bl	8011cc8 <__kernel_cos>
 80114d6:	e7d8      	b.n	801148a <sin+0x1a>
 80114d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114dc:	ed9d 0b00 	vldr	d0, [sp]
 80114e0:	2001      	movs	r0, #1
 80114e2:	f000 fff9 	bl	80124d8 <__kernel_sin>
 80114e6:	ec53 2b10 	vmov	r2, r3, d0
 80114ea:	ee10 0a10 	vmov	r0, s0
 80114ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80114f2:	e7d5      	b.n	80114a0 <sin+0x30>
 80114f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114f8:	ed9d 0b00 	vldr	d0, [sp]
 80114fc:	f000 fbe4 	bl	8011cc8 <__kernel_cos>
 8011500:	e7f1      	b.n	80114e6 <sin+0x76>
 8011502:	bf00      	nop
 8011504:	f3af 8000 	nop.w
	...
 8011510:	3fe921fb 	.word	0x3fe921fb
 8011514:	7fefffff 	.word	0x7fefffff

08011518 <exp>:
 8011518:	b538      	push	{r3, r4, r5, lr}
 801151a:	ed2d 8b02 	vpush	{d8}
 801151e:	ec55 4b10 	vmov	r4, r5, d0
 8011522:	f000 f849 	bl	80115b8 <__ieee754_exp>
 8011526:	4b22      	ldr	r3, [pc, #136]	; (80115b0 <exp+0x98>)
 8011528:	eeb0 8a40 	vmov.f32	s16, s0
 801152c:	eef0 8a60 	vmov.f32	s17, s1
 8011530:	f993 3000 	ldrsb.w	r3, [r3]
 8011534:	3301      	adds	r3, #1
 8011536:	d012      	beq.n	801155e <exp+0x46>
 8011538:	ec45 4b10 	vmov	d0, r4, r5
 801153c:	f001 f893 	bl	8012666 <finite>
 8011540:	b168      	cbz	r0, 801155e <exp+0x46>
 8011542:	a313      	add	r3, pc, #76	; (adr r3, 8011590 <exp+0x78>)
 8011544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011548:	4620      	mov	r0, r4
 801154a:	4629      	mov	r1, r5
 801154c:	f7ef faec 	bl	8000b28 <__aeabi_dcmpgt>
 8011550:	b160      	cbz	r0, 801156c <exp+0x54>
 8011552:	f7fc ff73 	bl	800e43c <__errno>
 8011556:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011598 <exp+0x80>
 801155a:	2322      	movs	r3, #34	; 0x22
 801155c:	6003      	str	r3, [r0, #0]
 801155e:	eeb0 0a48 	vmov.f32	s0, s16
 8011562:	eef0 0a68 	vmov.f32	s1, s17
 8011566:	ecbd 8b02 	vpop	{d8}
 801156a:	bd38      	pop	{r3, r4, r5, pc}
 801156c:	a30c      	add	r3, pc, #48	; (adr r3, 80115a0 <exp+0x88>)
 801156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011572:	4620      	mov	r0, r4
 8011574:	4629      	mov	r1, r5
 8011576:	f7ef fab9 	bl	8000aec <__aeabi_dcmplt>
 801157a:	2800      	cmp	r0, #0
 801157c:	d0ef      	beq.n	801155e <exp+0x46>
 801157e:	f7fc ff5d 	bl	800e43c <__errno>
 8011582:	2322      	movs	r3, #34	; 0x22
 8011584:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80115a8 <exp+0x90>
 8011588:	6003      	str	r3, [r0, #0]
 801158a:	e7e8      	b.n	801155e <exp+0x46>
 801158c:	f3af 8000 	nop.w
 8011590:	fefa39ef 	.word	0xfefa39ef
 8011594:	40862e42 	.word	0x40862e42
 8011598:	00000000 	.word	0x00000000
 801159c:	7ff00000 	.word	0x7ff00000
 80115a0:	d52d3051 	.word	0xd52d3051
 80115a4:	c0874910 	.word	0xc0874910
	...
 80115b0:	2000049c 	.word	0x2000049c
 80115b4:	00000000 	.word	0x00000000

080115b8 <__ieee754_exp>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	ec55 4b10 	vmov	r4, r5, d0
 80115c0:	49b1      	ldr	r1, [pc, #708]	; (8011888 <__ieee754_exp+0x2d0>)
 80115c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80115c6:	428b      	cmp	r3, r1
 80115c8:	ed2d 8b04 	vpush	{d8-d9}
 80115cc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80115d0:	d937      	bls.n	8011642 <__ieee754_exp+0x8a>
 80115d2:	49ae      	ldr	r1, [pc, #696]	; (801188c <__ieee754_exp+0x2d4>)
 80115d4:	428b      	cmp	r3, r1
 80115d6:	d916      	bls.n	8011606 <__ieee754_exp+0x4e>
 80115d8:	ee10 3a10 	vmov	r3, s0
 80115dc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80115e0:	4313      	orrs	r3, r2
 80115e2:	d009      	beq.n	80115f8 <__ieee754_exp+0x40>
 80115e4:	ee10 2a10 	vmov	r2, s0
 80115e8:	462b      	mov	r3, r5
 80115ea:	4620      	mov	r0, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	f7ee fe55 	bl	800029c <__adddf3>
 80115f2:	4604      	mov	r4, r0
 80115f4:	460d      	mov	r5, r1
 80115f6:	e000      	b.n	80115fa <__ieee754_exp+0x42>
 80115f8:	bb06      	cbnz	r6, 801163c <__ieee754_exp+0x84>
 80115fa:	ecbd 8b04 	vpop	{d8-d9}
 80115fe:	ec45 4b10 	vmov	d0, r4, r5
 8011602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011606:	a38a      	add	r3, pc, #552	; (adr r3, 8011830 <__ieee754_exp+0x278>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	ee10 0a10 	vmov	r0, s0
 8011610:	4629      	mov	r1, r5
 8011612:	f7ef fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8011616:	b138      	cbz	r0, 8011628 <__ieee754_exp+0x70>
 8011618:	a387      	add	r3, pc, #540	; (adr r3, 8011838 <__ieee754_exp+0x280>)
 801161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161e:	4610      	mov	r0, r2
 8011620:	4619      	mov	r1, r3
 8011622:	f7ee fff1 	bl	8000608 <__aeabi_dmul>
 8011626:	e7e4      	b.n	80115f2 <__ieee754_exp+0x3a>
 8011628:	a385      	add	r3, pc, #532	; (adr r3, 8011840 <__ieee754_exp+0x288>)
 801162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162e:	4620      	mov	r0, r4
 8011630:	4629      	mov	r1, r5
 8011632:	f7ef fa5b 	bl	8000aec <__aeabi_dcmplt>
 8011636:	2800      	cmp	r0, #0
 8011638:	f000 8087 	beq.w	801174a <__ieee754_exp+0x192>
 801163c:	2400      	movs	r4, #0
 801163e:	2500      	movs	r5, #0
 8011640:	e7db      	b.n	80115fa <__ieee754_exp+0x42>
 8011642:	4a93      	ldr	r2, [pc, #588]	; (8011890 <__ieee754_exp+0x2d8>)
 8011644:	4293      	cmp	r3, r2
 8011646:	f240 80ac 	bls.w	80117a2 <__ieee754_exp+0x1ea>
 801164a:	4a92      	ldr	r2, [pc, #584]	; (8011894 <__ieee754_exp+0x2dc>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d87c      	bhi.n	801174a <__ieee754_exp+0x192>
 8011650:	4b91      	ldr	r3, [pc, #580]	; (8011898 <__ieee754_exp+0x2e0>)
 8011652:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165a:	ee10 0a10 	vmov	r0, s0
 801165e:	4629      	mov	r1, r5
 8011660:	f7ee fe1a 	bl	8000298 <__aeabi_dsub>
 8011664:	4b8d      	ldr	r3, [pc, #564]	; (801189c <__ieee754_exp+0x2e4>)
 8011666:	00f7      	lsls	r7, r6, #3
 8011668:	443b      	add	r3, r7
 801166a:	ed93 7b00 	vldr	d7, [r3]
 801166e:	f1c6 0a01 	rsb	sl, r6, #1
 8011672:	4680      	mov	r8, r0
 8011674:	4689      	mov	r9, r1
 8011676:	ebaa 0a06 	sub.w	sl, sl, r6
 801167a:	eeb0 8a47 	vmov.f32	s16, s14
 801167e:	eef0 8a67 	vmov.f32	s17, s15
 8011682:	ec53 2b18 	vmov	r2, r3, d8
 8011686:	4640      	mov	r0, r8
 8011688:	4649      	mov	r1, r9
 801168a:	f7ee fe05 	bl	8000298 <__aeabi_dsub>
 801168e:	4604      	mov	r4, r0
 8011690:	460d      	mov	r5, r1
 8011692:	4622      	mov	r2, r4
 8011694:	462b      	mov	r3, r5
 8011696:	4620      	mov	r0, r4
 8011698:	4629      	mov	r1, r5
 801169a:	f7ee ffb5 	bl	8000608 <__aeabi_dmul>
 801169e:	a36a      	add	r3, pc, #424	; (adr r3, 8011848 <__ieee754_exp+0x290>)
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	4606      	mov	r6, r0
 80116a6:	460f      	mov	r7, r1
 80116a8:	f7ee ffae 	bl	8000608 <__aeabi_dmul>
 80116ac:	a368      	add	r3, pc, #416	; (adr r3, 8011850 <__ieee754_exp+0x298>)
 80116ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b2:	f7ee fdf1 	bl	8000298 <__aeabi_dsub>
 80116b6:	4632      	mov	r2, r6
 80116b8:	463b      	mov	r3, r7
 80116ba:	f7ee ffa5 	bl	8000608 <__aeabi_dmul>
 80116be:	a366      	add	r3, pc, #408	; (adr r3, 8011858 <__ieee754_exp+0x2a0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	f7ee fdea 	bl	800029c <__adddf3>
 80116c8:	4632      	mov	r2, r6
 80116ca:	463b      	mov	r3, r7
 80116cc:	f7ee ff9c 	bl	8000608 <__aeabi_dmul>
 80116d0:	a363      	add	r3, pc, #396	; (adr r3, 8011860 <__ieee754_exp+0x2a8>)
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	f7ee fddf 	bl	8000298 <__aeabi_dsub>
 80116da:	4632      	mov	r2, r6
 80116dc:	463b      	mov	r3, r7
 80116de:	f7ee ff93 	bl	8000608 <__aeabi_dmul>
 80116e2:	a361      	add	r3, pc, #388	; (adr r3, 8011868 <__ieee754_exp+0x2b0>)
 80116e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e8:	f7ee fdd8 	bl	800029c <__adddf3>
 80116ec:	4632      	mov	r2, r6
 80116ee:	463b      	mov	r3, r7
 80116f0:	f7ee ff8a 	bl	8000608 <__aeabi_dmul>
 80116f4:	4602      	mov	r2, r0
 80116f6:	460b      	mov	r3, r1
 80116f8:	4620      	mov	r0, r4
 80116fa:	4629      	mov	r1, r5
 80116fc:	f7ee fdcc 	bl	8000298 <__aeabi_dsub>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	4606      	mov	r6, r0
 8011706:	460f      	mov	r7, r1
 8011708:	4620      	mov	r0, r4
 801170a:	4629      	mov	r1, r5
 801170c:	f7ee ff7c 	bl	8000608 <__aeabi_dmul>
 8011710:	ec41 0b19 	vmov	d9, r0, r1
 8011714:	f1ba 0f00 	cmp.w	sl, #0
 8011718:	d15d      	bne.n	80117d6 <__ieee754_exp+0x21e>
 801171a:	2200      	movs	r2, #0
 801171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011720:	4630      	mov	r0, r6
 8011722:	4639      	mov	r1, r7
 8011724:	f7ee fdb8 	bl	8000298 <__aeabi_dsub>
 8011728:	4602      	mov	r2, r0
 801172a:	460b      	mov	r3, r1
 801172c:	ec51 0b19 	vmov	r0, r1, d9
 8011730:	f7ef f894 	bl	800085c <__aeabi_ddiv>
 8011734:	4622      	mov	r2, r4
 8011736:	462b      	mov	r3, r5
 8011738:	f7ee fdae 	bl	8000298 <__aeabi_dsub>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	2000      	movs	r0, #0
 8011742:	4957      	ldr	r1, [pc, #348]	; (80118a0 <__ieee754_exp+0x2e8>)
 8011744:	f7ee fda8 	bl	8000298 <__aeabi_dsub>
 8011748:	e753      	b.n	80115f2 <__ieee754_exp+0x3a>
 801174a:	4856      	ldr	r0, [pc, #344]	; (80118a4 <__ieee754_exp+0x2ec>)
 801174c:	a348      	add	r3, pc, #288	; (adr r3, 8011870 <__ieee754_exp+0x2b8>)
 801174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011752:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011756:	4629      	mov	r1, r5
 8011758:	4620      	mov	r0, r4
 801175a:	f7ee ff55 	bl	8000608 <__aeabi_dmul>
 801175e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011762:	f7ee fd9b 	bl	800029c <__adddf3>
 8011766:	f7ef f9ff 	bl	8000b68 <__aeabi_d2iz>
 801176a:	4682      	mov	sl, r0
 801176c:	f7ee fee2 	bl	8000534 <__aeabi_i2d>
 8011770:	a341      	add	r3, pc, #260	; (adr r3, 8011878 <__ieee754_exp+0x2c0>)
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	4606      	mov	r6, r0
 8011778:	460f      	mov	r7, r1
 801177a:	f7ee ff45 	bl	8000608 <__aeabi_dmul>
 801177e:	4602      	mov	r2, r0
 8011780:	460b      	mov	r3, r1
 8011782:	4620      	mov	r0, r4
 8011784:	4629      	mov	r1, r5
 8011786:	f7ee fd87 	bl	8000298 <__aeabi_dsub>
 801178a:	a33d      	add	r3, pc, #244	; (adr r3, 8011880 <__ieee754_exp+0x2c8>)
 801178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011790:	4680      	mov	r8, r0
 8011792:	4689      	mov	r9, r1
 8011794:	4630      	mov	r0, r6
 8011796:	4639      	mov	r1, r7
 8011798:	f7ee ff36 	bl	8000608 <__aeabi_dmul>
 801179c:	ec41 0b18 	vmov	d8, r0, r1
 80117a0:	e76f      	b.n	8011682 <__ieee754_exp+0xca>
 80117a2:	4a41      	ldr	r2, [pc, #260]	; (80118a8 <__ieee754_exp+0x2f0>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d811      	bhi.n	80117cc <__ieee754_exp+0x214>
 80117a8:	a323      	add	r3, pc, #140	; (adr r3, 8011838 <__ieee754_exp+0x280>)
 80117aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ae:	ee10 0a10 	vmov	r0, s0
 80117b2:	4629      	mov	r1, r5
 80117b4:	f7ee fd72 	bl	800029c <__adddf3>
 80117b8:	4b39      	ldr	r3, [pc, #228]	; (80118a0 <__ieee754_exp+0x2e8>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	f7ef f9b4 	bl	8000b28 <__aeabi_dcmpgt>
 80117c0:	b138      	cbz	r0, 80117d2 <__ieee754_exp+0x21a>
 80117c2:	4b37      	ldr	r3, [pc, #220]	; (80118a0 <__ieee754_exp+0x2e8>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	e710      	b.n	80115ee <__ieee754_exp+0x36>
 80117cc:	f04f 0a00 	mov.w	sl, #0
 80117d0:	e75f      	b.n	8011692 <__ieee754_exp+0xda>
 80117d2:	4682      	mov	sl, r0
 80117d4:	e75d      	b.n	8011692 <__ieee754_exp+0xda>
 80117d6:	4632      	mov	r2, r6
 80117d8:	463b      	mov	r3, r7
 80117da:	2000      	movs	r0, #0
 80117dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80117e0:	f7ee fd5a 	bl	8000298 <__aeabi_dsub>
 80117e4:	4602      	mov	r2, r0
 80117e6:	460b      	mov	r3, r1
 80117e8:	ec51 0b19 	vmov	r0, r1, d9
 80117ec:	f7ef f836 	bl	800085c <__aeabi_ddiv>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	ec51 0b18 	vmov	r0, r1, d8
 80117f8:	f7ee fd4e 	bl	8000298 <__aeabi_dsub>
 80117fc:	4642      	mov	r2, r8
 80117fe:	464b      	mov	r3, r9
 8011800:	f7ee fd4a 	bl	8000298 <__aeabi_dsub>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	2000      	movs	r0, #0
 801180a:	4925      	ldr	r1, [pc, #148]	; (80118a0 <__ieee754_exp+0x2e8>)
 801180c:	f7ee fd44 	bl	8000298 <__aeabi_dsub>
 8011810:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011814:	4592      	cmp	sl, r2
 8011816:	db02      	blt.n	801181e <__ieee754_exp+0x266>
 8011818:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801181c:	e6e9      	b.n	80115f2 <__ieee754_exp+0x3a>
 801181e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011822:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011826:	2200      	movs	r2, #0
 8011828:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801182c:	e6f9      	b.n	8011622 <__ieee754_exp+0x6a>
 801182e:	bf00      	nop
 8011830:	fefa39ef 	.word	0xfefa39ef
 8011834:	40862e42 	.word	0x40862e42
 8011838:	8800759c 	.word	0x8800759c
 801183c:	7e37e43c 	.word	0x7e37e43c
 8011840:	d52d3051 	.word	0xd52d3051
 8011844:	c0874910 	.word	0xc0874910
 8011848:	72bea4d0 	.word	0x72bea4d0
 801184c:	3e663769 	.word	0x3e663769
 8011850:	c5d26bf1 	.word	0xc5d26bf1
 8011854:	3ebbbd41 	.word	0x3ebbbd41
 8011858:	af25de2c 	.word	0xaf25de2c
 801185c:	3f11566a 	.word	0x3f11566a
 8011860:	16bebd93 	.word	0x16bebd93
 8011864:	3f66c16c 	.word	0x3f66c16c
 8011868:	5555553e 	.word	0x5555553e
 801186c:	3fc55555 	.word	0x3fc55555
 8011870:	652b82fe 	.word	0x652b82fe
 8011874:	3ff71547 	.word	0x3ff71547
 8011878:	fee00000 	.word	0xfee00000
 801187c:	3fe62e42 	.word	0x3fe62e42
 8011880:	35793c76 	.word	0x35793c76
 8011884:	3dea39ef 	.word	0x3dea39ef
 8011888:	40862e41 	.word	0x40862e41
 801188c:	7fefffff 	.word	0x7fefffff
 8011890:	3fd62e42 	.word	0x3fd62e42
 8011894:	3ff0a2b1 	.word	0x3ff0a2b1
 8011898:	080131f8 	.word	0x080131f8
 801189c:	08013208 	.word	0x08013208
 80118a0:	3ff00000 	.word	0x3ff00000
 80118a4:	080131e8 	.word	0x080131e8
 80118a8:	3e2fffff 	.word	0x3e2fffff
 80118ac:	00000000 	.word	0x00000000

080118b0 <__ieee754_rem_pio2>:
 80118b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	ed2d 8b02 	vpush	{d8}
 80118b8:	ec55 4b10 	vmov	r4, r5, d0
 80118bc:	4bca      	ldr	r3, [pc, #808]	; (8011be8 <__ieee754_rem_pio2+0x338>)
 80118be:	b08b      	sub	sp, #44	; 0x2c
 80118c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80118c4:	4598      	cmp	r8, r3
 80118c6:	4682      	mov	sl, r0
 80118c8:	9502      	str	r5, [sp, #8]
 80118ca:	dc08      	bgt.n	80118de <__ieee754_rem_pio2+0x2e>
 80118cc:	2200      	movs	r2, #0
 80118ce:	2300      	movs	r3, #0
 80118d0:	ed80 0b00 	vstr	d0, [r0]
 80118d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80118d8:	f04f 0b00 	mov.w	fp, #0
 80118dc:	e028      	b.n	8011930 <__ieee754_rem_pio2+0x80>
 80118de:	4bc3      	ldr	r3, [pc, #780]	; (8011bec <__ieee754_rem_pio2+0x33c>)
 80118e0:	4598      	cmp	r8, r3
 80118e2:	dc78      	bgt.n	80119d6 <__ieee754_rem_pio2+0x126>
 80118e4:	9b02      	ldr	r3, [sp, #8]
 80118e6:	4ec2      	ldr	r6, [pc, #776]	; (8011bf0 <__ieee754_rem_pio2+0x340>)
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	ee10 0a10 	vmov	r0, s0
 80118ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x300>)
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	4629      	mov	r1, r5
 80118f6:	dd39      	ble.n	801196c <__ieee754_rem_pio2+0xbc>
 80118f8:	f7ee fcce 	bl	8000298 <__aeabi_dsub>
 80118fc:	45b0      	cmp	r8, r6
 80118fe:	4604      	mov	r4, r0
 8011900:	460d      	mov	r5, r1
 8011902:	d01b      	beq.n	801193c <__ieee754_rem_pio2+0x8c>
 8011904:	a3ac      	add	r3, pc, #688	; (adr r3, 8011bb8 <__ieee754_rem_pio2+0x308>)
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	f7ee fcc5 	bl	8000298 <__aeabi_dsub>
 801190e:	4602      	mov	r2, r0
 8011910:	460b      	mov	r3, r1
 8011912:	e9ca 2300 	strd	r2, r3, [sl]
 8011916:	4620      	mov	r0, r4
 8011918:	4629      	mov	r1, r5
 801191a:	f7ee fcbd 	bl	8000298 <__aeabi_dsub>
 801191e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011bb8 <__ieee754_rem_pio2+0x308>)
 8011920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011924:	f7ee fcb8 	bl	8000298 <__aeabi_dsub>
 8011928:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801192c:	f04f 0b01 	mov.w	fp, #1
 8011930:	4658      	mov	r0, fp
 8011932:	b00b      	add	sp, #44	; 0x2c
 8011934:	ecbd 8b02 	vpop	{d8}
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011bc0 <__ieee754_rem_pio2+0x310>)
 801193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011942:	f7ee fca9 	bl	8000298 <__aeabi_dsub>
 8011946:	a3a0      	add	r3, pc, #640	; (adr r3, 8011bc8 <__ieee754_rem_pio2+0x318>)
 8011948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194c:	4604      	mov	r4, r0
 801194e:	460d      	mov	r5, r1
 8011950:	f7ee fca2 	bl	8000298 <__aeabi_dsub>
 8011954:	4602      	mov	r2, r0
 8011956:	460b      	mov	r3, r1
 8011958:	e9ca 2300 	strd	r2, r3, [sl]
 801195c:	4620      	mov	r0, r4
 801195e:	4629      	mov	r1, r5
 8011960:	f7ee fc9a 	bl	8000298 <__aeabi_dsub>
 8011964:	a398      	add	r3, pc, #608	; (adr r3, 8011bc8 <__ieee754_rem_pio2+0x318>)
 8011966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196a:	e7db      	b.n	8011924 <__ieee754_rem_pio2+0x74>
 801196c:	f7ee fc96 	bl	800029c <__adddf3>
 8011970:	45b0      	cmp	r8, r6
 8011972:	4604      	mov	r4, r0
 8011974:	460d      	mov	r5, r1
 8011976:	d016      	beq.n	80119a6 <__ieee754_rem_pio2+0xf6>
 8011978:	a38f      	add	r3, pc, #572	; (adr r3, 8011bb8 <__ieee754_rem_pio2+0x308>)
 801197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197e:	f7ee fc8d 	bl	800029c <__adddf3>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	e9ca 2300 	strd	r2, r3, [sl]
 801198a:	4620      	mov	r0, r4
 801198c:	4629      	mov	r1, r5
 801198e:	f7ee fc83 	bl	8000298 <__aeabi_dsub>
 8011992:	a389      	add	r3, pc, #548	; (adr r3, 8011bb8 <__ieee754_rem_pio2+0x308>)
 8011994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011998:	f7ee fc80 	bl	800029c <__adddf3>
 801199c:	f04f 3bff 	mov.w	fp, #4294967295
 80119a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80119a4:	e7c4      	b.n	8011930 <__ieee754_rem_pio2+0x80>
 80119a6:	a386      	add	r3, pc, #536	; (adr r3, 8011bc0 <__ieee754_rem_pio2+0x310>)
 80119a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ac:	f7ee fc76 	bl	800029c <__adddf3>
 80119b0:	a385      	add	r3, pc, #532	; (adr r3, 8011bc8 <__ieee754_rem_pio2+0x318>)
 80119b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	f7ee fc6f 	bl	800029c <__adddf3>
 80119be:	4602      	mov	r2, r0
 80119c0:	460b      	mov	r3, r1
 80119c2:	e9ca 2300 	strd	r2, r3, [sl]
 80119c6:	4620      	mov	r0, r4
 80119c8:	4629      	mov	r1, r5
 80119ca:	f7ee fc65 	bl	8000298 <__aeabi_dsub>
 80119ce:	a37e      	add	r3, pc, #504	; (adr r3, 8011bc8 <__ieee754_rem_pio2+0x318>)
 80119d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d4:	e7e0      	b.n	8011998 <__ieee754_rem_pio2+0xe8>
 80119d6:	4b87      	ldr	r3, [pc, #540]	; (8011bf4 <__ieee754_rem_pio2+0x344>)
 80119d8:	4598      	cmp	r8, r3
 80119da:	f300 80d9 	bgt.w	8011b90 <__ieee754_rem_pio2+0x2e0>
 80119de:	f000 fe39 	bl	8012654 <fabs>
 80119e2:	ec55 4b10 	vmov	r4, r5, d0
 80119e6:	ee10 0a10 	vmov	r0, s0
 80119ea:	a379      	add	r3, pc, #484	; (adr r3, 8011bd0 <__ieee754_rem_pio2+0x320>)
 80119ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f0:	4629      	mov	r1, r5
 80119f2:	f7ee fe09 	bl	8000608 <__aeabi_dmul>
 80119f6:	4b80      	ldr	r3, [pc, #512]	; (8011bf8 <__ieee754_rem_pio2+0x348>)
 80119f8:	2200      	movs	r2, #0
 80119fa:	f7ee fc4f 	bl	800029c <__adddf3>
 80119fe:	f7ef f8b3 	bl	8000b68 <__aeabi_d2iz>
 8011a02:	4683      	mov	fp, r0
 8011a04:	f7ee fd96 	bl	8000534 <__aeabi_i2d>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	ec43 2b18 	vmov	d8, r2, r3
 8011a10:	a367      	add	r3, pc, #412	; (adr r3, 8011bb0 <__ieee754_rem_pio2+0x300>)
 8011a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a16:	f7ee fdf7 	bl	8000608 <__aeabi_dmul>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4620      	mov	r0, r4
 8011a20:	4629      	mov	r1, r5
 8011a22:	f7ee fc39 	bl	8000298 <__aeabi_dsub>
 8011a26:	a364      	add	r3, pc, #400	; (adr r3, 8011bb8 <__ieee754_rem_pio2+0x308>)
 8011a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	460f      	mov	r7, r1
 8011a30:	ec51 0b18 	vmov	r0, r1, d8
 8011a34:	f7ee fde8 	bl	8000608 <__aeabi_dmul>
 8011a38:	f1bb 0f1f 	cmp.w	fp, #31
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	460d      	mov	r5, r1
 8011a40:	dc0d      	bgt.n	8011a5e <__ieee754_rem_pio2+0x1ae>
 8011a42:	4b6e      	ldr	r3, [pc, #440]	; (8011bfc <__ieee754_rem_pio2+0x34c>)
 8011a44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a4c:	4543      	cmp	r3, r8
 8011a4e:	d006      	beq.n	8011a5e <__ieee754_rem_pio2+0x1ae>
 8011a50:	4622      	mov	r2, r4
 8011a52:	462b      	mov	r3, r5
 8011a54:	4630      	mov	r0, r6
 8011a56:	4639      	mov	r1, r7
 8011a58:	f7ee fc1e 	bl	8000298 <__aeabi_dsub>
 8011a5c:	e00f      	b.n	8011a7e <__ieee754_rem_pio2+0x1ce>
 8011a5e:	462b      	mov	r3, r5
 8011a60:	4622      	mov	r2, r4
 8011a62:	4630      	mov	r0, r6
 8011a64:	4639      	mov	r1, r7
 8011a66:	f7ee fc17 	bl	8000298 <__aeabi_dsub>
 8011a6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011a6e:	9303      	str	r3, [sp, #12]
 8011a70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011a74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011a78:	f1b8 0f10 	cmp.w	r8, #16
 8011a7c:	dc02      	bgt.n	8011a84 <__ieee754_rem_pio2+0x1d4>
 8011a7e:	e9ca 0100 	strd	r0, r1, [sl]
 8011a82:	e039      	b.n	8011af8 <__ieee754_rem_pio2+0x248>
 8011a84:	a34e      	add	r3, pc, #312	; (adr r3, 8011bc0 <__ieee754_rem_pio2+0x310>)
 8011a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8a:	ec51 0b18 	vmov	r0, r1, d8
 8011a8e:	f7ee fdbb 	bl	8000608 <__aeabi_dmul>
 8011a92:	4604      	mov	r4, r0
 8011a94:	460d      	mov	r5, r1
 8011a96:	4602      	mov	r2, r0
 8011a98:	460b      	mov	r3, r1
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	4639      	mov	r1, r7
 8011a9e:	f7ee fbfb 	bl	8000298 <__aeabi_dsub>
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	460b      	mov	r3, r1
 8011aa6:	4680      	mov	r8, r0
 8011aa8:	4689      	mov	r9, r1
 8011aaa:	4630      	mov	r0, r6
 8011aac:	4639      	mov	r1, r7
 8011aae:	f7ee fbf3 	bl	8000298 <__aeabi_dsub>
 8011ab2:	4622      	mov	r2, r4
 8011ab4:	462b      	mov	r3, r5
 8011ab6:	f7ee fbef 	bl	8000298 <__aeabi_dsub>
 8011aba:	a343      	add	r3, pc, #268	; (adr r3, 8011bc8 <__ieee754_rem_pio2+0x318>)
 8011abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	460d      	mov	r5, r1
 8011ac4:	ec51 0b18 	vmov	r0, r1, d8
 8011ac8:	f7ee fd9e 	bl	8000608 <__aeabi_dmul>
 8011acc:	4622      	mov	r2, r4
 8011ace:	462b      	mov	r3, r5
 8011ad0:	f7ee fbe2 	bl	8000298 <__aeabi_dsub>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	460b      	mov	r3, r1
 8011ad8:	4604      	mov	r4, r0
 8011ada:	460d      	mov	r5, r1
 8011adc:	4640      	mov	r0, r8
 8011ade:	4649      	mov	r1, r9
 8011ae0:	f7ee fbda 	bl	8000298 <__aeabi_dsub>
 8011ae4:	9a03      	ldr	r2, [sp, #12]
 8011ae6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	2b31      	cmp	r3, #49	; 0x31
 8011aee:	dc24      	bgt.n	8011b3a <__ieee754_rem_pio2+0x28a>
 8011af0:	e9ca 0100 	strd	r0, r1, [sl]
 8011af4:	4646      	mov	r6, r8
 8011af6:	464f      	mov	r7, r9
 8011af8:	e9da 8900 	ldrd	r8, r9, [sl]
 8011afc:	4630      	mov	r0, r6
 8011afe:	4642      	mov	r2, r8
 8011b00:	464b      	mov	r3, r9
 8011b02:	4639      	mov	r1, r7
 8011b04:	f7ee fbc8 	bl	8000298 <__aeabi_dsub>
 8011b08:	462b      	mov	r3, r5
 8011b0a:	4622      	mov	r2, r4
 8011b0c:	f7ee fbc4 	bl	8000298 <__aeabi_dsub>
 8011b10:	9b02      	ldr	r3, [sp, #8]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011b18:	f6bf af0a 	bge.w	8011930 <__ieee754_rem_pio2+0x80>
 8011b1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011b20:	f8ca 3004 	str.w	r3, [sl, #4]
 8011b24:	f8ca 8000 	str.w	r8, [sl]
 8011b28:	f8ca 0008 	str.w	r0, [sl, #8]
 8011b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b30:	f8ca 300c 	str.w	r3, [sl, #12]
 8011b34:	f1cb 0b00 	rsb	fp, fp, #0
 8011b38:	e6fa      	b.n	8011930 <__ieee754_rem_pio2+0x80>
 8011b3a:	a327      	add	r3, pc, #156	; (adr r3, 8011bd8 <__ieee754_rem_pio2+0x328>)
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	ec51 0b18 	vmov	r0, r1, d8
 8011b44:	f7ee fd60 	bl	8000608 <__aeabi_dmul>
 8011b48:	4604      	mov	r4, r0
 8011b4a:	460d      	mov	r5, r1
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4640      	mov	r0, r8
 8011b52:	4649      	mov	r1, r9
 8011b54:	f7ee fba0 	bl	8000298 <__aeabi_dsub>
 8011b58:	4602      	mov	r2, r0
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	4606      	mov	r6, r0
 8011b5e:	460f      	mov	r7, r1
 8011b60:	4640      	mov	r0, r8
 8011b62:	4649      	mov	r1, r9
 8011b64:	f7ee fb98 	bl	8000298 <__aeabi_dsub>
 8011b68:	4622      	mov	r2, r4
 8011b6a:	462b      	mov	r3, r5
 8011b6c:	f7ee fb94 	bl	8000298 <__aeabi_dsub>
 8011b70:	a31b      	add	r3, pc, #108	; (adr r3, 8011be0 <__ieee754_rem_pio2+0x330>)
 8011b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b76:	4604      	mov	r4, r0
 8011b78:	460d      	mov	r5, r1
 8011b7a:	ec51 0b18 	vmov	r0, r1, d8
 8011b7e:	f7ee fd43 	bl	8000608 <__aeabi_dmul>
 8011b82:	4622      	mov	r2, r4
 8011b84:	462b      	mov	r3, r5
 8011b86:	f7ee fb87 	bl	8000298 <__aeabi_dsub>
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	460d      	mov	r5, r1
 8011b8e:	e75f      	b.n	8011a50 <__ieee754_rem_pio2+0x1a0>
 8011b90:	4b1b      	ldr	r3, [pc, #108]	; (8011c00 <__ieee754_rem_pio2+0x350>)
 8011b92:	4598      	cmp	r8, r3
 8011b94:	dd36      	ble.n	8011c04 <__ieee754_rem_pio2+0x354>
 8011b96:	ee10 2a10 	vmov	r2, s0
 8011b9a:	462b      	mov	r3, r5
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	f7ee fb7a 	bl	8000298 <__aeabi_dsub>
 8011ba4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ba8:	e9ca 0100 	strd	r0, r1, [sl]
 8011bac:	e694      	b.n	80118d8 <__ieee754_rem_pio2+0x28>
 8011bae:	bf00      	nop
 8011bb0:	54400000 	.word	0x54400000
 8011bb4:	3ff921fb 	.word	0x3ff921fb
 8011bb8:	1a626331 	.word	0x1a626331
 8011bbc:	3dd0b461 	.word	0x3dd0b461
 8011bc0:	1a600000 	.word	0x1a600000
 8011bc4:	3dd0b461 	.word	0x3dd0b461
 8011bc8:	2e037073 	.word	0x2e037073
 8011bcc:	3ba3198a 	.word	0x3ba3198a
 8011bd0:	6dc9c883 	.word	0x6dc9c883
 8011bd4:	3fe45f30 	.word	0x3fe45f30
 8011bd8:	2e000000 	.word	0x2e000000
 8011bdc:	3ba3198a 	.word	0x3ba3198a
 8011be0:	252049c1 	.word	0x252049c1
 8011be4:	397b839a 	.word	0x397b839a
 8011be8:	3fe921fb 	.word	0x3fe921fb
 8011bec:	4002d97b 	.word	0x4002d97b
 8011bf0:	3ff921fb 	.word	0x3ff921fb
 8011bf4:	413921fb 	.word	0x413921fb
 8011bf8:	3fe00000 	.word	0x3fe00000
 8011bfc:	08013218 	.word	0x08013218
 8011c00:	7fefffff 	.word	0x7fefffff
 8011c04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011c08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011c0c:	ee10 0a10 	vmov	r0, s0
 8011c10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011c14:	ee10 6a10 	vmov	r6, s0
 8011c18:	460f      	mov	r7, r1
 8011c1a:	f7ee ffa5 	bl	8000b68 <__aeabi_d2iz>
 8011c1e:	f7ee fc89 	bl	8000534 <__aeabi_i2d>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	4630      	mov	r0, r6
 8011c28:	4639      	mov	r1, r7
 8011c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011c2e:	f7ee fb33 	bl	8000298 <__aeabi_dsub>
 8011c32:	4b22      	ldr	r3, [pc, #136]	; (8011cbc <__ieee754_rem_pio2+0x40c>)
 8011c34:	2200      	movs	r2, #0
 8011c36:	f7ee fce7 	bl	8000608 <__aeabi_dmul>
 8011c3a:	460f      	mov	r7, r1
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	f7ee ff93 	bl	8000b68 <__aeabi_d2iz>
 8011c42:	f7ee fc77 	bl	8000534 <__aeabi_i2d>
 8011c46:	4602      	mov	r2, r0
 8011c48:	460b      	mov	r3, r1
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	4639      	mov	r1, r7
 8011c4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c52:	f7ee fb21 	bl	8000298 <__aeabi_dsub>
 8011c56:	4b19      	ldr	r3, [pc, #100]	; (8011cbc <__ieee754_rem_pio2+0x40c>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f7ee fcd5 	bl	8000608 <__aeabi_dmul>
 8011c5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011c62:	ad04      	add	r5, sp, #16
 8011c64:	f04f 0803 	mov.w	r8, #3
 8011c68:	46a9      	mov	r9, r5
 8011c6a:	2600      	movs	r6, #0
 8011c6c:	2700      	movs	r7, #0
 8011c6e:	4632      	mov	r2, r6
 8011c70:	463b      	mov	r3, r7
 8011c72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011c76:	46c3      	mov	fp, r8
 8011c78:	3d08      	subs	r5, #8
 8011c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011c7e:	f7ee ff2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	d1f3      	bne.n	8011c6e <__ieee754_rem_pio2+0x3be>
 8011c86:	4b0e      	ldr	r3, [pc, #56]	; (8011cc0 <__ieee754_rem_pio2+0x410>)
 8011c88:	9301      	str	r3, [sp, #4]
 8011c8a:	2302      	movs	r3, #2
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	4622      	mov	r2, r4
 8011c90:	465b      	mov	r3, fp
 8011c92:	4651      	mov	r1, sl
 8011c94:	4648      	mov	r0, r9
 8011c96:	f000 f8df 	bl	8011e58 <__kernel_rem_pio2>
 8011c9a:	9b02      	ldr	r3, [sp, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	4683      	mov	fp, r0
 8011ca0:	f6bf ae46 	bge.w	8011930 <__ieee754_rem_pio2+0x80>
 8011ca4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011ca8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011cac:	f8ca 3004 	str.w	r3, [sl, #4]
 8011cb0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8011cb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011cb8:	e73a      	b.n	8011b30 <__ieee754_rem_pio2+0x280>
 8011cba:	bf00      	nop
 8011cbc:	41700000 	.word	0x41700000
 8011cc0:	08013298 	.word	0x08013298
 8011cc4:	00000000 	.word	0x00000000

08011cc8 <__kernel_cos>:
 8011cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ccc:	ec57 6b10 	vmov	r6, r7, d0
 8011cd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011cd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011cd8:	ed8d 1b00 	vstr	d1, [sp]
 8011cdc:	da07      	bge.n	8011cee <__kernel_cos+0x26>
 8011cde:	ee10 0a10 	vmov	r0, s0
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee ff40 	bl	8000b68 <__aeabi_d2iz>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	f000 8088 	beq.w	8011dfe <__kernel_cos+0x136>
 8011cee:	4632      	mov	r2, r6
 8011cf0:	463b      	mov	r3, r7
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	4639      	mov	r1, r7
 8011cf6:	f7ee fc87 	bl	8000608 <__aeabi_dmul>
 8011cfa:	4b51      	ldr	r3, [pc, #324]	; (8011e40 <__kernel_cos+0x178>)
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	4604      	mov	r4, r0
 8011d00:	460d      	mov	r5, r1
 8011d02:	f7ee fc81 	bl	8000608 <__aeabi_dmul>
 8011d06:	a340      	add	r3, pc, #256	; (adr r3, 8011e08 <__kernel_cos+0x140>)
 8011d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0c:	4682      	mov	sl, r0
 8011d0e:	468b      	mov	fp, r1
 8011d10:	4620      	mov	r0, r4
 8011d12:	4629      	mov	r1, r5
 8011d14:	f7ee fc78 	bl	8000608 <__aeabi_dmul>
 8011d18:	a33d      	add	r3, pc, #244	; (adr r3, 8011e10 <__kernel_cos+0x148>)
 8011d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1e:	f7ee fabd 	bl	800029c <__adddf3>
 8011d22:	4622      	mov	r2, r4
 8011d24:	462b      	mov	r3, r5
 8011d26:	f7ee fc6f 	bl	8000608 <__aeabi_dmul>
 8011d2a:	a33b      	add	r3, pc, #236	; (adr r3, 8011e18 <__kernel_cos+0x150>)
 8011d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d30:	f7ee fab2 	bl	8000298 <__aeabi_dsub>
 8011d34:	4622      	mov	r2, r4
 8011d36:	462b      	mov	r3, r5
 8011d38:	f7ee fc66 	bl	8000608 <__aeabi_dmul>
 8011d3c:	a338      	add	r3, pc, #224	; (adr r3, 8011e20 <__kernel_cos+0x158>)
 8011d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d42:	f7ee faab 	bl	800029c <__adddf3>
 8011d46:	4622      	mov	r2, r4
 8011d48:	462b      	mov	r3, r5
 8011d4a:	f7ee fc5d 	bl	8000608 <__aeabi_dmul>
 8011d4e:	a336      	add	r3, pc, #216	; (adr r3, 8011e28 <__kernel_cos+0x160>)
 8011d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d54:	f7ee faa0 	bl	8000298 <__aeabi_dsub>
 8011d58:	4622      	mov	r2, r4
 8011d5a:	462b      	mov	r3, r5
 8011d5c:	f7ee fc54 	bl	8000608 <__aeabi_dmul>
 8011d60:	a333      	add	r3, pc, #204	; (adr r3, 8011e30 <__kernel_cos+0x168>)
 8011d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d66:	f7ee fa99 	bl	800029c <__adddf3>
 8011d6a:	4622      	mov	r2, r4
 8011d6c:	462b      	mov	r3, r5
 8011d6e:	f7ee fc4b 	bl	8000608 <__aeabi_dmul>
 8011d72:	4622      	mov	r2, r4
 8011d74:	462b      	mov	r3, r5
 8011d76:	f7ee fc47 	bl	8000608 <__aeabi_dmul>
 8011d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d7e:	4604      	mov	r4, r0
 8011d80:	460d      	mov	r5, r1
 8011d82:	4630      	mov	r0, r6
 8011d84:	4639      	mov	r1, r7
 8011d86:	f7ee fc3f 	bl	8000608 <__aeabi_dmul>
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	4629      	mov	r1, r5
 8011d90:	4620      	mov	r0, r4
 8011d92:	f7ee fa81 	bl	8000298 <__aeabi_dsub>
 8011d96:	4b2b      	ldr	r3, [pc, #172]	; (8011e44 <__kernel_cos+0x17c>)
 8011d98:	4598      	cmp	r8, r3
 8011d9a:	4606      	mov	r6, r0
 8011d9c:	460f      	mov	r7, r1
 8011d9e:	dc10      	bgt.n	8011dc2 <__kernel_cos+0xfa>
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4650      	mov	r0, sl
 8011da6:	4659      	mov	r1, fp
 8011da8:	f7ee fa76 	bl	8000298 <__aeabi_dsub>
 8011dac:	460b      	mov	r3, r1
 8011dae:	4926      	ldr	r1, [pc, #152]	; (8011e48 <__kernel_cos+0x180>)
 8011db0:	4602      	mov	r2, r0
 8011db2:	2000      	movs	r0, #0
 8011db4:	f7ee fa70 	bl	8000298 <__aeabi_dsub>
 8011db8:	ec41 0b10 	vmov	d0, r0, r1
 8011dbc:	b003      	add	sp, #12
 8011dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc2:	4b22      	ldr	r3, [pc, #136]	; (8011e4c <__kernel_cos+0x184>)
 8011dc4:	4920      	ldr	r1, [pc, #128]	; (8011e48 <__kernel_cos+0x180>)
 8011dc6:	4598      	cmp	r8, r3
 8011dc8:	bfcc      	ite	gt
 8011dca:	4d21      	ldrgt	r5, [pc, #132]	; (8011e50 <__kernel_cos+0x188>)
 8011dcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011dd0:	2400      	movs	r4, #0
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	462b      	mov	r3, r5
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	f7ee fa5e 	bl	8000298 <__aeabi_dsub>
 8011ddc:	4622      	mov	r2, r4
 8011dde:	4680      	mov	r8, r0
 8011de0:	4689      	mov	r9, r1
 8011de2:	462b      	mov	r3, r5
 8011de4:	4650      	mov	r0, sl
 8011de6:	4659      	mov	r1, fp
 8011de8:	f7ee fa56 	bl	8000298 <__aeabi_dsub>
 8011dec:	4632      	mov	r2, r6
 8011dee:	463b      	mov	r3, r7
 8011df0:	f7ee fa52 	bl	8000298 <__aeabi_dsub>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	4640      	mov	r0, r8
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	e7da      	b.n	8011db4 <__kernel_cos+0xec>
 8011dfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011e38 <__kernel_cos+0x170>
 8011e02:	e7db      	b.n	8011dbc <__kernel_cos+0xf4>
 8011e04:	f3af 8000 	nop.w
 8011e08:	be8838d4 	.word	0xbe8838d4
 8011e0c:	bda8fae9 	.word	0xbda8fae9
 8011e10:	bdb4b1c4 	.word	0xbdb4b1c4
 8011e14:	3e21ee9e 	.word	0x3e21ee9e
 8011e18:	809c52ad 	.word	0x809c52ad
 8011e1c:	3e927e4f 	.word	0x3e927e4f
 8011e20:	19cb1590 	.word	0x19cb1590
 8011e24:	3efa01a0 	.word	0x3efa01a0
 8011e28:	16c15177 	.word	0x16c15177
 8011e2c:	3f56c16c 	.word	0x3f56c16c
 8011e30:	5555554c 	.word	0x5555554c
 8011e34:	3fa55555 	.word	0x3fa55555
 8011e38:	00000000 	.word	0x00000000
 8011e3c:	3ff00000 	.word	0x3ff00000
 8011e40:	3fe00000 	.word	0x3fe00000
 8011e44:	3fd33332 	.word	0x3fd33332
 8011e48:	3ff00000 	.word	0x3ff00000
 8011e4c:	3fe90000 	.word	0x3fe90000
 8011e50:	3fd20000 	.word	0x3fd20000
 8011e54:	00000000 	.word	0x00000000

08011e58 <__kernel_rem_pio2>:
 8011e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e5c:	ed2d 8b02 	vpush	{d8}
 8011e60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011e64:	f112 0f14 	cmn.w	r2, #20
 8011e68:	9308      	str	r3, [sp, #32]
 8011e6a:	9101      	str	r1, [sp, #4]
 8011e6c:	4bc6      	ldr	r3, [pc, #792]	; (8012188 <__kernel_rem_pio2+0x330>)
 8011e6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011e70:	9009      	str	r0, [sp, #36]	; 0x24
 8011e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e76:	9304      	str	r3, [sp, #16]
 8011e78:	9b08      	ldr	r3, [sp, #32]
 8011e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e7e:	bfa8      	it	ge
 8011e80:	1ed4      	subge	r4, r2, #3
 8011e82:	9306      	str	r3, [sp, #24]
 8011e84:	bfb2      	itee	lt
 8011e86:	2400      	movlt	r4, #0
 8011e88:	2318      	movge	r3, #24
 8011e8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8011e8e:	f06f 0317 	mvn.w	r3, #23
 8011e92:	fb04 3303 	mla	r3, r4, r3, r3
 8011e96:	eb03 0a02 	add.w	sl, r3, r2
 8011e9a:	9b04      	ldr	r3, [sp, #16]
 8011e9c:	9a06      	ldr	r2, [sp, #24]
 8011e9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012178 <__kernel_rem_pio2+0x320>
 8011ea2:	eb03 0802 	add.w	r8, r3, r2
 8011ea6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011ea8:	1aa7      	subs	r7, r4, r2
 8011eaa:	ae20      	add	r6, sp, #128	; 0x80
 8011eac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011eb0:	2500      	movs	r5, #0
 8011eb2:	4545      	cmp	r5, r8
 8011eb4:	dd18      	ble.n	8011ee8 <__kernel_rem_pio2+0x90>
 8011eb6:	9b08      	ldr	r3, [sp, #32]
 8011eb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011ebc:	aa20      	add	r2, sp, #128	; 0x80
 8011ebe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012178 <__kernel_rem_pio2+0x320>
 8011ec2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011ec6:	f1c3 0301 	rsb	r3, r3, #1
 8011eca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011ece:	9307      	str	r3, [sp, #28]
 8011ed0:	9b07      	ldr	r3, [sp, #28]
 8011ed2:	9a04      	ldr	r2, [sp, #16]
 8011ed4:	4443      	add	r3, r8
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	db2f      	blt.n	8011f3a <__kernel_rem_pio2+0xe2>
 8011eda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ede:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011ee2:	462f      	mov	r7, r5
 8011ee4:	2600      	movs	r6, #0
 8011ee6:	e01b      	b.n	8011f20 <__kernel_rem_pio2+0xc8>
 8011ee8:	42ef      	cmn	r7, r5
 8011eea:	d407      	bmi.n	8011efc <__kernel_rem_pio2+0xa4>
 8011eec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011ef0:	f7ee fb20 	bl	8000534 <__aeabi_i2d>
 8011ef4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ef8:	3501      	adds	r5, #1
 8011efa:	e7da      	b.n	8011eb2 <__kernel_rem_pio2+0x5a>
 8011efc:	ec51 0b18 	vmov	r0, r1, d8
 8011f00:	e7f8      	b.n	8011ef4 <__kernel_rem_pio2+0x9c>
 8011f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f06:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011f0a:	f7ee fb7d 	bl	8000608 <__aeabi_dmul>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	460b      	mov	r3, r1
 8011f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f16:	f7ee f9c1 	bl	800029c <__adddf3>
 8011f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f1e:	3601      	adds	r6, #1
 8011f20:	9b06      	ldr	r3, [sp, #24]
 8011f22:	429e      	cmp	r6, r3
 8011f24:	f1a7 0708 	sub.w	r7, r7, #8
 8011f28:	ddeb      	ble.n	8011f02 <__kernel_rem_pio2+0xaa>
 8011f2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f2e:	3508      	adds	r5, #8
 8011f30:	ecab 7b02 	vstmia	fp!, {d7}
 8011f34:	f108 0801 	add.w	r8, r8, #1
 8011f38:	e7ca      	b.n	8011ed0 <__kernel_rem_pio2+0x78>
 8011f3a:	9b04      	ldr	r3, [sp, #16]
 8011f3c:	aa0c      	add	r2, sp, #48	; 0x30
 8011f3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f44:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011f46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011f4a:	9c04      	ldr	r4, [sp, #16]
 8011f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8011f4e:	ab98      	add	r3, sp, #608	; 0x260
 8011f50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f54:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011f58:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8011f5c:	f8cd b008 	str.w	fp, [sp, #8]
 8011f60:	4625      	mov	r5, r4
 8011f62:	2d00      	cmp	r5, #0
 8011f64:	dc78      	bgt.n	8012058 <__kernel_rem_pio2+0x200>
 8011f66:	ec47 6b10 	vmov	d0, r6, r7
 8011f6a:	4650      	mov	r0, sl
 8011f6c:	f000 fc08 	bl	8012780 <scalbn>
 8011f70:	ec57 6b10 	vmov	r6, r7, d0
 8011f74:	2200      	movs	r2, #0
 8011f76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011f7a:	ee10 0a10 	vmov	r0, s0
 8011f7e:	4639      	mov	r1, r7
 8011f80:	f7ee fb42 	bl	8000608 <__aeabi_dmul>
 8011f84:	ec41 0b10 	vmov	d0, r0, r1
 8011f88:	f000 fb7a 	bl	8012680 <floor>
 8011f8c:	4b7f      	ldr	r3, [pc, #508]	; (801218c <__kernel_rem_pio2+0x334>)
 8011f8e:	ec51 0b10 	vmov	r0, r1, d0
 8011f92:	2200      	movs	r2, #0
 8011f94:	f7ee fb38 	bl	8000608 <__aeabi_dmul>
 8011f98:	4602      	mov	r2, r0
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	4639      	mov	r1, r7
 8011fa0:	f7ee f97a 	bl	8000298 <__aeabi_dsub>
 8011fa4:	460f      	mov	r7, r1
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	f7ee fdde 	bl	8000b68 <__aeabi_d2iz>
 8011fac:	9007      	str	r0, [sp, #28]
 8011fae:	f7ee fac1 	bl	8000534 <__aeabi_i2d>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	4639      	mov	r1, r7
 8011fba:	f7ee f96d 	bl	8000298 <__aeabi_dsub>
 8011fbe:	f1ba 0f00 	cmp.w	sl, #0
 8011fc2:	4606      	mov	r6, r0
 8011fc4:	460f      	mov	r7, r1
 8011fc6:	dd70      	ble.n	80120aa <__kernel_rem_pio2+0x252>
 8011fc8:	1e62      	subs	r2, r4, #1
 8011fca:	ab0c      	add	r3, sp, #48	; 0x30
 8011fcc:	9d07      	ldr	r5, [sp, #28]
 8011fce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011fd2:	f1ca 0118 	rsb	r1, sl, #24
 8011fd6:	fa40 f301 	asr.w	r3, r0, r1
 8011fda:	441d      	add	r5, r3
 8011fdc:	408b      	lsls	r3, r1
 8011fde:	1ac0      	subs	r0, r0, r3
 8011fe0:	ab0c      	add	r3, sp, #48	; 0x30
 8011fe2:	9507      	str	r5, [sp, #28]
 8011fe4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011fe8:	f1ca 0317 	rsb	r3, sl, #23
 8011fec:	fa40 f303 	asr.w	r3, r0, r3
 8011ff0:	9302      	str	r3, [sp, #8]
 8011ff2:	9b02      	ldr	r3, [sp, #8]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	dd66      	ble.n	80120c6 <__kernel_rem_pio2+0x26e>
 8011ff8:	9b07      	ldr	r3, [sp, #28]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	9307      	str	r3, [sp, #28]
 8012000:	4615      	mov	r5, r2
 8012002:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012006:	4294      	cmp	r4, r2
 8012008:	f300 8099 	bgt.w	801213e <__kernel_rem_pio2+0x2e6>
 801200c:	f1ba 0f00 	cmp.w	sl, #0
 8012010:	dd07      	ble.n	8012022 <__kernel_rem_pio2+0x1ca>
 8012012:	f1ba 0f01 	cmp.w	sl, #1
 8012016:	f000 80a5 	beq.w	8012164 <__kernel_rem_pio2+0x30c>
 801201a:	f1ba 0f02 	cmp.w	sl, #2
 801201e:	f000 80c1 	beq.w	80121a4 <__kernel_rem_pio2+0x34c>
 8012022:	9b02      	ldr	r3, [sp, #8]
 8012024:	2b02      	cmp	r3, #2
 8012026:	d14e      	bne.n	80120c6 <__kernel_rem_pio2+0x26e>
 8012028:	4632      	mov	r2, r6
 801202a:	463b      	mov	r3, r7
 801202c:	4958      	ldr	r1, [pc, #352]	; (8012190 <__kernel_rem_pio2+0x338>)
 801202e:	2000      	movs	r0, #0
 8012030:	f7ee f932 	bl	8000298 <__aeabi_dsub>
 8012034:	4606      	mov	r6, r0
 8012036:	460f      	mov	r7, r1
 8012038:	2d00      	cmp	r5, #0
 801203a:	d044      	beq.n	80120c6 <__kernel_rem_pio2+0x26e>
 801203c:	4650      	mov	r0, sl
 801203e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012180 <__kernel_rem_pio2+0x328>
 8012042:	f000 fb9d 	bl	8012780 <scalbn>
 8012046:	4630      	mov	r0, r6
 8012048:	4639      	mov	r1, r7
 801204a:	ec53 2b10 	vmov	r2, r3, d0
 801204e:	f7ee f923 	bl	8000298 <__aeabi_dsub>
 8012052:	4606      	mov	r6, r0
 8012054:	460f      	mov	r7, r1
 8012056:	e036      	b.n	80120c6 <__kernel_rem_pio2+0x26e>
 8012058:	4b4e      	ldr	r3, [pc, #312]	; (8012194 <__kernel_rem_pio2+0x33c>)
 801205a:	2200      	movs	r2, #0
 801205c:	4630      	mov	r0, r6
 801205e:	4639      	mov	r1, r7
 8012060:	f7ee fad2 	bl	8000608 <__aeabi_dmul>
 8012064:	f7ee fd80 	bl	8000b68 <__aeabi_d2iz>
 8012068:	f7ee fa64 	bl	8000534 <__aeabi_i2d>
 801206c:	4b4a      	ldr	r3, [pc, #296]	; (8012198 <__kernel_rem_pio2+0x340>)
 801206e:	2200      	movs	r2, #0
 8012070:	4680      	mov	r8, r0
 8012072:	4689      	mov	r9, r1
 8012074:	f7ee fac8 	bl	8000608 <__aeabi_dmul>
 8012078:	4602      	mov	r2, r0
 801207a:	460b      	mov	r3, r1
 801207c:	4630      	mov	r0, r6
 801207e:	4639      	mov	r1, r7
 8012080:	f7ee f90a 	bl	8000298 <__aeabi_dsub>
 8012084:	f7ee fd70 	bl	8000b68 <__aeabi_d2iz>
 8012088:	9b02      	ldr	r3, [sp, #8]
 801208a:	f843 0b04 	str.w	r0, [r3], #4
 801208e:	3d01      	subs	r5, #1
 8012090:	9302      	str	r3, [sp, #8]
 8012092:	ab70      	add	r3, sp, #448	; 0x1c0
 8012094:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209c:	4640      	mov	r0, r8
 801209e:	4649      	mov	r1, r9
 80120a0:	f7ee f8fc 	bl	800029c <__adddf3>
 80120a4:	4606      	mov	r6, r0
 80120a6:	460f      	mov	r7, r1
 80120a8:	e75b      	b.n	8011f62 <__kernel_rem_pio2+0x10a>
 80120aa:	d105      	bne.n	80120b8 <__kernel_rem_pio2+0x260>
 80120ac:	1e63      	subs	r3, r4, #1
 80120ae:	aa0c      	add	r2, sp, #48	; 0x30
 80120b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80120b4:	15c3      	asrs	r3, r0, #23
 80120b6:	e79b      	b.n	8011ff0 <__kernel_rem_pio2+0x198>
 80120b8:	4b38      	ldr	r3, [pc, #224]	; (801219c <__kernel_rem_pio2+0x344>)
 80120ba:	2200      	movs	r2, #0
 80120bc:	f7ee fd2a 	bl	8000b14 <__aeabi_dcmpge>
 80120c0:	2800      	cmp	r0, #0
 80120c2:	d139      	bne.n	8012138 <__kernel_rem_pio2+0x2e0>
 80120c4:	9002      	str	r0, [sp, #8]
 80120c6:	2200      	movs	r2, #0
 80120c8:	2300      	movs	r3, #0
 80120ca:	4630      	mov	r0, r6
 80120cc:	4639      	mov	r1, r7
 80120ce:	f7ee fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	f000 80b4 	beq.w	8012240 <__kernel_rem_pio2+0x3e8>
 80120d8:	f104 3bff 	add.w	fp, r4, #4294967295
 80120dc:	465b      	mov	r3, fp
 80120de:	2200      	movs	r2, #0
 80120e0:	9904      	ldr	r1, [sp, #16]
 80120e2:	428b      	cmp	r3, r1
 80120e4:	da65      	bge.n	80121b2 <__kernel_rem_pio2+0x35a>
 80120e6:	2a00      	cmp	r2, #0
 80120e8:	d07b      	beq.n	80121e2 <__kernel_rem_pio2+0x38a>
 80120ea:	ab0c      	add	r3, sp, #48	; 0x30
 80120ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80120f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	f000 80a0 	beq.w	801223a <__kernel_rem_pio2+0x3e2>
 80120fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012180 <__kernel_rem_pio2+0x328>
 80120fe:	4650      	mov	r0, sl
 8012100:	f000 fb3e 	bl	8012780 <scalbn>
 8012104:	4f23      	ldr	r7, [pc, #140]	; (8012194 <__kernel_rem_pio2+0x33c>)
 8012106:	ec55 4b10 	vmov	r4, r5, d0
 801210a:	46d8      	mov	r8, fp
 801210c:	2600      	movs	r6, #0
 801210e:	f1b8 0f00 	cmp.w	r8, #0
 8012112:	f280 80cf 	bge.w	80122b4 <__kernel_rem_pio2+0x45c>
 8012116:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8012178 <__kernel_rem_pio2+0x320>
 801211a:	465f      	mov	r7, fp
 801211c:	f04f 0800 	mov.w	r8, #0
 8012120:	2f00      	cmp	r7, #0
 8012122:	f2c0 80fd 	blt.w	8012320 <__kernel_rem_pio2+0x4c8>
 8012126:	ab70      	add	r3, sp, #448	; 0x1c0
 8012128:	f8df a074 	ldr.w	sl, [pc, #116]	; 80121a0 <__kernel_rem_pio2+0x348>
 801212c:	ec55 4b18 	vmov	r4, r5, d8
 8012130:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8012134:	2600      	movs	r6, #0
 8012136:	e0e5      	b.n	8012304 <__kernel_rem_pio2+0x4ac>
 8012138:	2302      	movs	r3, #2
 801213a:	9302      	str	r3, [sp, #8]
 801213c:	e75c      	b.n	8011ff8 <__kernel_rem_pio2+0x1a0>
 801213e:	f8db 3000 	ldr.w	r3, [fp]
 8012142:	b955      	cbnz	r5, 801215a <__kernel_rem_pio2+0x302>
 8012144:	b123      	cbz	r3, 8012150 <__kernel_rem_pio2+0x2f8>
 8012146:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801214a:	f8cb 3000 	str.w	r3, [fp]
 801214e:	2301      	movs	r3, #1
 8012150:	3201      	adds	r2, #1
 8012152:	f10b 0b04 	add.w	fp, fp, #4
 8012156:	461d      	mov	r5, r3
 8012158:	e755      	b.n	8012006 <__kernel_rem_pio2+0x1ae>
 801215a:	1acb      	subs	r3, r1, r3
 801215c:	f8cb 3000 	str.w	r3, [fp]
 8012160:	462b      	mov	r3, r5
 8012162:	e7f5      	b.n	8012150 <__kernel_rem_pio2+0x2f8>
 8012164:	1e62      	subs	r2, r4, #1
 8012166:	ab0c      	add	r3, sp, #48	; 0x30
 8012168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801216c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012170:	a90c      	add	r1, sp, #48	; 0x30
 8012172:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012176:	e754      	b.n	8012022 <__kernel_rem_pio2+0x1ca>
	...
 8012184:	3ff00000 	.word	0x3ff00000
 8012188:	080133e0 	.word	0x080133e0
 801218c:	40200000 	.word	0x40200000
 8012190:	3ff00000 	.word	0x3ff00000
 8012194:	3e700000 	.word	0x3e700000
 8012198:	41700000 	.word	0x41700000
 801219c:	3fe00000 	.word	0x3fe00000
 80121a0:	080133a0 	.word	0x080133a0
 80121a4:	1e62      	subs	r2, r4, #1
 80121a6:	ab0c      	add	r3, sp, #48	; 0x30
 80121a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80121b0:	e7de      	b.n	8012170 <__kernel_rem_pio2+0x318>
 80121b2:	a90c      	add	r1, sp, #48	; 0x30
 80121b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80121b8:	3b01      	subs	r3, #1
 80121ba:	430a      	orrs	r2, r1
 80121bc:	e790      	b.n	80120e0 <__kernel_rem_pio2+0x288>
 80121be:	3301      	adds	r3, #1
 80121c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80121c4:	2900      	cmp	r1, #0
 80121c6:	d0fa      	beq.n	80121be <__kernel_rem_pio2+0x366>
 80121c8:	9a08      	ldr	r2, [sp, #32]
 80121ca:	18e3      	adds	r3, r4, r3
 80121cc:	18a6      	adds	r6, r4, r2
 80121ce:	aa20      	add	r2, sp, #128	; 0x80
 80121d0:	1c65      	adds	r5, r4, #1
 80121d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80121d6:	9302      	str	r3, [sp, #8]
 80121d8:	9b02      	ldr	r3, [sp, #8]
 80121da:	42ab      	cmp	r3, r5
 80121dc:	da04      	bge.n	80121e8 <__kernel_rem_pio2+0x390>
 80121de:	461c      	mov	r4, r3
 80121e0:	e6b5      	b.n	8011f4e <__kernel_rem_pio2+0xf6>
 80121e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121e4:	2301      	movs	r3, #1
 80121e6:	e7eb      	b.n	80121c0 <__kernel_rem_pio2+0x368>
 80121e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121ee:	f7ee f9a1 	bl	8000534 <__aeabi_i2d>
 80121f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f8:	46b3      	mov	fp, r6
 80121fa:	461c      	mov	r4, r3
 80121fc:	2700      	movs	r7, #0
 80121fe:	f04f 0800 	mov.w	r8, #0
 8012202:	f04f 0900 	mov.w	r9, #0
 8012206:	9b06      	ldr	r3, [sp, #24]
 8012208:	429f      	cmp	r7, r3
 801220a:	dd06      	ble.n	801221a <__kernel_rem_pio2+0x3c2>
 801220c:	ab70      	add	r3, sp, #448	; 0x1c0
 801220e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012212:	e9c3 8900 	strd	r8, r9, [r3]
 8012216:	3501      	adds	r5, #1
 8012218:	e7de      	b.n	80121d8 <__kernel_rem_pio2+0x380>
 801221a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801221e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012222:	f7ee f9f1 	bl	8000608 <__aeabi_dmul>
 8012226:	4602      	mov	r2, r0
 8012228:	460b      	mov	r3, r1
 801222a:	4640      	mov	r0, r8
 801222c:	4649      	mov	r1, r9
 801222e:	f7ee f835 	bl	800029c <__adddf3>
 8012232:	3701      	adds	r7, #1
 8012234:	4680      	mov	r8, r0
 8012236:	4689      	mov	r9, r1
 8012238:	e7e5      	b.n	8012206 <__kernel_rem_pio2+0x3ae>
 801223a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801223e:	e754      	b.n	80120ea <__kernel_rem_pio2+0x292>
 8012240:	ec47 6b10 	vmov	d0, r6, r7
 8012244:	f1ca 0000 	rsb	r0, sl, #0
 8012248:	f000 fa9a 	bl	8012780 <scalbn>
 801224c:	ec57 6b10 	vmov	r6, r7, d0
 8012250:	4b9f      	ldr	r3, [pc, #636]	; (80124d0 <__kernel_rem_pio2+0x678>)
 8012252:	ee10 0a10 	vmov	r0, s0
 8012256:	2200      	movs	r2, #0
 8012258:	4639      	mov	r1, r7
 801225a:	f7ee fc5b 	bl	8000b14 <__aeabi_dcmpge>
 801225e:	b300      	cbz	r0, 80122a2 <__kernel_rem_pio2+0x44a>
 8012260:	4b9c      	ldr	r3, [pc, #624]	; (80124d4 <__kernel_rem_pio2+0x67c>)
 8012262:	2200      	movs	r2, #0
 8012264:	4630      	mov	r0, r6
 8012266:	4639      	mov	r1, r7
 8012268:	f7ee f9ce 	bl	8000608 <__aeabi_dmul>
 801226c:	f7ee fc7c 	bl	8000b68 <__aeabi_d2iz>
 8012270:	4605      	mov	r5, r0
 8012272:	f7ee f95f 	bl	8000534 <__aeabi_i2d>
 8012276:	4b96      	ldr	r3, [pc, #600]	; (80124d0 <__kernel_rem_pio2+0x678>)
 8012278:	2200      	movs	r2, #0
 801227a:	f7ee f9c5 	bl	8000608 <__aeabi_dmul>
 801227e:	460b      	mov	r3, r1
 8012280:	4602      	mov	r2, r0
 8012282:	4639      	mov	r1, r7
 8012284:	4630      	mov	r0, r6
 8012286:	f7ee f807 	bl	8000298 <__aeabi_dsub>
 801228a:	f7ee fc6d 	bl	8000b68 <__aeabi_d2iz>
 801228e:	f104 0b01 	add.w	fp, r4, #1
 8012292:	ab0c      	add	r3, sp, #48	; 0x30
 8012294:	f10a 0a18 	add.w	sl, sl, #24
 8012298:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801229c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80122a0:	e72b      	b.n	80120fa <__kernel_rem_pio2+0x2a2>
 80122a2:	4630      	mov	r0, r6
 80122a4:	4639      	mov	r1, r7
 80122a6:	f7ee fc5f 	bl	8000b68 <__aeabi_d2iz>
 80122aa:	ab0c      	add	r3, sp, #48	; 0x30
 80122ac:	46a3      	mov	fp, r4
 80122ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80122b2:	e722      	b.n	80120fa <__kernel_rem_pio2+0x2a2>
 80122b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80122b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80122ba:	ab0c      	add	r3, sp, #48	; 0x30
 80122bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80122c0:	f7ee f938 	bl	8000534 <__aeabi_i2d>
 80122c4:	4622      	mov	r2, r4
 80122c6:	462b      	mov	r3, r5
 80122c8:	f7ee f99e 	bl	8000608 <__aeabi_dmul>
 80122cc:	4632      	mov	r2, r6
 80122ce:	e9c9 0100 	strd	r0, r1, [r9]
 80122d2:	463b      	mov	r3, r7
 80122d4:	4620      	mov	r0, r4
 80122d6:	4629      	mov	r1, r5
 80122d8:	f7ee f996 	bl	8000608 <__aeabi_dmul>
 80122dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80122e0:	4604      	mov	r4, r0
 80122e2:	460d      	mov	r5, r1
 80122e4:	e713      	b.n	801210e <__kernel_rem_pio2+0x2b6>
 80122e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80122ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80122ee:	f7ee f98b 	bl	8000608 <__aeabi_dmul>
 80122f2:	4602      	mov	r2, r0
 80122f4:	460b      	mov	r3, r1
 80122f6:	4620      	mov	r0, r4
 80122f8:	4629      	mov	r1, r5
 80122fa:	f7ed ffcf 	bl	800029c <__adddf3>
 80122fe:	3601      	adds	r6, #1
 8012300:	4604      	mov	r4, r0
 8012302:	460d      	mov	r5, r1
 8012304:	9b04      	ldr	r3, [sp, #16]
 8012306:	429e      	cmp	r6, r3
 8012308:	dc01      	bgt.n	801230e <__kernel_rem_pio2+0x4b6>
 801230a:	45b0      	cmp	r8, r6
 801230c:	daeb      	bge.n	80122e6 <__kernel_rem_pio2+0x48e>
 801230e:	ab48      	add	r3, sp, #288	; 0x120
 8012310:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012314:	e9c3 4500 	strd	r4, r5, [r3]
 8012318:	3f01      	subs	r7, #1
 801231a:	f108 0801 	add.w	r8, r8, #1
 801231e:	e6ff      	b.n	8012120 <__kernel_rem_pio2+0x2c8>
 8012320:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012322:	2b02      	cmp	r3, #2
 8012324:	dc0b      	bgt.n	801233e <__kernel_rem_pio2+0x4e6>
 8012326:	2b00      	cmp	r3, #0
 8012328:	dc6e      	bgt.n	8012408 <__kernel_rem_pio2+0x5b0>
 801232a:	d045      	beq.n	80123b8 <__kernel_rem_pio2+0x560>
 801232c:	9b07      	ldr	r3, [sp, #28]
 801232e:	f003 0007 	and.w	r0, r3, #7
 8012332:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8012336:	ecbd 8b02 	vpop	{d8}
 801233a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801233e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012340:	2b03      	cmp	r3, #3
 8012342:	d1f3      	bne.n	801232c <__kernel_rem_pio2+0x4d4>
 8012344:	ab48      	add	r3, sp, #288	; 0x120
 8012346:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801234a:	46d0      	mov	r8, sl
 801234c:	46d9      	mov	r9, fp
 801234e:	f1b9 0f00 	cmp.w	r9, #0
 8012352:	f1a8 0808 	sub.w	r8, r8, #8
 8012356:	dc64      	bgt.n	8012422 <__kernel_rem_pio2+0x5ca>
 8012358:	465c      	mov	r4, fp
 801235a:	2c01      	cmp	r4, #1
 801235c:	f1aa 0a08 	sub.w	sl, sl, #8
 8012360:	dc7e      	bgt.n	8012460 <__kernel_rem_pio2+0x608>
 8012362:	2000      	movs	r0, #0
 8012364:	2100      	movs	r1, #0
 8012366:	f1bb 0f01 	cmp.w	fp, #1
 801236a:	f300 8097 	bgt.w	801249c <__kernel_rem_pio2+0x644>
 801236e:	9b02      	ldr	r3, [sp, #8]
 8012370:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8012374:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012378:	2b00      	cmp	r3, #0
 801237a:	f040 8099 	bne.w	80124b0 <__kernel_rem_pio2+0x658>
 801237e:	9b01      	ldr	r3, [sp, #4]
 8012380:	e9c3 5600 	strd	r5, r6, [r3]
 8012384:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012388:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801238c:	e7ce      	b.n	801232c <__kernel_rem_pio2+0x4d4>
 801238e:	ab48      	add	r3, sp, #288	; 0x120
 8012390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012398:	f7ed ff80 	bl	800029c <__adddf3>
 801239c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123a0:	f1bb 0f00 	cmp.w	fp, #0
 80123a4:	daf3      	bge.n	801238e <__kernel_rem_pio2+0x536>
 80123a6:	9b02      	ldr	r3, [sp, #8]
 80123a8:	b113      	cbz	r3, 80123b0 <__kernel_rem_pio2+0x558>
 80123aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123ae:	4619      	mov	r1, r3
 80123b0:	9b01      	ldr	r3, [sp, #4]
 80123b2:	e9c3 0100 	strd	r0, r1, [r3]
 80123b6:	e7b9      	b.n	801232c <__kernel_rem_pio2+0x4d4>
 80123b8:	2000      	movs	r0, #0
 80123ba:	2100      	movs	r1, #0
 80123bc:	e7f0      	b.n	80123a0 <__kernel_rem_pio2+0x548>
 80123be:	ab48      	add	r3, sp, #288	; 0x120
 80123c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	f7ed ff68 	bl	800029c <__adddf3>
 80123cc:	3c01      	subs	r4, #1
 80123ce:	2c00      	cmp	r4, #0
 80123d0:	daf5      	bge.n	80123be <__kernel_rem_pio2+0x566>
 80123d2:	9b02      	ldr	r3, [sp, #8]
 80123d4:	b1e3      	cbz	r3, 8012410 <__kernel_rem_pio2+0x5b8>
 80123d6:	4602      	mov	r2, r0
 80123d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123dc:	9c01      	ldr	r4, [sp, #4]
 80123de:	e9c4 2300 	strd	r2, r3, [r4]
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80123ea:	f7ed ff55 	bl	8000298 <__aeabi_dsub>
 80123ee:	ad4a      	add	r5, sp, #296	; 0x128
 80123f0:	2401      	movs	r4, #1
 80123f2:	45a3      	cmp	fp, r4
 80123f4:	da0f      	bge.n	8012416 <__kernel_rem_pio2+0x5be>
 80123f6:	9b02      	ldr	r3, [sp, #8]
 80123f8:	b113      	cbz	r3, 8012400 <__kernel_rem_pio2+0x5a8>
 80123fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123fe:	4619      	mov	r1, r3
 8012400:	9b01      	ldr	r3, [sp, #4]
 8012402:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012406:	e791      	b.n	801232c <__kernel_rem_pio2+0x4d4>
 8012408:	465c      	mov	r4, fp
 801240a:	2000      	movs	r0, #0
 801240c:	2100      	movs	r1, #0
 801240e:	e7de      	b.n	80123ce <__kernel_rem_pio2+0x576>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	e7e2      	b.n	80123dc <__kernel_rem_pio2+0x584>
 8012416:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801241a:	f7ed ff3f 	bl	800029c <__adddf3>
 801241e:	3401      	adds	r4, #1
 8012420:	e7e7      	b.n	80123f2 <__kernel_rem_pio2+0x59a>
 8012422:	e9d8 4500 	ldrd	r4, r5, [r8]
 8012426:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801242a:	4620      	mov	r0, r4
 801242c:	4632      	mov	r2, r6
 801242e:	463b      	mov	r3, r7
 8012430:	4629      	mov	r1, r5
 8012432:	f7ed ff33 	bl	800029c <__adddf3>
 8012436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801243a:	4602      	mov	r2, r0
 801243c:	460b      	mov	r3, r1
 801243e:	4620      	mov	r0, r4
 8012440:	4629      	mov	r1, r5
 8012442:	f7ed ff29 	bl	8000298 <__aeabi_dsub>
 8012446:	4632      	mov	r2, r6
 8012448:	463b      	mov	r3, r7
 801244a:	f7ed ff27 	bl	800029c <__adddf3>
 801244e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012452:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8012456:	ed88 7b00 	vstr	d7, [r8]
 801245a:	f109 39ff 	add.w	r9, r9, #4294967295
 801245e:	e776      	b.n	801234e <__kernel_rem_pio2+0x4f6>
 8012460:	e9da 8900 	ldrd	r8, r9, [sl]
 8012464:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012468:	4640      	mov	r0, r8
 801246a:	4632      	mov	r2, r6
 801246c:	463b      	mov	r3, r7
 801246e:	4649      	mov	r1, r9
 8012470:	f7ed ff14 	bl	800029c <__adddf3>
 8012474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012478:	4602      	mov	r2, r0
 801247a:	460b      	mov	r3, r1
 801247c:	4640      	mov	r0, r8
 801247e:	4649      	mov	r1, r9
 8012480:	f7ed ff0a 	bl	8000298 <__aeabi_dsub>
 8012484:	4632      	mov	r2, r6
 8012486:	463b      	mov	r3, r7
 8012488:	f7ed ff08 	bl	800029c <__adddf3>
 801248c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012490:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012494:	ed8a 7b00 	vstr	d7, [sl]
 8012498:	3c01      	subs	r4, #1
 801249a:	e75e      	b.n	801235a <__kernel_rem_pio2+0x502>
 801249c:	ab48      	add	r3, sp, #288	; 0x120
 801249e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80124a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a6:	f7ed fef9 	bl	800029c <__adddf3>
 80124aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80124ae:	e75a      	b.n	8012366 <__kernel_rem_pio2+0x50e>
 80124b0:	9b01      	ldr	r3, [sp, #4]
 80124b2:	9a01      	ldr	r2, [sp, #4]
 80124b4:	601d      	str	r5, [r3, #0]
 80124b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80124ba:	605c      	str	r4, [r3, #4]
 80124bc:	609f      	str	r7, [r3, #8]
 80124be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80124c2:	60d3      	str	r3, [r2, #12]
 80124c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124c8:	6110      	str	r0, [r2, #16]
 80124ca:	6153      	str	r3, [r2, #20]
 80124cc:	e72e      	b.n	801232c <__kernel_rem_pio2+0x4d4>
 80124ce:	bf00      	nop
 80124d0:	41700000 	.word	0x41700000
 80124d4:	3e700000 	.word	0x3e700000

080124d8 <__kernel_sin>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	ed2d 8b04 	vpush	{d8-d9}
 80124e0:	eeb0 8a41 	vmov.f32	s16, s2
 80124e4:	eef0 8a61 	vmov.f32	s17, s3
 80124e8:	ec55 4b10 	vmov	r4, r5, d0
 80124ec:	b083      	sub	sp, #12
 80124ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80124f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80124f6:	9001      	str	r0, [sp, #4]
 80124f8:	da06      	bge.n	8012508 <__kernel_sin+0x30>
 80124fa:	ee10 0a10 	vmov	r0, s0
 80124fe:	4629      	mov	r1, r5
 8012500:	f7ee fb32 	bl	8000b68 <__aeabi_d2iz>
 8012504:	2800      	cmp	r0, #0
 8012506:	d051      	beq.n	80125ac <__kernel_sin+0xd4>
 8012508:	4622      	mov	r2, r4
 801250a:	462b      	mov	r3, r5
 801250c:	4620      	mov	r0, r4
 801250e:	4629      	mov	r1, r5
 8012510:	f7ee f87a 	bl	8000608 <__aeabi_dmul>
 8012514:	4682      	mov	sl, r0
 8012516:	468b      	mov	fp, r1
 8012518:	4602      	mov	r2, r0
 801251a:	460b      	mov	r3, r1
 801251c:	4620      	mov	r0, r4
 801251e:	4629      	mov	r1, r5
 8012520:	f7ee f872 	bl	8000608 <__aeabi_dmul>
 8012524:	a341      	add	r3, pc, #260	; (adr r3, 801262c <__kernel_sin+0x154>)
 8012526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252a:	4680      	mov	r8, r0
 801252c:	4689      	mov	r9, r1
 801252e:	4650      	mov	r0, sl
 8012530:	4659      	mov	r1, fp
 8012532:	f7ee f869 	bl	8000608 <__aeabi_dmul>
 8012536:	a33f      	add	r3, pc, #252	; (adr r3, 8012634 <__kernel_sin+0x15c>)
 8012538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253c:	f7ed feac 	bl	8000298 <__aeabi_dsub>
 8012540:	4652      	mov	r2, sl
 8012542:	465b      	mov	r3, fp
 8012544:	f7ee f860 	bl	8000608 <__aeabi_dmul>
 8012548:	a33c      	add	r3, pc, #240	; (adr r3, 801263c <__kernel_sin+0x164>)
 801254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254e:	f7ed fea5 	bl	800029c <__adddf3>
 8012552:	4652      	mov	r2, sl
 8012554:	465b      	mov	r3, fp
 8012556:	f7ee f857 	bl	8000608 <__aeabi_dmul>
 801255a:	a33a      	add	r3, pc, #232	; (adr r3, 8012644 <__kernel_sin+0x16c>)
 801255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012560:	f7ed fe9a 	bl	8000298 <__aeabi_dsub>
 8012564:	4652      	mov	r2, sl
 8012566:	465b      	mov	r3, fp
 8012568:	f7ee f84e 	bl	8000608 <__aeabi_dmul>
 801256c:	a337      	add	r3, pc, #220	; (adr r3, 801264c <__kernel_sin+0x174>)
 801256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012572:	f7ed fe93 	bl	800029c <__adddf3>
 8012576:	9b01      	ldr	r3, [sp, #4]
 8012578:	4606      	mov	r6, r0
 801257a:	460f      	mov	r7, r1
 801257c:	b9eb      	cbnz	r3, 80125ba <__kernel_sin+0xe2>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	4650      	mov	r0, sl
 8012584:	4659      	mov	r1, fp
 8012586:	f7ee f83f 	bl	8000608 <__aeabi_dmul>
 801258a:	a325      	add	r3, pc, #148	; (adr r3, 8012620 <__kernel_sin+0x148>)
 801258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012590:	f7ed fe82 	bl	8000298 <__aeabi_dsub>
 8012594:	4642      	mov	r2, r8
 8012596:	464b      	mov	r3, r9
 8012598:	f7ee f836 	bl	8000608 <__aeabi_dmul>
 801259c:	4602      	mov	r2, r0
 801259e:	460b      	mov	r3, r1
 80125a0:	4620      	mov	r0, r4
 80125a2:	4629      	mov	r1, r5
 80125a4:	f7ed fe7a 	bl	800029c <__adddf3>
 80125a8:	4604      	mov	r4, r0
 80125aa:	460d      	mov	r5, r1
 80125ac:	ec45 4b10 	vmov	d0, r4, r5
 80125b0:	b003      	add	sp, #12
 80125b2:	ecbd 8b04 	vpop	{d8-d9}
 80125b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ba:	4b1b      	ldr	r3, [pc, #108]	; (8012628 <__kernel_sin+0x150>)
 80125bc:	ec51 0b18 	vmov	r0, r1, d8
 80125c0:	2200      	movs	r2, #0
 80125c2:	f7ee f821 	bl	8000608 <__aeabi_dmul>
 80125c6:	4632      	mov	r2, r6
 80125c8:	ec41 0b19 	vmov	d9, r0, r1
 80125cc:	463b      	mov	r3, r7
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ee f819 	bl	8000608 <__aeabi_dmul>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	ec51 0b19 	vmov	r0, r1, d9
 80125de:	f7ed fe5b 	bl	8000298 <__aeabi_dsub>
 80125e2:	4652      	mov	r2, sl
 80125e4:	465b      	mov	r3, fp
 80125e6:	f7ee f80f 	bl	8000608 <__aeabi_dmul>
 80125ea:	ec53 2b18 	vmov	r2, r3, d8
 80125ee:	f7ed fe53 	bl	8000298 <__aeabi_dsub>
 80125f2:	a30b      	add	r3, pc, #44	; (adr r3, 8012620 <__kernel_sin+0x148>)
 80125f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f8:	4606      	mov	r6, r0
 80125fa:	460f      	mov	r7, r1
 80125fc:	4640      	mov	r0, r8
 80125fe:	4649      	mov	r1, r9
 8012600:	f7ee f802 	bl	8000608 <__aeabi_dmul>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	4630      	mov	r0, r6
 801260a:	4639      	mov	r1, r7
 801260c:	f7ed fe46 	bl	800029c <__adddf3>
 8012610:	4602      	mov	r2, r0
 8012612:	460b      	mov	r3, r1
 8012614:	4620      	mov	r0, r4
 8012616:	4629      	mov	r1, r5
 8012618:	f7ed fe3e 	bl	8000298 <__aeabi_dsub>
 801261c:	e7c4      	b.n	80125a8 <__kernel_sin+0xd0>
 801261e:	bf00      	nop
 8012620:	55555549 	.word	0x55555549
 8012624:	3fc55555 	.word	0x3fc55555
 8012628:	3fe00000 	.word	0x3fe00000
 801262c:	5acfd57c 	.word	0x5acfd57c
 8012630:	3de5d93a 	.word	0x3de5d93a
 8012634:	8a2b9ceb 	.word	0x8a2b9ceb
 8012638:	3e5ae5e6 	.word	0x3e5ae5e6
 801263c:	57b1fe7d 	.word	0x57b1fe7d
 8012640:	3ec71de3 	.word	0x3ec71de3
 8012644:	19c161d5 	.word	0x19c161d5
 8012648:	3f2a01a0 	.word	0x3f2a01a0
 801264c:	1110f8a6 	.word	0x1110f8a6
 8012650:	3f811111 	.word	0x3f811111

08012654 <fabs>:
 8012654:	ec51 0b10 	vmov	r0, r1, d0
 8012658:	ee10 2a10 	vmov	r2, s0
 801265c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012660:	ec43 2b10 	vmov	d0, r2, r3
 8012664:	4770      	bx	lr

08012666 <finite>:
 8012666:	b082      	sub	sp, #8
 8012668:	ed8d 0b00 	vstr	d0, [sp]
 801266c:	9801      	ldr	r0, [sp, #4]
 801266e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012672:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012676:	0fc0      	lsrs	r0, r0, #31
 8012678:	b002      	add	sp, #8
 801267a:	4770      	bx	lr
 801267c:	0000      	movs	r0, r0
	...

08012680 <floor>:
 8012680:	ec51 0b10 	vmov	r0, r1, d0
 8012684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012688:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801268c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012690:	2e13      	cmp	r6, #19
 8012692:	ee10 5a10 	vmov	r5, s0
 8012696:	ee10 8a10 	vmov	r8, s0
 801269a:	460c      	mov	r4, r1
 801269c:	dc32      	bgt.n	8012704 <floor+0x84>
 801269e:	2e00      	cmp	r6, #0
 80126a0:	da14      	bge.n	80126cc <floor+0x4c>
 80126a2:	a333      	add	r3, pc, #204	; (adr r3, 8012770 <floor+0xf0>)
 80126a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a8:	f7ed fdf8 	bl	800029c <__adddf3>
 80126ac:	2200      	movs	r2, #0
 80126ae:	2300      	movs	r3, #0
 80126b0:	f7ee fa3a 	bl	8000b28 <__aeabi_dcmpgt>
 80126b4:	b138      	cbz	r0, 80126c6 <floor+0x46>
 80126b6:	2c00      	cmp	r4, #0
 80126b8:	da57      	bge.n	801276a <floor+0xea>
 80126ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80126be:	431d      	orrs	r5, r3
 80126c0:	d001      	beq.n	80126c6 <floor+0x46>
 80126c2:	4c2d      	ldr	r4, [pc, #180]	; (8012778 <floor+0xf8>)
 80126c4:	2500      	movs	r5, #0
 80126c6:	4621      	mov	r1, r4
 80126c8:	4628      	mov	r0, r5
 80126ca:	e025      	b.n	8012718 <floor+0x98>
 80126cc:	4f2b      	ldr	r7, [pc, #172]	; (801277c <floor+0xfc>)
 80126ce:	4137      	asrs	r7, r6
 80126d0:	ea01 0307 	and.w	r3, r1, r7
 80126d4:	4303      	orrs	r3, r0
 80126d6:	d01f      	beq.n	8012718 <floor+0x98>
 80126d8:	a325      	add	r3, pc, #148	; (adr r3, 8012770 <floor+0xf0>)
 80126da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126de:	f7ed fddd 	bl	800029c <__adddf3>
 80126e2:	2200      	movs	r2, #0
 80126e4:	2300      	movs	r3, #0
 80126e6:	f7ee fa1f 	bl	8000b28 <__aeabi_dcmpgt>
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d0eb      	beq.n	80126c6 <floor+0x46>
 80126ee:	2c00      	cmp	r4, #0
 80126f0:	bfbe      	ittt	lt
 80126f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80126f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80126fa:	19a4      	addlt	r4, r4, r6
 80126fc:	ea24 0407 	bic.w	r4, r4, r7
 8012700:	2500      	movs	r5, #0
 8012702:	e7e0      	b.n	80126c6 <floor+0x46>
 8012704:	2e33      	cmp	r6, #51	; 0x33
 8012706:	dd0b      	ble.n	8012720 <floor+0xa0>
 8012708:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801270c:	d104      	bne.n	8012718 <floor+0x98>
 801270e:	ee10 2a10 	vmov	r2, s0
 8012712:	460b      	mov	r3, r1
 8012714:	f7ed fdc2 	bl	800029c <__adddf3>
 8012718:	ec41 0b10 	vmov	d0, r0, r1
 801271c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012720:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012724:	f04f 33ff 	mov.w	r3, #4294967295
 8012728:	fa23 f707 	lsr.w	r7, r3, r7
 801272c:	4207      	tst	r7, r0
 801272e:	d0f3      	beq.n	8012718 <floor+0x98>
 8012730:	a30f      	add	r3, pc, #60	; (adr r3, 8012770 <floor+0xf0>)
 8012732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012736:	f7ed fdb1 	bl	800029c <__adddf3>
 801273a:	2200      	movs	r2, #0
 801273c:	2300      	movs	r3, #0
 801273e:	f7ee f9f3 	bl	8000b28 <__aeabi_dcmpgt>
 8012742:	2800      	cmp	r0, #0
 8012744:	d0bf      	beq.n	80126c6 <floor+0x46>
 8012746:	2c00      	cmp	r4, #0
 8012748:	da02      	bge.n	8012750 <floor+0xd0>
 801274a:	2e14      	cmp	r6, #20
 801274c:	d103      	bne.n	8012756 <floor+0xd6>
 801274e:	3401      	adds	r4, #1
 8012750:	ea25 0507 	bic.w	r5, r5, r7
 8012754:	e7b7      	b.n	80126c6 <floor+0x46>
 8012756:	2301      	movs	r3, #1
 8012758:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801275c:	fa03 f606 	lsl.w	r6, r3, r6
 8012760:	4435      	add	r5, r6
 8012762:	4545      	cmp	r5, r8
 8012764:	bf38      	it	cc
 8012766:	18e4      	addcc	r4, r4, r3
 8012768:	e7f2      	b.n	8012750 <floor+0xd0>
 801276a:	2500      	movs	r5, #0
 801276c:	462c      	mov	r4, r5
 801276e:	e7aa      	b.n	80126c6 <floor+0x46>
 8012770:	8800759c 	.word	0x8800759c
 8012774:	7e37e43c 	.word	0x7e37e43c
 8012778:	bff00000 	.word	0xbff00000
 801277c:	000fffff 	.word	0x000fffff

08012780 <scalbn>:
 8012780:	b570      	push	{r4, r5, r6, lr}
 8012782:	ec55 4b10 	vmov	r4, r5, d0
 8012786:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801278a:	4606      	mov	r6, r0
 801278c:	462b      	mov	r3, r5
 801278e:	b99a      	cbnz	r2, 80127b8 <scalbn+0x38>
 8012790:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012794:	4323      	orrs	r3, r4
 8012796:	d036      	beq.n	8012806 <scalbn+0x86>
 8012798:	4b39      	ldr	r3, [pc, #228]	; (8012880 <scalbn+0x100>)
 801279a:	4629      	mov	r1, r5
 801279c:	ee10 0a10 	vmov	r0, s0
 80127a0:	2200      	movs	r2, #0
 80127a2:	f7ed ff31 	bl	8000608 <__aeabi_dmul>
 80127a6:	4b37      	ldr	r3, [pc, #220]	; (8012884 <scalbn+0x104>)
 80127a8:	429e      	cmp	r6, r3
 80127aa:	4604      	mov	r4, r0
 80127ac:	460d      	mov	r5, r1
 80127ae:	da10      	bge.n	80127d2 <scalbn+0x52>
 80127b0:	a32b      	add	r3, pc, #172	; (adr r3, 8012860 <scalbn+0xe0>)
 80127b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b6:	e03a      	b.n	801282e <scalbn+0xae>
 80127b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80127bc:	428a      	cmp	r2, r1
 80127be:	d10c      	bne.n	80127da <scalbn+0x5a>
 80127c0:	ee10 2a10 	vmov	r2, s0
 80127c4:	4620      	mov	r0, r4
 80127c6:	4629      	mov	r1, r5
 80127c8:	f7ed fd68 	bl	800029c <__adddf3>
 80127cc:	4604      	mov	r4, r0
 80127ce:	460d      	mov	r5, r1
 80127d0:	e019      	b.n	8012806 <scalbn+0x86>
 80127d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80127d6:	460b      	mov	r3, r1
 80127d8:	3a36      	subs	r2, #54	; 0x36
 80127da:	4432      	add	r2, r6
 80127dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80127e0:	428a      	cmp	r2, r1
 80127e2:	dd08      	ble.n	80127f6 <scalbn+0x76>
 80127e4:	2d00      	cmp	r5, #0
 80127e6:	a120      	add	r1, pc, #128	; (adr r1, 8012868 <scalbn+0xe8>)
 80127e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127ec:	da1c      	bge.n	8012828 <scalbn+0xa8>
 80127ee:	a120      	add	r1, pc, #128	; (adr r1, 8012870 <scalbn+0xf0>)
 80127f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127f4:	e018      	b.n	8012828 <scalbn+0xa8>
 80127f6:	2a00      	cmp	r2, #0
 80127f8:	dd08      	ble.n	801280c <scalbn+0x8c>
 80127fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012802:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012806:	ec45 4b10 	vmov	d0, r4, r5
 801280a:	bd70      	pop	{r4, r5, r6, pc}
 801280c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012810:	da19      	bge.n	8012846 <scalbn+0xc6>
 8012812:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012816:	429e      	cmp	r6, r3
 8012818:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801281c:	dd0a      	ble.n	8012834 <scalbn+0xb4>
 801281e:	a112      	add	r1, pc, #72	; (adr r1, 8012868 <scalbn+0xe8>)
 8012820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d1e2      	bne.n	80127ee <scalbn+0x6e>
 8012828:	a30f      	add	r3, pc, #60	; (adr r3, 8012868 <scalbn+0xe8>)
 801282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282e:	f7ed feeb 	bl	8000608 <__aeabi_dmul>
 8012832:	e7cb      	b.n	80127cc <scalbn+0x4c>
 8012834:	a10a      	add	r1, pc, #40	; (adr r1, 8012860 <scalbn+0xe0>)
 8012836:	e9d1 0100 	ldrd	r0, r1, [r1]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d0b8      	beq.n	80127b0 <scalbn+0x30>
 801283e:	a10e      	add	r1, pc, #56	; (adr r1, 8012878 <scalbn+0xf8>)
 8012840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012844:	e7b4      	b.n	80127b0 <scalbn+0x30>
 8012846:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801284a:	3236      	adds	r2, #54	; 0x36
 801284c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012850:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012854:	4620      	mov	r0, r4
 8012856:	4b0c      	ldr	r3, [pc, #48]	; (8012888 <scalbn+0x108>)
 8012858:	2200      	movs	r2, #0
 801285a:	e7e8      	b.n	801282e <scalbn+0xae>
 801285c:	f3af 8000 	nop.w
 8012860:	c2f8f359 	.word	0xc2f8f359
 8012864:	01a56e1f 	.word	0x01a56e1f
 8012868:	8800759c 	.word	0x8800759c
 801286c:	7e37e43c 	.word	0x7e37e43c
 8012870:	8800759c 	.word	0x8800759c
 8012874:	fe37e43c 	.word	0xfe37e43c
 8012878:	c2f8f359 	.word	0xc2f8f359
 801287c:	81a56e1f 	.word	0x81a56e1f
 8012880:	43500000 	.word	0x43500000
 8012884:	ffff3cb0 	.word	0xffff3cb0
 8012888:	3c900000 	.word	0x3c900000

0801288c <_init>:
 801288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801288e:	bf00      	nop
 8012890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012892:	bc08      	pop	{r3}
 8012894:	469e      	mov	lr, r3
 8012896:	4770      	bx	lr

08012898 <_fini>:
 8012898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801289a:	bf00      	nop
 801289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801289e:	bc08      	pop	{r3}
 80128a0:	469e      	mov	lr, r3
 80128a2:	4770      	bx	lr
